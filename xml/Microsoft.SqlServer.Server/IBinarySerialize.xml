<Type Name="IBinarySerialize" FullName="Microsoft.SqlServer.Server.IBinarySerialize">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cc0de35fff36a636e335a171d1b43b734cc9184b" /><Meta Name="ms.sourcegitcommit" Value="d40b35262cbc997b79bf76da3a39ccf59b738efc" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/05/2018" /><Meta Name="ms.locfileid" Value="52907881" /></Metadata><TypeSignature Language="C#" Value="public interface IBinarySerialize" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IBinarySerialize" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.IBinarySerialize" />
  <TypeSignature Language="VB.NET" Value="Public Interface IBinarySerialize" />
  <TypeSignature Language="C++ CLI" Value="public interface class IBinarySerialize" />
  <TypeSignature Language="F#" Value="type IBinarySerialize = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="02423-101">Предоставляет настраиваемую реализацию для определяемого пользователем типа (UDT) и определяемые пользователем статистические сериализации и десериализации.</span><span class="sxs-lookup"><span data-stu-id="02423-101">Provides custom implementation for user-defined type (UDT) and user-defined aggregate serialization and deserialization.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02423-102">Определяемые пользователем типы (UDT) и определяемые пользователем статистические функции являются обязательными для определения формата хранения, который может представлять собой <xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="02423-102">User-defined types (UDTs) and user-defined aggregates are required to define a storage format, which can be either <xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="02423-103">или <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span><span class="sxs-lookup"><span data-stu-id="02423-103">or <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`.</span></span>  
  
 <span data-ttu-id="02423-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span><span class="sxs-lookup"><span data-stu-id="02423-104"><xref:Microsoft.SqlServer.Server.Format>.`Native`</span></span> <span data-ttu-id="02423-105">позволяет SQL Server сериализацию и десериализацию автоматически, но формат имеет ограничений на тип из типов, которые он может обрабатывать.</span><span class="sxs-lookup"><span data-stu-id="02423-105">allows SQL Server to handle serialization and deserialization automatically, but the format has restrictions on the kind of types it can handle.</span></span> <span data-ttu-id="02423-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="02423-106"><xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="02423-107">дает возможность определяемые пользователем типы и обрабатывают собственную сериализацию.</span><span class="sxs-lookup"><span data-stu-id="02423-107">allows user-defined types and aggregates to handle their own serialization.</span></span> <span data-ttu-id="02423-108">Определяемые пользователем типы и статистические выражения должны быть отмечены <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span><span class="sxs-lookup"><span data-stu-id="02423-108">User-defined types and aggregates must be marked with <xref:Microsoft.SqlServer.Server.Format>.`UserDefined`</span></span> <span data-ttu-id="02423-109">в `SqlUserDefinedType` или `SqlUserDefinedAggregate` атрибут и должен реализовывать <xref:Microsoft.SqlServer.Server.IBinarySerialize> интерфейс.</span><span class="sxs-lookup"><span data-stu-id="02423-109">in the `SqlUserDefinedType` or `SqlUserDefinedAggregate` attribute, and must implement the <xref:Microsoft.SqlServer.Server.IBinarySerialize> interface.</span></span>  
  
 <span data-ttu-id="02423-110">Обратите внимание на то, что даже с помощью пользовательской сериализации, общий размер каждого экземпляра должен быть в максимально допустимое ограничение, в настоящее время 8 000 байт.</span><span class="sxs-lookup"><span data-stu-id="02423-110">Note that even with custom serialization, the total size of each instance must be under the maximum allowed limit, currently 8000 bytes.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (System.IO.BinaryReader r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Read(class System.IO.BinaryReader r) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Read(System.IO.BinaryReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Read (r As BinaryReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Read(System::IO::BinaryReader ^ r);" />
      <MemberSignature Language="F#" Value="abstract member Read : System.IO.BinaryReader -&gt; unit" Usage="iBinarySerialize.Read r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.IO.BinaryReader" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="02423-111">Поток <see cref="T:System.IO.BinaryReader" />, из которого выполняется десериализация объекта.</span><span class="sxs-lookup"><span data-stu-id="02423-111">The <see cref="T:System.IO.BinaryReader" /> stream from which the object is deserialized.</span></span></param>
        <summary><span data-ttu-id="02423-112">Генерирует определяемого пользователем типа (UDT) или определяемую пользователем агрегатную функцию из соответствующей двоичной формы.</span><span class="sxs-lookup"><span data-stu-id="02423-112">Generates a user-defined type (UDT) or user-defined aggregate from its binary form.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02423-113"><xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> Метод должен воссоздания объекта по данным, записанным <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="02423-113">The <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method must reconstitute your object using the information written by the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02423-114">В следующем примере показана реализация <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> метод определяемого пользователем типа, который использует <xref:System.IO.BinaryReader> выполнить десериализацию ранее сохраненный определяемого пользователем ТИПА.</span><span class="sxs-lookup"><span data-stu-id="02423-114">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method of a UDT, which uses a <xref:System.IO.BinaryReader> to de-serialize a previously persisted UDT.</span></span> <span data-ttu-id="02423-115">В этом примере предполагается, что определяемый пользователем тип имеет два свойства данных: `StringValue` и `DoubleValue`.</span><span class="sxs-lookup"><span data-stu-id="02423-115">This example assumes that the UDT has two data properties: `StringValue` and `DoubleValue`.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#1)]
 [!code-vb[DataWorks IBinarySerialize Samples#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (System.IO.BinaryWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Write(class System.IO.BinaryWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.IBinarySerialize.Write(System.IO.BinaryWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (w As BinaryWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::IO::BinaryWriter ^ w);" />
      <MemberSignature Language="F#" Value="abstract member Write : System.IO.BinaryWriter -&gt; unit" Usage="iBinarySerialize.Write w" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="w" Type="System.IO.BinaryWriter" />
      </Parameters>
      <Docs>
        <param name="w"><span data-ttu-id="02423-116"><see cref="T:System.IO.BinaryWriter" /> Поток, в который выполняется сериализация пользовательского ТИПА или пользовательской агрегатной функции.</span><span class="sxs-lookup"><span data-stu-id="02423-116">The <see cref="T:System.IO.BinaryWriter" /> stream to which the UDT or user-defined aggregate is serialized.</span></span></param>
        <summary><span data-ttu-id="02423-117">Преобразует определяемого пользователем типа (UDT) или определяемую пользователем агрегатную функцию в двоичный формат для возможности сохранения.</span><span class="sxs-lookup"><span data-stu-id="02423-117">Converts a user-defined type (UDT) or user-defined aggregate into its binary format so that it may be persisted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="02423-118">Записи достаточно сведений в двоичный поток, чтобы разрешить <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> метод для воссоздания определяемого пользователем ТИПА или пользовательской агрегатной функции.</span><span class="sxs-lookup"><span data-stu-id="02423-118">Write sufficient information to the binary stream to allow the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Read%2A> method to reconstitute your UDT or user-defined aggregate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="02423-119">В следующем примере показана реализация <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> метод определяемого пользователем типа, который использует <xref:System.IO.BinaryWriter> для сериализации определяемого пользователем ТИПА в двоичном формате, определяемые пользователем.</span><span class="sxs-lookup"><span data-stu-id="02423-119">The following example shows the implementation of the <xref:Microsoft.SqlServer.Server.IBinarySerialize.Write%2A> method of a UDT, which uses a <xref:System.IO.BinaryWriter> to serialize the UDT in the user-defined binary format.</span></span> <span data-ttu-id="02423-120">Заполнение символами null предназначена для проверки, что строковое значение полностью отделены от значение типа double, что по сравнению с одного определяемого пользователем ТИПА в другой в коде Transact-SQL, число байтов в строке, сравниваются с число байтов в строке и двух байтах сравниваются с double байты.</span><span class="sxs-lookup"><span data-stu-id="02423-120">The purpose of the null character padding is to ensure that the string value is completely separated from the double value, so that one UDT is compared to another in Transact-SQL code, string bytes are compared to string bytes and double bytes are compared to double bytes.</span></span>  
  
 [!code-csharp[DataWorks IBinarySerialize Samples#2](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/CS/source.cs#2)]
 [!code-vb[DataWorks IBinarySerialize Samples#2](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks IBinarySerialize Samples/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>