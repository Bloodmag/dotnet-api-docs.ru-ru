<Type Name="SqlPipe" FullName="Microsoft.SqlServer.Server.SqlPipe">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c591e65fa92805a7a1e5c96fa03d5a45d1f410bb" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30339758" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlPipe" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlPipe extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.SqlServer.Server.SqlPipe" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlPipe" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlPipe sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Разрешает управляемым хранимым процедурам, выполняемым внутри процесса в базе данных SQL Server, возвращать результаты в вызывающую программу. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр данного класса становятся доступными для управляемых хранимых процедур через <xref:Microsoft.SqlServer.Server.SqlContext.Pipe%2A> свойство <xref:Microsoft.SqlServer.Server.SqlContext> класса.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlCommand> для выборки строк из источника данных в хранимой процедуре. Затем в примере используется <xref:Microsoft.SqlServer.Server.SqlPipe> для выполнения команды и отправку результатов обратно клиенту.  
  
 [!code-csharp[DataWorks SqlPipe#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExecuteAndSend">
      <MemberSignature Language="C#" Value="public void ExecuteAndSend (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecuteAndSend(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.ExecuteAndSend(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecuteAndSend (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecuteAndSend(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется выполнить.</param>
        <summary>Выполняет команду, переданную в качестве параметра, и отправляет результаты клиенту.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Помимо самих результатов другие сообщения и ошибки также передаются непосредственно клиенту.  
  
 Выходные параметры и возвращаемые значения не отправляются клиенту; они доступны через коллекцию параметров объекта команды вызывающей программе.  
  
 Если команда не привязан к подключению в процессе, <xref:System.InvalidOperationException> возникает исключение. Данный метод не поддерживается для команд, привязанных к подключениям вне процессов.  
  
 При наличии ошибок в <xref:System.Data.SqlClient.SqlCommand> объект, который был отправлен, исключения передаются в канал, но копия пересылается также вызывающему управляемому коду. Если вызывающий код не перехватывает исключения, оно распространяется вверх по стеку в код Transact-SQL и появляются дважды в выходных данных. Если вызывающий код перехватывает исключение, потребитель канала по-прежнему будут видеть ошибки, но не будет ошибки с повторяющимися значениями.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlCommand> для выборки строк из источника данных в хранимой процедуре. Затем в примере используется <xref:Microsoft.SqlServer.Server.SqlPipe> для выполнения команды и отправку результатов обратно клиенту.  
  
 [!code-csharp[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.ExecuteAndSend#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.ExecuteAndSend/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="command" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Данный метод не поддерживается для команд, привязанных к подключениям вне процессов.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsSendingResults">
      <MemberSignature Language="C#" Value="public bool IsSendingResults { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSendingResults" />
      <MemberSignature Language="DocId" Value="P:Microsoft.SqlServer.Server.SqlPipe.IsSendingResults" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSendingResults As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSendingResults { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, показывающее, находится ли объект <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> в режиме отправки одиночных результирующих наборов клиенту. Это свойство доступно только для чтения.</summary>
        <value>
          <see langword="true" />, если вызван метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" /> и объект <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> находится в режиме отправки одиночных результирующих наборов клиенту; в противном случае — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Send">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отправляет результаты непосредственно клиенту или текущему получателю выходных данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 **Отправки** метод пересылает данные напрямую клиенту или вызывающему. Это обычно клиент использует выход из **канала** метода, но в случае вложенных CLR хранимые процедуры, потребителем выхода также может быть хранимая процедура. Например, Procedure1 вызывает <xref:System.Data.SqlClient.SqlCommand.ExecuteReader%2A> с текстом команды «EXEC Procedure2». Procedure2 — это также управляемая хранимая процедура. Если Procedure2 вызывает <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A>, чтения Procedure1, но не клиенту отправляется строка.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Однострочный результирующий набор, отправляемый клиенту: объект <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />.</param>
        <summary>Отправляет однострочный результирующий набор непосредственно клиенту или текущему получателю выходных данных.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="record" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (System.Data.SqlClient.SqlDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(class System.Data.SqlClient.SqlDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.Data.SqlClient.SqlDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (reader As SqlDataReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::Data::SqlClient::SqlDataReader ^ reader);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.SqlClient.SqlDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">Многострочный результирующий набор, отправляемый клиенту: объект <see cref="T:System.Data.SqlClient.SqlDataReader" />.</param>
        <summary>Отправляет многострочный результирующий набор непосредственно клиенту или текущему получателю выходных данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Data.SqlClient.SqlDataReader> переданный объект как параметр содержит скрытые столбцы, эти столбцы не будут распространены в результирующий набор, отправляемый клиенту.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="reader" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public void Send (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Send(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Send (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Send(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Строка сообщения, отправляемая клиенту.</param>
        <summary>Отправляет строковое сообщение непосредственно клиенту или текущему получателю выходных данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка сообщения отправляются в информационное сообщение клиенту. Клиентские приложения могут отслеживать сообщения различными средствами, в зависимости от данных access интерфейс программирования (API), они используют. Например, если клиент использует ADO.NET, сообщения передавать данные через <xref:System.Data.SqlClient.SqlConnection.InfoMessage> событий.  
  
   
  
## Examples  
 В следующем примере используется <xref:Microsoft.SqlServer.Server.SqlPipe.Send%2A> метод отправки строки сообщения непосредственно клиенту.  
  
 [!code-csharp[DataWorks SqlPipe.Send#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.Send#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.Send/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Длина сообщения <paramref name="message" /> превышает 4000 символов.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="message" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SendResultsEnd">
      <MemberSignature Language="C#" Value="public void SendResultsEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsEnd ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsEnd();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Помечает окончание результирующего набора и возвращает экземпляр <see cref="T:Microsoft.SqlServer.Server.SqlPipe" /> в начальное состояние.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Управляемые хранимые процедуры могут отправлять результирующие наборы для клиентов, не реализуемых <xref:System.Data.SqlClient.SqlDataReader>. Этот метод вместе с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, разрешить хранимым процедурам отправлять клиенту пользовательские результирующие наборы.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:Microsoft.SqlServer.Server.SqlDataRecord> и его <xref:Microsoft.SqlServer.Server.SqlMetaData>. В примере затем отмечает начало результирующего набора с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> метод, записей с данными пример отправляет обратно клиенту с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метод и метки в конце результирующего набора с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsEnd#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsEnd/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Перед этим не был вызван метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsRow">
      <MemberSignature Language="C#" Value="public void SendResultsRow (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsRow(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsRow (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsRow(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Объект <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />, содержащий значения столбцов для строки, отправляемой клиенту. Схема для записи должна соответствовать схеме, описанной метаданными объекта <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />, переданного в метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</param>
        <summary>Отправляет клиенту одну строку данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Управляемые хранимые процедуры могут отправлять результирующие наборы для клиентов, не реализуемых <xref:System.Data.SqlClient.SqlDataReader>. Этот метод вместе с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, позволяет хранимым процедурам отправлять клиенту пользовательские результирующие наборы.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> Метод одну строку данных отправляет обратно клиенту. Строки могут быть впоследствии возвращается вызывающему путем вызова <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A>, один раз для каждой строки, отправляемых. После всех строк передачи, вызов <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод является обязательным для обозначения конца результирующего набора.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:Microsoft.SqlServer.Server.SqlDataRecord> и его <xref:Microsoft.SqlServer.Server.SqlMetaData>. В примере затем отмечает начало результирующего набора с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> метод, записей с данными пример отправляет обратно клиенту с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метод и метки в конце результирующего набора с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsRow/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="record" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Перед этим не был вызван метод <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
    <Member MemberName="SendResultsStart">
      <MemberSignature Language="C#" Value="public void SendResultsStart (Microsoft.SqlServer.Server.SqlDataRecord record);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendResultsStart(class Microsoft.SqlServer.Server.SqlDataRecord record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendResultsStart (record As SqlDataRecord)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendResultsStart(Microsoft::SqlServer::Server::SqlDataRecord ^ record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="record" Type="Microsoft.SqlServer.Server.SqlDataRecord" />
      </Parameters>
      <Docs>
        <param name="record">Объект <see cref="T:Microsoft.SqlServer.Server.SqlDataRecord" />, из которого извлекаются метаданные, используемые для описания результирующего набора.</param>
        <summary>Помечает начало результирующего набора, отправляемого клиенту, и использует указанную запись для конструирования метаданных, описывающих результирующий набор.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Управляемые хранимые процедуры могут отправлять результирующие наборы для клиентов, не реализуемых <xref:System.Data.SqlClient.SqlDataReader>. Этот метод вместе с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A>, разрешить хранимым процедурам отправлять клиенту пользовательские результирующие наборы.  
  
 <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> Метод Отмечает начало результирующего набора и использует указанную запись для создания метаданных, описывающих результирующий набор. Все последующие строки, отправленные с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метода, должны соответствовать этому определению метаданных.  
  
 Обратите внимание, что после вызов <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A>только <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> и <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> может быть вызван. Любой другой метод в том же экземпляре <xref:Microsoft.SqlServer.Server.SqlPipe> вызывает <xref:System.InvalidOperationException>. <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> Задает <xref:Microsoft.SqlServer.Server.SqlPipe> исходное состояние, в котором можно вызывать другие методы.  
  
 После возврата управления в Transact-SQL, в результате выполнения среды CLR, не пытайтесь использовать статические или локальные переменные, инициализированные в памяти CLR. Например, не следует хранить экземпляр процесса классов, например `SQLDataRecord`, который будет использоваться после возврата управления средой CLR. Единственным исключением является `SQLMetaData` в классе процесса.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:Microsoft.SqlServer.Server.SqlDataRecord> и его <xref:Microsoft.SqlServer.Server.SqlMetaData>. В примере затем отмечает начало результирующего набора с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> метод, записей с данными пример отправляет обратно клиенту с помощью <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> метод и метки в конце результирующего набора с <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> метод.  
  
 [!code-csharp[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/CS/source.cs#1)]
 [!code-vb[DataWorks SqlPipe.SendResultsStart#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlPipe.SendResultsStart/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="record" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Объект <paramref name="record" /> не содержит столбцов или не был инициализирован.</exception>
        <exception cref="T:System.InvalidOperationException">После вызова метода <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" /> был вызван метод, отличный от <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" /> и <see cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart(Microsoft.SqlServer.Server.SqlDataRecord)" />.</exception>
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow(Microsoft.SqlServer.Server.SqlDataRecord)" />
        <altmember cref="M:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd" />
      </Docs>
    </Member>
  </Members>
</Type>