<Type Name="WindowsFormsApplicationBase" FullName="Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="178758c2200488db67f46e123fe11c916bc7f54e" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34174331" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class WindowsFormsApplicationBase : Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi WindowsFormsApplicationBase extends Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
  <TypeSignature Language="VB.NET" Value="Public Class WindowsFormsApplicationBase&#xA;Inherits ConsoleApplicationBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class WindowsFormsApplicationBase : Microsoft::VisualBasic::ApplicationServices::ConsoleApplicationBase" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет свойства, методы и события, связанные с текущим приложением.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Свойства, предоставляемые `My.Application` объекта возвращают данные, связанные только с текущим приложением или DLL. С помощью `My.Application` нельзя изменять данные системного уровня.  
  
 Объект `My.Application` состоит из следующих классов:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ApplicationBase> включает элементы, доступные во всех проектах;  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> предоставляет члены, доступные в приложениях Windows Forms.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase> предоставляет члены, доступные в консольных приложениях.  
  
   
  
## Examples  
 Этот пример использует цикл для перебора открытых форм приложения, выбираются формы, возможен непосредственно из текущего потока и отображает их названия в <xref:System.Windows.Forms.ListBox> элемента управления. Сведения о способах доступа к открытым формам см. в разделе <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms%2A>.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 В этом примере требуется наличие формы с именем вашего приложения Windows Forms `Form1` , содержащий список с именем `ListBox1`.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase" />
    <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ApplicationBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WindowsFormsApplicationBase (Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(valuetype Microsoft.VisualBasic.ApplicationServices.AuthenticationMode authenticationMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.#ctor(Microsoft.VisualBasic.ApplicationServices.AuthenticationMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WindowsFormsApplicationBase(Microsoft::VisualBasic::ApplicationServices::AuthenticationMode authenticationMode);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="authenticationMode" Type="Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />
      </Parameters>
      <Docs>
        <param name="authenticationMode">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode" />. Задает режим проверки подлинности для приложения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />, используя заданный режим проверки подлинности.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `authenticationMode` параметр <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows> значение перечисления, то этот конструктор пытается задать текущий поток <xref:System.Threading.Thread.CurrentPrincipal%2A> свойства <xref:System.Security.Principal.WindowsPrincipal> для текущего пользователя.  
  
 Если `authenticationMode` параметр <xref:Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.ApplicationDefined> значение перечисления, то этот конструктор оставляет текущий поток <xref:System.Threading.Thread.CurrentPrincipal%2A> свойство без изменений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationContext">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ApplicationContext ApplicationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ApplicationContext ApplicationContext" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ApplicationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ApplicationContext As ApplicationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ApplicationContext ^ ApplicationContext { System::Windows::Forms::ApplicationContext ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ApplicationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Windows.Forms.ApplicationContext" /> для текущего потока приложения Windows Forms.</summary>
        <value>Это свойство возвращает объект <see cref="T:System.Windows.Forms.ApplicationContext" /> для текущего потока. Этот объект содержит контекстные сведения о потоке.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это дополнительный элемент. не отображается в IntelliSense, если щелкнуть **все** вкладки.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ApplicationContext" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DoEvents();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обрабатывает все сообщения Windows, которые в данный момент находятся в очереди сообщений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.DoEvents` Метод позволяет приложению обрабатывать другие события, которые могут возникнуть при выполнении кода. `My.Application.DoEvents` Метод имеет то же поведение, что <xref:System.Windows.Forms.Application.DoEvents%2A> метод.  
  
 При запуске приложения Windows Forms, он создает новую форму, которая затем ожидает события для обработки. Каждый раз форма обрабатывает событие, такому как нажатие кнопки, обрабатывается весь код, связанный с этим событием. Все остальные события ожидают в очереди. Пока код обрабатывает событие, приложение не отвечает. Например окно не перерисовываться, если перетащить другое окно в верхней части.  
  
 При вызове метода `My.Application.DoEvents` в коде, приложение может обрабатывать другие события. Например, если код добавляет данные <xref:System.Windows.Forms.ListBox> в цикле и после каждого этапа цикла, он вызывает `My.Application.DoEvents`, обновляет форму при перетаскивании на него другое окно. При удалении `My.Application.DoEvents` из кода, форма не будет перерисовываться, до завершения обработчик события нажатия кнопки выполнения.  
  
 Как правило этот метод используется в цикле для обработки сообщений.  
  
> [!NOTE]
>  `My.Application.DoEvents` Метод отличается от обработки событий в точно так же, как и в форме. Используйте многопоточность, чтобы сделать форму непосредственным обработчиком событий. Дополнительные сведения см. в разделе [многопоточных приложений](http://msdn.microsoft.com/library/a06a1a56-dd16-44e8-bc01-2c2255511bc6).  
  
> [!CAUTION]
>  Если метод, обрабатывающий события пользовательского интерфейса (UI) вызывает `My.Application.DoEvents` метода, метод может быть осуществлен, до его завершения. Это может произойти из-за `My.Application.DoEvents` метод обрабатывает сообщения Windows, а сообщения Windows может порождать события.  
  
 В следующей таблице перечислены задачи с использованием пример `My.Application.DoEvents` метод.  
  
|Кому|См.|  
|-|-|  
|Разрешить форме ответить на ввод состоянии занятости пользовательского интерфейса|[Пошаговое руководство. Обработка событий](~/docs/visual-basic/programming-guide/language-features/events/walkthrough-handling-events.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Application.DoEvents` метод, чтобы пользовательский Интерфейс для `TextBox1` для обновления.  
  
 [!code-vb[VbVbalrMyApplication#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#6)]  
  
 Этот код должен быть в форме, которая содержит `TextBox1` компонент с `Text` свойство.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Управляет разрешениями, относящимися к пользовательским интерфейсам и буферу обмена. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="protected bool EnableVisualStyles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableVisualStyles" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Property EnableVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool EnableVisualStyles { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, использует ли это приложение стили Windows XP для окон, элементов управления и т. д.</summary>
        <value>Значение <see cref="T:System.Boolean" />, показывающее, будет ли приложение использовать стили XP Windows для окон, элементов управления и т. д.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> Метод использует это свойство, чтобы определить, следует ли вызывать <xref:System.Windows.Forms.Application.EnableVisualStyles%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HideSplashScreen">
      <MemberSignature Language="C#" Value="protected void HideSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void HideSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub HideSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void HideSplashScreen();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Скрывает экран-заставку приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> Класс создает заставки в отдельном потоке. Этот метод выполняет маршалинг вызова в нужный поток.  
  
 Этот метод вызывается, если выполняется в форме загрузки.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="IsSingleInstance">
      <MemberSignature Language="C#" Value="protected bool IsSingleInstance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSingleInstance" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Property IsSingleInstance As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsSingleInstance { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, является ли это приложение приложением, допускающим одновременное выполнение только одной своей копии.</summary>
        <value>Значение <see cref="T:System.Boolean" />, показывающее, является ли это приложение приложением, допускающим одновременное выполнение только одной своей копии.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run%2A> Метод использует это свойство для определения, является ли это приложение с одним экземпляром приложения.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="MainForm">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.Form MainForm { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form MainForm" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Property MainForm As Form" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Windows::Forms::Form ^ MainForm { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или определяет главную форму для этого приложения.</summary>
        <value>Возвращает или определяет главную форму для этого приложения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `MainForm` свойство для получения или задания <xref:System.Windows.Forms.Form> объект, который использует модель приложения Visual Basic, запуск или завершение как главной формы приложения.  
  
 Это свойство поддерживает модель приложения Visual Basic, запуск или завершение. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Изменения этого свойства, не сохраняются при закрытии приложения. Чтобы изменить главную форму окончательно, необходимо изменить этот параметр в **конструктора проектов**.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="MinimumSplashScreenDisplayTime">
      <MemberSignature Language="C#" Value="public int MinimumSplashScreenDisplayTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
      <MemberSignature Language="VB.NET" Value="Public Property MinimumSplashScreenDisplayTime As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumSplashScreenDisplayTime { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет минимальный интервал времени (в миллисекундах), в течение которого отображается экран-заставка.</summary>
        <value>
          <see langword="Integer" />. Минимальный интервал времени (в миллисекундах), в течение которого отображается экран-заставка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.MinimumSplashScreenDisplayTime` Свойство позволяет задать минимальный интервал времени, необходимо, чтобы экран-заставка приложения для отображения. Если основной формы потребовалось меньше времени, чем задано этим свойством, экран-заставка остается до указанного времени прохода, после чего отображается главной формы. Если приложение требует большего времени запуска, экран-заставка закрывается после главной формы становится активным.  
  
 При добавлении экрана-заставки в приложение с помощью конструктора проектов, задает `My.Application.MinimumSplashScreenDisplayTime` значение 2000, предоставляя минимальное время отображения равное двум секундам.  
  
 Это свойство поддерживает модель приложения Visual Basic. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Необходимо задать `My.Application.MinimumSplashScreenDisplayTime` свойство в метод, который переопределяет <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> или <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> метод. Код, который переопределяет методы <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> класса следует вводить в файле ApplicationEvents.vb, который по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для переопределения членов|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.<br /><br />Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере показано, как задать `My.Application.MinimumSplashScreenDisplayTime` свойство путем переопределения <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> свойство.  
  
 [!code-vb[VbVbalrMyApplication#51](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#51)]  
  
 В этом примере требуется, чтобы проект имел экран-заставку.  
  
 Необходимо ввести этот код в окне редактора кода для событий приложения. Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
      </Docs>
    </Member>
    <Member MemberName="NetworkAvailabilityChanged">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler NetworkAvailabilityChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.NetworkAvailabilityChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event NetworkAvailabilityChanged As NetworkAvailableEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::Devices::NetworkAvailableEventHandler ^ NetworkAvailabilityChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при изменении доступности сети.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение вызывает `NetworkAvailabilityChanged` событий при каждом изменении доступности сети. Можно использовать <xref:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs.IsNetworkAvailable%2A> свойство `e` параметр, чтобы получить новое состояние сетевого подключения. Чтобы получить текущее состояние сетевого подключения, используйте <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> свойство.  
  
 Это событие вызывается для основного потока приложения с другими событиями пользовательского интерфейса. Это позволяет обработчику событий получить доступ напрямую к пользовательскому Интерфейсу приложения. Тем не менее, если приложение занято обработкой другого события пользовательского интерфейса при возникновении этого события, это событие не может обрабатываться, пока обработчик событий завершит работу или вызовет <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> метод.  
  
 <xref:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged> Событий предоставляет те же функции, как это событие но доступен для всех типов приложений.  
  
 Код для `NetworkAvailabilityChanged` обработчик событий хранится в файле ApplicationEvents.vb по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для событий приложения|  
|1.  Проект в **обозревателе решений.** Нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.<br /><br />Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
> [!NOTE]
>  Многие сетевые концентраторы предоставит сетевое подключение, даже если концентратор отключен от сети большего размера. Следовательно для проводных подключений, данное событие указывает изменение связи между компьютером и концентратором.  
  
> [!NOTE]
>  `NetworkAvailabilityChanged` Событие не происходит приложениями, когда они запускаются в Windows 95 и Windows 98 или при запуске, не имеющий прав администратора на Windows 2000. Если ваше приложение может выполняться в этих операционных системах, используйте <xref:Microsoft.VisualBasic.Devices.Network.IsAvailable%2A> свойство для проверки доступности сети.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере вызывается `SetConnectionStatus` метод по умолчанию `Form1` класс при изменении доступности сети.  
  
 Необходимо ввести код в окне редактора кода для событий приложения. Чтобы открыть это окно, следуйте инструкциям в разделе "Примечания" в этом разделе.  
  
 Проект должен иметь форму с именем `Form1`. Оно должно иметь метод с именем `SetConnectionStatus` , который принимает `Boolean` параметра.  
  
 [!code-vb[VbVbalrMyApplication#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventHandler" />
        <altmember cref="E:Microsoft.VisualBasic.Devices.Network.NetworkAvailabilityChanged" />
        <altmember cref="T:Microsoft.VisualBasic.Devices.NetworkAvailableEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateMainForm">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateMainForm ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateMainForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateMainForm ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateMainForm();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределение в производном классе позволяет разработчику создавать код, который настраивает экран-заставку и главную форму.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этот метод не выполняет никаких действий. Тем не менее, при выборе главной формы приложения в Visual Basic **конструктора проектов**, конструктор переопределяет этот метод с методом, который задает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> свойство к новому экземпляру главной формы.  
  
 Этот метод вызывается методом <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCreateSplashScreen">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnCreateSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateSplashScreen();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределение в производном классе позволяет разработчику создавать код, инициализирующий экран-заставку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этот метод не выполняет никаких действий. Если выбрать экран-заставку для приложения в Visual Basic **конструктора проектов**, конструктор переопределяет <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> метода, задает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen%2A> свойства новый экземпляр формы экрана заставки .  
  
 Этот метод вызывается методом <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnInitialize">
      <MemberSignature Language="C#" Value="protected virtual bool OnInitialize (System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; commandLineArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnInitialize(class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; commandLineArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnInitialize (commandLineArgs As ReadOnlyCollection(Of String)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnInitialize(System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ commandLineArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.STAThread</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLineArgs" Type="System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="commandLineArgs">Коллекция <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> из <see langword="String" />, содержащая аргументы командной строки в виде строк для текущего приложения.</param>
        <summary>Определяет визуальные стили, стили отображения текста и текущего участника для основного потока приложения (если приложение использует проверку подлинности Windows), а также инициализирует экран-заставку, если таковой определен.</summary>
        <returns>Значение <see cref="T:System.Boolean" />, показывающее, должен ли продолжаться запуск приложения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию, этот метод устанавливает стили оформления, стили отображения текста и текущего участника для основного потока приложения (если приложение использует проверку подлинности Windows) и вызывает метод `ShowSplashScreen` Если ни одна из `/nosplash` , ни `-nosplash` используется в качестве аргумент командной строки.  
  
 Этот метод вызывает следующие методы:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A>.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A>.  
  
 ]]></format>
        </remarks>
        <altCompliant cref="None." />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.EnableVisualStyles" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen" />
      </Docs>
    </Member>
    <Member MemberName="OnRun">
      <MemberSignature Language="C#" Value="protected virtual void OnRun ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnRun() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnRun" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRun ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRun();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Предоставляет отправную точку для момента, когда основное приложение будет готово к началу запуска после выполнения инициализации.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед переходом в цикл обработки сообщений Windows Forms, вызывает этот метод `OnCreateMainForm` (для создания главной формы приложения) и `HideSplashScreen` (чтобы закрыть экран-заставка) методы:  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A>. Позволяет разработчику создавать код, который инициализирует главной формы.  
  
     По умолчанию этот метод не выполняет никаких действий. Тем не менее, при выборе главной формы приложения в Visual Basic **конструктора проектов**, конструктор переопределяет <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateMainForm%2A> метода, задает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm%2A> свойство к новому экземпляру главной формы.  
  
-   <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.HideSplashScreen%2A>. Если приложение имеет определенную заставку, и он открыт, этот метод закрывает экран-заставка.  
  
     По умолчанию этот метод закрывает экран-заставка.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnShutdown">
      <MemberSignature Language="C#" Value="protected virtual void OnShutdown ();" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnShutdown() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnShutdown" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnShutdown ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnShutdown();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Переопределение в производном классе позволяет выполнить код при завершении работы приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не выполняется при возникновении необработанного исключения в основное приложение.  
  
 По умолчанию этот метод вызывает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown> событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnStartup">
      <MemberSignature Language="C#" Value="protected virtual bool OnStartup (Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnStartup(class Microsoft.VisualBasic.ApplicationServices.StartupEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartup(Microsoft.VisualBasic.ApplicationServices.StartupEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnStartup (eventArgs As StartupEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnStartup(Microsoft::VisualBasic::ApplicationServices::StartupEventArgs ^ eventArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />. Содержит аргументы командной строки приложения и показывает, должен ли быть отменен запуск приложения.</param>
        <summary>Переопределение в производном классе позволяет выполнить код при завершении работы приложения.</summary>
        <returns>Значение <see cref="T:System.Boolean" /> показывает, должно ли продолжаться выполнение запуска приложения после запуска.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этот метод вызывает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> событий. Можно задать обработчик событий <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> свойство аргумента события. Если <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> — `True`, этот метод возвращает `False` для отмены запуска приложения. В противном случае данный метод возвращает значение `True`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnStartupNextInstance">
      <MemberSignature Language="C#" Value="protected virtual void OnStartupNextInstance (Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void OnStartupNextInstance(class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs eventArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnStartupNextInstance(Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStartupNextInstance (eventArgs As StartupNextInstanceEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStartupNextInstance(Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventArgs ^ eventArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventArgs" Type="Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
      </Parameters>
      <Docs>
        <param name="eventArgs">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />. Содержит аргументы командной строки последующего экземпляра приложения и показывает, должен ли первый экземпляр приложения быть выведен на передний план при выходе из обработчика исключений.</param>
        <summary>Переопределение в производном классе позволяет выполнить код при запуске последующего экземпляра приложения, допускающего одновременное выполнение только одной своей копии.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этот метод вызывает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> событий. Можно задать обработчик событий <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> свойство аргумента события. Если <xref:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs.BringToForeground%2A> — `True`, метод активирует главной формы. В противном случае главной формы остается в ее текущем состоянии.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.IsSingleInstance" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      </Docs>
    </Member>
    <Member MemberName="OnUnhandledException">
      <MemberSignature Language="C#" Value="protected virtual bool OnUnhandledException (Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance bool OnUnhandledException(class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnUnhandledException(Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function OnUnhandledException (e As UnhandledExceptionEventArgs) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool OnUnhandledException(Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />.</param>
        <summary>Переопределение в производном классе позволяет выполнять код, когда в приложении возникает необработанное исключение.</summary>
        <returns>Значение <see cref="T:System.Boolean" />, показывающее, возникло ли событие <see cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этот метод вызывает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException> событий при условии, что отладчик присоединен и обработке пользователь `UnhandledException` событий. Можно задать обработчик событий <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> свойство. Если <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> — `False`, или если событие не обработано, приложение завершает работу после возврата из обработчика исключений. В противном случае управление приложением возвращается в цикл обработки сообщений Windows Forms.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию всех открытых форм приложения.</summary>
        <value>Объект <see cref="T:System.Windows.Forms.FormCollection" />, содержащий все открытые формы приложения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.OpenForms` Свойство получает коллекцию открытых форм приложения. Поведение идентично <xref:System.Windows.Forms.Application.OpenForms%2A?displayProperty=nameWithType> свойство.  
  
> [!NOTE]
>  `My.Application.OpenForms` Свойство возвращает всех открытых форм, независимо от того, какой поток открыть их. Вы должны проверить <xref:System.Windows.Forms.Control.InvokeRequired%2A> свойства каждой формы перед обращением к ней; в противном случае может возникнуть исключение <xref:System.InvalidOperationException> исключение.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере обрабатывает в цикле открытых форм приложения, выбирает тех, которые доступны непосредственно из текущего потока и отображает их названия в <xref:System.Windows.Forms.ListBox> элемента управления. В этом примере требуется наличие формы с именем вашего приложения Windows Forms `Form1` , содержащий список с именем `ListBox1`.  
  
 [!code-vb[VbVbalrMyApplication#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#10)]  
  
 В этом примере обрабатывает в цикле открытых форм приложения, а их названия в отображаются <xref:System.Windows.Forms.ListBox> элемента управления.  
  
 [!code-vb[VbVbalrMyApplication#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">Управляет разрешениями, которые относятся к пользовательским интерфейсам и буферу обмена. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:System.Windows.Forms.FormCollection" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run (string[] commandLine);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Run(string[] commandLine) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Run(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Run (commandLine As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Run(cli::array &lt;System::String ^&gt; ^ commandLine);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandLine" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="commandLine">Массив типа <see langword="String" />. Командная строка из <see langword="Sub Main" />.</param>
        <summary>Настраивает и запускает модель приложений Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.Run` Метод обеспечивает поддержку модели приложений Visual Basic. Этот метод должен вызываться только из приложения `Sub Main`. По умолчанию `Sub Main` в Windows Forms приложение вызывает этот метод. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.EnvironmentPermission">Управляет возможностью доступа к переменным среды. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">Управляет возможностью доступа к переменным реестра. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Управляет разрешениями, относящимися к пользовательским интерфейсам и буферу обмена. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <permission cref="T:System.Net.WebPermission">Управляет правами доступа к интернет-ресурсам HTTP. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Net.SocketPermission">Управляет правами на установление или принятие подключений для адреса транспорта. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Diagnostics.PerformanceCounterPermission">Управление доступом к компонент счетчика производительности Windows NT. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="SaveMySettingsOnExit">
      <MemberSignature Language="C#" Value="public bool SaveMySettingsOnExit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SaveMySettingsOnExit" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SaveMySettingsOnExit" />
      <MemberSignature Language="VB.NET" Value="Public Property SaveMySettingsOnExit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SaveMySettingsOnExit { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, сохраняет ли приложение параметры пользователя при завершении работы.</summary>
        <value>
          <see langword="Boolean" />. Значение <see langword="True" /> указывает, что приложение сохраняет параметры пользователя при завершении работы. В противном случае параметры не сохраняются.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `SaveMySettingsOnExit` Свойство позволяет пользователю изменять способ сохранения параметров, во время выполнения. Можно явным образом сохранить изменения параметров с помощью <xref:System.Configuration.ApplicationSettingsBase.Save%2A> метод `My.Settings` объекта. Дополнительные сведения об изменении и сохранении параметров см. в разделе [свойства приложения](http://msdn.microsoft.com/library/0ad4926f-636e-41f8-a5b1-faf9d9b0a254).  
  
 Изменения этого свойства, не сохраняются при закрытии приложения. Чтобы изменить `SaveMySettingsOnExit` свойства без возможности восстановления, необходимо изменить параметр в **конструктора проектов**:  
  
| |  
|-|  
|Чтобы изменить этот параметр в конструкторе проектов|  
|1.  Выберите проект в **Обозревателе решений**. Нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Выберите **сохранять My.Settings при завершении работы**.|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере состоит из двух частей.  
  
-   `InitializeSaveMySettingsOnExit` Подпрограммы, которые инициализируют состояния флажка <xref:System.Windows.Forms.CheckBox> управления текущее значение `SaveMySettingsOnExit` свойства.  
  
-   `SaveMySettingsOnExit_CheckedChanged` Подпрограмму, которая обрабатывает изменения в <xref:System.Windows.Forms.CheckBox> обновление управления `My.Application.SaveMySettingsOnExit` свойство.  
  
 [!code-vb[VbVbalrMyApplication#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/Form1.vb#12)]  
  
 Для работы этого примера приложение должно иметь <xref:System.Windows.Forms.CheckBox> управления с именем `SaveMySettingsOnExit`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Configuration.ApplicationSettingsBase.Save" />
      </Docs>
    </Member>
    <Member MemberName="ShowSplashScreen">
      <MemberSignature Language="C#" Value="protected void ShowSplashScreen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyinstance void ShowSplashScreen() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ShowSplashScreen ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ShowSplashScreen();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Определяет, определен ли для предложения экран-заставка, и если да, выводит его.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию этот метод вызывает метод `OnCreateSplashScreen` потокобезопасным способом.  
  
 <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> Метод содержит код, отображающий splash экрана для по крайней мере указанного числа миллисекунд <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A> свойство. Чтобы использовать эту функцию, необходимо задать `My.Application.MinimumSplashScreenDisplayTime` свойство в метод, который переопределяет <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShowSplashScreen%2A> или <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnCreateSplashScreen%2A> метод, или добавьте экрана-заставки в приложение с помощью **конструктора проектов**. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime%2A>.  
  
 Этот метод вызывается методом <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize%2A> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.OnInitialize(System.Collections.ObjectModel.ReadOnlyCollection{System.String})" />
      </Docs>
    </Member>
    <Member MemberName="Shutdown">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler Shutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Shutdown" />
      <MemberSignature Language="VB.NET" Value="Public Event Shutdown As ShutdownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::ShutdownEventHandler ^ Shutdown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по завершении работы приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение вызывает `Shutdown` событий до ее завершения. Это позволяет контролировать, как приложение закрывает его ресурсы. Это событие является частью модели приложения Visual Basic. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Код для `Shutdown` обработчик событий хранится в файле ApplicationEvents.vb по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для событий приложения|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.<br /><br />Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере сообщения записываются при завершении работы приложения.  
  
 [!code-vb[VbVbalrMyApplication#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#13)]  
  
 Необходимо ввести код в окне редактора кода для событий приложения. Чтобы открыть это окно, следуйте инструкциям в разделе "Примечания" в этом разделе. Дополнительные сведения см. в разделе [как: журнал сообщений при запуске приложения или завершает работу](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-messages-when-the-application-starts-or-shuts-down.md).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="ShutdownStyle">
      <MemberSignature Language="C#" Value="protected internal Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.ApplicationServices.ShutdownMode ShutdownStyle" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.ShutdownStyle" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Property ShutdownStyle As ShutdownMode" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property Microsoft::VisualBasic::ApplicationServices::ShutdownMode ShutdownStyle { Microsoft::VisualBasic::ApplicationServices::ShutdownMode get(); void set(Microsoft::VisualBasic::ApplicationServices::ShutdownMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.ShutdownMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет, что произойдет после закрытия главной формы приложения.</summary>
        <value>Значение перечисления <see cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />, показывающее, что должно делать приложение при закрытии главной формы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ApplicationContext.OnMainFormClosed%2A> Метод проверяет значение этого свойства, чтобы определить, если приложение должно завершить работу при закрытии главной формы или если открыть другой форме должны быть повышены до новой главной формы.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.ShutdownMode" />
      </Docs>
    </Member>
    <Member MemberName="SplashScreen">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form SplashScreen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Form SplashScreen" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.SplashScreen" />
      <MemberSignature Language="VB.NET" Value="Public Property SplashScreen As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Form ^ SplashScreen { System::Windows::Forms::Form ^ get(); void set(System::Windows::Forms::Form ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или устанавливает экран-заставку для этого приложения.</summary>
        <value>Объект <see cref="T:System.Windows.Forms.Form" />, который приложение использует в качестве экрана-заставки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.SplashScreen` Свойство позволяет получить или задать <xref:System.Windows.Forms.Form> объект, который приложение использует в качестве экрана-заставки, первый графической форме, который отображается при запуске приложения.  
  
 Это свойство поддерживает модель приложения Visual Basic. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Изменения этого свойства, не сохраняются при закрытии приложения. Чтобы изменить заставку навсегда, необходимо изменить этот параметр в **конструктора проектов**.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Application.SplashScreen` свойство и `My.Application.Startup` событий для обновления экрана-заставки с данными о состоянии при запуске приложения.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 В этом примере требуется, чтобы проект имел заставку с именем `SplashScreen1`. Экран-заставка должна иметь свойство с именем `Status` , обновляет его пользовательский интерфейс.  
  
 Необходимо ввести этот код в окне редактора кода для событий приложения. Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Одно и то же значение присвоено этому свойству и свойству <see cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MainForm" />.</exception>
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.MinimumSplashScreenDisplayTime" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Startup">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupEventHandler Startup" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
      <MemberSignature Language="VB.NET" Value="Public Event Startup As StartupEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupEventHandler ^ Startup;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при запуске приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызывает обычного приложения (не одного экземпляра) `Startup` событие каждый раз при его запуске. Создает приложение одного экземпляра `Startup` событие, когда он запускается, только если приложение еще не активен; в противном случае, он вызывает `StartupNextInstance` событий. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance>.  
  
 Это событие является частью модели приложения Visual Basic. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Можно использовать <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> свойства `e` параметра для управления загрузки формы запуска приложения. Когда <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> свойству `True`, начальная форма не запускается. В этом случае код должен вызывать альтернативный путь кода автозагрузки.  
  
 Можно использовать <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> свойство `e` параметр или <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> свойство для доступа к аргументам командной строки для приложения.  
  
 Код для `Startup` обработчик событий хранится в файле ApplicationEvents.vb по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для событий приложения|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.<br /><br /> Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Application.SplashScreen` свойство и `My.Application.Startup` событий для обновления экрана-заставки с данными о состоянии при запуске приложения.  
  
 [!code-vb[VbVbalrMyApplication#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#14)]  
  
 В этом примере требуется, чтобы проект имел заставку с именем `SplashScreen1`. Экран-заставка должна иметь свойство с именем `Status` , обновляет его пользовательский интерфейс.  
  
 Необходимо ввести код в окне редактора кода для событий приложения. Чтобы открыть это окно, следуйте инструкциям в разделе "Примечания" в этом разделе. Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Управляет возможностью добавления обработчика событий для данного события. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
      </Docs>
    </Member>
    <Member MemberName="StartupNextInstance">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler StartupNextInstance" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance" />
      <MemberSignature Language="VB.NET" Value="Public Event StartupNextInstance As StartupNextInstanceEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::StartupNextInstanceEventHandler ^ StartupNextInstance;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.StartupNextInstanceEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при попытке запуска приложения, допускающего одновременное выполнение только одной своей копии, при наличии уже активного экземпляра этого приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Создает приложение одного экземпляра <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> событий при попытке перезапустить приложение, если он уже активен. При запуске экземпляра приложения в первый раз, он выдает <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup> событий. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup>.  
  
 Это событие является частью модели приложения Visual Basic. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Это событие вызывается для основного потока приложения с другими событиями пользовательского интерфейса. Это позволяет обработчику события напрямую получать доступ к интерфейсу пользователя приложения. Тем не менее, если приложение занято обработкой другого события пользовательского интерфейса при возникновении этого события, это событие не может обрабатываться, пока обработчик событий завершит работу или вызовет <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.DoEvents%2A> метод.  
  
> [!NOTE]
>  `StartupNextInstance` События только в приложениях одного экземпляра. Чтобы включить поведение одним экземпляром приложения, необходимо проверить **создать приложение одного экземпляра** флажок в конструкторе проектов.  
  
| |  
|-|  
|Чтобы сделать один экземпляр приложения|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Выберите **создать приложение одного экземпляра** флажок.|  
  
 Необходимо использовать <xref:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine%2A> свойство `e` параметр для доступа к аргументам для последующие попытки запуска экземпляра приложения. <xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A> Свойство предоставляет аргументы, используемые для запуска первого экземпляра приложения с одним экземпляром.  
  
 Код для <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> обработчик событий хранится в файле ApplicationEvents.vb по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для событий приложения|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.<br /><br />Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
 В следующей таблице перечислены примеры задач, связанных с `My.Application.StartupNextInstance` событий.  
  
|Кому|См.|  
|-|-|  
|Проверьте аргументы командной строки для первого экземпляра приложения|<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs%2A>|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|Да|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `e` параметр <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.StartupNextInstance> обработчик событий для изучения аргументов командной строки для приложения. Если найден аргумент, который начинается с `/input=`, отображается остальная часть этого аргумента.  
  
 [!code-vb[VbVbalrMyApplication#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#15)]  
  
 Необходимо ввести код в окне редактора кода для событий приложения. Чтобы открыть это окно, следуйте инструкциям в разделе "Примечания" в этом разделе. Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
        <altmember cref="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.Startup" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.CommandLineArgs" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.StartupEventArgs.CommandLine" />
      </Docs>
    </Member>
    <Member MemberName="UnhandledException">
      <MemberSignature Language="C#" Value="public event Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler UnhandledException" />
      <MemberSignature Language="DocId" Value="E:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UnhandledException" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event UnhandledException As UnhandledExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event Microsoft::VisualBasic::ApplicationServices::UnhandledExceptionEventHandler ^ UnhandledException;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, если приложение обнаруживает необработанное исключение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение вызывает `UnhandledException` событие, когда он встречает необработанное исключение. Это событие является частью модели приложения Visual Basic. Дополнительные сведения см. в разделе [Обзор модели приложения Visual Basic](~/docs/visual-basic/developing-apps/development-with-my/overview-of-the-visual-basic-application-model.md).  
  
 Можно использовать <xref:System.Threading.ThreadExceptionEventArgs.Exception%2A> свойство `e` параметр для доступа к необработанное исключение, которое вызвало это событие.  
  
 Можно использовать <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> свойства `e` параметра для управления ли приложение завершает работу. По умолчанию <xref:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs.ExitApplication%2A> — `True`. Таким образом, приложение завершает работу после завершения `UnhandledException` обработчика событий. Можно присвоить значение `False` в `UnhandledException` обработчик событий, чтобы обеспечить работу приложения и его возврата в состояние ожидания.  
  
 Код для `UnhandledException` обработчик событий хранится в файле ApplicationEvents.vb по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для событий приложения|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.|  
  
 Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
> [!NOTE]
>  Компилятор Visual Basic запрещает приложениям, созданным для отладки из вызова этого события, чтобы включить отладчик для обработки необработанных исключений. Это означает, что при тестировании приложения, запустив его в отладчике интегрированной среды разработки Visual Studio к `UnhandledException` не будет вызван обработчик событий. Дополнительные сведения о построении приложений для отладки см. в разделе [/Debug (Visual Basic)](~/docs/visual-basic/reference/command-line-compiler/debug.md).  
  
## <a name="tasks"></a>Задачи  
 В следующей таблице перечислены примеры задач, включающих `My.Application.UnhandledException` событий.  
  
|Кому|См.|  
|-|-|  
|Журнал необработанных исключений|[Практическое руководство. Запись в журнал сведений об исключениях](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows Forms|**Да**|  
|Библиотека классов|Нет|  
|Консольное приложение|Нет|  
|Библиотека элементов управления Windows Forms|Нет|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|Нет|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Application.UnhandledException` событие в журнал все необработанные исключения.  
  
 Необходимо ввести код в окне редактора кода для событий приложения. Чтобы открыть это окно, следуйте инструкциям в разделе "Примечания" в этом разделе. Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 Поскольку `UnhandledException` событие не происходит при присоединении отладчика к приложению, необходимо запустить этот пример за пределами интегрированной среды разработки Visual Studio.  
  
 [!code-vb[VbVbalrMyApplication#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplication/VB/FakeMyEvents.vb#17)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">Управляет возможностью добавления обработчика событий для данного события. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlAppDomain" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase" />
        <altmember cref="N:Microsoft.VisualBasic.ApplicationServices" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventHandler" />
        <altmember cref="T:Microsoft.VisualBasic.ApplicationServices.UnhandledExceptionEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleTextRendering">
      <MemberSignature Language="C#" Value="protected static bool UseCompatibleTextRendering { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseCompatibleTextRendering" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property UseCompatibleTextRendering As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property bool UseCompatibleTextRendering { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Переопределение этого свойства в производном классе позволяет разработчику задать механизм отрисовки текста по умолчанию для форм приложения.</summary>
        <value>
          <see langword="Boolean" />. Значение <see langword="False" /> указывает, что приложение должно использовать механизм визуализации текста по умолчанию для [! INCLUDE[vbprvblong](~/includes/vbprvblong-MD.MD)]. Значение <see langword="True" /> показывает, что приложение должно использовать механизм отрисовки текста для Visual Basic .NET 2002 и Visual Basic .NET 2003.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию это свойство возвращает `False` для указания того, что механизм для отрисовки текста GDI [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] использовать для форм приложения. Однако можно переопределить это свойство для возврата `True` и указать, что форм приложения использует механизм отрисовки текста GDI +, которое используется в Visual Basic .NET 2002 и Visual Basic .NET 2003.  
  
 Это свойство вызывается <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> конструктор.  
  
 Код, который переопределяет методы <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase> класса следует вводить в файле ApplicationEvents.vb, который по умолчанию скрыто.  
  
| |  
|-|  
|Доступ к окну редактора кода для переопределения членов|  
|1.  Выбрав проект в **обозревателе решений**, нажмите кнопку **свойства** на **проекта** меню.<br />2.  Перейдите на вкладку **Приложение** .<br />3.  Нажмите кнопку **Просмотреть события приложения** , чтобы открыть редактор кода.<br /><br />Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).|  
  
   
  
## Examples  
 В этом примере показано, как задать механизм визуализации текста GDI + как модуль подготовки отчетов по умолчанию приложения путем переопределения <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A> свойство.  
  
```vb  
Protected Overloads Shared ReadOnly Property UseCompatibleTextRendering() As Boolean  
    Get  
        ' Use the GDI+ text rendering engine.  
        Return True  
    End Get  
End Property  
```  
  
 Необходимо ввести этот код в окне редактора кода для событий приложения. Дополнительные сведения см. в разделе [Application Page, Project Designer (Visual Basic)](https://docs.microsoft.com/visualstudio/ide/reference/application-page-project-designer-visual-basic).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>