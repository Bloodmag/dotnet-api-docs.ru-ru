<Type Name="Keyboard" FullName="Microsoft.VisualBasic.Devices.Keyboard">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3935cead12b64f3f847734107688d50ba271bff1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659103" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Keyboard" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Keyboard extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Devices.Keyboard" />
  <TypeSignature Language="VB.NET" Value="Public Class Keyboard" />
  <TypeSignature Language="C++ CLI" Value="public ref class Keyboard" />
  <TypeSignature Language="F#" Value="type Keyboard = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предлагает свойства для доступа к текущему состоянию клавиатуры, в частности к сведениям о нажатых в настоящий момент клавишах, а также метод для отправки сообщений о нажатиях клавиш активному окну.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard` Объект предоставляет интерфейс для клавиатуры компьютера. Свойства `My.Computer.Keyboard` предоставляют сведения о состоянии нескольких специальных клавиш. `My.Computer.Keyboard.SendKeys` Позволяет Отправка сочетания клавиш в активное окно, как если бы они были вводятся с клавиатуры.  
  
## <a name="tasks"></a>Задачи  
 В следующей таблице перечислены задачи с использованием пример `My.Computer.Keyboard` объекта.  
  
|Кому|См.|  
|-|-|  
|Отправить нажатия клавиш в приложение|[Практическое руководство. Запуск приложения и отправка ему нажатий клавиш (Visual Basic)](~/docs/visual-basic/developing-apps/programming/computer-resources/how-to-start-an-application-and-send-it-keystrokes.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.CtrlKeyDown` свойства, чтобы определить, если нажата клавиша CTRL компьютера.  
  
 [!code-vb[VbVbalrMyComputer#36](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#36)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Keyboard ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Keyboard();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.Devices.Keyboard" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="AltKeyDown">
      <MemberSignature Language="C#" Value="public bool AltKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AltKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AltKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AltKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AltKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает <see langword="Boolean" /> , которое позволяет определить, что нажата клавиша ALT.</summary>
        <value>
          <see langword="Boolean" />: значение <see langword="True" />, если клавиша ALT нажата, в противном случае — значение <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.AltKeyDown` Свойство предоставляет функциональность, аналогичную <xref:System.Windows.Forms.Control.ModifierKeys%2A> свойство.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.AltKeyDown` свойства, чтобы определить, нажата ли клавиша ALT компьютера.  
  
 [!code-vb[VbVbalrMyComputer#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#23)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="CapsLock">
      <MemberSignature Language="C#" Value="public bool CapsLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CapsLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CapsLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CapsLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CapsLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CapsLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает <see langword="Boolean" />, которое позволяет определить, включен ли режим CAPS LOCK.</summary>
        <value>
          <see langword="Boolean" />: значение <see langword="True" />, если режим CAPS LOCK включен, в противном случае — значение <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращается только состояние CAPS LOCK.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.CapsLock` свойства, чтобы определить, если включен режим CAPS LOCK компьютера.  
  
 [!code-vb[VbVbalrMyComputer#50](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#50)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="CtrlKeyDown">
      <MemberSignature Language="C#" Value="public bool CtrlKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CtrlKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CtrlKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CtrlKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CtrlKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает <see langword="Boolean" />, которое позволяет определить, нажата ли клавиша CTRL.</summary>
        <value>Значение <see langword="Boolean" />. Значение <see langword="True" />, если клавиша CTRL нажата; в противном случае — значение <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.CtrlKeyDown` Свойство предоставляет функциональность, аналогичную <xref:System.Windows.Forms.Control.ModifierKeys%2A> свойство.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.CtrlKeyDown` свойства, чтобы определить, нажата ли клавиша CTRL компьютера.  
  
 [!code-vb[VbVbalrMyComputer#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#34)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="NumLock">
      <MemberSignature Language="C#" Value="public bool NumLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NumLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NumLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NumLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NumLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.NumLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает <see langword="Boolean" />, которое позволяет определить, включен ли режим NUM LOCK.</summary>
        <value>Значение <see langword="Boolean" />. Значение <see langword="True" />, если режим NUM LOCK включен; в противном случае — значение <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращается только состояние клавиша NUM LOCK.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.NumLock` свойства, чтобы определить, включено ли клавиша NUM LOCK компьютера.  
  
 [!code-vb[VbVbalrMyComputer#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <Member MemberName="ScrollLock">
      <MemberSignature Language="C#" Value="public bool ScrollLock { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollLock" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScrollLock As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollLock { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScrollLock : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ScrollLock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение <see langword="Boolean" />, которое позволяет определить, включен ли режим SCROLL LOCK.</summary>
        <value>Значение <see langword="Boolean" />. Значение <see langword="True" />, если режим SCROLL LOCK включен; в противном случае — значение <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращается только состояние клавиши SCROLL LOCK.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.ScrollLock` свойства, чтобы определить, включено ли ключ компьютера SCROLL LOCK.  
  
 [!code-vb[VbVbalrMyComputer#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SendKeys">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Отправляет сведения о нажатии одной или нескольких клавиш в активное окно как при вводе с клавиатуры.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string -&gt; unit" Usage="keyboard.SendKeys keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see langword="String" /> определяет клавиши, которые необходимо отправить.</param>
        <summary>Отправляет сведения о нажатии одной или нескольких клавиш в активное окно как при вводе с клавиатуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys` Метод предоставляет функциональные возможности, аналогичные <xref:System.Windows.Forms.SendKeys.Send%2A> и <xref:System.Windows.Forms.SendKeys.SendWait%2A> методы.  
  
 `wait` Аргумент является полезным, если другое приложение необходимо завершить перед продолжением приложения.  
  
> [!NOTE]
>  Поскольку управляемого метода активации другого приложения, можно использовать этот класс в текущем приложении, вручную выберите окно для отправки с помощью клавиш или использование методов Windows API, таких как `FindWindow` и `SetForegroundWindow`для принудительной установки фокуса на другие приложения. Дополнительные сведения см. в разделе [Пошаговое руководство: вызов API Windows](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 `keys` Аргумента можно указать любую или ни с одним ключом в сочетании с ALT, CTRL или SHIFT (или любое сочетание этих ключей). Каждый ключ представлен один или несколько символов, таких как `a` для символа «», или `{ENTER}` для клавишу ВВОД.  
  
 Объединяемый клавиши SHIFT, перед названием клавиши с `+` (плюс). Для объединения ключ, нажмите сочетание клавиш CTRL, перед кодом клавиши `^` (курсора). Для объединения ключ с ALT, перед кодом клавиши `%` (знак процента). Для указания повторяющихся ключей, используйте форму `{` *ключа номер*`}`. Должен стоять пробел между *ключ* и *номер*. Например `{LEFT 42}` означает «нажмите клавишу со стрелкой влево 42 раза»; `{h 10}` означает «нажмите кнопку «h» 10 раз.»  
  
 В следующей таблице перечислены коды, которые можно использовать для указания знаков, которые не отображаются при нажатии клавиши соответствующий ключ (например, ввод или TAB).  
  
|Ключ|Код|  
|-|-|  
|СТИРАНИЕ НАЗАД|{BACKSPACE} или {BS}|  
|BREAK|{РАЗРЫВ}|  
|CAPS LOCK|{CAPSLOCK}|  
|СНИМИТЕ ФЛАЖОК|{ОЧИСТИТЬ}|  
|DELETE|{Удаление} или {DEL}|  
|СТРЕЛКА ВНИЗ|{СПИСОК}|  
|END|{КОНЕЦ}|  
|Ввод (цифровой клавишной панели)|{ВВЕДИТЕ}|  
|ВВОД|~|  
|ESC|{ESCAPE-} или {ESC}|  
|СПРАВКА|{HELP}|  
|ГЛАВНАЯ|{ДОМАШНЕЙ}|  
|ВСТ|{ВСТАВИТЬ}|  
|СТРЕЛКА ВЛЕВО|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|ВОЗВРАТ|{ВОЗВРАЩАЮТ}|  
|СТРЕЛКА ВПРАВО|{СПРАВА}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|TAB|{ВКЛАДКИ}|  
|СТРЕЛКА ВВЕРХ|{КОПИРОВАНИЕ}|  
|F1 до F15|{F1} до {F15}|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.SendKeys` метод для отправки нажатий клавиш внешнее приложение, приложение калькулятора, запущенную `Shell` функции.  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 Если приложение с запрошенным идентификатором процесса не найдено, возникает исключение <xref:System.ArgumentException>.  
  
 Вызов функции `Shell` требует полного доверия (класс <xref:System.Security.SecurityException>).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">В случае частичного доверия пользователь не имеет необходимых разрешений.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Управляет разрешениями, относящимися к пользовательским интерфейсам и буферу обмена. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SendKeys">
      <MemberSignature Language="C#" Value="public void SendKeys (string keys, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SendKeys(string keys, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendKeys (keys As String, wait As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendKeys(System::String ^ keys, bool wait);" />
      <MemberSignature Language="F#" Value="member this.SendKeys : string * bool -&gt; unit" Usage="keyboard.SendKeys (keys, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keys">
          <see langword="String" /> определяет клавиши, которые необходимо отправить.</param>
        <param name="wait">Необязательный. Значение типа <see langword="Boolean" />, которое указывает, должно ли приложение ожидать, пока сведения о нажатии клавиш будут обработаны, прежде чем продолжить работу. По умолчанию: <see langword="True" />.</param>
        <summary>Отправляет сведения о нажатии одной или нескольких клавиш в активное окно как при вводе с клавиатуры.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.SendKeys` Метод предоставляет функциональные возможности, аналогичные <xref:System.Windows.Forms.SendKeys.Send%2A> и <xref:System.Windows.Forms.SendKeys.SendWait%2A> методы.  
  
 `wait` Аргумент является полезным, если другое приложение необходимо завершить перед продолжением приложения.  
  
> [!NOTE]
>  Поскольку управляемого метода активации другого приложения, можно использовать этот класс в текущем приложении, вручную выберите окно для отправки с помощью клавиш или использование методов Windows API, таких как `FindWindow` и `SetForegroundWindow`для принудительной установки фокуса на другие приложения. Дополнительные сведения см. в разделе [Пошаговое руководство: вызов API Windows](~/docs/visual-basic/programming-guide/com-interop/walkthrough-calling-windows-apis.md).  
  
 `keys` Аргумента можно указать любую или ни с одним ключом в сочетании с ALT, CTRL или SHIFT (или любое сочетание этих ключей). Каждый ключ представлен один или несколько символов, таких как `a` для символа «», или `{ENTER}` для клавишу ВВОД.  
  
 Объединяемый клавиши SHIFT, перед названием клавиши с `+` (плюс). Для объединения ключ, нажмите сочетание клавиш CTRL, перед кодом клавиши `^` (курсора). Для объединения ключ с ALT, перед кодом клавиши `%` (знак процента). Для указания повторяющихся ключей, используйте форму `{` *ключа номер*`}`. Должен стоять пробел между *ключ* и *номер*. Например `{LEFT 42}` означает «нажмите клавишу со стрелкой влево 42 раза»; `{h 10}` означает «нажмите кнопку «h» 10 раз.»  
  
 В следующей таблице перечислены коды, которые можно использовать для указания знаков, которые не отображаются при нажатии клавиши соответствующий ключ (например, ввод или TAB).  
  
|Ключ|Код|  
|-|-|  
|СТИРАНИЕ НАЗАД|{BACKSPACE} или {BS}|  
|BREAK|{РАЗРЫВ}|  
|CAPS LOCK|{CAPSLOCK}|  
|СНИМИТЕ ФЛАЖОК|{ОЧИСТИТЬ}|  
|DELETE|{Удаление} или {DEL}|  
|СТРЕЛКА ВНИЗ|{СПИСОК}|  
|END|{КОНЕЦ}|  
|Ввод (цифровой клавишной панели)|{ВВЕДИТЕ}|  
|ВВОД|~|  
|ESC|{ESCAPE-} или {ESC}|  
|СПРАВКА|{HELP}|  
|ГЛАВНАЯ|{ДОМАШНЕЙ}|  
|ВСТ|{ВСТАВИТЬ}|  
|СТРЕЛКА ВЛЕВО|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|ВОЗВРАТ|{ВОЗВРАЩАЮТ}|  
|СТРЕЛКА ВПРАВО|{СПРАВА}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|TAB|{ВКЛАДКИ}|  
|СТРЕЛКА ВВЕРХ|{КОПИРОВАНИЕ}|  
|F1 до F15|{F1} до {F15}|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.SendKeys` метод для отправки нажатий клавиш внешнее приложение, приложение калькулятора, запущенную `Shell` функции.  
  
 [!code-vb[VbVbalrMyComputer#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#25)]  
  
 Если приложение с запрошенным идентификатором процесса не найдено, возникает исключение <xref:System.ArgumentException>.  
  
 Вызов функции `Shell` требует полного доверия (класс <xref:System.Security.SecurityException>).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">В случае частичного доверия пользователь не имеет необходимых разрешений.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <permission cref="T:System.Security.Permissions.UIPermission">Управляет разрешениями, относящимися к пользовательским интерфейсам и буферу обмена. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="M:System.Windows.Forms.SendKeys.Send(System.String)" />
        <altmember cref="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ShiftKeyDown">
      <MemberSignature Language="C#" Value="public bool ShiftKeyDown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShiftKeyDown" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShiftKeyDown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShiftKeyDown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShiftKeyDown : bool" Usage="Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение <see langword="Boolean" />, которое позволяет определить, нажата ли клавиша SHIFT.</summary>
        <value>Значение <see langword="Boolean" />. Значение <see langword="True" />, если клавиша SHIFT нажата, в противном случае — значение <see langword="False" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Computer.Keyboard.ShiftKeyDown` Свойство предоставляет функциональность, аналогичную <xref:System.Windows.Forms.Control.ModifierKeys%2A> свойство.  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|-|-|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|Нет|  
  
   
  
## Examples  
 В этом примере используется `My.Computer.Keyboard.ShiftKeyDown` свойства, чтобы определить, если один из клавиш SHIFT компьютера отключен.  
  
 [!code-vb[VbVbalrMyComputer#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyComputer/VB/Class2.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Devices.Computer" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
  </Members>
</Type>