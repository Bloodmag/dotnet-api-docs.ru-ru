<Type Name="TextFieldParser" FullName="Microsoft.VisualBasic.FileIO.TextFieldParser">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="013d626bb8bc81d9eb4e03b891788c9c26fbc2a6" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36659067" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextFieldParser : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi TextFieldParser extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />
  <TypeSignature Language="VB.NET" Value="Public Class TextFieldParser&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextFieldParser : IDisposable" />
  <TypeSignature Language="F#" Value="type TextFieldParser = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="9f25d-101">Предоставляет методы и свойства для анализа структурированных текстовых файлов.</span>
      <span class="sxs-lookup">
        <span data-stu-id="9f25d-101">Provides methods and properties for parsing structured text files.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-102">`TextFieldParser` Объект предоставляет методы и свойства для анализа структурированных текстовых файлов.</span><span class="sxs-lookup"><span data-stu-id="9f25d-102">The `TextFieldParser` object provides methods and properties for parsing structured text files.</span></span> <span data-ttu-id="9f25d-103">Анализ текстового файла с `TextFieldParser` похож на итерацию содержимого текстового файла, а `ReadFields` метод для извлечения полей текста аналогичен разделению строк.</span><span class="sxs-lookup"><span data-stu-id="9f25d-103">Parsing a text file with the `TextFieldParser` is similar to iterating over a text file, while the `ReadFields` method to extract fields of text is similar to splitting the strings.</span></span>  
  
 <span data-ttu-id="9f25d-104">`TextFieldParser` Можно проанализировать два типа файлов: с разделителями либо поле фиксированной длины.</span><span class="sxs-lookup"><span data-stu-id="9f25d-104">The `TextFieldParser` can parse two types of files: delimited or fixed-width.</span></span> <span data-ttu-id="9f25d-105">Некоторые свойства, такие как `Delimiters` и `HasFieldsEnclosedInQuotes` важны только при работе с файлами с разделителями, тогда как `FieldWidths` свойство применяется только при работе с файлами фиксированной ширины.</span><span class="sxs-lookup"><span data-stu-id="9f25d-105">Some properties, such as `Delimiters` and `HasFieldsEnclosedInQuotes` are meaningful only when working with delimited files, while the `FieldWidths` property is meaningful only when working with fixed-width files.</span></span>  
  
 <span data-ttu-id="9f25d-106">В следующей таблице перечислены примеры задач, связанных с `Microsoft.VisualBasic.FileIO.TextFieldParser` объекта.</span><span class="sxs-lookup"><span data-stu-id="9f25d-106">The following table lists examples of tasks involving the `Microsoft.VisualBasic.FileIO.TextFieldParser` object.</span></span>  
  
|<span data-ttu-id="9f25d-107">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-107">To</span></span>|<span data-ttu-id="9f25d-108">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-108">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-109">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-109">Read from a delimited text file</span></span>|[<span data-ttu-id="9f25d-110">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-110">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9f25d-111">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-111">Read from a fixed-width text file</span></span>|[<span data-ttu-id="9f25d-112">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-112">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="9f25d-113">Чтение из текстового файла с несколькими форматами</span><span class="sxs-lookup"><span data-stu-id="9f25d-113">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="9f25d-114">Практическое руководство. Чтение из текстовых файлов различных форматов</span><span class="sxs-lookup"><span data-stu-id="9f25d-114">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-115">В этом примере производится анализ табуляцией текстового файла, `Bigfile`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-115">This example parses through a tab-delimited text file, `Bigfile`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#17)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-116">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-116">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser stream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="9f25d-117">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-117">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="9f25d-118">Поток, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-118">The stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-119">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-119">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-120">Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.</span><span class="sxs-lookup"><span data-stu-id="9f25d-120">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-121">Свойство <paramref name="stream" /> имеет значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-121">
              <paramref name="stream" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-122">
            <paramref name="stream" /> не может быть считан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-122">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.TextReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.TextReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::TextReader ^ reader);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.TextReader -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="9f25d-123">
            <see cref="T:System.IO.TextReader" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-123">
              <see cref="T:System.IO.TextReader" />.</span>
          </span>
          <span data-ttu-id="9f25d-124">Поток <see cref="T:System.IO.TextReader" />, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-124">The <see cref="T:System.IO.TextReader" /> stream to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-125">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-125">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-126">Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `reader` параметра.</span><span class="sxs-lookup"><span data-stu-id="9f25d-126">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `reader` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-127">Свойство <paramref name="reader" /> имеет значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-127">
              <paramref name="reader" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="9f25d-128">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-128">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="9f25d-129">Полный путь к файлу, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-129">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-130">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-130">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-131">Создает новый `TextFieldParser` объект для синтаксического анализа файла, указанного как `path` параметр.</span><span class="sxs-lookup"><span data-stu-id="9f25d-131">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-132">Параметр <paramref name="path" /> равен пустой строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-132">
              <paramref name="path" /> is an empty string.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="9f25d-133">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-133">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="9f25d-134">Поток, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-134">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="9f25d-135">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-135">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="9f25d-136">Кодировка символов, которая используется, если кодировка не определена из файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-136">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="9f25d-137">Значение по умолчанию — <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-137">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-138">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-138">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-139">Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.</span><span class="sxs-lookup"><span data-stu-id="9f25d-139">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9f25d-140">При компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-140">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-141">Параметр <paramref name="stream" /> или <paramref name="defaultEncoding" /> имеет значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-141">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-142">
            <paramref name="stream" /> не может быть считан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-142">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="9f25d-143">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-143">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="9f25d-144">Полный путь к файлу, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-144">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="9f25d-145">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-145">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="9f25d-146">Кодировка символов, которая используется, если кодировка не определена из файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-146">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="9f25d-147">Значение по умолчанию — <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-147">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-148">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-148">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-149">Создает новый `TextFieldParser` объект для синтаксического анализа файла, указанного как `path` параметр.</span><span class="sxs-lookup"><span data-stu-id="9f25d-149">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9f25d-150">При компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-150">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-151">
            <paramref name="path" /> является пустой строкой или <paramref name="defaultEncoding" /> равен <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-151">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="9f25d-152">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-152">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="9f25d-153">Поток, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-153">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="9f25d-154">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-154">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="9f25d-155">Кодировка символов, которая используется, если кодировка не определена из файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-155">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="9f25d-156">Значение по умолчанию — <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-156">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="9f25d-157">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-157">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="9f25d-158">Указывает, следует ли выполнять поиск меток порядка байтов с начала файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-158">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="9f25d-159">Значение по умолчанию — <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-159">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-160">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-160">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-161">Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.</span><span class="sxs-lookup"><span data-stu-id="9f25d-161">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="9f25d-162">Если `detectEncoding` параметр `True`, этот конструктор пытается определить кодировку, просмотрев первые три байта файла или потока.</span><span class="sxs-lookup"><span data-stu-id="9f25d-162">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="9f25d-163">Он автоматически распознает Юникод UTF-8, с обратным порядком байтов и текст в кодировке Юникод с обратным порядком байтов, если файл начинается с метки порядка следования байтов соответствующие.</span><span class="sxs-lookup"><span data-stu-id="9f25d-163">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="9f25d-164">В противном случае указана кодировка `defaultEncoding` используется.</span><span class="sxs-lookup"><span data-stu-id="9f25d-164">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9f25d-165">При компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-165">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-166">Параметр <paramref name="stream" /> или <paramref name="defaultEncoding" /> имеет значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-166">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-167">
            <paramref name="stream" /> не может быть считан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-167">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (string path, System.Text.Encoding defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string path, class System.Text.Encoding defaultEncoding, bool detectEncoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.String,System.Text.Encoding,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As String, defaultEncoding As Encoding, detectEncoding As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::String ^ path, System::Text::Encoding ^ defaultEncoding, bool detectEncoding);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : string * System.Text.Encoding * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (path, defaultEncoding, detectEncoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">
          <span data-ttu-id="9f25d-168">
            <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-168">
              <see langword="String" />.</span>
          </span>
          <span data-ttu-id="9f25d-169">Полный путь к файлу, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-169">The complete path of the file to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="9f25d-170">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-170">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="9f25d-171">Кодировка символов, которая используется, если кодировка не определена из файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-171">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="9f25d-172">Значение по умолчанию — <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-172">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="9f25d-173">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-173">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="9f25d-174">Указывает, следует ли выполнять поиск меток порядка байтов с начала файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-174">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="9f25d-175">Значение по умолчанию — <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-175">Default is <see langword="True" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-176">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-176">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-177">Создает новый `TextFieldParser` объект для синтаксического анализа файла, указанного как `path` параметр.</span><span class="sxs-lookup"><span data-stu-id="9f25d-177">Creates a new `TextFieldParser` object to parse the file specified by the `path` parameter.</span></span>  
  
 <span data-ttu-id="9f25d-178">Если `detectEncoding` параметр `True`, этот конструктор пытается определить кодировку, просмотрев первые три байта файла или потока.</span><span class="sxs-lookup"><span data-stu-id="9f25d-178">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="9f25d-179">Он автоматически распознает Юникод UTF-8, с обратным порядком байтов и текст в кодировке Юникод с обратным порядком байтов, если файл начинается с метки порядка следования байтов соответствующие.</span><span class="sxs-lookup"><span data-stu-id="9f25d-179">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="9f25d-180">В противном случае указана кодировка `defaultEncoding` используется.</span><span class="sxs-lookup"><span data-stu-id="9f25d-180">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9f25d-181">При компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-181">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-182">
            <paramref name="path" /> является пустой строкой или <paramref name="defaultEncoding" /> равен <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-182">
              <paramref name="path" /> is an empty string or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextFieldParser (System.IO.Stream stream, System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(class System.IO.Stream stream, class System.Text.Encoding defaultEncoding, bool detectEncoding, bool leaveOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextFieldParser(System::IO::Stream ^ stream, System::Text::Encoding ^ defaultEncoding, bool detectEncoding, bool leaveOpen);" />
      <MemberSignature Language="F#" Value="new Microsoft.VisualBasic.FileIO.TextFieldParser : System.IO.Stream * System.Text.Encoding * bool * bool -&gt; Microsoft.VisualBasic.FileIO.TextFieldParser" Usage="new Microsoft.VisualBasic.FileIO.TextFieldParser (stream, defaultEncoding, detectEncoding, leaveOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="defaultEncoding" Type="System.Text.Encoding" />
        <Parameter Name="detectEncoding" Type="System.Boolean" />
        <Parameter Name="leaveOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="stream">
          <span data-ttu-id="9f25d-183">
            <see cref="T:System.IO.Stream" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-183">
              <see cref="T:System.IO.Stream" />.</span>
          </span>
          <span data-ttu-id="9f25d-184">Поток, который необходимо проанализировать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-184">The stream to be parsed.</span>
          </span>
        </param>
        <param name="defaultEncoding">
          <span data-ttu-id="9f25d-185">
            <see cref="T:System.Text.Encoding" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-185">
              <see cref="T:System.Text.Encoding" />.</span>
          </span>
          <span data-ttu-id="9f25d-186">Кодировка символов, которая используется, если кодировка не определена из файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-186">The character encoding to use if encoding is not determined from file.</span>
          </span>
          <span data-ttu-id="9f25d-187">Значение по умолчанию — <see cref="P:System.Text.Encoding.UTF8" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-187">Default is <see cref="P:System.Text.Encoding.UTF8" />.</span>
          </span>
        </param>
        <param name="detectEncoding">
          <span data-ttu-id="9f25d-188">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-188">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="9f25d-189">Указывает, следует ли выполнять поиск меток порядка байтов с начала файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-189">Indicates whether to look for byte order marks at the beginning of the file.</span>
          </span>
          <span data-ttu-id="9f25d-190">Значение по умолчанию — <see langword="True" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-190">Default is <see langword="True" />.</span>
          </span>
        </param>
        <param name="leaveOpen">
          <span data-ttu-id="9f25d-191">
            <see langword="Boolean" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-191">
              <see langword="Boolean" />.</span>
          </span>
          <span data-ttu-id="9f25d-192">Указывает, оставить ли <c>stream</c> открытым после того, как объект <see langword="TextFieldParser" /> будет закрыт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-192">Indicates whether to leave <c>stream</c> open when the <see langword="TextFieldParser" /> object is closed.</span>
          </span>
          <span data-ttu-id="9f25d-193">Значение по умолчанию — <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-193">Default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-194">Инициализирует новый экземпляр класса <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-194">Initializes a new instance of the <see langword="TextFieldParser" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-195">Создает новый `TextFieldParser` объект, чтобы проанализировать файл или поток, который представлен `stream` параметра.</span><span class="sxs-lookup"><span data-stu-id="9f25d-195">Creates a new `TextFieldParser` object to parse the file or stream that is represented by the `stream` parameter.</span></span>  
  
 <span data-ttu-id="9f25d-196">Если `detectEncoding` параметр `True`, этот конструктор пытается определить кодировку, просмотрев первые три байта файла или потока.</span><span class="sxs-lookup"><span data-stu-id="9f25d-196">If the `detectEncoding` parameter is `True`, this constructor attempts to detect the encoding by looking at the first three bytes of the file or stream.</span></span> <span data-ttu-id="9f25d-197">Он автоматически распознает Юникод UTF-8, с обратным порядком байтов и текст в кодировке Юникод с обратным порядком байтов, если файл начинается с метки порядка следования байтов соответствующие.</span><span class="sxs-lookup"><span data-stu-id="9f25d-197">It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte-order marks.</span></span> <span data-ttu-id="9f25d-198">В противном случае указана кодировка `defaultEncoding` используется.</span><span class="sxs-lookup"><span data-stu-id="9f25d-198">Otherwise, the encoding specified by `defaultEncoding` is used.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9f25d-199">При компиляции с определенным параметром культуры набор символов и получить те же символы с параметром символы будет невозможно и может вызвать исключение, создаваемое исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-199">When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="9f25d-200">Параметр <paramref name="stream" /> или <paramref name="defaultEncoding" /> имеет значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-200">
              <paramref name="stream" /> or <paramref name="defaultEncoding" /> is <see langword="Nothing" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-201">
            <paramref name="stream" /> не может быть считан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-201">
              <paramref name="stream" /> cannot be read from.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="textFieldParser.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-202">Закрывает текущий объект <see langword="TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-202">Closes the current <see langword="TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9f25d-203">В этом примере закрывает `TextFieldParser.FileReader`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-203">This example closes the `TextFieldParser.FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CommentTokens">
      <MemberSignature Language="C#" Value="public string[] CommentTokens { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] CommentTokens" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberSignature Language="VB.NET" Value="Public Property CommentTokens As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ CommentTokens { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CommentTokens : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.CommentTokens" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-204">Определяет маркер комментария.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-204">Defines comment tokens.</span>
          </span>
          <span data-ttu-id="9f25d-205">Маркер комментария является последовательностью символов, которая при помещении в начале строки указывает, что данная строка является комментарием и не должна обрабатываться средством синтаксического анализа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-205">A comment token is a string that, when placed at the beginning of a line, indicates that the line is a comment and should be ignored by the parser.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-206">Строковый массив, содержащий все токены комментариев для объекта <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-206">A string array that contains all of the comment tokens for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-207">Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-207">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9f25d-208">Маркеры комментариев нулевой длины игнорируются.</span><span class="sxs-lookup"><span data-stu-id="9f25d-208">Zero-length comment tokens are ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-209">В этом примере указывает, что для `TextFieldParser`, `FileReader` учитываются строки, начинающиеся с одинарная кавычка (').</span><span class="sxs-lookup"><span data-stu-id="9f25d-209">This example specifies that for the `TextFieldParser`, `FileReader` lines beginning with a single quotation mark (') should be ignored.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-210">Токен комментария включает пробел.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-210">A comment token includes white space.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Delimiters">
      <MemberSignature Language="C#" Value="public string[] Delimiters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Delimiters" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberSignature Language="VB.NET" Value="Public Property Delimiters As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Delimiters { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Delimiters : string[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-211">Определяет разделители в текстовом файле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-211">Defines the delimiters for a text file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-212">Строковый массив, содержащий все разделители полей для объекта <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-212">A string array that contains all of the field delimiters for the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-213">Это свойство применяется только тогда, когда <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> свойству `FieldType.Delimited`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-213">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.Delimited`.</span></span>  
  
 <span data-ttu-id="9f25d-214">Определение разделителей для текстового файла также может быть выполнено с <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-214">Defining the delimiters for a text file can also be accomplished with the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters%2A> method.</span></span>  
  
 <span data-ttu-id="9f25d-215">В следующей таблице перечислены задачи с использованием пример `Delimiters` свойство.</span><span class="sxs-lookup"><span data-stu-id="9f25d-215">The following table lists an example of a task involving the `Delimiters` property.</span></span>  
  
|<span data-ttu-id="9f25d-216">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-216">To</span></span>|<span data-ttu-id="9f25d-217">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-217">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-218">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-218">Read from a delimited text file</span></span>|[<span data-ttu-id="9f25d-219">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-219">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-220">Указывает, что в этом примере разделитель для `TextFieldParser` объекта, `FileReader`, является запятая (,).</span><span class="sxs-lookup"><span data-stu-id="9f25d-220">This example specifies that the delimiter for the `TextFieldParser` object, `FileReader`, is a comma (,).</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-221">Значению разделителя устанавливается значение символа новой строки, пустой строке или <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-221">A delimiter value is set to a newline character, an empty string, or <see langword="Nothing" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-222">Освобождает ресурсы, используемые объектом <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-222">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose() = IDisposable::Dispose;" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="textFieldParser.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-223">Освобождает ресурсы, используемые объектом <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-223">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familynewslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="textFieldParser.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="9f25d-224">Логическое.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-224">Boolean.</span>
          </span>
          <span data-ttu-id="9f25d-225">Значение <see langword="True" /> соответствует освобождению управляемых и неуправляемых ресурсов; значение <see langword="False" /> соответствует освобождению только неуправляемых ресурсов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-225">
              <see langword="True" /> releases both managed and unmanaged resources; <see langword="False" /> releases only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-226">Освобождает ресурсы, используемые объектом <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-226">Releases resources used by the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EndOfData">
      <MemberSignature Language="C#" Value="public bool EndOfData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EndOfData" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndOfData As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EndOfData { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EndOfData : bool" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.EndOfData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-227">Возвращает <see langword="True" />, если между текущей позицией курсора и концом файла нет непустых строк, не являющихся комментариями.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-227">Returns <see langword="True" /> if there are no non-blank, non-comment lines between the current cursor position and the end of the file.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-228">Значение <see langword="True" />, если данных для чтения не осталось; в противном случае — значение <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-228">
              <see langword="True" /> if there is no more data to read; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-229">Это свойство может использоваться при чтении из файла для определения конца считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="9f25d-229">This property can be used when reading from files to determine the end of the data being read.</span></span>  
  
 <span data-ttu-id="9f25d-230">В следующей таблице перечислены примеры задач, связанных с `EndOfData` свойство.</span><span class="sxs-lookup"><span data-stu-id="9f25d-230">The following table lists examples of tasks involving the `EndOfData` property.</span></span>  
  
|<span data-ttu-id="9f25d-231">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-231">To</span></span>|<span data-ttu-id="9f25d-232">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-232">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-233">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-233">Read from a delimited file</span></span>|[<span data-ttu-id="9f25d-234">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-234">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9f25d-235">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-235">Read from a fixed-width file</span></span>|[<span data-ttu-id="9f25d-236">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-236">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-237">В этом примере используется `EndofData` свойство перебрать все поля в файле с `TextFieldReader`, `FileReader`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-237">This example uses the `EndofData` property to loop through all the fields in the file with the `TextFieldReader`, `FileReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLine">
      <MemberSignature Language="C#" Value="public string ErrorLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ErrorLine" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLine As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ErrorLine { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLine : string" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-238">Возвращает строку, вызвавшую последнее исключение <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-238">Returns the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-239">Строка, вызвавшая последнее исключение <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-239">The line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-240">Если не <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> исключений, возвращается пустая строка.</span><span class="sxs-lookup"><span data-stu-id="9f25d-240">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, an empty string is returned.</span></span>  
  
 <span data-ttu-id="9f25d-241"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> Свойство может использоваться для отображения номера строки, вызвавшей исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-241">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber%2A> property can be used to display the number of the line that caused the exception.</span></span>  
  
 <span data-ttu-id="9f25d-242">В следующей таблице перечислены примеры задач, связанных с `ErrorLine` свойство.</span><span class="sxs-lookup"><span data-stu-id="9f25d-242">The following table lists examples of tasks involving the `ErrorLine` property.</span></span>  
  
|<span data-ttu-id="9f25d-243">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-243">To</span></span>|<span data-ttu-id="9f25d-244">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-244">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-245">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-245">Read from a delimited file</span></span>|[<span data-ttu-id="9f25d-246">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-246">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9f25d-247">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-247">Read from a fixed-width file</span></span>|[<span data-ttu-id="9f25d-248">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-248">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-249">В этом примере используется `ErrorLine` свойство для отображения строки, вызвавшей текущего <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-249">This example uses the `ErrorLine` property to display the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ErrorLineNumber">
      <MemberSignature Language="C#" Value="public long ErrorLineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ErrorLineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ErrorLineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ErrorLineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.ErrorLineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-250">Возвращает номер строки, вызвавшей последнее исключение <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-250">Returns the number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-251">Номер строки, вызвавшей последнее исключение <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-251">The number of the line that caused the most recent <see cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException" /> exception.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-252">Если не <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> исключений, возвращается значение -1.</span><span class="sxs-lookup"><span data-stu-id="9f25d-252">If no <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exceptions have been thrown, -1 is returned.</span></span>  
  
 <span data-ttu-id="9f25d-253"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> Свойство может использоваться для отображения номера строки, вызвавшей исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-253">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.ErrorLine%2A> property can be used to display the number of the line that caused the exception.</span></span> <span data-ttu-id="9f25d-254">Пустые строки и комментарии не учитываются при определении номера строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-254">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
 <span data-ttu-id="9f25d-255">В следующей таблице перечислены примеры задач, связанных с `ErrorLineNumber` свойство.</span><span class="sxs-lookup"><span data-stu-id="9f25d-255">The following table lists examples of tasks involving the `ErrorLineNumber` property.</span></span>  
  
|<span data-ttu-id="9f25d-256">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-256">To</span></span>|<span data-ttu-id="9f25d-257">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-257">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-258">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-258">Read from a delimited file</span></span>|[<span data-ttu-id="9f25d-259">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-259">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9f25d-260">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-260">Read from a fixed-width file</span></span>|[<span data-ttu-id="9f25d-261">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-261">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-262">В этом примере используется `ErrorLineNumber` свойство для отображения строки, вызвавшей текущего расположения <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-262">This example uses the `ErrorLineNumber` property to display the location of the line causing the current <xref:Microsoft.VisualBasic.FileIO.MalformedLineException> exception.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="FieldWidths">
      <MemberSignature Language="C#" Value="public int[] FieldWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] FieldWidths" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberSignature Language="VB.NET" Value="Public Property FieldWidths As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ FieldWidths { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FieldWidths : int[] with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-263">Обозначает ширину каждого столбца в анализируемом текстовом файле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-263">Denotes the width of each column in the text file being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-264">Целочисленный массив, содержащий ширину каждого столбца в анализируемом текстовом файле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-264">An integer array that contains the width of each column in the text file that is being parsed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-265">Это свойство применяется только тогда, когда <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> свойству `FieldType.FixedWidth`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-265">This property is meaningful only if the <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType%2A> property is set to `FieldType.FixedWidth`.</span></span> <span data-ttu-id="9f25d-266">Если последний элемент массива меньше или равен нулю, предполагается, что поле является переменной ширины.</span><span class="sxs-lookup"><span data-stu-id="9f25d-266">If the last entry in the array is less than or equal to zero, the field is assumed to be of variable width.</span></span>  
  
 <span data-ttu-id="9f25d-267"><xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> Метод может также использоваться для задания ширины поля.</span><span class="sxs-lookup"><span data-stu-id="9f25d-267">The <xref:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths%2A> method can also be used to set field widths.</span></span>  
  
 <span data-ttu-id="9f25d-268">В следующей таблице перечислены примеры задач, связанных с `FieldWidths` свойство.</span><span class="sxs-lookup"><span data-stu-id="9f25d-268">The following table lists examples of tasks involving the `FieldWidths` property.</span></span>  
  
|<span data-ttu-id="9f25d-269">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-269">To</span></span>|<span data-ttu-id="9f25d-270">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-270">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-271">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-271">Read from a fixed-width text file</span></span>|[<span data-ttu-id="9f25d-272">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-272">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-273">Этот пример считывает файл `ParserText.txt`, задает ширину столбцов; первый столбец имеет ширину 5 символов, второй — 10, третий — 11 и четвертый имеет переменную ширину</span><span class="sxs-lookup"><span data-stu-id="9f25d-273">This example reads the file `ParserText.txt`, specifying the widths; the first column is 5 characters wide, the second is 10, the third is 11, and the fourth is of variable width</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-274">Значение ширины в любом месте, отличном от последней записи массива, меньше или равно нулю.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-274">A width value in any location other than the last entry of the array is less than or equal to zero.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TextFieldParser ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TextFieldParser ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="textFieldParser.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-275">Позволяет объекту <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> попытаться освободить ресурсы и выполнить другие завершающие операции, прежде чем объект будет уничтожен в процессе сборки мусора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-275">Allows the <see cref="T:Microsoft.VisualBasic.FileIO.TextFieldParser" /> object to attempt to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="HasFieldsEnclosedInQuotes">
      <MemberSignature Language="C#" Value="public bool HasFieldsEnclosedInQuotes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberSignature Language="VB.NET" Value="Public Property HasFieldsEnclosedInQuotes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFieldsEnclosedInQuotes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HasFieldsEnclosedInQuotes : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.HasFieldsEnclosedInQuotes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-276">При анализе файла с разделителями обозначает, заключены ли поля в кавычки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-276">Denotes whether fields are enclosed in quotation marks when a delimited file is being parsed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-277">Значение <see langword="True" />, если поля заключены в кавычки; в противном случае — значение <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-277">
              <see langword="True" /> if fields are enclosed in quotation marks; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-278">Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-278">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9f25d-279">Если свойство `True`, предполагается, что поля должны быть заключены в кавычки (» «) и могут содержать символ конца строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-279">If the property is `True`, the parser assumes that fields are enclosed in quotation marks (" ") and may contain line endings.</span></span>  
  
 <span data-ttu-id="9f25d-280">Если поле заключено в кавычки, например, `abc, "field2a,field2b", field3` и это свойство имеет `True`, затем весь текст, заключенный в кавычки будет возвращаться как есть; в этом примере вернет `abc|field2a,field2b|field3`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-280">If a field is enclosed in quotation marks, for example, `abc, "field2a,field2b", field3` and this property is `True`, then all text enclosed in quotation marks will be returned as is; this example would return `abc|field2a,field2b|field3`.</span></span> <span data-ttu-id="9f25d-281">Присвоение этому свойству `False` приведет к тому, в этом примере возврата `abc|"field2a|field2b"|field3`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-281">Setting this property to `False` would make this example return `abc|"field2a|field2b"|field3`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-282">В этом примере устанавливается `HasFieldsEnclosedInQuotes` свойства `True` для `myReader`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-282">This example sets the `HasFieldsEnclosedInQuotes` property to `True` for `myReader`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#18)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public long LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 LineNumber" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long LineNumber { long get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int64" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.LineNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-283">Возвращает номер текущей строки или значение "–1", если в потоке не осталось символов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-283">Returns the current line number, or returns -1 if no more characters are available in the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-284">Текущий номер строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-284">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-285">Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-285">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9f25d-286">Пустые строки и комментарии не учитываются при определении номера строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-286">Blank lines and comments are not ignored when determining the line number.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-287">В этом примере выполняется поиск имени «Иванов» в текстовый файл и сообщает, какие оно встретилось.</span><span class="sxs-lookup"><span data-stu-id="9f25d-287">This example searches for the name "Jones" in the text file and reports what line(s) it occurs on.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="PeekChars">
      <MemberSignature Language="C#" Value="public string PeekChars (int numberOfChars);" />
      <MemberSignature Language="ILAsm" Value=".method public instance string PeekChars(int32 numberOfChars) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.PeekChars(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function PeekChars (numberOfChars As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ PeekChars(int numberOfChars);" />
      <MemberSignature Language="F#" Value="member this.PeekChars : int -&gt; string" Usage="textFieldParser.PeekChars numberOfChars" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="numberOfChars" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="numberOfChars">
          <span data-ttu-id="9f25d-288">
            <see langword="Int32" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-288">
              <see langword="Int32" />.</span>
          </span>
          <span data-ttu-id="9f25d-289">Количество символов, чтение которых необходимо выполнить.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-289">Number of characters to read.</span>
          </span>
          <span data-ttu-id="9f25d-290">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-290">Required.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-291">Считывает указанное число символов, не перемещая курсор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-291">Reads the specified number of characters without advancing the cursor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f25d-292">Строка, содержащая указанное количество прочитанных символов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-292">A string that contains the specified number of characters read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-293">`numberOfChars` Значение должно быть меньше, чем общее число символов в строке.</span><span class="sxs-lookup"><span data-stu-id="9f25d-293">The `numberOfChars` value must be less than the total number of characters in the line.</span></span> <span data-ttu-id="9f25d-294">Если это не так, возвращает строку `PeekChars` будет усечен до длины строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-294">If it is not, the string returned by `PeekChars` will be truncated to the length of the line.</span></span>  
  
 <span data-ttu-id="9f25d-295">Пустые строки не учитываются.</span><span class="sxs-lookup"><span data-stu-id="9f25d-295">Blank lines are ignored.</span></span>  
  
 <span data-ttu-id="9f25d-296">Символы конца строки не возвращаются.</span><span class="sxs-lookup"><span data-stu-id="9f25d-296">End-of-line characters are not returned.</span></span>  
  
 <span data-ttu-id="9f25d-297">`PeekChars` Метод не выполняет синтаксический анализ; символ конца строки в поле с разделителями интерпретируется как фактический конец строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-297">The `PeekChars` method performs no parsing; an end-of- line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="9f25d-298">В следующей таблице перечислены примеры задач, связанных с `PeekChars` метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-298">The following table lists examples of tasks involving the `PeekChars` method.</span></span>  
  
|<span data-ttu-id="9f25d-299">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-299">To</span></span>|<span data-ttu-id="9f25d-300">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-300">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-301">Определить формат поля перед его анализом</span><span class="sxs-lookup"><span data-stu-id="9f25d-301">Determine the format of a field before parsing it</span></span>|[<span data-ttu-id="9f25d-302">Практическое руководство. Чтение из текстовых файлов различных форматов</span><span class="sxs-lookup"><span data-stu-id="9f25d-302">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-303">В этом примере используется `PeekChars` для поиска конца данных и прекращения анализа файла в этот момент.</span><span class="sxs-lookup"><span data-stu-id="9f25d-303">This example uses `PeekChars` to find the end of the data and stop parsing the file at that point.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-304">Значение параметра <paramref name="numberOfChars" /> меньше 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-304">
              <paramref name="numberOfChars" /> is less than 0.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ReadFields">
      <MemberSignature Language="C#" Value="public string[] ReadFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string[] ReadFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadFields () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ ReadFields();" />
      <MemberSignature Language="F#" Value="member this.ReadFields : unit -&gt; string[]" Usage="textFieldParser.ReadFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-305">Считывает все поля в текущей строке, возвращает их в виде массива строк и перемещает курсор на следующую строку, содержащую данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-305">Reads all fields on the current line, returns them as an array of strings, and advances the cursor to the next line containing data.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f25d-306">Массив строк, который содержит значения полей для текущей строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-306">An array of strings that contains field values for the current line.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-307">Чтобы разрешить пользователям выполнить синтаксический анализ текстовых файлов в различных форматах, `ReadFields` метод проверяет значения `TextFieldType`, `Delimiters`, и `FieldWidths`, если они заданы, при каждом вызове.</span><span class="sxs-lookup"><span data-stu-id="9f25d-307">In order to allow users to parse text files in multiple formats, the `ReadFields` method examines the values of `TextFieldType`, `Delimiters`, and `FieldWidths`, if they are specified, each time it is called.</span></span> <span data-ttu-id="9f25d-308">Пользователям необходимо правильно настроить `TextFieldType` и `FieldWidths` или `Delimiters` необходимые свойства.</span><span class="sxs-lookup"><span data-stu-id="9f25d-308">Users need to correctly configure the `TextFieldType` and `FieldWidths` or `Delimiters` properties, as appropriate.</span></span> <span data-ttu-id="9f25d-309">Если `TextFieldType` задано значение `Delimited`, и `Delimiters` не задано, или если `TextFieldType` равно `FixedWidth` и `FieldWidths`, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-309">If `TextFieldType` is set to `Delimited`, and `Delimiters` is not set, or if `TextFieldType` is set to `FixedWidth` and `FieldWidths`, an exception is thrown.</span></span>  
  
 <span data-ttu-id="9f25d-310">Если `ReadFields` обнаруживает пустые строки, они пропускаются, и возвращается следующей непустой строкой.</span><span class="sxs-lookup"><span data-stu-id="9f25d-310">If `ReadFields` encounters blank lines, they are skipped and the next non-blank line is returned.</span></span>  
  
 <span data-ttu-id="9f25d-311">Если `ReadFields` метод не может проанализировать текущей строки, он вызывает исключение и не переходит на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="9f25d-311">If the `ReadFields` method cannot parse the current line, it raises an exception and does not move to the next line.</span></span> <span data-ttu-id="9f25d-312">Благодаря этому приложение может попытаться выполнить анализ строки еще раз.</span><span class="sxs-lookup"><span data-stu-id="9f25d-312">This enables your application to attempt to parse the line again.</span></span>  
  
 <span data-ttu-id="9f25d-313">В следующей таблице перечислены примеры задач, связанных с `ReadFields` метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-313">The following table lists examples of tasks involving the `ReadFields` method.</span></span>  
  
|<span data-ttu-id="9f25d-314">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-314">To</span></span>|<span data-ttu-id="9f25d-315">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-315">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-316">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-316">Read from a delimited file</span></span>|[<span data-ttu-id="9f25d-317">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-317">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9f25d-318">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-318">Read from a fixed-width file</span></span>|[<span data-ttu-id="9f25d-319">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-319">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-320">В этом примере используется `ReadFields` метод для чтения из файла с разделителями запятыми `ParserText.txt`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-320">This example uses the `ReadFields` method to read from the comma-delimited file `ParserText.txt`.</span></span> <span data-ttu-id="9f25d-321">В примере выполняется запись поля для `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-321">The example writes the fields to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:Microsoft.VisualBasic.FileIO.MalformedLineException">
          <span data-ttu-id="9f25d-322">Невозможно выполнить синтаксический анализ поля с помощью указанного формата.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-322">A field cannot be parsed by using the specified format.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="9f25d-323">Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-323">Associated enumeration: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</span>
          </span>
        </permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="9f25d-324">Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-324">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />.</span>
          </span>
        </permission>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.FieldWidths" />
        <altmember cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.Delimiters" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="ReadLine">
      <MemberSignature Language="C#" Value="public string ReadLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadLine () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadLine();" />
      <MemberSignature Language="F#" Value="member this.ReadLine : unit -&gt; string" Usage="textFieldParser.ReadLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-325">Возвращает текущую строку в качестве строки и перемещает курсор к следующей строке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-325">Returns the current line as a string and advances the cursor to the next line.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f25d-326">Текущая строка из файла или потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-326">The current line from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-327">`ReadLine` Метод не выполняет синтаксический анализ; символ конца строки в поле с разделителями интерпретируется как фактический конец строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-327">The `ReadLine` method performs no parsing; an end-of-line character within a delimited field is interpreted as the actual end of the line.</span></span>  
  
 <span data-ttu-id="9f25d-328">`Nothing` возвращается, если достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="9f25d-328">`Nothing` is returned if the end of the file is reached.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-329">Этот пример считывает файл `ParserText.txt` и записывает его в `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-329">This example reads through the file `ParserText.txt` and writes it to `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#15)]  
  
 <span data-ttu-id="9f25d-330">Если `Testfile.txt` не существует, она создается в `WriteAllText` метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-330">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 <span data-ttu-id="9f25d-331">В этом примере поля записываются в одну строку. для каждой строки было отобразить на отдельной строке в файле назначения `VbCrLf` должен быть добавлен знак в конце каждой строки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-331">This example writes the fields as a single string; to have each line display on its own line in the destination file, a `VbCrLf` character should be appended at the end of each line.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      </Docs>
    </Member>
    <Member MemberName="ReadToEnd">
      <MemberSignature Language="C#" Value="public string ReadToEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance string ReadToEnd() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadToEnd" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadToEnd () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ReadToEnd();" />
      <MemberSignature Language="F#" Value="member this.ReadToEnd : unit -&gt; string" Usage="textFieldParser.ReadToEnd " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-332">Считывает оставшуюся часть текстового файла и возвращает ее в виде строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-332">Reads the remainder of the text file and returns it as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="9f25d-333">Оставшийся текст из файла или потока.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-333">The remaining text from the file or stream.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-334">Это дополнительный элемент. не отображается в IntelliSense, пока не нажать **все** вкладки.</span><span class="sxs-lookup"><span data-stu-id="9f25d-334">This is an advanced member; it does not show in IntelliSense unless you click the **All** tab.</span></span>  
  
 <span data-ttu-id="9f25d-335">Если больше нечего для чтения, так как был достигнут конец файла, `Nothing` возвращается.</span><span class="sxs-lookup"><span data-stu-id="9f25d-335">If there is nothing more to read because the end of the file has been reached, `Nothing` is returned.</span></span>  
  
 <span data-ttu-id="9f25d-336">`ReadToEnd` Метод не пропускает пустые строки и комментарии.</span><span class="sxs-lookup"><span data-stu-id="9f25d-336">The `ReadToEnd` method does not ignore blank lines and comments.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-337">В этом примере используется `ReadToEnd` метод для чтения всего файла `ParserText.txt` и запись в файл `Testfile.txt`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-337">This example uses the `ReadToEnd` method to read the entire file `ParserText.txt` and write it to the file `Testfile.txt`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#10)]  
  
 <span data-ttu-id="9f25d-338">Если `Testfile.txt` не существует, она создается в `WriteAllText` метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-338">If `Testfile.txt` does not exist, it is created by the `WriteAllText` method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadFields" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.ReadLine" />
      </Docs>
    </Member>
    <Member MemberName="SetDelimiters">
      <MemberSignature Language="C#" Value="public void SetDelimiters (params string[] delimiters);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetDelimiters(string[] delimiters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetDelimiters (ParamArray delimiters As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetDelimiters(... cli::array &lt;System::String ^&gt; ^ delimiters);" />
      <MemberSignature Language="F#" Value="member this.SetDelimiters : string[] -&gt; unit" Usage="textFieldParser.SetDelimiters delimiters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delimiters" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delimiters">
          <span data-ttu-id="9f25d-339">Массив типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-339">Array of type <see langword="String" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-340">Задает указанные значения разделителя для чтения и устанавливает типы полей в <see langword="Delimited" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-340">Sets the delimiters for the reader to the specified values, and sets the field type to <see langword="Delimited" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-341">Существующее содержимое `Delimiters` свойство очищается, когда задается этот метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-341">The existing contents of the `Delimiters` property are cleared when this method is set.</span></span>  
  
 <span data-ttu-id="9f25d-342">Этот метод предоставляет способ для задания разделителей без создания массива.</span><span class="sxs-lookup"><span data-stu-id="9f25d-342">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="9f25d-343">В следующей таблице перечислены задачи с использованием пример `SetDelimiters` метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-343">The following table lists an example of a task involving the `SetDelimiters` method.</span></span>  
  
|<span data-ttu-id="9f25d-344">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-344">To</span></span>|<span data-ttu-id="9f25d-345">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-345">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-346">Анализ текстового файла</span><span class="sxs-lookup"><span data-stu-id="9f25d-346">Parse a text file</span></span>|[<span data-ttu-id="9f25d-347">Анализ текстовых файлов с помощью объекта TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="9f25d-347">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-348">В этом примере открывается анализатор текстового поля и определяется в качестве разделителя `vbTab`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-348">This example opens a text field parser and defines the delimiter as `vbTab`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#4)]  
  
 <span data-ttu-id="9f25d-349">Замените пути `C:\logs\test.log` путь и имя файла, который необходимо проанализировать.</span><span class="sxs-lookup"><span data-stu-id="9f25d-349">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="9f25d-350">Разделитель имеет нулевую длину.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-350">A delimiter is zero-length.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      </Docs>
    </Member>
    <Member MemberName="SetFieldWidths">
      <MemberSignature Language="C#" Value="public void SetFieldWidths (params int[] fieldWidths);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void SetFieldWidths(int32[] fieldWidths) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetFieldWidths(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetFieldWidths (ParamArray fieldWidths As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetFieldWidths(... cli::array &lt;int&gt; ^ fieldWidths);" />
      <MemberSignature Language="F#" Value="member this.SetFieldWidths : int[] -&gt; unit" Usage="textFieldParser.SetFieldWidths fieldWidths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fieldWidths" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fieldWidths">
          <span data-ttu-id="9f25d-351">Массив типа <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-351">Array of <see langword="Integer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="9f25d-352">Задает указанные значения разделителя для чтения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-352">Sets the delimiters for the reader to the specified values.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-353">Существующее содержимое `Delimiters` свойство очищается, когда это имеет значение.</span><span class="sxs-lookup"><span data-stu-id="9f25d-353">The existing contents of the `Delimiters` property are cleared when this is set.</span></span>  
  
 <span data-ttu-id="9f25d-354">Этот метод предоставляет способ для задания разделителей без создания массива.</span><span class="sxs-lookup"><span data-stu-id="9f25d-354">This method provides a way to set delimiters without creating an array.</span></span>  
  
 <span data-ttu-id="9f25d-355">В следующей таблице перечислены примеры задач, включающие `SetFieldWidths` метод.</span><span class="sxs-lookup"><span data-stu-id="9f25d-355">The following table lists example of tasks involving the `SetFieldWidths` method.</span></span>  
  
|<span data-ttu-id="9f25d-356">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-356">To</span></span>|<span data-ttu-id="9f25d-357">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-357">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-358">Анализ текстового файла.</span><span class="sxs-lookup"><span data-stu-id="9f25d-358">Parse a text file.</span></span>|[<span data-ttu-id="9f25d-359">Анализ текстовых файлов с помощью объекта TextFieldParser</span><span class="sxs-lookup"><span data-stu-id="9f25d-359">Parsing Text Files with the TextFieldParser Object</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/parsing-text-files-with-the-textfieldparser-object.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-360">В этом примере открывается анализатор текстового поля и определяет ширину поля как `5`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-360">This example opens a text-field parser and defines the field width as `5`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#12)]  
  
 <span data-ttu-id="9f25d-361">Замените пути `C:\logs\test.log` путь и имя файла, который необходимо проанализировать.</span><span class="sxs-lookup"><span data-stu-id="9f25d-361">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 <span data-ttu-id="9f25d-362">В следующем примере открывается анализатор текстового поля и определяет ширину поля как `5`, `10`и переменной.</span><span class="sxs-lookup"><span data-stu-id="9f25d-362">The following example opens a text-field parser and defines the field widths as `5`, `10`, and variable.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#13)]  
  
 <span data-ttu-id="9f25d-363">Замените пути `C:\logs\test.log` путь и имя файла, который необходимо проанализировать.</span><span class="sxs-lookup"><span data-stu-id="9f25d-363">Replace the path `C:\logs\test.log` with the path and name of the file you wish to parse.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileIO.TextFieldParser.SetDelimiters(System.String[])" />
      </Docs>
    </Member>
    <Member MemberName="TextFieldType">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.FileIO.FieldType TextFieldType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Microsoft.VisualBasic.FileIO.FieldType TextFieldType" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberSignature Language="VB.NET" Value="Public Property TextFieldType As FieldType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::FileIO::FieldType TextFieldType { Microsoft::VisualBasic::FileIO::FieldType get(); void set(Microsoft::VisualBasic::FileIO::FieldType value); };" />
      <MemberSignature Language="F#" Value="member this.TextFieldType : Microsoft.VisualBasic.FileIO.FieldType with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileIO.FieldType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-364">Указывает, является ли анализируемый файл файлом с разделителями или файлом с полями фиксированного размера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-364">Indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-365">Значение <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" />, которое указывает, является ли анализируемый файл файлом с разделителями или файлом с полями фиксированного размера.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-365">A <see cref="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TextFieldType" /> value that indicates whether the file to be parsed is delimited or fixed-width.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-366">В качестве разделителя по умолчанию значение этого свойства.</span><span class="sxs-lookup"><span data-stu-id="9f25d-366">The default value of this property is delimited.</span></span>  
  
 <span data-ttu-id="9f25d-367">В следующей таблице перечислены примеры задач, связанных с `TextFieldType` свойство.</span><span class="sxs-lookup"><span data-stu-id="9f25d-367">The following table lists examples of tasks involving the `TextFieldType` property.</span></span>  
  
|<span data-ttu-id="9f25d-368">Кому</span><span class="sxs-lookup"><span data-stu-id="9f25d-368">To</span></span>|<span data-ttu-id="9f25d-369">См.</span><span class="sxs-lookup"><span data-stu-id="9f25d-369">See</span></span>|  
|--------|---------|  
|<span data-ttu-id="9f25d-370">Чтение из файла с разделителями</span><span class="sxs-lookup"><span data-stu-id="9f25d-370">Read from a delimited text file</span></span>|[<span data-ttu-id="9f25d-371">Практическое руководство. Чтение из текстовых файлов с разделителями-запятыми</span><span class="sxs-lookup"><span data-stu-id="9f25d-371">How to: Read From Comma-Delimited Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-comma-delimited-text-files.md)|  
|<span data-ttu-id="9f25d-372">Чтение из файла фиксированной ширины</span><span class="sxs-lookup"><span data-stu-id="9f25d-372">Read from a fixed-width text file</span></span>|[<span data-ttu-id="9f25d-373">Практическое руководство. Чтение из текстовых файлов с полями фиксированного размера</span><span class="sxs-lookup"><span data-stu-id="9f25d-373">How to: Read From Fixed-width Text Files</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-fixed-width-text-files.md)|  
|<span data-ttu-id="9f25d-374">Чтение из текстового файла с несколькими форматами</span><span class="sxs-lookup"><span data-stu-id="9f25d-374">Read from a text file with multiple formats</span></span>|[<span data-ttu-id="9f25d-375">Практическое руководство. Чтение из текстовых файлов различных форматов</span><span class="sxs-lookup"><span data-stu-id="9f25d-375">How to: Read From Text Files with Multiple Formats</span></span>](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-from-text-files-with-multiple-formats.md)|  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-376">В этом примере создается `TextFieldParser`, `FileReader`и указывает, что с разделителями.</span><span class="sxs-lookup"><span data-stu-id="9f25d-376">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is delimited.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#19)]  
  
 <span data-ttu-id="9f25d-377">В этом примере создается `TextFieldParser`, `FileReader`и указывает, что он является фиксированной ширины.</span><span class="sxs-lookup"><span data-stu-id="9f25d-377">This example creates a `TextFieldParser`, `FileReader`, and specifies that it is fixed-width.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FieldType" />
      </Docs>
    </Member>
    <Member MemberName="TrimWhiteSpace">
      <MemberSignature Language="C#" Value="public bool TrimWhiteSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TrimWhiteSpace" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property TrimWhiteSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TrimWhiteSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TrimWhiteSpace : bool with get, set" Usage="Microsoft.VisualBasic.FileIO.TextFieldParser.TrimWhiteSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="9f25d-378">Указывает, нужно ли удалять начальные и конечные пробелы из значений поля.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-378">Indicates whether leading and trailing white space should be trimmed from field values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="9f25d-379">Значение <see langword="True" />, если следует удалять начальные и конечные пробелы из значений поля; в противном случае — значение <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="9f25d-379">
              <see langword="True" /> if leading and trailing white space should be trimmed from field values; otherwise, <see langword="False" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9f25d-380">Значение по умолчанию для этого свойства — `True`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-380">The default value for this property is `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9f25d-381">В этом примере создается `TextFieldParser`, `FileReader`и задает `TrimWhiteSpace` свойства `True`.</span><span class="sxs-lookup"><span data-stu-id="9f25d-381">This example creates a `TextFieldParser`, `FileReader`, and sets the `TrimWhiteSpace` property to `True`.</span></span>  
  
 [!code-vb[VbVbalrTextFieldParser#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrTextFieldParser/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileIO.FileSystem.OpenTextFieldParser(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>