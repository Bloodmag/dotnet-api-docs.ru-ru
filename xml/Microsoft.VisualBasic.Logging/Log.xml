<Type Name="Log" FullName="Microsoft.VisualBasic.Logging.Log">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="9abe430fefcc00687291bf834609d4d2b5b5d808" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30351258" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Log" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Log extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Logging.Log" />
  <TypeSignature Language="VB.NET" Value="Public Class Log" />
  <TypeSignature Language="C++ CLI" Value="public ref class Log" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет свойство и методы для записи сведений о событиях и исключениях в прослушиватели журнала приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `My.Application.Log` Объект предоставляет простую точку входа для доступа к содержимому из [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]ведение журнала служб. `WriteEntry` И `WriteException` методы записи сообщений в журнал приложения. Прослушиватели могут быть настроены в файле конфигурации приложения. Дополнительные сведения см. в разделе [Пошаговое руководство: изменение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-changing-where-my-application-log-writes-information.md) и [работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 `My.Application.Log` Объект доступен только для клиентских приложений. Веб-приложения, используйте `My.Log`. Дополнительные сведения см. в разделе <xref:Microsoft.VisualBasic.Logging.AspLog>.  
  
 В следующей таблице перечислены примеры задач, связанных с `My.Application.Log` объекта.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений о событиях в журнал приложения|[Практическое руководство. Запись сообщений в журнал](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Запись информации об исключении в журнал приложения|[Практическое руководство. Запись в журнал сведений об исключениях](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Определить, куда `My.Application.Log` записывает сведения о|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
   
  
## Examples  
 В этом примере показано использование метода `My.Application.Log.WriteEntry` для записи в журнал данных трассировки. Дополнительные сведения см. в разделе [как: запись сообщений журнала](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Log (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Log(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <see cref="T:System.String" />. Имя для объекта свойства <see cref="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:Microsoft.VisualBasic.Logging.Log" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFileLogWriter">
      <MemberSignature Language="C#" Value="public Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.VisualBasic.Logging.FileLogTraceListener DefaultFileLogWriter" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.DefaultFileLogWriter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultFileLogWriter As FileLogTraceListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Microsoft::VisualBasic::Logging::FileLogTraceListener ^ DefaultFileLogWriter { Microsoft::VisualBasic::Logging::FileLogTraceListener ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.Logging.FileLogTraceListener</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />, который является базовым для объекта <see langword="Log" />.</summary>
        <value>Возвращает объект <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />, который является базовым для объекта <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство можно использовать для определения текущей конфигурации <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> объекта.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="InitializeWithDefaultsSinceNoConfigExists">
      <MemberSignature Language="C#" Value="protected internal virtual void InitializeWithDefaultsSinceNoConfigExists ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblynewslot virtual instance void InitializeWithDefaultsSinceNoConfigExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.InitializeWithDefaultsSinceNoConfigExists" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub InitializeWithDefaultsSinceNoConfigExists ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void InitializeWithDefaultsSinceNoConfigExists();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый объект <see cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" /> и добавляет его в коллекцию <see cref="P:System.Diagnostics.TraceSource.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод создает новый <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener>, устанавливает его имени `FileLog`и настраивает его для записи сообщений с уровнем серьезности <xref:System.Diagnostics.SourceLevels.Information> и более поздней версии. Новый <xref:Microsoft.VisualBasic.Logging.FileLogTraceListener> объект затем добавляется <xref:System.Diagnostics.TraceSource.Listeners%2A> коллекции.  
  
 <xref:Microsoft.VisualBasic.Logging.Log.%23ctor%2A> Вызывает метод, если <xref:Microsoft.VisualBasic.Logging.Log.TraceSource%2A> свойства не был настроен. Источник трассировки можно настроить в файле конфигурации приложения.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Logging.FileLogTraceListener" />
      </Docs>
    </Member>
    <Member MemberName="TraceSource">
      <MemberSignature Language="C#" Value="public System.Diagnostics.TraceSource TraceSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.TraceSource TraceSource" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Logging.Log.TraceSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TraceSource As TraceSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::TraceSource ^ TraceSource { System::Diagnostics::TraceSource ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Diagnostics.TraceSource" />, который является базовым для объекта <see langword="Log" />.</summary>
        <value>Возвращает объект <see cref="T:System.Diagnostics.TraceSource" />, который является базовым для объекта <see langword="Log" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство можно использовать для определения текущей конфигурации `Log` объекта.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Это дополнительный элемент. отображается в IntelliSense, если не выбрана **все** вкладки.  
  
 В следующей таблице перечислены задачи с использованием пример `TraceSource` свойство.  
  
|Кому|См.|  
|--------|---------|  
|Получение сведений о каждом из `Log` прослушивателей журнала объекта.|[Устранение неполадок, связанных с прослушивателями журнала](~/docs/visual-basic/developing-apps/programming/log-info/troubleshooting-log-listeners.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.TraceSource" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сообщение в прослушиватели журнала приложения.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Обязательно. Сообщение для записи в журнал. Если <c>message</c> имеет значение <see langword="Nothing" />, то используется пустая строка.</param>
        <summary>Записывает сообщение в прослушиватели журнала приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Метод записывает сообщение в журнал событий приложения.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Чтобы узнать, какой журнал получают прослушиватели `WriteEntry` сообщения метода в разделе [Пошаговое руководство: определение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Прослушиватели журнала по умолчанию можно изменить. Дополнительные сведения см. в разделе [Работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Для перегрузок, которые не принимают `id` аргумент, `id` записи журнала определяется в следующей таблице.  
  
|`severity`|По умолчанию `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 В следующей таблице перечислены примеры задач, связанных с `WriteEntry` метод.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений о событиях в журнал приложения|[Практическое руководство. Запись сообщений в журнал](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Определить, куда `Log` записывает сведения о|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
   
  
## Examples  
 В этом примере показано использование метода `My.Application.Log.WriteEntry` для записи в журнал данных трассировки. Дополнительные сведения см. в разделе [как: запись сообщений журнала](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Данный пример кода может выполняться только в клиентском приложении. Изменение `My.Application.Log.WriteEntry` для `My.Log.WriteEntry` для веб-приложений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Метод вызван кодом с частичным доверием, но запись в прослушиватель журнала событий требует полного доверия.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
      </Parameters>
      <Docs>
        <param name="message">Обязательно. Сообщение для записи в журнал. Если <c>message</c> имеет значение <see langword="Nothing" />, то используется пустая строка.</param>
        <param name="severity">Тип сообщения. По умолчанию — <see langword="TraceEventType.Information" />.</param>
        <summary>Записывает сообщение в прослушиватели журнала приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Метод записывает сообщение в журнал событий приложения.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Чтобы узнать, какой журнал получают прослушиватели `WriteEntry` сообщения метода в разделе [Пошаговое руководство: определение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Прослушиватели журнала по умолчанию можно изменить. Дополнительные сведения см. в разделе [Работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Для перегрузок, которые не принимают `id` аргумент, `id` записи журнала определяется в следующей таблице.  
  
|`severity`|По умолчанию `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 В следующей таблице перечислены примеры задач, связанных с `WriteEntry` метод.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений о событиях в журнал приложения|[Практическое руководство. Запись сообщений в журнал](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Определить, куда `Log` записывает сведения о|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
   
  
## Examples  
 В этом примере показано использование метода `My.Application.Log.WriteEntry` для записи в журнал данных трассировки. Дополнительные сведения см. в разделе [как: запись сообщений журнала](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Данный пример кода может выполняться только в клиентском приложении. Изменение `My.Application.Log.WriteEntry` для `My.Log.WriteEntry` для веб-приложений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Тип сообщения отличается от типа значений перечисления <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Метод вызван кодом с частичным доверием, но запись в прослушиватель журнала событий требует полного доверия.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.TraceEventType severity, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteEntry(string message, valuetype System.Diagnostics.TraceEventType severity, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteEntry(System.String,System.Diagnostics.TraceEventType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, severity As TraceEventType, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::TraceEventType severity, int id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Обязательно. Сообщение для записи в журнал. Если <c>message</c> имеет значение <see langword="Nothing" />, то используется пустая строка.</param>
        <param name="severity">Тип сообщения. По умолчанию — <see langword="TraceEventType.Information" />.</param>
        <param name="id">Идентификатор сообщения, обычно используемый для корреляции. По умолчанию связан с <c>entryType</c>, как описано в таблице.</param>
        <summary>Записывает сообщение в прослушиватели журнала приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteEntry` Метод записывает сообщение в журнал событий приложения.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Чтобы узнать, какой журнал получают прослушиватели `WriteEntry` сообщения метода в разделе [Пошаговое руководство: определение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Прослушиватели журнала по умолчанию можно изменить. Дополнительные сведения см. в разделе [Работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Для перегрузок, которые не принимают `id` аргумент, `id` записи журнала определяется в следующей таблице.  
  
|`severity`|По умолчанию `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 В следующей таблице перечислены примеры задач, связанных с `WriteEntry` метод.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений о событиях в журнал приложения|[Практическое руководство. Запись сообщений в журнал](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md)|  
|Определить, куда `Log` записывает сведения о|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
   
  
## Examples  
 В этом примере показано использование метода `My.Application.Log.WriteEntry` для записи в журнал данных трассировки. Дополнительные сведения см. в разделе [как: запись сообщений журнала](~/docs/visual-basic/developing-apps/programming/log-info/how-to-write-log-messages.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#11)]  
  
 Данный пример кода может выполняться только в клиентском приложении. Изменение `My.Application.Log.WriteEntry` для `My.Log.WriteEntry` для веб-приложений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Тип сообщения отличается от типа значений перечисления <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Метод вызван кодом с частичным доверием, но запись в прослушиватель журнала событий требует полного доверия.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteException">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сведения об исключении в прослушиватели журнала приложения.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="ex">Обязательно. Исключение, подлежащее записи в журнал.</param>
        <summary>Записывает сведения об исключении в прослушиватели журнала приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Метод записывает сведения, содержащиеся в исключении в журнал событий приложения.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Чтобы узнать, какой журнал получают прослушиватели `WriteException` сообщения метода в разделе [Пошаговое руководство: определение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Прослушиватели журнала по умолчанию можно изменить. Дополнительные сведения см. в разделе [Работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Для перегрузок, которые не принимают `id` аргумент, записывается в журнал идентификатор определен в следующей таблице.  
  
|`severity`|По умолчанию `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 В следующей таблице перечислены примеры задач, связанных с `WriteException` метод.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений об исключении в журнал событий приложения.|[Практическое руководство. Запись в журнал сведений об исключениях](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Выбор места, в которое объект `Log` записывает информацию.|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
   
  
## Examples  
 В этом примере показано, как использовать `My.Application.Log.WriteException` метод, чтобы регистрировать исключения в журнале. Раскомментируйте строки `Dim` и `MsgBox`, чтобы вызвать исключение <xref:System.NullReferenceException>. Дополнительные сведения см. в разделе [как: журнал исключений](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Данный пример кода может выполняться только в клиентском приложении. Изменение `My.Application.Log.WriteException` для `My.Log.WriteException` для веб-приложений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="ex" /> имеет значение <see langword="Nothing" />.</exception>
        <exception cref="T:System.Security.SecurityException">Метод вызван кодом с частичным доверием, но запись в прослушиватель журнала событий требует полного доверия.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ex">Обязательно. Исключение, подлежащее записи в журнал.</param>
        <param name="severity">Тип сообщения. По умолчанию — <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Строка, присоединяемая к сообщению. По умолчанию это пустая строка.</param>
        <summary>Записывает сведения об исключении в прослушиватели журнала приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Метод записывает сведения, содержащиеся в исключении в журнал событий приложения.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Чтобы узнать, какой журнал получают прослушиватели `WriteException` сообщения метода в разделе [Пошаговое руководство: определение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Прослушиватели журнала по умолчанию можно изменить. Дополнительные сведения см. в разделе [Работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Для перегрузок, которые не принимают `id` аргумент, записывается в журнал идентификатор определен в следующей таблице.  
  
|`severity`|По умолчанию `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 В следующей таблице перечислены примеры задач, связанных с `WriteException` метод.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений об исключении в журнал событий приложения.|[Практическое руководство. Запись в журнал сведений об исключениях](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Выбор места, в которое объект `Log` записывает информацию.|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
   
  
## Examples  
 В этом примере показано, как использовать `My.Application.Log.WriteException` метод, чтобы регистрировать исключения в журнале. Раскомментируйте строки `Dim` и `MsgBox`, чтобы вызвать исключение <xref:System.NullReferenceException>. Дополнительные сведения см. в разделе [как: журнал исключений](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Данный пример кода может выполняться только в клиентском приложении. Изменение `My.Application.Log.WriteException` для `My.Log.WriteException` для веб-приложений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="ex" /> имеет значение <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Тип сообщения отличается от типа значений перечисления <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Метод вызван кодом с частичным доверием, но запись в прослушиватель журнала событий требует полного доверия.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
    <Member MemberName="WriteException">
      <MemberSignature Language="C#" Value="public void WriteException (Exception ex, System.Diagnostics.TraceEventType severity, string additionalInfo, int id);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void WriteException(class System.Exception ex, valuetype System.Diagnostics.TraceEventType severity, string additionalInfo, int32 id) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Logging.Log.WriteException(System.Exception,System.Diagnostics.TraceEventType,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteException (ex As Exception, severity As TraceEventType, additionalInfo As String, id As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteException(Exception ^ ex, System::Diagnostics::TraceEventType severity, System::String ^ additionalInfo, int id);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ex" Type="System.Exception" />
        <Parameter Name="severity" Type="System.Diagnostics.TraceEventType" />
        <Parameter Name="additionalInfo" Type="System.String" />
        <Parameter Name="id" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ex">Обязательно. Исключение, подлежащее записи в журнал.</param>
        <param name="severity">Тип сообщения. По умолчанию — <see cref="F:System.Diagnostics.TraceEventType.Error" />.</param>
        <param name="additionalInfo">Строка, присоединяемая к сообщению. По умолчанию это пустая строка.</param>
        <param name="id">Идентификатор сообщения, обычно используемый для корреляции. По умолчанию связан с <c>entryType</c>, как описано в таблице в разделе "Примечания".</param>
        <summary>Записывает сведения об исключении в прослушиватели журнала приложения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `WriteException` Метод записывает сведения, содержащиеся в исключении в журнал событий приложения.  
  
 В клиентских приложениях `Log` объект доступен через `My.Application.Log` объекта. В веб-приложениях `Log` объект доступен через `My.Log` объекта.  
  
 Чтобы узнать, какой журнал получают прослушиватели `WriteException` сообщения метода в разделе [Пошаговое руководство: определение информация](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md). Прослушиватели журнала по умолчанию можно изменить. Дополнительные сведения см. в разделе [Работа с журналами приложения](~/docs/visual-basic/developing-apps/programming/log-info/working-with-application-logs.md).  
  
 Для перегрузок, которые не принимают `id` аргумент, записывается в журнал идентификатор определен в следующей таблице.  
  
|`severity`|По умолчанию `id`|  
|----------------|------------------|  
|<xref:System.Diagnostics.TraceEventType.Information>|0|  
|<xref:System.Diagnostics.TraceEventType.Warning>|1|  
|<xref:System.Diagnostics.TraceEventType.Error>|2|  
|<xref:System.Diagnostics.TraceEventType.Critical>|3|  
|<xref:System.Diagnostics.TraceEventType.Start>|4|  
|<xref:System.Diagnostics.TraceEventType.Stop>|5|  
|<xref:System.Diagnostics.TraceEventType.Suspend>|6|  
|<xref:System.Diagnostics.TraceEventType.Resume>|7|  
|<xref:System.Diagnostics.TraceEventType.Verbose>|8|  
|<xref:System.Diagnostics.TraceEventType.Transfer>|9|  
  
 В следующей таблице перечислены примеры задач, связанных с `WriteException` метод.  
  
|Кому|См.|  
|--------|---------|  
|Запись сведений об исключении в журнал событий приложения.|[Практическое руководство. Запись в журнал сведений об исключениях](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md)|  
|Выбор места, в которое объект `Log` записывает информацию.|[Пошаговое руководство. Определение места записи сведений для My.Application.Log](~/docs/visual-basic/developing-apps/programming/log-info/walkthrough-determining-where-my-application-log-writes-information.md)|  
  
## <a name="availability-by-project-type"></a>Доступность по типу проекта  
  
|Тип проекта|Доступно|  
|------------------|---------------|  
|Приложение Windows|**Да**|  
|Библиотека классов|**Да**|  
|Консольное приложение|**Да**|  
|Библиотека элементов управления Windows|**Да**|  
|Библиотека веб-элементов управления|Нет|  
|Служба Windows|**Да**|  
|Веб-сайт|**Да**|  
  
   
  
## Examples  
 В этом примере показано, как использовать `My.Application.Log.WriteException` метод, чтобы регистрировать исключения в журнале. Раскомментируйте строки `Dim` и `MsgBox`, чтобы вызвать исключение <xref:System.NullReferenceException>. Дополнительные сведения см. в разделе [как: журнал исключений](~/docs/visual-basic/developing-apps/programming/log-info/how-to-log-exceptions.md).  
  
 [!code-vb[VbVbalrMyApplicationLog#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMyApplicationLog/VB/Form1.vb#10)]  
  
 Данный пример кода может выполняться только в клиентском приложении. Изменение `My.Application.Log.WriteException` для `My.Log.WriteException` для веб-приложений.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="ex" /> имеет значение <see langword="Nothing" />.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Тип сообщения отличается от типа значений перечисления <see cref="T:System.Diagnostics.TraceEventType" />.</exception>
        <exception cref="T:System.Security.SecurityException">Метод вызван кодом с частичным доверием, но запись в прослушиватель журнала событий требует полного доверия.</exception>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Управляет возможностью доступа к файлам и папкам. Связанное перечисление: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="T:System.Exception" />
        <altmember cref="T:System.Diagnostics.TraceEventType" />
      </Docs>
    </Member>
  </Members>
</Type>