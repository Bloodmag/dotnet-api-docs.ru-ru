<Type Name="Collection" FullName="Microsoft.VisualBasic.Collection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d61baf321e8319662e9f74cd4985bdfbcf7d3e0f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36727327" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Collection : System.Collections.IList, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed Collection extends System.Object implements class System.Collections.ICollection, class System.Collections.IList, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Collection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Collection&#xA;Implements IDeserializationCallback, IList, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Collection sealed : System::Collections::IList, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type Collection = class&#xA;    interface ICollection&#xA;    interface IList&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("Count = {Count}")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerTypeProxy(typeof(Microsoft.VisualBasic.Collection/CollectionDebugView))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see langword="Collection" /> в Visual Basic — это упорядоченный набор элементов, на который можно ссылаться как на единое целое.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  По возможности следует использовать универсальные коллекции в <xref:System.Collections.Generic?displayProperty=nameWithType> пространства имен или <xref:System.Collections.Concurrent> пространства имен, а не Visual Basic `Collection`. Дополнительные сведения см. в разделе [коллекции](http://msdn.microsoft.com/library/e76533a9-5033-4a0b-b003-9c2be60d185b).  
  
 В Visual Basic `Collection` объект предоставляет удобный способ для ссылки на группу связанных элементов как один объект. Элементы, или *элементы*в коллекции должны быть связаны только из-за того, что они существуют в коллекции. Элементы коллекции не нужно совместно использовать тот же тип данных.  
  
 Можно создать коллекцию так же, как и другие объекты, как показано в следующем примере.  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 После создания коллекции, необходимо выполнить одно из следующих действий.  
  
-   Добавить элемент с <xref:Microsoft.VisualBasic.Collection.Add%2A> метод.  
  
-   Удалить элемент, используя <xref:Microsoft.VisualBasic.Collection.Remove%2A> метод.  
  
-   Удалите все элементы с <xref:Microsoft.VisualBasic.Collection.Clear%2A> метод.  
  
-   Узнайте, сколько элементов содержится в коллекции с <xref:Microsoft.VisualBasic.Collection.Count%2A> свойство.  
  
-   Проверьте, присутствует ли определенный элемент с <xref:Microsoft.VisualBasic.Collection.Contains%2A> метод.  
  
-   Получить определенный элемент из коллекции с <xref:Microsoft.VisualBasic.Collection.Item%2A> свойство.  
  
-   Итерации по всей коллекции с [For Each... Следующий оператор](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).  
  
    > [!NOTE]
    >  Хотя Visual Basic `Collection` объект имеет функциональность идентична `Collection` объекта в Visual Basic 6.0, их не смогут взаимодействовать в среде COM.  
  
    > [!CAUTION]
    >  Итерации по Visual Basic `Collection` не является потокобезопасной процедурой. Даже если коллекция синхронизирована, другие потоки могут ее изменить коллекцию, что приведет к созданию исключения перечислителем. Для обеспечения потокобезопасности при перечислении, либо заблокировать коллекцию, либо перехватывать исключения, возникающие в результате изменений, внесенных другими потоками. Дополнительные сведения о блокировке элемента программирования см. в разделе [оператор SyncLock](~/docs/visual-basic/language-reference/statements/synclock-statement.md).  
  
   
  
## Examples  
 В следующем примере создается `Collection` объекта `names` и диалоговое окно, с помощью которого пользователь может добавлять объекты (имена) в коллекцию. Затем он отображает имена в коллекции и наконец, очищает коллекцию без удаления `Collection` сам объект.  
  
 Чтобы увидеть, как это работает, откройте **добавить класс** из **проекта** меню и Объявите открытую переменную с именем `instanceName` на уровне модуля `nameClass` (типа `Public instanceName`) для хранения имена каждого экземпляра. Оставьте имя по умолчанию как `nameClass`. Скопируйте и вставьте следующий код в **Общие** раздел другого модуля и запустите его с помощью инструкции `classNamer` в другой процедуре. (Этот пример работает только с ведущими приложениями, поддерживающими классы).  
  
 [!code-vb[VbVbalrCollectionObject#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Collection ();" />
      <MemberSignature Language="ILAsm" Value=".method public specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Collection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Создает и возвращает новый объект <see cref="T:Microsoft.VisualBasic.Collection" /> в Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Visual Basic коллекция, возвращенная этот конструктор является пустым и не имеет любой начальной емкостью выделенной.  
  
 Коллекции Visual Basic не совместимы с [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] коллекции, доступные в <xref:System.Collections?displayProperty=nameWithType>, <xref:System.Collections.Generic?displayProperty=nameWithType>, и <xref:System.Collections.Specialized?displayProperty=nameWithType> пространства имен.  
  
   
  
## Examples  
 В следующем примере создается новая коллекция Visual Basic и присваивает переменной `coll`:  
  
```vb  
Dim coll As New Microsoft.VisualBasic.Collection()  
```  
  
 Это `Collection` объекта с единицы, означающее, что значения индексов элементов находятся в диапазоне от 1 до значения `Count` свойство. Содержит коллекции Visual Basic элементов типа <xref:System.Object>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (object Item, string Key = null, object Before = null, object After = null);" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Add(object Item, string Key, object Before, object After) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Add(System.Object,System.String,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Add (Item As Object, Optional Key As String = null, Optional Before As Object = null, Optional After As Object = null)" />
      <MemberSignature Language="F#" Value="member this.Add : obj * string * obj * obj -&gt; unit" Usage="collection.Add (Item, Key, Before, After)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Item" Type="System.Object" />
        <Parameter Name="Key" Type="System.String" />
        <Parameter Name="Before" Type="System.Object" />
        <Parameter Name="After" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Item">Обязательно. Объект любого типа, определяющий добавляемый в коллекцию элемент.</param>
        <param name="Key">Необязательный. Уникальное выражение типа <see langword="String" />, задающее ключевую строку, которая может использоваться для доступа к этому элементу коллекции вместо индекса позиции.</param>
        <param name="Before">Необязательный. Выражение, задающее относительную позицию в коллекции. Добавляемый элемент помещается в коллекцию перед элементом, определяемым аргументом <c>Before</c>. Если параметр <c>Before</c> является числовым выражением, то он должен быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции. Если параметр <c>Before</c> является выражением типа <see langword="String" />, то оно должно соответствовать строке ключа, заданной при добавлении элемента в коллекцию. Указывать параметры <c>Before</c> и <c>After</c> вместе нельзя.</param>
        <param name="After">Необязательный. Выражение, задающее относительную позицию в коллекции. Добавляемый элемент помещается в коллекцию после элемента, определяемого аргументом <c>After</c>. Если параметр <c>After</c> является числовым выражением, то он должен быть числом от 1 до значения свойства <see langword="Count" /> коллекции. Если параметр <c>After</c> является выражением типа <see langword="String" />, то оно должно соответствовать строке ключа, заданной при добавлении элемента в коллекцию. Указывать параметры <c>Before</c> и <c>After</c> вместе нельзя.</param>
        <summary>Добавляет элемент в объект <see langword="Collection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Before` Или `After` аргумент должен ссылаться на существующий элемент коллекции; в противном случае возникает ошибка.  
  
 Если оба `Before` и `After` аргументов опущены, новый объект добавляется в конец коллекции.  
  
 Ошибка также возникает, если указанный `Key` значение соответствует ключу существующего элемента коллекции.  
  
   
  
## Examples  
 В следующем примере используется `Add` метод, чтобы добавить `child` объектов — экземпляров класса с именем `child` содержащий `Public` свойство `name` — в коллекцию с именем `family`. Чтобы увидеть, как это работает, создайте <xref:System.Windows.Forms.Form> с двумя <xref:System.Windows.Forms.Button> элементов управления и задайте их <xref:System.Windows.Forms.Control.Text%2A> свойства `Add` и `List`. Добавить `child` определения класса и `family` объявление в код формы. Изменить `_Click` обработчики событий для **добавить** и **списка** кнопки, как показано. **Добавить** кнопки можно добавить дочерние элементы. **Списка** кнопки отображаются имена всех дочерних элементов.  
  
 [!code-vb[VbVbalrCollectionObject#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="collection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все элементы объекта <see langword="Collection" /> Visual Basic.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Clear` Метод очищает коллекцию и присваивает его <xref:Microsoft.VisualBasic.Collection.Count%2A> значение 0.  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public instance bool Contains(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Contains(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (Key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Contains : string -&gt; bool" Usage="collection.Contains Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">Обязательно. Выражение типа <see langword="String" />, которое задает ключ для поиска элемента в коллекции.</param>
        <summary>Возвращает значение <see langword="Boolean" />, показывающее, содержит ли объект Visual Basic <see langword="Collection" /> элемент с указанным ключом.</summary>
        <returns>Возвращает значение <see langword="Boolean" />, показывающее, содержит ли объект Visual Basic <see langword="Collection" /> элемент с указанным ключом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Contains` Возвращает `True` , если коллекция содержит элемент с ключом, точно соответствующим `Key`. В противном случае `Contains` возвращает `False`. Регистр учитывается при сравнении значений ключей.  
  
 Visual Basic `Collection` может включать некоторые элементы, которые имеют ключей и другие элементы без ключей. Это зависит от того вызов <xref:Microsoft.VisualBasic.Collection.Add%2A> метод предоставляет необязательный аргумент `Key` параметра.  
  
   
  
## Examples  
 [!code-vb[VbVbalrCollectionObject#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#4)]  
  
 Если вы собираетесь выполнить поиск по ключам элементов в коллекции, не забудьте указать `Key` аргумента при каждом вызове `Add` метода.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="Microsoft.VisualBasic.Collection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение типа <see langword="Integer" />, показывающее число элементов в коллекции. Только для чтения.</summary>
        <value>Возвращает значение типа <see langword="Integer" />, показывающее число элементов в коллекции. Только для чтения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте `Count` свойства, чтобы определить количество элементов в `Collection` объекта.  
  
   
  
## Examples  
 В этом примере показано использование `Count` свойство для отображения числа элементов в <xref:Microsoft.VisualBasic.Collection> объект в переменной `birthdays`.  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#6)]  
  
 `Collection` Объекта с единицы, означающее, что значения индексов элементов находятся в диапазоне от 1 до значения `Count` свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="collection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает ссылку на объект перечислителя, который используется для прохода по объекту <see cref="T:Microsoft.VisualBasic.Collection" />.</summary>
        <returns>Возвращает ссылку на объект перечислителя, который используется для прохода по объекту <see cref="T:Microsoft.VisualBasic.Collection" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [For Each... Следующий оператор](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) вызовы `GetEnumerator` для получения объекта перечислителя поддержка итерации по элементам коллекции. Как правило, используется `For Each`... `Next` цикл для прохождения коллекции или массива, и необходимо вызвать `GetEnumerator` явным образом.  
  
 Если требуется более тщательно контролировать итерацию, чем `For Each`... `Next` предоставляют инструкции, можно использовать `GetEnumerator` метод для выполнения пользовательского обхода. Ниже приведены некоторые случаи, в которых может потребоваться сделать это.  
  
-   Может потребоваться вернуться в начало коллекции и запустить итерацию снова до ее завершения.  
  
-   Может потребоваться пропустить один или несколько элементов по различным причинам.  
  
-   Может потребоваться изменить элементы коллекции в середине обхода. В этом случае необходимо получить новый объект перечислителя, так как предыдущий становится недействительным.  
  
   
  
## Examples  
 В следующем примере показано, как использовать `GetEnumerator` для получения всех элементов `Collection` объекта.  
  
 [!code-vb[VbVbalrCollectionObject#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#7)]  
  
 `GetEnumerator` Создает и возвращает объект перечислителя, который реализует <xref:System.Collections.IEnumerator> интерфейс <xref:System.Collections> пространства имен. Объект перечислителя, предоставляет <xref:System.Collections.IEnumerator.Current%2A> свойство и <xref:System.Collections.IEnumerator.MoveNext%2A> и <xref:System.Collections.IEnumerator.Reset%2A> методы. Дополнительные сведения см. в разделе [For Each... Следующий оператор](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[int Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[int] { System::Object ^ get(int Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">(A) Числовое выражение, задающее позицию элемента коллекции. Значение <c>Index</c> должно быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции. Или (Б) выражение типа <see langword="Object" />, задающее позицию или ключевую строку элемента в коллекции.</param>
        <summary>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</summary>
        <value>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Index` относится к типу `Object`, `Item` пытается обработать его как свойство `String`, `Char`, `Char` массива или целым числом. Если `Item` не удается преобразовать `Index` для `String` или `Integer`, он выдает <xref:System.ArgumentException> исключение.  
  
 `Item` Свойство является свойством по умолчанию для коллекции. Таким образом следующие строки кода эквивалентны.  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 В следующем примере используется `Item` свойства, чтобы получить ссылку на объект в коллекции. Он создает `birthdays` как `Collection` объекта, а затем извлекает объект, представляющий за день рождения, используя ключ `"Bill"` как `Index` аргумент.  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 Обратите внимание, что первый вызов явно задает `Item` свойства, а второй — нет. Оба вызова работать, поскольку `Item` свойство является свойством по умолчанию для `Collection` объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[object Index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(object)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Index As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::Object ^] { System::Object ^ get(System::Object ^ Index); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Index">(A) Числовое выражение, задающее позицию элемента коллекции. Значение <c>Index</c> должно быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции. Или (Б) выражение типа <see langword="Object" />, задающее позицию или ключевую строку элемента в коллекции.</param>
        <summary>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</summary>
        <value>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Index` относится к типу `Object`, `Item` пытается обработать его как свойство `String`, `Char`, `Char` массива или целым числом. Если `Item` не удается преобразовать `Index` для `String` или `Integer`, он выдает <xref:System.ArgumentException> исключение.  
  
 `Item` Свойство является свойством по умолчанию для коллекции. Таким образом следующие строки кода эквивалентны.  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 В следующем примере используется `Item` свойства, чтобы получить ссылку на объект в коллекции. Он создает `birthdays` как `Collection` объекта, а затем извлекает объект, представляющий за день рождения, используя ключ `"Bill"` как `Index` аргумент.  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 Обратите внимание, что первый вызов явно задает `Item` свойства, а второй — нет. Оба вызова работать, поскольку `Item` свойство является свойством по умолчанию для `Collection` объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public object this[string Key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(string)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(Key As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ default[System::String ^] { System::Object ^ get(System::String ^ Key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : obj" Usage="Microsoft.VisualBasic.Collection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">Уникальное выражение типа <see langword="String" />, задающее строку ключа, которая может использоваться для доступа к элементу коллекции вместо индекса позиции. Значение <c>Key</c> должно соответствовать аргументу <c>Key</c>, заданному при добавлении элемента в коллекцию.</param>
        <summary>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</summary>
        <value>Возвращает заданный член объекта <see langword="Collection" /> по номеру позиции или ключу. Только для чтения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Index` относится к типу `Object`, `Item` пытается обработать его как свойство `String`, `Char`, `Char` массива или целым числом. Если `Item` не удается преобразовать `Index` для `String` или `Integer`, он выдает <xref:System.ArgumentException> исключение.  
  
 `Item` Свойство является свойством по умолчанию для коллекции. Таким образом следующие строки кода эквивалентны.  
  
```  
MsgBox(CStr(customers.Item(1)))  
MsgBox(CStr(customers(1)))  
```  
  
   
  
## Examples  
 В следующем примере используется `Item` свойства, чтобы получить ссылку на объект в коллекции. Он создает `birthdays` как `Collection` объекта, а затем извлекает объект, представляющий за день рождения, используя ключ `"Bill"` как `Index` аргумент.  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#8)]  
  
 Обратите внимание, что первый вызов явно задает `Item` свойства, а второй — нет. Оба вызова работать, поскольку `Item` свойство является свойством по умолчанию для `Collection` объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Remove">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет объект из коллекции <see langword="Collection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(int Index);" />
      <MemberSignature Language="F#" Value="member this.Remove : int -&gt; unit" Usage="collection.Remove Index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Index">Числовое выражение, задающее позицию элемента коллекции. Значение <c>Index</c> должно быть числом от 1 до значения свойства <see cref="P:Microsoft.VisualBasic.Collection.Count" /> коллекции.</param>
        <summary>Удаляет объект из коллекции <see langword="Collection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При `Remove` удаляет элемент из коллекции, он уменьшает коллекции <xref:Microsoft.VisualBasic.Collection.Count%2A> свойство на единицу. Он также уменьшает `Index` значение каждого элемента, следующего за удаленным элементом коллекции.  
  
 Если элемент был добавлен в коллекцию без `Key`, необходимо использовать его `Index` удалить его.  
  
   
  
## Examples  
 В этом примере показано использование `Remove` метод для удаления объектов из <xref:Microsoft.VisualBasic.Collection> объект в переменной `birthdays`.  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 После четырех вызовов `Add` метода `Count` свойство содержит 4, элемент `"Bill"` имеет значение индекса 1, а элемент `"Pete"` имеет значение индекса 4.  
  
 После первого вызова `Remove`, `Count` равно 3, элемент `"Bill"` удаляется и элемент `"Pete"` имеет значение индекса 3.  
  
 После второго вызова метода `Remove`, `Count` 2, элемент `"Mike"` удаляется и элемент `"Pete"` индекс будет равен 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (string Key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(string Key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.Remove(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (Key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::String ^ Key);" />
      <MemberSignature Language="F#" Value="member this.Remove : string -&gt; unit" Usage="collection.Remove Key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Key">Уникальное выражение типа <see langword="String" />, задающее строку ключа, которая может использоваться для доступа к элементу коллекции вместо индекса позиции. Значение <c>Key</c> должно соответствовать аргументу <c>Key</c>, заданному при добавлении элемента в коллекцию.</param>
        <summary>Удаляет объект из коллекции <see langword="Collection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При `Remove` удаляет элемент из коллекции, он уменьшает коллекции <xref:Microsoft.VisualBasic.Collection.Count%2A> свойство на единицу. Он также уменьшает `Index` значение каждого элемента, следующего за удаленным элементом коллекции.  
  
 Если элемент был добавлен в коллекцию без `Key`, необходимо использовать его `Index` удалить его.  
  
   
  
## Examples  
 В этом примере показано использование `Remove` метод для удаления объектов из <xref:Microsoft.VisualBasic.Collection> объект в переменной `birthdays`.  
  
 [!code-vb[VbVbalrCollectionObject#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#5)]  
[!code-vb[VbVbalrCollectionObject#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCollectionObject/VB/Class1.vb#9)]  
  
 После четырех вызовов `Add` метода `Count` свойство содержит 4, элемент `"Bill"` имеет значение индекса 1, а элемент `"Pete"` имеет значение индекса 4.  
  
 После первого вызова `Remove`, `Count` равно 3, элемент `"Bill"` удаляется и элемент `"Pete"` имеет значение индекса 3.  
  
 После второго вызова метода `Remove`, `Count` 2, элемент `"Mike"` удаляется и элемент `"Pete"` индекс будет равен 2.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void ICollectionCopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionCopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value=" virtual void ICollectionCopyTo(Array ^ array, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">Одномерный массив класса <see cref="T:System.Array" />, который является целевым массивом для элементов, копируемых из объекта <see cref="T:Microsoft.VisualBasic.Collection" />. Массив <see cref="T:System.Array" /> должен иметь индексацию, начинающуюся с нуля.</param>
        <param name="index">Отсчитываемый от нуля индекс в <c>массиве</c> с которого начинается копирование.</param>
        <summary>Копирует элементы коллекции <see cref="T:Microsoft.VisualBasic.Collection" /> в массив <see cref="T:System.Array" />, начиная с указанного индекса массива <see cref="T:System.Array" />. Реализует интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Элементы копируются в <xref:System.Array> в том же порядке, в котором перечислитель перемещается по <xref:Microsoft.VisualBasic.Collection> объекта.  
  
 Этот метод является операцией O (`n`) операции, где `n` берется из <xref:Microsoft.VisualBasic.Collection.System%23Collections%23ICollection%23Count>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="array" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля.</exception>
        <exception cref="T:System.ArgumentException">Массив <paramref name="array" /> является многомерным.  -или- Количество элементов в исходном объекте <see cref="T:Microsoft.VisualBasic.Collection" /> превышает размер доступного места, начиная с индекса массива <paramref name="index" /> и до конца массива назначения <paramref name="array" />.</exception>
        <exception cref="T:System.InvalidCastException">Тип исходного объекта <see cref="T:Microsoft.VisualBasic.Collection" /> нельзя автоматически привести к типу массива назначения <paramref name="array" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionCount">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.ICollectionCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ICollectionCount" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionCount As Integer Implements ICollection.ICollectionCount" />
      <MemberSignature Language="C++ CLI" Value="property int System.Collections.ICollection.ICollectionCount { int get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.ICollectionCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionIsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.ICollectionIsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ICollectionIsSynchronized" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionIsSynchronized As Boolean Implements ICollection.ICollectionIsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.ICollectionIsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.ICollectionIsSynchronized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.ICollectionSyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.ICollectionSyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ICollectionSyncRoot" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ICollectionSyncRoot As Object Implements ICollection.ICollectionSyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.ICollectionSyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.ICollectionSyncRoot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance class System.Collections.IEnumerator ICollectionGetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.ICollectionGetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function ICollectionGetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ ICollectionGetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает перечислитель, выполняющий перебор элементов в коллекции. Реализует интерфейс <see cref="T:System.Collections.ICollection" />.</summary>
        <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который используется для прохода по коллекции.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Visual Basic, C#]  
  
 Инструкция `foreach` языка C# (`for each` в Visual Basic) позволяет скрыть сложный механизм перечислителей. Поэтому рекомендуется вместо непосредственного использования перечислителя применять ключевое слово `foreach`.  
  
 Перечислители могут использоваться для чтения данных в коллекции, но не для ее изменения.  
  
 Изначально перечислитель располагается перед первым элементом коллекции. <xref:System.Collections.IEnumerator.Reset%2A> Метод также переводит перечислитель в эту позицию. В этой позиции <xref:System.Collections.IEnumerator.Current%2A> свойство не определено. Поэтому необходимо вызвать метод <xref:System.Collections.IEnumerator.MoveNext%2A> метод, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <xref:System.Collections.IEnumerator.Current%2A>.  
  
 <xref:System.Collections.IEnumerator.Current%2A> возвращает тот же объект, пока не будет вызван метод <xref:System.Collections.IEnumerator.MoveNext%2A> или <xref:System.Collections.IEnumerator.Reset%2A>. <xref:System.Collections.IEnumerator.MoveNext%2A> задает <xref:System.Collections.IEnumerator.Current%2A> в качестве значения для следующего элемента.  
  
 Если <xref:System.Collections.IEnumerator.MoveNext%2A> проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <xref:System.Collections.IEnumerator.MoveNext%2A> возвращает `false`. Если перечислитель находится в этой позиции, последующие вызовы <xref:System.Collections.IEnumerator.MoveNext%2A> также возвращают `false`. Если последний вызов метода <xref:System.Collections.IEnumerator.MoveNext%2A> возвращает `false`, <xref:System.Collections.IEnumerator.Current%2A> не определено. Чтобы снова задать в качестве значения свойства <xref:System.Collections.IEnumerator.Current%2A> первый элемент коллекции, можно последовательно вызвать методы <xref:System.Collections.IEnumerator.Reset%2A> и<xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 Перечислитель остается действительным, пока коллекция не изменяется. Если в коллекцию вносятся изменения, например добавляются, изменяются или удаляются элементы, перечислитель становится недействительным без возможности восстановление, а его поведение не определено.  
  
 У перечислителя нет эксклюзивного доступа к коллекции, поэтому перечисление коллекции не является потокобезопасной процедурой. Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления. Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.ICollection" />
        <altmember cref="T:System.Collections.IEnumerable" />
        <altmember cref="M:System.Collections.IEnumerable.GetEnumerator" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListAdd(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListAdd(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListAdd (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListAdd(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект <see cref="T:System.Object" />, для добавления в коллекцию <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <summary>Добавляет элемент в коллекцию <see cref="T:Microsoft.VisualBasic.Collection" />. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <returns>Позиция, на которую вставлен новый элемент.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также использовать <xref:Microsoft.VisualBasic.Collection.Item%2A> свойство для добавления новых элементов, задав значение ключа, который не существует в <xref:Microsoft.VisualBasic.Collection> объекта.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.  -или- Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Add(System.Object)" />
        <altmember cref="P:Microsoft.VisualBasic.Collection.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Clear">
      <MemberSignature Language="C#" Value="void IList.Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListClear() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListClear" />
      <MemberSignature Language="VB.NET" Value="Sub IListClear () Implements IList.Clear" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListClear() = System::Collections::IList::Clear;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все элементы из объекта <see cref="T:Microsoft.VisualBasic.Collection" />. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод удаляет все элементы из <xref:Microsoft.VisualBasic.Collection> объекта.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Объект <see cref="T:System.Collections.IList" /> доступен только для чтения.</exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.Hashtable.Clear" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance bool IListContains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListContains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListContains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool IListContains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект <see cref="T:System.Object" /> для поиска в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <summary>Определяет, содержит ли объект <see cref="T:Microsoft.VisualBasic.Collection" /> указанное значение. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <returns>Возвращает значение <see langword="True" />, если объект <see cref="T:System.Object" /> находится в объекте <see cref="T:Microsoft.VisualBasic.Collection" />, в противном случае возвращается значение <see langword="False" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод определяет, является ли <xref:Microsoft.VisualBasic.Collection> объект содержит определенное значение.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsFixedSize" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsFixedSize As Boolean Implements IList.IListIsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListIsFixedSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListIsReadOnly">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IListIsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IListIsReadOnly" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IListIsReadOnly As Boolean Implements IList.IListIsReadOnly" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IListIsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListIsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IListItem">
      <MemberSignature Language="C#" Value="object System.Collections.IList.IListItem[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object IListItem(int32)" />
      <MemberSignature Language="DocId" Value="P:Microsoft.VisualBasic.Collection.IListItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property IListItem(index As Integer) As Object Implements IList.IListItem" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.IList.IListItem[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="Microsoft.VisualBasic.Collection.IListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance int32 IListIndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListIndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IListIndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int IListIndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект <see cref="T:System.Object" /> для поиска в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <summary>Определяет индекс конкретного элемента в объекте <see cref="T:Microsoft.VisualBasic.Collection" />. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <returns>Индекс параметра <paramref name="value" />, если оно найдено в коллекции, в противном случае — -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод определяет индекс заданного элемента в <xref:Microsoft.VisualBasic.Collection> объекта.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.IndexOf(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListInsert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListInsert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListInsert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListInsert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Отсчитываемый от нуля индекс, по которому необходимо вставить <c>значение</c>.</param>
        <param name="value">Объект <see cref="T:System.Object" /> для вставки в объект <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <summary>Вставляет элемент в объект <see cref="T:Microsoft.VisualBasic.Collection" /> по указанному индексу. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `index` равно количеству элементов в <xref:Microsoft.VisualBasic.Collection> объекта, затем `value` добавляется в конец.  
  
 В коллекциях с непрерывным набором элементов, таких как списки, чтобы выделить место новому элементу, следующие за точкой вставки элементы перемещаются вниз. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы, например в хэш-таблицах.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> не является допустимым индексом для объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</exception>
        <exception cref="T:System.NotSupportedException">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.  -или- Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</exception>
        <exception cref="T:System.NullReferenceException">Параметр <paramref name="value" /> является пустой ссылкой в объекте <see cref="T:Microsoft.VisualBasic.Collection" />.</exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект <see cref="T:System.Object" />, удаляемый из коллекции <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <summary>Удаляет первое вхождение определенного объекта из объекта <see cref="T:Microsoft.VisualBasic.Collection" />. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В коллекциях с непрерывным набором элементов, таких как списки, элементы, следующие за удаленным элементом, перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы, например в хэш-таблицах. Если `value` не найден в <xref:Microsoft.VisualBasic.Collection> объекта, <xref:Microsoft.VisualBasic.Collection> объекта не изменяется и исключение не возникает.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.  -или- Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.RemoveAt">
      <MemberSignature Language="C#" Value="void IList.RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void IListRemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.IListRemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub IListRemoveAt (index As Integer) Implements IList.RemoveAt" />
      <MemberSignature Language="C++ CLI" Value=" virtual void IListRemoveAt(int index) = System::Collections::IList::RemoveAt;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Отсчитываемый от нуля индекс удаляемого элемента.</param>
        <summary>Удаляет элемент объекта <see cref="T:Microsoft.VisualBasic.Collection" /> по заданному индексу. Реализует интерфейс <see cref="T:System.Collections.IList" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В коллекциях с непрерывным набором элементов, таких как списки, элементы, следующие за удаленным элементом, перемещаются вверх, занимая освободившуюся позицию. Если коллекция индексируется, индексы перемещенных элементов также обновляются. Такое поведение не реализуется в коллекциях, в которых элементы логически сгруппированы, например в хэш-таблицах.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> не является допустимым индексом для объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</exception>
        <exception cref="T:System.NotSupportedException">Объект <see cref="T:Microsoft.VisualBasic.Collection" /> доступен только для чтения.  -или- Объект <see cref="T:Microsoft.VisualBasic.Collection" /> имеет фиксированный размер.</exception>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Collections.IList" />
        <altmember cref="M:System.Collections.IList.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, который инициализирует обратный вызов.</param>
        <summary>Выполняется после полностью десериализации графа объекта <see cref="T:Microsoft.VisualBasic.Collection" />. Реализует интерфейс <see cref="T:System.Runtime.Serialization.IDeserializationCallback" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается после всего <xref:Microsoft.VisualBasic.Collection> десериализован граф объектов.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.IDeserializationCallback" />
        <altmember cref="M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Collection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий сведения, которые требуются для сериализации объекта <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий исходный объект и объект назначения для сериализованного потока, связанного с объектом <see cref="T:Microsoft.VisualBasic.Collection" />.</param>
        <summary>Возвращает данные, необходимые для сериализации объекта <see cref="T:Microsoft.VisualBasic.Collection" />. Реализует интерфейс <see cref="T:System.Runtime.Serialization.ISerializable" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает данные, необходимые для сериализации <xref:Microsoft.VisualBasic.Collection> объекта.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.VisualBasic.Collection" />
        <altmember cref="T:System.Runtime.Serialization.ISerializable" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="M:System.Collections.Hashtable.OnDeserialization(System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>