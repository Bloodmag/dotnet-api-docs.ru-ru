<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8c88114d76cfd78d171c9e5970305cf92c93395a" /><Meta Name="ms.sourcegitcommit" Value="9802d4c6745a8ae514b26f144fb3969265b224ba" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/22/2018" /><Meta Name="ms.locfileid" Value="53750963" /></Metadata><TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="d9e89-101">В модуле <see langword="Conversion" /> содержатся процедуры, используемые для выполнения различных операций преобразования.</span><span class="sxs-lookup"><span data-stu-id="d9e89-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-102">Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения для преобразования десятичных чисел в другую систему исчисления чисел в строки, строк в числа и одного типа к другому.</span><span class="sxs-lookup"><span data-stu-id="d9e89-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-103">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-104">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-104">Conversion Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="d9e89-105">Ключевые слова (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-105">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="d9e89-106">Члены библиотеки времени выполнения Visual Basic</span><span class="sxs-lookup"><span data-stu-id="d9e89-106">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="d9e89-107">Преобразуемый объект.</span><span class="sxs-lookup"><span data-stu-id="d9e89-107">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="d9e89-108">Тип данных, в который требуется преобразовать объект.</span><span class="sxs-lookup"><span data-stu-id="d9e89-108">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="d9e89-109">Преобразовывает объект в указанный тип.</span><span class="sxs-lookup"><span data-stu-id="d9e89-109">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="d9e89-110">Объект, тип которого во время выполнения является запрошенным типом целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="d9e89-110">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-111">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром `TargetType` параметр.</span><span class="sxs-lookup"><span data-stu-id="d9e89-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="d9e89-112">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="d9e89-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d9e89-113">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенные самим объектом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d9e89-114">Если динамический объект наследует свойства от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` сначала пытается выполнить преобразование, с помощью преобразования определяемых пользователем, статический метод.</span><span class="sxs-lookup"><span data-stu-id="d9e89-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d9e89-115">При сбое преобразования определяемых пользователем, статические, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="d9e89-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d9e89-116">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статических преобразований.</span><span class="sxs-lookup"><span data-stu-id="d9e89-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-117">В следующем примере используется `CTypeDynamic` метод для преобразования динамический объект в строку с помощью преобразования определяется динамический объект.</span><span class="sxs-lookup"><span data-stu-id="d9e89-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="d9e89-118">Работа с динамическими объектами (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-118">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="d9e89-119">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="d9e89-120">Тип данных, в который требуется преобразовать объект.</span><span class="sxs-lookup"><span data-stu-id="d9e89-120">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="d9e89-121">Преобразуемый объект.</span><span class="sxs-lookup"><span data-stu-id="d9e89-121">The object to convert.</span></span></param>
        <summary><span data-ttu-id="d9e89-122">Преобразует объект в указанный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="d9e89-122">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="d9e89-123">Объект со статической типизацией, имеющий запрошенный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="d9e89-123">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-124">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром типа универсального параметра.</span><span class="sxs-lookup"><span data-stu-id="d9e89-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="d9e89-125">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="d9e89-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="d9e89-126">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенные самим объектом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="d9e89-127">Если динамический объект наследует свойства от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` сначала пытается выполнить преобразование, с помощью преобразования определяемых пользователем, статический метод.</span><span class="sxs-lookup"><span data-stu-id="d9e89-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="d9e89-128">При сбое преобразования определяемых пользователем, статические, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="d9e89-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="d9e89-129">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статических преобразований.</span><span class="sxs-lookup"><span data-stu-id="d9e89-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-130">В следующем примере используется `CTypeDynamic` метод для преобразования динамический объект в строку с помощью преобразования определяется динамический объект.</span><span class="sxs-lookup"><span data-stu-id="d9e89-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md"><span data-ttu-id="d9e89-131">Работа с динамическими объектами (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-131">Working with Dynamic Objects (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md"><span data-ttu-id="d9e89-132">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d9e89-133">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-133">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="d9e89-134">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-134">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-135">Сообщение об ошибке, соответствующее самой последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="d9e89-135">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-136">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="d9e89-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d9e89-137">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="d9e89-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d9e89-138">При отсутствии ошибок времени выполнения, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="d9e89-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d9e89-139">В Visual Basic версии 6.0 и более ранних версий, эти функции были предоставлены по `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="d9e89-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-140">В следующем коде используется `ErrorToString` функцию для отображения сообщения об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-141"><paramref name="ErrorNumber" /> выходит за пределы диапазона.</span><span class="sxs-lookup"><span data-stu-id="d9e89-141"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="d9e89-142">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="d9e89-142">Optional.</span></span> <span data-ttu-id="d9e89-143">Любой допустимый номер ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-143">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="d9e89-144">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-144">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-145">Сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-145">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-146">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="d9e89-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="d9e89-147">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="d9e89-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="d9e89-148">Если `ErrorNumber` — это допустимый номер ошибки, но не задано, `ErrorToString` возвращает строку `"Application-defined or object-defined error."` Если `ErrorNumber` является недопустимым, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="d9e89-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="d9e89-149">Если `ErrorNumber` опущен, сообщение, соответствующее самой последней ошибки времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="d9e89-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="d9e89-150">Если произошло ни одной ошибки времени выполнения или `ErrorNumber` равно 0, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="d9e89-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="d9e89-151">В Visual Basic версии 6.0 и более ранних версий, эти функции были предоставлены по `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="d9e89-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-152">В следующем коде используется `ErrorToString` функцию для отображения сообщения об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="d9e89-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-153"><paramref name="ErrorNumber" /> выходит за пределы диапазона.</span><span class="sxs-lookup"><span data-stu-id="d9e89-153"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d9e89-154">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-154">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-155">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-155">Required.</span></span> <span data-ttu-id="d9e89-156">Число типа <see langword="Decimal" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-156">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-157">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-157">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-158">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-158">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-159">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-159">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-160">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-160">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-161">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-161">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-162">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-162">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="d9e89-163">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-163">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-164">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-164">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-165">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-165">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-166">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-166">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-167">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-167">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-168">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-168">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-169">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-169">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-170">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-170">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-171">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-171">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-172">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-172">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-173">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-173">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-174">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-174">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-175">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-175">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-176">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-176">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-177">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-177">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-178">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-178">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-179">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-179">Required.</span></span> <span data-ttu-id="d9e89-180">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-180">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-181">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-181">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-182">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-182">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-183">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-183">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-184">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-184">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-185">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-185">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-186">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-186">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="d9e89-187">Начиная с Visual Basic 15.8, производительность `Double`-к-преобразование целочисленные оптимизирован в том случае, если передается значение, возвращенное `Fix` метода к любому из [функции преобразования целочисленных](~/docs/visual-basic/language-reference/functions/conversion-functions.md), или если `Double`значение, возвращенное `Fix` неявно преобразуется в целое число с [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) присвоено `Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-187">Starting with Visual Basic 15.8, the performance of `Double`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Double` value returned by `Fix` is implicitly converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to `Off`.</span></span> <span data-ttu-id="d9e89-188">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-188">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="d9e89-189">В следующем примере показано такое оптимизированные преобразование:</span><span class="sxs-lookup"><span data-stu-id="d9e89-189">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim d As Double = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
```  
  
## Examples  
 <span data-ttu-id="d9e89-190">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-190">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-191">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-191">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-192">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-192">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-193">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-193">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-194">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-194">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-195">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-195">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-196">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-196">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-197">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-197">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-198">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-198">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-199">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-199">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-200">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-200">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-201">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-201">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-202">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-202">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-203">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-203">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-204">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-204">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-205">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-205">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-206">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-206">Required.</span></span> <span data-ttu-id="d9e89-207">Число типа <see langword="Short" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-207">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-208">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-208">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-209">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-209">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-210">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-211">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-212">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-213">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-214">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-215">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-216">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-217">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-218">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-219">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-220">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-221">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-222">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-223">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-223">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-224">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-224">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-225">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-225">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-226">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-226">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-227">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-227">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-228">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-228">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-229">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-229">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-230">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-230">Required.</span></span> <span data-ttu-id="d9e89-231">Число типа <see langword="Integer" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-231">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-232">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-232">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-233">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-233">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-234">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-234">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-235">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-235">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-236">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-236">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-237">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-237">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-238">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-238">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-239">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-239">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-240">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-240">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-241">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-241">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-242">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-242">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-243">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-243">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-244">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-244">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-245">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-245">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-246">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-246">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-247">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-247">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-248">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-248">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-249">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-249">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-250">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-250">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-251">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-251">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-252">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-252">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-253">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-253">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-254">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-254">Required.</span></span> <span data-ttu-id="d9e89-255">Число типа <see langword="Long" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-255">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-256">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-256">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-257">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-257">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-258">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-258">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-259">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-259">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-260">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-260">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-261">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-261">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-262">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-262">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-263">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-263">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-264">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-264">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-265">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-265">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-266">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-266">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-267">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-267">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-268">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-268">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-269">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-270">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-270">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-271">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-271">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-272">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-272">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-273">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-273">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-274">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-274">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-275">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-275">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-276">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-276">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-277">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-277">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-278">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-278">Required.</span></span> <span data-ttu-id="d9e89-279">Число типа <see langword="Object" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-279">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="d9e89-280">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-280">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="d9e89-281">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-281">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-282">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-282">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-283">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-283">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-284">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-284">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-285">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-285">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-286">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-286">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  

<span data-ttu-id="d9e89-287">Начиная с Visual Basic 15.8, если `Number` аргумент – это объект, тип которого среда выполнения `Double` или `Single`, оптимизирована производительность плавающей-запятой в целочисленные преобразования, если передается значение, возвращаемое `Fix` метод к любому из [функции преобразования целочисленных](~/docs/visual-basic/language-reference/functions/conversion-functions.md), или если значение, возвращаемое функцией `Fix` автоматически преобразуется в целое число с [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным Off.</span><span class="sxs-lookup"><span data-stu-id="d9e89-287">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="d9e89-288">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-288">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="d9e89-289">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-289">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Fix(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```     
  
## Examples  
 <span data-ttu-id="d9e89-290">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-290">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-291">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-291">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-292">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-292">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-293">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-293">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-294">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-294">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-295">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-295">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-296">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-296">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-297">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-297">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-298">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-298">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-299">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-299">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-300">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-300">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-301">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-301">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-302">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-302">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-303">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-303">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-304">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-304">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-305">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-305">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-306">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-306">Required.</span></span> <span data-ttu-id="d9e89-307">Число типа <see langword="Single" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-307">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-308">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-308">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-309">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-309">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-310">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-311">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-312">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-313">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="d9e89-314">Начиная с Visual Basic 15.8, производительность `Single`-к-преобразование целочисленные оптимизирован в том случае, если передается значение, возвращенное `Fix` метода к любому из [функции преобразования целочисленных](~/docs/visual-basic/language-reference/functions/conversion-functions.md), или если `Single`значение, возвращенное `Fix` автоматически преобразуется в целое число с [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным Off.</span><span class="sxs-lookup"><span data-stu-id="d9e89-314">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Fix` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Fix` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="d9e89-315">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-315">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="d9e89-316">В следующем примере показано такое оптимизированные преобразование:</span><span class="sxs-lookup"><span data-stu-id="d9e89-316">The following example illustrates such an optimized conversion:</span></span>
   
```vb
Dim s As Single = 173.7619
Dim i2 As Integer = CInt(Fix(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="d9e89-317">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-317">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-318">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-318">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-319">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-319">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-320">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-320">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-321">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-321">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-322">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-322">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-323">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-323">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-324">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-324">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-325">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-325">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-326">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-326">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-327">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-327">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-328">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-328">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-329">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-329">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-330">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-330">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-331">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-331">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-332">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-332">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d9e89-333">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-333">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-334">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-334">Required.</span></span> <span data-ttu-id="d9e89-335">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-335">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-336">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-336">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-337">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-337">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-338">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-338">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-339">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-339">If `Number` is</span></span>|<span data-ttu-id="d9e89-340">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-340">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-341">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-341">Empty</span></span>|<span data-ttu-id="d9e89-342">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-342">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-343">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-343">Any numeric value</span></span>|<span data-ttu-id="d9e89-344">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-344">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-345">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-345">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-346">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-346">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-347">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-347">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-348"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-348"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-349"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-349"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-350">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-350">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-351">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-351">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-352">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-352">Required.</span></span> <span data-ttu-id="d9e89-353">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-353">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-354">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-354">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-355">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-355">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-356">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-356">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-357">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-357">If `Number` is</span></span>|<span data-ttu-id="d9e89-358">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-358">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-359">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-359">Empty</span></span>|<span data-ttu-id="d9e89-360">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-360">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-361">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-361">Any numeric value</span></span>|<span data-ttu-id="d9e89-362">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-362">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-363">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-363">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-364">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-364">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-365">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-365">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-366"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-366"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-367"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-367"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-368">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-368">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-369">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-369">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-370">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-370">Required.</span></span> <span data-ttu-id="d9e89-371">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-371">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-372">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-372">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-373">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-373">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-374">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-374">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-375">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-375">If `Number` is</span></span>|<span data-ttu-id="d9e89-376">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-376">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-377">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-377">Empty</span></span>|<span data-ttu-id="d9e89-378">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-378">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-379">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-379">Any numeric value</span></span>|<span data-ttu-id="d9e89-380">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-380">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-381">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-381">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-382">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-382">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-383">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-383">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-384"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-384"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-385"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-385"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-386">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-386">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-387">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-387">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-388">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-388">Required.</span></span> <span data-ttu-id="d9e89-389">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-389">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-390">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-390">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-391">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-391">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-392">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-392">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-393">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-393">If `Number` is</span></span>|<span data-ttu-id="d9e89-394">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-394">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-395">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-395">Empty</span></span>|<span data-ttu-id="d9e89-396">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-396">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-397">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-397">Any numeric value</span></span>|<span data-ttu-id="d9e89-398">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-398">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-399">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-399">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-400">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-400">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-401">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-401">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-402"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-402"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-403"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-403"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-404">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-404">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-405">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-405">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-406">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-406">Required.</span></span> <span data-ttu-id="d9e89-407">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-407">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-408">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-408">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-409">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-409">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-410">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-410">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-411">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-411">If `Number` is</span></span>|<span data-ttu-id="d9e89-412">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-412">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-413">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-413">Empty</span></span>|<span data-ttu-id="d9e89-414">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-414">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-415">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-415">Any numeric value</span></span>|<span data-ttu-id="d9e89-416">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-416">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-417">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-417">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-418">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-418">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-419">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-419">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-420"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-420"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-421"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-421"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-422">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-422">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-423">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-423">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-424">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-424">Required.</span></span> <span data-ttu-id="d9e89-425">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-425">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-426">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-426">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-427">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-427">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-428">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-428">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-429">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-429">If `Number` is</span></span>|<span data-ttu-id="d9e89-430">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-430">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-431">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-431">Empty</span></span>|<span data-ttu-id="d9e89-432">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-432">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-433">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-433">Any numeric value</span></span>|<span data-ttu-id="d9e89-434">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-434">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-435">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-435">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-436">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-436">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-437">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-437">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-438"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-438"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-439"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-439"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-440">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-440">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-441">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-441">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-442">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-442">Required.</span></span> <span data-ttu-id="d9e89-443">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-443">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-444">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-444">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-445">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-445">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-446">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-446">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-447">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-447">If `Number` is</span></span>|<span data-ttu-id="d9e89-448">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-448">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-449">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-449">Empty</span></span>|<span data-ttu-id="d9e89-450">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-450">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-451">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-451">Any numeric value</span></span>|<span data-ttu-id="d9e89-452">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-452">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-453">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-453">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-454">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-454">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-455">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-455">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-456"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-456"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-457"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-457"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-458">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-458">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-459">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-459">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-460">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-460">Required.</span></span> <span data-ttu-id="d9e89-461">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-461">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-462">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-462">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-463">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-463">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-464">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-464">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-465">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-465">If `Number` is</span></span>|<span data-ttu-id="d9e89-466">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-466">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-467">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-467">Empty</span></span>|<span data-ttu-id="d9e89-468">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-468">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-469">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-469">Any numeric value</span></span>|<span data-ttu-id="d9e89-470">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-470">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-471">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-471">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-472">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-472">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-473">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-473">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-474"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-474"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-475"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-475"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-476">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-476">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-477">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-477">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-478">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-478">Required.</span></span> <span data-ttu-id="d9e89-479">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-479">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-480">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-480">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-481">Строка, представляющая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-481">A string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-482">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-482">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-483">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="d9e89-483">If `Number` is</span></span>|<span data-ttu-id="d9e89-484">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="d9e89-484">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-485">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-485">Empty</span></span>|<span data-ttu-id="d9e89-486">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-486">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-487">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="d9e89-487">Any numeric value</span></span>|<span data-ttu-id="d9e89-488">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="d9e89-488">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="d9e89-489">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-489">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="d9e89-490">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="d9e89-490">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-491">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-491">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-492"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-492"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-493"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-493"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-494">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-494">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md"><span data-ttu-id="d9e89-495">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span><span class="sxs-lookup"><span data-stu-id="d9e89-495">How to: Convert Hexadecimal Strings to Numbers</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d9e89-496">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-496">Returns the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-497">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-497">Required.</span></span> <span data-ttu-id="d9e89-498">Число типа <see langword="Decimal" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-498">A number of type <see langword="Decimal" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-499">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-499">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-500">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-500">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-501">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-501">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-502">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-502">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-503">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-503">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-504">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-504">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
## Examples  
 <span data-ttu-id="d9e89-505">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-505">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-506">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-506">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-507">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-507">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-508">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-508">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-509">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-509">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-510">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-511">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-511">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-512">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-512">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-513">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-513">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-514">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-514">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-515">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-515">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-516">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-516">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-517">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-517">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-518">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-518">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-519">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-519">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-520">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-520">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-521">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-521">Required.</span></span> <span data-ttu-id="d9e89-522">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-522">A number of type <see langword="Double" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-523">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-523">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-524">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-524">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-525">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-525">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-526">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-526">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-527">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-527">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-528">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-528">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="d9e89-529">Начиная с Visual Basic 15.8, производительность двойной в целочисленные преобразования оптимизирован при передаче значения, возвращенного `Int` метода к любому из [функции преобразования целочисленных](~/docs/visual-basic/language-reference/functions/conversion-functions.md), или, если значение типа Double возвращенный `Int` автоматически преобразуется в целое число с [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным Off.</span><span class="sxs-lookup"><span data-stu-id="d9e89-529">Starting with Visual Basic 15.8, the performance of Double-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the Double value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="d9e89-530">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-530">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="d9e89-531">В следующем примере показано такое оптимизированные преобразование:</span><span class="sxs-lookup"><span data-stu-id="d9e89-531">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim dbl As Double = 175.7619
Dim i3 As Integer = CInt(Int(dbl))         ' Result: 175
```  
  
## Examples  
 <span data-ttu-id="d9e89-532">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-532">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-533">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-533">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-534">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-534">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-535">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-535">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-536">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-536">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-537">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-537">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-538">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-538">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-539">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-539">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-540">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-540">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-541">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-541">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-542">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-542">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-543">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-543">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-544">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-544">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-545">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-545">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-546">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-546">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-547">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-547">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-548">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-548">Required.</span></span> <span data-ttu-id="d9e89-549">Число типа <see langword="Short" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-549">A number of type <see langword="Short" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-550">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-550">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-551">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-551">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-552">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-552">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-553">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-553">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-554">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-554">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-555">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-555">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-556">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-556">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-557">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-557">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-558">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-558">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-559">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-559">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-560">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-560">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-561">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-561">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-562">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-562">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-563">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-563">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-564">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-564">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-565">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-565">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-566">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-566">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-567">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-567">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-568">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-568">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-569">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-569">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-570">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-570">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-571">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-571">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-572">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-572">Required.</span></span> <span data-ttu-id="d9e89-573">Число типа <see langword="Integer" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-573">A number of type <see langword="Integer" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-574">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-574">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-575">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-575">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-576">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-576">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-577">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-577">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-578">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-578">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-579">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-579">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-580">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-580">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-581">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-581">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-582">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-582">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-583">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-583">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-584">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-584">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-585">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-586">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-586">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-587">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-587">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-588">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-588">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-589">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-589">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-590">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-590">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-591">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-591">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-592">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-592">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-593">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-593">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-594">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-594">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-595">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-595">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-596">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-596">Required.</span></span> <span data-ttu-id="d9e89-597">Число типа <see langword="Long" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-597">A number of type <see langword="Long" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-598">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-598">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-599">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-599">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-600">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-600">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-601">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-601">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-602">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-602">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-603">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-603">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-604">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-604">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-605">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-605">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-606">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-606">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-607">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-607">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-608">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-608">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-609">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-609">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-610">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-610">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-611">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-611">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-612">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-612">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-613">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-613">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-614">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-614">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-615">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-615">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-616">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-616">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-617">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-617">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-618">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-618">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-619">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-619">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-620">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-620">Required.</span></span> <span data-ttu-id="d9e89-621">Число типа <see langword="Object" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-621">A number of type <see langword="Object" /> or any valid numeric expression.</span></span> <span data-ttu-id="d9e89-622">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-622">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="d9e89-623">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-623">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-624">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-624">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-625">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-625">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-626">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-626">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-627">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-627">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-628">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-628">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="d9e89-629">Начиная с Visual Basic 15.8, если `Number` аргумент – это объект, тип которого среда выполнения `Double` или `Single`, оптимизирована производительность плавающей-запятой в целочисленные преобразования, если передается значение, возвращаемое `Int` метод к любому из [функции преобразования целочисленных](~/docs/visual-basic/language-reference/functions/conversion-functions.md), или если значение, возвращаемое функцией `Int` автоматически преобразуется в целое число с [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным Off.</span><span class="sxs-lookup"><span data-stu-id="d9e89-629">Starting with Visual Basic 15.8, if the `Number` argument is an object whose runtime type is `Double` or `Single`, the performance of floating-point-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="d9e89-630">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-630">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="d9e89-631">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-631">For example:</span></span>

```vb
Dim d As Object = 173.7619
Dim i1 As Integer = CInt(Int(d))           ' Result: 173
Dim s As Object = 173.7619F
Dim i2 As Integer = CInt(Int(s))           ' Result: 173
```

## Examples  
 <span data-ttu-id="d9e89-632">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-632">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-633">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-633">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-634">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-634">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-635">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-635">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-636">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-636">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-637">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-637">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-638">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-638">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-639">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-639">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-640">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-640">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-641">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-641">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-642">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-642">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-643">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-643">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-644">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-644">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-645">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-645">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-646">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-646">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-647">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-647">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-648">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-648">Required.</span></span> <span data-ttu-id="d9e89-649">Число типа <see langword="Single" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-649">A number of type <see langword="Single" /> or any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-650">Возвращает целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-650">Returns the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-651">Целая часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-651">The integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-652">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-652">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="d9e89-653">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-653">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="d9e89-654">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-654">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="d9e89-655">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="d9e89-655">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
<span data-ttu-id="d9e89-656">Начиная с Visual Basic 15.8, производительность `Single`-к-преобразование целочисленные оптимизирован в том случае, если передается значение, возвращенное `Int` метода к любому из [функции преобразования целочисленных](~/docs/visual-basic/language-reference/functions/conversion-functions.md), или если `Single`значение, возвращенное `Int` автоматически преобразуется в целое число с [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) , равным Off.</span><span class="sxs-lookup"><span data-stu-id="d9e89-656">Starting with Visual Basic 15.8, the performance of `Single`-to-integer conversion is optimized if you pass the value returned by the `Int` method to the any of the [integral conversion functions](~/docs/visual-basic/language-reference/functions/conversion-functions.md), or if the `Single` value returned by `Int` is automatically converted to an integer with [Option Strict](~/docs/visual-basic/language-reference/statements/option-strict-statement.md) set to Off.</span></span> <span data-ttu-id="d9e89-657">Эта оптимизация позволяет коду выполняться быстрее — до двух раз быстрее для кода, который выполняет большое количество преобразований в целочисленные типы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-657">This optimization allows code to run faster -- up to twice as fast for code that does a large number of conversions to integer types.</span></span> <span data-ttu-id="d9e89-658">В следующем примере показано такое оптимизированные преобразование:</span><span class="sxs-lookup"><span data-stu-id="d9e89-658">The following example illustrates such an optimized conversion:</span></span>

```vb
Dim sng As Single = 175.7619
Dim i3 As Integer = CInt(Fix(sng))         ' Result: 175
```

## Examples  
 <span data-ttu-id="d9e89-659">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-659">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="d9e89-660">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-660">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="d9e89-661">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="d9e89-661">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="d9e89-662">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-662">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="d9e89-663">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-663">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="d9e89-664">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-664">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="d9e89-665">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="d9e89-665">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="d9e89-666">Например:</span><span class="sxs-lookup"><span data-stu-id="d9e89-666">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="d9e89-667">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="d9e89-667">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-668">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="d9e89-668">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-669">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-669">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-670">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-670">Type Conversion Functions</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md"><span data-ttu-id="d9e89-671">Сводка типов данных (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-671">Data Type Summary (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md"><span data-ttu-id="d9e89-672">Сводка по математическим функциям</span><span class="sxs-lookup"><span data-stu-id="d9e89-672">Math Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md"><span data-ttu-id="d9e89-673">Математические функции (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="d9e89-673">Math Functions (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-674">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-674">Conversion Summary</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d9e89-675">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-675">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-676">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-676">Required.</span></span> <span data-ttu-id="d9e89-677">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-677">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-678">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-678">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-679">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-679">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-680">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-680">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-681">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-681">If Number is</span></span>|<span data-ttu-id="d9e89-682">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-682">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-683">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-683">Empty</span></span>|<span data-ttu-id="d9e89-684">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-684">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-685">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-685">Any other number</span></span>|<span data-ttu-id="d9e89-686">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-686">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-687">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-687">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-688">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-688">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-689">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-689">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-690"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-690"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-691"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-691"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-692">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-692">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-693">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-693">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-694">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-694">Required.</span></span> <span data-ttu-id="d9e89-695">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-695">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-696">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-696">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-697">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-697">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-698">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-698">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-699">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-699">If Number is</span></span>|<span data-ttu-id="d9e89-700">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-700">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-701">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-701">Empty</span></span>|<span data-ttu-id="d9e89-702">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-702">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-703">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-703">Any other number</span></span>|<span data-ttu-id="d9e89-704">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-704">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-705">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-705">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-706">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-706">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-707">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-707">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-708"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-708"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-709"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-709"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-710">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-710">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-711">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-711">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-712">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-712">Required.</span></span> <span data-ttu-id="d9e89-713">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-713">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-714">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-714">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-715">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-715">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-716">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-716">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-717">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-717">If Number is</span></span>|<span data-ttu-id="d9e89-718">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-718">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-719">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-719">Empty</span></span>|<span data-ttu-id="d9e89-720">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-720">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-721">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-721">Any other number</span></span>|<span data-ttu-id="d9e89-722">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-722">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-723">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-723">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-724">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-724">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-725">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-725">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-726"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-726"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-727"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-727"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-728">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-728">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-729">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-729">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-730">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-730">Required.</span></span> <span data-ttu-id="d9e89-731">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-731">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-732">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-732">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-733">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-733">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-734">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-734">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-735">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-735">If Number is</span></span>|<span data-ttu-id="d9e89-736">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-736">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-737">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-737">Empty</span></span>|<span data-ttu-id="d9e89-738">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-738">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-739">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-739">Any other number</span></span>|<span data-ttu-id="d9e89-740">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-740">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-741">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-741">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-742">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-742">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-743">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-743">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-744"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-744"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-745"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-745"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-746">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-746">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-747">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-747">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-748">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-748">Required.</span></span> <span data-ttu-id="d9e89-749">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-749">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-750">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-750">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-751">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-751">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-752">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-752">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-753">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-753">If Number is</span></span>|<span data-ttu-id="d9e89-754">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-754">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-755">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-755">Empty</span></span>|<span data-ttu-id="d9e89-756">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-756">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-757">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-757">Any other number</span></span>|<span data-ttu-id="d9e89-758">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-758">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-759">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-759">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-760">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-760">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-761">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-761">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-762"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-762"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-763"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-763"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-764">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-764">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-765">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-765">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-766">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-766">Required.</span></span> <span data-ttu-id="d9e89-767">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-767">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-768">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-768">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-769">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-769">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-770">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-770">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-771">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-771">If Number is</span></span>|<span data-ttu-id="d9e89-772">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-772">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-773">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-773">Empty</span></span>|<span data-ttu-id="d9e89-774">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-774">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-775">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-775">Any other number</span></span>|<span data-ttu-id="d9e89-776">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-776">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-777">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-777">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-778">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-778">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-779">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-779">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-780"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-780"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-781"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-781"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-782">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-782">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-783">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-783">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-784">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-784">Required.</span></span> <span data-ttu-id="d9e89-785">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-785">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-786">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-786">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-787">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-787">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-788">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-788">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-789">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-789">If Number is</span></span>|<span data-ttu-id="d9e89-790">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-790">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-791">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-791">Empty</span></span>|<span data-ttu-id="d9e89-792">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-792">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-793">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-793">Any other number</span></span>|<span data-ttu-id="d9e89-794">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-794">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-795">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-795">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-796">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-796">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-797">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-797">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-798"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-798"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-799"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-799"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-800">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-800">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-801">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-801">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-802">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-802">Required.</span></span> <span data-ttu-id="d9e89-803">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-803">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-804">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-804">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-805">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-805">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-806">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-806">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-807">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-807">If Number is</span></span>|<span data-ttu-id="d9e89-808">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-808">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-809">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-809">Empty</span></span>|<span data-ttu-id="d9e89-810">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-810">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-811">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-811">Any other number</span></span>|<span data-ttu-id="d9e89-812">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-812">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-813">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-813">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-814">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-814">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-815">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-815">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-816"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-816"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-817"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-817"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-818">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-818">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-819">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-819">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-820">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-820">Required.</span></span> <span data-ttu-id="d9e89-821">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-821">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-822">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-822">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-823">Строка, представляющая восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-823">A string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-824">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="d9e89-824">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="d9e89-825">Если число</span><span class="sxs-lookup"><span data-stu-id="d9e89-825">If Number is</span></span>|<span data-ttu-id="d9e89-826">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="d9e89-826">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="d9e89-827">Empty</span><span class="sxs-lookup"><span data-stu-id="d9e89-827">Empty</span></span>|<span data-ttu-id="d9e89-828">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="d9e89-828">Zero (0)</span></span>|  
|<span data-ttu-id="d9e89-829">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="d9e89-829">Any other number</span></span>|<span data-ttu-id="d9e89-830">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="d9e89-830">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="d9e89-831">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-831">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="d9e89-832">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="d9e89-832">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-833">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-833">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-834"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-834"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-835"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-835"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-836">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-836">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-837">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-837">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="d9e89-838">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-838">Required.</span></span> <span data-ttu-id="d9e89-839"><see langword="Object" />, содержащий любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-839">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="d9e89-840">Возвращает представление <see langword="String" /> числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-840">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="d9e89-841">Представление <see langword="String" /> числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-841">A <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-842">При преобразовании чисел в строки, начальный пробел всегда резервируется для знака `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-842">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="d9e89-843">Если `Number` является положительным, возвращаемая строка содержит начальный пробел и знак «плюс» подразумевается.</span><span class="sxs-lookup"><span data-stu-id="d9e89-843">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="d9e89-844">Отрицательное число включает знак минус (-) и не начальным пробелом.</span><span class="sxs-lookup"><span data-stu-id="d9e89-844">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="d9e89-845">Используйте `Format` функцию для преобразования числовых значений, следует форматировать как даты или времени, валюты или в других пользовательских форматах.</span><span class="sxs-lookup"><span data-stu-id="d9e89-845">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="d9e89-846">В отличие от `Str` функции `Format` функция не включает начальный пробел для знак `Number`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-846">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9e89-847">`Str` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="d9e89-847">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9e89-848">Если используются разные десятичные разделители (например, в международных приложениях), используйте `CStr` или `Format` функции для преобразования числа в строку.</span><span class="sxs-lookup"><span data-stu-id="d9e89-848">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="d9e89-849">Чтобы получить строковое представление числа в определенного языка и региональных параметров, используйте номер `ToString(IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="d9e89-849">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="d9e89-850">Например, использовать <xref:System.Double.ToString%2A> при преобразовании значения типа `Double` в строку.</span><span class="sxs-lookup"><span data-stu-id="d9e89-850">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-851">В этом примере используется `Str` функция, возвращающая `String` представление числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-851">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="d9e89-852">Если положительное число преобразуется в строку, начальный пробел всегда резервируется для знака.</span><span class="sxs-lookup"><span data-stu-id="d9e89-852">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="d9e89-853"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="d9e89-853"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="d9e89-854"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="d9e89-854"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md"><span data-ttu-id="d9e89-855">Сводка по преобразованию</span><span class="sxs-lookup"><span data-stu-id="d9e89-855">Conversion Summary</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-856">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-856">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="d9e89-857">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-857">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="d9e89-858">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-858">Required.</span></span> <span data-ttu-id="d9e89-859">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-859">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="d9e89-860">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-860">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="d9e89-861">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-861">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="d9e89-862">Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-862">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-863">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-863">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d9e89-864">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="d9e89-864">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d9e89-865">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="d9e89-865">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d9e89-866">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="d9e89-866">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="d9e89-867">Следующий вызов возвращает значение 1615198.</span><span class="sxs-lookup"><span data-stu-id="d9e89-867">The following call returns the value 1615198.</span></span>  
  
```vb  
Val(" 1615 198th Street N.E.")   
```  
  
<span data-ttu-id="d9e89-868">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="d9e89-868">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d9e89-869">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="d9e89-869">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9e89-870">Если используются разные десятичные разделители, например приложения на разных языках, использовать `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="d9e89-870">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d9e89-871">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="d9e89-871">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d9e89-872">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-872">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
<span data-ttu-id="d9e89-873"><xref:System.InvalidCastException> Исключение может выдаваться в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-873">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="d9e89-874">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-874">For example, the following code raises this exception.</span></span>  

```vb
' These examples cause run-time errors.  
Console.WriteLine(Val("1.34%"))  
Console.WriteLine(Val("1.34&"))  
```

<span data-ttu-id="d9e89-875">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если она не содержалась в строке.</span><span class="sxs-lookup"><span data-stu-id="d9e89-875">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  

```vb
' These examples cause compiler errors.  
Dim m = 1.34%  
Dim n = 1.34&
```  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-876">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="d9e89-876">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d9e89-877">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-877">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d9e89-878"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-878"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-879"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-879"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-880">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-880">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="d9e89-881">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-881">Required.</span></span> <span data-ttu-id="d9e89-882">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-882">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="d9e89-883">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-883">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="d9e89-884">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-884">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="d9e89-885">Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-885">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-886">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-886">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d9e89-887">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="d9e89-887">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d9e89-888">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="d9e89-888">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d9e89-889">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="d9e89-889">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d9e89-890">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="d9e89-890">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="d9e89-891">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="d9e89-891">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d9e89-892">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="d9e89-892">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9e89-893">При использовании других десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="d9e89-893">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d9e89-894">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="d9e89-894">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d9e89-895">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-895">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9e89-896"><xref:System.InvalidCastException> Исключение может выдаваться в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-896">An <xref:System.InvalidCastException> exception might be thrown in response to certain uncommon number formats.</span></span> <span data-ttu-id="d9e89-897">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-897">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d9e89-898">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="d9e89-898">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-899">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="d9e89-899">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d9e89-900">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-900">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d9e89-901"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-901"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-902"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-902"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-903">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-903">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="d9e89-904">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="d9e89-904">Required.</span></span> <span data-ttu-id="d9e89-905">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-905">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="d9e89-906">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-906">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="d9e89-907">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-907">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="d9e89-908">Порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-908">The numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d9e89-909">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="d9e89-909">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="d9e89-910">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="d9e89-910">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="d9e89-911">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="d9e89-911">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="d9e89-912">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="d9e89-912">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="d9e89-913">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="d9e89-913">The following call returns the value 1234123.</span></span>  
  
```vb  
Val(" 1234 123th Street N.E.")   
```  
  
<span data-ttu-id="d9e89-914">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="d9e89-914">The following call returns the decimal value -1.</span></span>  
  
```vb  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="d9e89-915">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="d9e89-915">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="d9e89-916">При использовании других десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="d9e89-916">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="d9e89-917">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="d9e89-917">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="d9e89-918">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="d9e89-918">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d9e89-919"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-919">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="d9e89-920">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-920">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="d9e89-921">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="d9e89-921">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="d9e89-922">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="d9e89-922">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="d9e89-923">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="d9e89-923">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException"><span data-ttu-id="d9e89-924"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="d9e89-924"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="d9e89-925"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="d9e89-925"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md"><span data-ttu-id="d9e89-926">Type Conversion Functions</span><span class="sxs-lookup"><span data-stu-id="d9e89-926">Type Conversion Functions</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>