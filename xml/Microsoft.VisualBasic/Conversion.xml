<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cc0120340cfb097270b9032d2692b053057366ea" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52242787" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7097c-101">В модуле <see langword="Conversion" /> содержатся процедуры, используемые для выполнения различных операций преобразования.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7097c-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-102">Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения для преобразования десятичных чисел в другую систему исчисления чисел в строки, строк в числа и одного типа к другому.</span><span class="sxs-lookup"><span data-stu-id="7097c-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-103">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
      <span data-ttu-id="7097c-104">Сводка по преобразованию</span>
      <span class="sxs-lookup">
        <span data-stu-id="7097c-104">Conversion Summary</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">
      <span data-ttu-id="7097c-105">Ключевые слова (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="7097c-105">Keywords (Visual Basic)</span>
      </span>
    </related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">
      <span data-ttu-id="7097c-106">Члены библиотеки времени выполнения Visual Basic</span>
      <span class="sxs-lookup">
        <span data-stu-id="7097c-106">Visual Basic Run-Time Library Members</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7097c-107">Преобразуемый объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-107">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="7097c-108">Тип данных, в который требуется преобразовать объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-108">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-109">Преобразовывает объект в указанный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-109">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-110">Объект, тип которого во время выполнения является запрошенным типом целевого объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-110">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-111">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром `TargetType` параметр.</span><span class="sxs-lookup"><span data-stu-id="7097c-111">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="7097c-112">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="7097c-112">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="7097c-113">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенные самим объектом.</span><span class="sxs-lookup"><span data-stu-id="7097c-113">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="7097c-114">Если динамический объект наследует свойства от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` сначала пытается выполнить преобразование, с помощью преобразования определяемых пользователем, статический метод.</span><span class="sxs-lookup"><span data-stu-id="7097c-114">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="7097c-115">При сбое преобразования определяемых пользователем, статические, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="7097c-115">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="7097c-116">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статических преобразований.</span><span class="sxs-lookup"><span data-stu-id="7097c-116">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-117">В следующем примере используется `CTypeDynamic` метод для преобразования динамический объект в строку с помощью преобразования определяется динамический объект.</span><span class="sxs-lookup"><span data-stu-id="7097c-117">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="7097c-118">Работа с динамическими объектами (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-118">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="7097c-119">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-119">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="7097c-120">Тип данных, в который требуется преобразовать объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-120">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="7097c-121">Преобразуемый объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-121">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-122">Преобразует объект в указанный универсальный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-122">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-123">Объект со статической типизацией, имеющий запрошенный универсальный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-123">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-124">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром типа универсального параметра.</span><span class="sxs-lookup"><span data-stu-id="7097c-124">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="7097c-125">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="7097c-125">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="7097c-126">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенные самим объектом.</span><span class="sxs-lookup"><span data-stu-id="7097c-126">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="7097c-127">Если динамический объект наследует свойства от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` сначала пытается выполнить преобразование, с помощью преобразования определяемых пользователем, статический метод.</span><span class="sxs-lookup"><span data-stu-id="7097c-127">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="7097c-128">При сбое преобразования определяемых пользователем, статические, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="7097c-128">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="7097c-129">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статических преобразований.</span><span class="sxs-lookup"><span data-stu-id="7097c-129">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-130">В следующем примере используется `CTypeDynamic` метод для преобразования динамический объект в строку с помощью преобразования определяется динамический объект.</span><span class="sxs-lookup"><span data-stu-id="7097c-130">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/early-late-binding/working-with-dynamic-objects.md">
          <span data-ttu-id="7097c-131">Работа с динамическими объектами (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-131">Working with Dynamic Objects (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/csharp/programming-guide/types/walkthrough-creating-and-using-dynamic-objects.md">
          <span data-ttu-id="7097c-132">Пошаговое руководство. Создание и использование динамических объектов (C# и Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-132">Walkthrough: Creating and Using Dynamic Objects (C# and Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7097c-133">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-133">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7097c-134">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-134">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-135">Сообщение об ошибке, соответствующее самой последней ошибке времени выполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-135">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-136">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="7097c-136">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="7097c-137">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="7097c-137">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="7097c-138">При отсутствии ошибок времени выполнения, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="7097c-138">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="7097c-139">В Visual Basic версии 6.0 и более ранних версий, эти функции были предоставлены по `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="7097c-139">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-140">В следующем коде используется `ErrorToString` функцию для отображения сообщения об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="7097c-140">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-141">
            <paramref name="ErrorNumber" /> выходит за пределы диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-141">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="7097c-142">Необязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-142">Optional.</span>
          </span>
          <span data-ttu-id="7097c-143">Любой допустимый номер ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-143">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-144">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-144">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-145">Сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-145">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-146">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="7097c-146">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="7097c-147">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="7097c-147">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="7097c-148">Если `ErrorNumber` — это допустимый номер ошибки, но не задано, `ErrorToString` возвращает строку `"Application-defined or object-defined error."` Если `ErrorNumber` является недопустимым, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="7097c-148">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="7097c-149">Если `ErrorNumber` опущен, сообщение, соответствующее самой последней ошибки времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="7097c-149">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="7097c-150">Если произошло ни одной ошибки времени выполнения или `ErrorNumber` равно 0, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="7097c-150">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="7097c-151">В Visual Basic версии 6.0 и более ранних версий, эти функции были предоставлены по `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="7097c-151">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-152">В следующем коде используется `ErrorToString` функцию для отображения сообщения об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="7097c-152">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-153">
            <paramref name="ErrorNumber" /> выходит за пределы диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-153">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7097c-154">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-154">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-155">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-155">Required.</span>
          </span>
          <span data-ttu-id="7097c-156">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-156">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-157">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-157">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-158">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-158">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-159">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-159">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-160">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-160">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-161">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-161">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-162">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-162">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-163">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-163">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-164">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-164">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-165">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-165">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-166">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-166">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-167">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-167">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-168">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-168">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-169">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-169">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-170">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-170">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-171">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-171">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-172">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-172">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-173">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-173">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-174">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-174">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-175">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-175">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-176">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-176">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-177">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-177">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-178">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-178">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-179">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-179">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-180">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-180">Required.</span>
          </span>
          <span data-ttu-id="7097c-181">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-181">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-182">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-182">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-183">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-183">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-184">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-184">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-185">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-185">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-186">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-186">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-187">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-187">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-188">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-188">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-189">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-189">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-190">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-190">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-191">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-191">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-192">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-192">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-193">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-193">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-194">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-194">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-195">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-195">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-196">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-196">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-197">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-197">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-198">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-198">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-199">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-199">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-200">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-200">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-201">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-201">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-202">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-202">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-203">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-203">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-204">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-204">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-205">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-205">Required.</span>
          </span>
          <span data-ttu-id="7097c-206">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-206">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-207">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-207">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-208">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-208">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-209">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-209">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-210">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-210">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-211">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-211">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-212">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-212">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-213">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-213">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-214">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-214">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-215">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-215">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-216">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-216">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-217">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-217">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-218">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-218">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-219">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-219">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-220">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-220">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-221">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-221">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-222">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-222">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-223">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-223">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-224">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-224">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-225">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-225">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-226">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-226">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-227">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-227">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-228">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-228">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-229">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-229">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-230">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-230">Required.</span>
          </span>
          <span data-ttu-id="7097c-231">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-231">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-232">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-232">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-233">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-233">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-234">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-234">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-235">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-235">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-236">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-236">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-237">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-237">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-238">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-238">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-239">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-239">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-240">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-240">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-241">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-241">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-242">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-242">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-243">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-243">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-244">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-245">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-245">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-246">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-246">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-247">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-247">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-248">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-248">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-249">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-249">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-250">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-250">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-251">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-251">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-252">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-252">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-253">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-253">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-254">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-254">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-255">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-255">Required.</span>
          </span>
          <span data-ttu-id="7097c-256">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-256">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-257">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-257">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-258">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-258">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-259">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-259">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-260">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-260">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-261">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-261">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-262">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-262">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-263">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-263">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-264">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-264">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-265">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-265">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-266">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-266">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-267">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-267">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-268">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-268">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-269">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-269">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-270">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-270">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-271">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-271">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-272">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-272">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-273">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-273">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-274">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-274">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-275">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-275">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-276">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-276">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-277">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-277">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-278">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-278">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-279">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-279">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-280">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-280">Required.</span>
          </span>
          <span data-ttu-id="7097c-281">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-281">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-282">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-282">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-283">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-283">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-284">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-284">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-285">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-285">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-286">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-286">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-287">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-287">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-288">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-288">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-289">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-289">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-290">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-290">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-291">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-291">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-292">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-292">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-293">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-293">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-294">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-294">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-295">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-295">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-296">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-296">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-297">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-297">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-298">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-298">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-299">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-299">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-300">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-300">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-301">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-301">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-302">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-302">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-303">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-303">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-304">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-304">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-305">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-305">Required.</span>
          </span>
          <span data-ttu-id="7097c-306">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-306">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-307">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-307">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-308">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-308">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-309">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-309">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-310">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-310">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-311">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-311">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-312">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-312">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-313">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-313">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-314">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-314">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-315">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-315">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-316">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-316">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-317">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-317">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-318">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-318">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-319">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-319">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-320">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-320">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-321">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-321">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-322">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-322">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-323">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-323">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-324">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-324">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-325">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-325">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-326">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-326">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-327">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-327">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-328">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-328">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-329">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-329">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7097c-330">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-330">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-331">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-331">Required.</span>
          </span>
          <span data-ttu-id="7097c-332">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-332">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-333">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-333">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-334">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-334">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-335">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-335">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-336">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-336">If `Number` is</span></span>|<span data-ttu-id="7097c-337">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-337">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-338">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-338">Empty</span></span>|<span data-ttu-id="7097c-339">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-339">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-340">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-340">Any numeric value</span></span>|<span data-ttu-id="7097c-341">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-341">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-342">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-342">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-343">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-343">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-344">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-344">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-345">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-345">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-346">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-346">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-347">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-347">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-348">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-348">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-349">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-349">Required.</span>
          </span>
          <span data-ttu-id="7097c-350">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-350">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-351">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-351">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-352">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-352">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-353">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-353">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-354">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-354">If `Number` is</span></span>|<span data-ttu-id="7097c-355">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-355">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-356">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-356">Empty</span></span>|<span data-ttu-id="7097c-357">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-357">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-358">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-358">Any numeric value</span></span>|<span data-ttu-id="7097c-359">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-359">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-360">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-360">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-361">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-361">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-362">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-362">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-363">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-363">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-364">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-364">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-365">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-365">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-366">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-366">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-367">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-367">Required.</span>
          </span>
          <span data-ttu-id="7097c-368">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-368">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-369">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-369">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-370">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-370">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-371">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-371">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-372">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-372">If `Number` is</span></span>|<span data-ttu-id="7097c-373">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-373">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-374">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-374">Empty</span></span>|<span data-ttu-id="7097c-375">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-375">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-376">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-376">Any numeric value</span></span>|<span data-ttu-id="7097c-377">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-377">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-378">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-378">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-379">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-379">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-380">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-380">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-381">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-381">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-382">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-382">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-383">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-383">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-384">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-384">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-385">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-385">Required.</span>
          </span>
          <span data-ttu-id="7097c-386">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-387">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-388">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-389">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-390">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-390">If `Number` is</span></span>|<span data-ttu-id="7097c-391">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-392">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-392">Empty</span></span>|<span data-ttu-id="7097c-393">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-393">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-394">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-394">Any numeric value</span></span>|<span data-ttu-id="7097c-395">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-396">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-397">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-398">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-399">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-400">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-401">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-401">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-402">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-402">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-403">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-403">Required.</span>
          </span>
          <span data-ttu-id="7097c-404">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-404">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-405">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-405">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-406">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-406">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-407">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-407">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-408">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-408">If `Number` is</span></span>|<span data-ttu-id="7097c-409">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-409">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-410">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-410">Empty</span></span>|<span data-ttu-id="7097c-411">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-411">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-412">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-412">Any numeric value</span></span>|<span data-ttu-id="7097c-413">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-413">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-414">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-414">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-415">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-415">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-416">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-416">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-417">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-417">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-418">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-418">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-419">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-419">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-420">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-420">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-421">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-421">Required.</span>
          </span>
          <span data-ttu-id="7097c-422">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-422">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-423">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-423">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-424">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-424">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-425">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-425">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-426">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-426">If `Number` is</span></span>|<span data-ttu-id="7097c-427">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-427">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-428">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-428">Empty</span></span>|<span data-ttu-id="7097c-429">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-429">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-430">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-430">Any numeric value</span></span>|<span data-ttu-id="7097c-431">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-431">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-432">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-432">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-433">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-433">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-434">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-434">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-435">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-435">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-436">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-436">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-437">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-437">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-438">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-438">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-439">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-439">Required.</span>
          </span>
          <span data-ttu-id="7097c-440">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-440">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-441">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-441">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-442">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-442">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-443">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-443">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-444">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-444">If `Number` is</span></span>|<span data-ttu-id="7097c-445">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-445">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-446">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-446">Empty</span></span>|<span data-ttu-id="7097c-447">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-447">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-448">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-448">Any numeric value</span></span>|<span data-ttu-id="7097c-449">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-449">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-450">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-450">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-451">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-451">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-452">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-452">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-453">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-453">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-454">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-454">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-455">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-455">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-456">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-456">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-457">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-457">Required.</span>
          </span>
          <span data-ttu-id="7097c-458">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-458">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-459">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-459">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-460">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-460">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-461">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-461">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-462">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-462">If `Number` is</span></span>|<span data-ttu-id="7097c-463">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-463">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-464">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-464">Empty</span></span>|<span data-ttu-id="7097c-465">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-465">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-466">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-466">Any numeric value</span></span>|<span data-ttu-id="7097c-467">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-467">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-468">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-468">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-469">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-469">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-470">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-470">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-471">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-471">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-472">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-472">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-473">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-473">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-474">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-474">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-475">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-475">Required.</span>
          </span>
          <span data-ttu-id="7097c-476">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-476">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-477">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-477">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-478">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-478">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-479">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-479">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-480">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="7097c-480">If `Number` is</span></span>|<span data-ttu-id="7097c-481">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="7097c-481">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-482">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-482">Empty</span></span>|<span data-ttu-id="7097c-483">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-483">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-484">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="7097c-484">Any numeric value</span></span>|<span data-ttu-id="7097c-485">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="7097c-485">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="7097c-486">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="7097c-486">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="7097c-487">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="7097c-487">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-488">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-488">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-489">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-489">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-490">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-490">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-491">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-491">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/strings/how-to-convert-hexadecimal-strings-to-numbers.md">
          <span data-ttu-id="7097c-492">Практическое руководство. Преобразование шестнадцатеричных строк в числа</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-492">How to: Convert Hexadecimal Strings to Numbers</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7097c-493">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-493">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-494">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-494">Required.</span>
          </span>
          <span data-ttu-id="7097c-495">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-496">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-496">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-497">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-498">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-499">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-500">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-501">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-502">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-503">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-504">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-505">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-506">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-507">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-508">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-509">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-510">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-511">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-512">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-513">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-514">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-514">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-515">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-515">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-516">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-516">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-517">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-517">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-518">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-518">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-519">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-519">Required.</span>
          </span>
          <span data-ttu-id="7097c-520">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-520">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-521">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-521">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-522">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-522">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-523">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-523">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-524">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-524">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-525">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-525">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-526">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-526">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-527">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-527">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-528">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-528">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-529">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-529">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-530">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-530">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-531">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-531">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-532">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-532">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-533">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-533">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-534">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-534">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-535">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-535">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-536">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-536">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-537">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-537">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-538">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-538">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-539">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-539">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-540">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-540">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-541">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-541">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-542">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-542">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-543">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-543">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-544">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-544">Required.</span>
          </span>
          <span data-ttu-id="7097c-545">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-545">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-546">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-546">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-547">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-547">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-548">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-548">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-549">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-549">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-550">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-550">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-551">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-551">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-552">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-552">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-553">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-553">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-554">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-554">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-555">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-555">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-556">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-556">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-557">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-557">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-558">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-558">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-559">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-559">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-560">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-560">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-561">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-561">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-562">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-562">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-563">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-563">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-564">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-564">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-565">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-565">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-566">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-566">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-567">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-567">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-568">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-568">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-569">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-569">Required.</span>
          </span>
          <span data-ttu-id="7097c-570">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-570">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-571">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-571">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-572">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-572">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-573">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-573">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-574">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-574">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-575">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-575">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-576">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-576">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-577">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-577">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-578">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-578">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-579">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-579">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-580">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-580">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-581">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-581">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-582">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-582">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-583">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-583">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-584">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-584">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-585">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-585">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-586">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-586">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-587">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-587">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-588">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-588">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-589">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-589">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-590">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-590">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-591">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-591">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-592">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-592">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-593">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-593">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-594">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-594">Required.</span>
          </span>
          <span data-ttu-id="7097c-595">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-595">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-596">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-596">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-597">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-597">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-598">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-598">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-599">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-599">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-600">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-600">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-601">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-601">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-602">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-602">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-603">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-603">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-604">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-604">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-605">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-605">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-606">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-606">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-607">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-607">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-608">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-608">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-609">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-609">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-610">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-610">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-611">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-611">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-612">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-612">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-613">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-613">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-614">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-614">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-615">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-615">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-616">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-616">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-617">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-617">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-618">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-618">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-619">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-619">Required.</span>
          </span>
          <span data-ttu-id="7097c-620">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-620">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-621">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-621">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-622">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-622">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-623">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-623">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-624">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-624">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-625">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-625">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-626">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-626">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-627">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-627">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-628">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-628">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-629">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-629">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-630">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-630">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-631">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-631">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-632">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-632">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-633">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-633">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-634">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-634">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-635">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-635">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-636">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-636">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-637">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-637">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-638">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-638">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-639">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-639">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-640">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-640">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-641">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-641">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-642">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-642">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-643">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-643">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-644">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-644">Required.</span>
          </span>
          <span data-ttu-id="7097c-645">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-645">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="7097c-646">Если параметр <paramref name="Number" /> имеет значение <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-646">If <paramref name="Number" /> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-647">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-647">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-648">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-648">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-649">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="7097c-649">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="7097c-650">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-650">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="7097c-651">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="7097c-651">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="7097c-652">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="7097c-652">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-653">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-653">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="7097c-654">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="7097c-654">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="7097c-655">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="7097c-655">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="7097c-656">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="7097c-656">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="7097c-657">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-657">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="7097c-658">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-658">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7097c-659">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="7097c-659">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="7097c-660">Пример:</span><span class="sxs-lookup"><span data-stu-id="7097c-660">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7097c-661">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="7097c-661">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-662">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-662">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-663">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-663">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-664">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-664">Type Conversion Functions</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/data-types/data-type-summary.md">
          <span data-ttu-id="7097c-665">Сводка типов данных (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-665">Data Type Summary (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/math-summary.md">
          <span data-ttu-id="7097c-666">Сводка по математическим функциям</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-666">Math Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/math-functions.md">
          <span data-ttu-id="7097c-667">Математические функции (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-667">Math Functions (Visual Basic)</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-668">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-668">Conversion Summary</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7097c-669">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-669">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-670">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-670">Required.</span>
          </span>
          <span data-ttu-id="7097c-671">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-671">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-672">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-672">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-673">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-673">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-674">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-674">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-675">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-675">If Number is</span></span>|<span data-ttu-id="7097c-676">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-676">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-677">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-677">Empty</span></span>|<span data-ttu-id="7097c-678">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-678">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-679">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-679">Any other number</span></span>|<span data-ttu-id="7097c-680">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-680">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-681">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-681">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-682">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-682">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-683">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-683">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-684">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-684">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-685">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-685">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-686">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-686">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-687">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-687">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-688">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-688">Required.</span>
          </span>
          <span data-ttu-id="7097c-689">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-689">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-690">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-690">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-691">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-691">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-692">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-692">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-693">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-693">If Number is</span></span>|<span data-ttu-id="7097c-694">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-694">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-695">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-695">Empty</span></span>|<span data-ttu-id="7097c-696">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-696">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-697">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-697">Any other number</span></span>|<span data-ttu-id="7097c-698">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-698">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-699">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-699">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-700">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-700">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-701">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-701">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-702">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-702">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-703">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-703">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-704">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-704">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-705">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-705">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-706">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-706">Required.</span>
          </span>
          <span data-ttu-id="7097c-707">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-707">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-708">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-708">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-709">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-709">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-710">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-710">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-711">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-711">If Number is</span></span>|<span data-ttu-id="7097c-712">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-712">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-713">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-713">Empty</span></span>|<span data-ttu-id="7097c-714">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-714">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-715">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-715">Any other number</span></span>|<span data-ttu-id="7097c-716">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-716">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-717">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-717">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-718">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-718">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-719">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-719">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-720">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-720">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-721">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-721">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-722">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-722">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-723">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-723">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-724">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-724">Required.</span>
          </span>
          <span data-ttu-id="7097c-725">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-725">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-726">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-726">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-727">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-727">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-728">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-728">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-729">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-729">If Number is</span></span>|<span data-ttu-id="7097c-730">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-730">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-731">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-731">Empty</span></span>|<span data-ttu-id="7097c-732">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-732">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-733">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-733">Any other number</span></span>|<span data-ttu-id="7097c-734">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-734">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-735">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-735">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-736">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-736">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-737">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-737">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-738">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-738">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-739">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-739">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-740">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-740">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-741">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-741">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-742">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-742">Required.</span>
          </span>
          <span data-ttu-id="7097c-743">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-743">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-744">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-744">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-745">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-745">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-746">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-746">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-747">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-747">If Number is</span></span>|<span data-ttu-id="7097c-748">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-748">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-749">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-749">Empty</span></span>|<span data-ttu-id="7097c-750">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-750">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-751">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-751">Any other number</span></span>|<span data-ttu-id="7097c-752">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-752">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-753">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-753">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-754">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-754">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-755">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-755">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-756">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-756">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-757">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-757">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-758">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-758">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-759">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-759">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-760">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-760">Required.</span>
          </span>
          <span data-ttu-id="7097c-761">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-761">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-762">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-762">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-763">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-763">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-764">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-764">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-765">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-765">If Number is</span></span>|<span data-ttu-id="7097c-766">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-766">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-767">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-767">Empty</span></span>|<span data-ttu-id="7097c-768">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-768">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-769">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-769">Any other number</span></span>|<span data-ttu-id="7097c-770">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-770">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-771">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-771">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-772">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-772">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-773">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-773">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-774">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-774">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-775">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-775">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-776">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-776">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-777">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-777">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-778">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-778">Required.</span>
          </span>
          <span data-ttu-id="7097c-779">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-779">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-780">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-780">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-781">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-781">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-782">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-782">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-783">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-783">If Number is</span></span>|<span data-ttu-id="7097c-784">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-784">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-785">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-785">Empty</span></span>|<span data-ttu-id="7097c-786">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-786">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-787">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-787">Any other number</span></span>|<span data-ttu-id="7097c-788">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-788">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-789">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-789">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-790">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-790">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-791">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-791">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-792">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-792">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-793">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-793">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-794">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-794">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-795">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-795">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-796">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-796">Required.</span>
          </span>
          <span data-ttu-id="7097c-797">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-797">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-798">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-798">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-799">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-799">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-800">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-800">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-801">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-801">If Number is</span></span>|<span data-ttu-id="7097c-802">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-802">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-803">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-803">Empty</span></span>|<span data-ttu-id="7097c-804">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-804">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-805">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-805">Any other number</span></span>|<span data-ttu-id="7097c-806">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-806">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-807">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-807">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-808">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-808">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-809">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-809">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-810">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-810">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-811">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-811">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-812">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-812">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-813">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-813">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-814">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-814">Required.</span>
          </span>
          <span data-ttu-id="7097c-815">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-815">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-816">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-816">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-817">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-817">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-818">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="7097c-818">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="7097c-819">Если число</span><span class="sxs-lookup"><span data-stu-id="7097c-819">If Number is</span></span>|<span data-ttu-id="7097c-820">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="7097c-820">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="7097c-821">Empty</span><span class="sxs-lookup"><span data-stu-id="7097c-821">Empty</span></span>|<span data-ttu-id="7097c-822">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="7097c-822">Zero (0)</span></span>|  
|<span data-ttu-id="7097c-823">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="7097c-823">Any other number</span></span>|<span data-ttu-id="7097c-824">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="7097c-824">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="7097c-825">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="7097c-825">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="7097c-826">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="7097c-826">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-827">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-827">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-828">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-828">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-829">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-829">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-830">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-830">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-831">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-831">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="7097c-832">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-832">Required.</span>
          </span>
          <span data-ttu-id="7097c-833">
            <see langword="Object" />, содержащий любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-833">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-834">Возвращает представление <see langword="String" /> числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-834">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-835">Возвращает представление <see langword="String" /> числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-835">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-836">При преобразовании чисел в строки, начальный пробел всегда резервируется для знака `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-836">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="7097c-837">Если `Number` является положительным, возвращаемая строка содержит начальный пробел и знак «плюс» подразумевается.</span><span class="sxs-lookup"><span data-stu-id="7097c-837">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="7097c-838">Отрицательное число включает знак минус (-) и не начальным пробелом.</span><span class="sxs-lookup"><span data-stu-id="7097c-838">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="7097c-839">Используйте `Format` функцию для преобразования числовых значений, следует форматировать как даты или времени, валюты или в других пользовательских форматах.</span><span class="sxs-lookup"><span data-stu-id="7097c-839">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="7097c-840">В отличие от `Str` функции `Format` функция не включает начальный пробел для знак `Number`.</span><span class="sxs-lookup"><span data-stu-id="7097c-840">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7097c-841">`Str` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7097c-841">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7097c-842">Если используются разные десятичные разделители (например, в международных приложениях), используйте `CStr` или `Format` функции для преобразования числа в строку.</span><span class="sxs-lookup"><span data-stu-id="7097c-842">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="7097c-843">Чтобы получить строковое представление числа в определенного языка и региональных параметров, используйте номер `ToString(IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="7097c-843">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="7097c-844">Например, использовать <xref:System.Double.ToString%2A> при преобразовании значения типа `Double` в строку.</span><span class="sxs-lookup"><span data-stu-id="7097c-844">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7097c-845">В этом примере используется `Str` функция, возвращающая `String` представление числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-845">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="7097c-846">Если положительное число преобразуется в строку, начальный пробел всегда резервируется для знака.</span><span class="sxs-lookup"><span data-stu-id="7097c-846">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="7097c-847">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-847">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="7097c-848">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-848">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/conversion-summary.md">
          <span data-ttu-id="7097c-849">Сводка по преобразованию</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-849">Conversion Summary</span>
          </span>
        </related>
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-850">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-850">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7097c-851">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-851">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7097c-852">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-852">Required.</span>
          </span>
          <span data-ttu-id="7097c-853">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-853">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7097c-854">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-854">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-855">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-855">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-856">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-856">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-857">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-857">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7097c-858">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="7097c-858">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7097c-859">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="7097c-859">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7097c-860">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="7097c-860">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="7097c-861">Следующий вызов возвращает значение 1615198.</span><span class="sxs-lookup"><span data-stu-id="7097c-861">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="7097c-862">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="7097c-862">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7097c-863">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7097c-863">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7097c-864">Если используются разные десятичные разделители, например приложения на разных языках, использовать `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="7097c-864">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7097c-865">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="7097c-865">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7097c-866">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="7097c-866">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7097c-867"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="7097c-867">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7097c-868">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="7097c-868">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7097c-869">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если она не содержалась в строке.</span><span class="sxs-lookup"><span data-stu-id="7097c-869">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7097c-870">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="7097c-870">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7097c-871">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="7097c-871">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7097c-872">
            <paramref name="InputStr" /> — слишком большое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-872">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-873">
            <see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-873">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-874">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-874">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="7097c-875">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-875">Required.</span>
          </span>
          <span data-ttu-id="7097c-876">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-876">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7097c-877">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-877">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-878">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-878">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-879">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-879">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-880">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-880">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7097c-881">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="7097c-881">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7097c-882">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="7097c-882">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7097c-883">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="7097c-883">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="7097c-884">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="7097c-884">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="7097c-885">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="7097c-885">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7097c-886">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7097c-886">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7097c-887">При использовании других десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="7097c-887">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7097c-888">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="7097c-888">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7097c-889">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="7097c-889">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7097c-890"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="7097c-890">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7097c-891">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="7097c-891">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7097c-892">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="7097c-892">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7097c-893">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="7097c-893">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7097c-894">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="7097c-894">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7097c-895">
            <paramref name="InputStr" /> — слишком большое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-895">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-896">
            <see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-896">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-897">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-897">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="7097c-898">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-898">Required.</span>
          </span>
          <span data-ttu-id="7097c-899">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-899">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="7097c-900">Если <paramref name="Expression" /> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-900">If <paramref name="Expression" /> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7097c-901">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-901">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7097c-902">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-902">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7097c-903">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="7097c-903">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="7097c-904">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="7097c-904">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="7097c-905">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="7097c-905">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="7097c-906">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="7097c-906">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="7097c-907">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="7097c-907">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="7097c-908">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="7097c-908">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="7097c-909">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7097c-909">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="7097c-910">При использовании других десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="7097c-910">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="7097c-911">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="7097c-911">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="7097c-912">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="7097c-912">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7097c-913"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="7097c-913">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="7097c-914">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="7097c-914">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="7097c-915">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="7097c-915">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="7097c-916">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="7097c-916">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="7097c-917">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="7097c-917">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="7097c-918">
            <paramref name="InputStr" /> — слишком большое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-918">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7097c-919">
            <see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-919">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/functions/type-conversion-functions.md">
          <span data-ttu-id="7097c-920">Type Conversion Functions</span>
          <span class="sxs-lookup">
            <span data-stu-id="7097c-920">Type Conversion Functions</span>
          </span>
        </related>
      </Docs>
    </Member>
  </Members>
</Type>