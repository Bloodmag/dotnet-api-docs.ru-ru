<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="aaa36-101">В модуле <see langword="Conversion" /> содержатся процедуры, используемые для выполнения различных операций преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-102">Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения для преобразования десятичных чисел в другую систему исчисления чисел в строки, строк в числа и одного типа к другому.</span><span class="sxs-lookup"><span data-stu-id="aaa36-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-103">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="aaa36-104">Преобразуемый объект.</span><span class="sxs-lookup"><span data-stu-id="aaa36-104">The object to convert.</span></span></param>
        <param name="TargetType"><span data-ttu-id="aaa36-105">Тип данных, в который требуется преобразовать объект.</span><span class="sxs-lookup"><span data-stu-id="aaa36-105">The type to which to convert the object.</span></span></param>
        <summary><span data-ttu-id="aaa36-106">Преобразовывает объект в указанный тип.</span><span class="sxs-lookup"><span data-stu-id="aaa36-106">Converts an object to the specified type.</span></span></summary>
        <returns><span data-ttu-id="aaa36-107">Объект, тип которого во время выполнения является запрошенным типом целевого объекта.</span><span class="sxs-lookup"><span data-stu-id="aaa36-107">An object whose type at run time is the requested target type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-108">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром `TargetType` параметр.</span><span class="sxs-lookup"><span data-stu-id="aaa36-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="aaa36-109">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="aaa36-110">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенной самим объектом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="aaa36-111">Если динамический объект наследует от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` метод сначала пытается выполнить преобразование, используя пользовательские статические преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="aaa36-112">При сбое преобразования определяемого пользователем, статическая, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="aaa36-113">Если динамический объект реализует интерфейс <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статическая преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-114">В следующем примере используется `CTypeDynamic` метода для преобразования динамического объекта в строку с помощью преобразованием, определенным динамическим объектом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType"><span data-ttu-id="aaa36-115">Тип данных, в который требуется преобразовать объект.</span><span class="sxs-lookup"><span data-stu-id="aaa36-115">The type to which to convert the object.</span></span></typeparam>
        <param name="Expression"><span data-ttu-id="aaa36-116">Преобразуемый объект.</span><span class="sxs-lookup"><span data-stu-id="aaa36-116">The object to convert.</span></span></param>
        <summary><span data-ttu-id="aaa36-117">Преобразует объект в указанный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="aaa36-117">Converts an object to the specified generic type.</span></span></summary>
        <returns><span data-ttu-id="aaa36-118">Объект со статической типизацией, имеющий запрошенный универсальный тип.</span><span class="sxs-lookup"><span data-stu-id="aaa36-118">An object statically typed as the requested generic type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-119">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром типа универсального параметра.</span><span class="sxs-lookup"><span data-stu-id="aaa36-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="aaa36-120">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="aaa36-121">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенной самим объектом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="aaa36-122">Если динамический объект наследует от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` метод сначала пытается выполнить преобразование, используя пользовательские статические преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="aaa36-123">При сбое преобразования определяемого пользователем, статическая, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="aaa36-124">Если динамический объект реализует интерфейс <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статическая преобразования.</span><span class="sxs-lookup"><span data-stu-id="aaa36-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-125">В следующем примере используется `CTypeDynamic` метода для преобразования динамического объекта в строку с помощью преобразованием, определенным динамическим объектом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aaa36-126">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-126">Returns the error message that corresponds to a given error number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="aaa36-127">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-127">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-128">Сообщение об ошибке, соответствующее самой последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="aaa36-128">The error message that corresponds to the most recent run-time error.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-129">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации самой последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="aaa36-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="aaa36-130">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="aaa36-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="aaa36-131">При отсутствии ошибок во время выполнения, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="aaa36-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="aaa36-132">В Visual Basic версии 6.0 и более ранних версиях эти функции были предоставлены `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="aaa36-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-133">В следующем коде используется `ErrorToString` для отображения сообщений об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-134"><paramref name="ErrorNumber" /> выходит за пределы диапазона.</span><span class="sxs-lookup"><span data-stu-id="aaa36-134"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber"><span data-ttu-id="aaa36-135">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="aaa36-135">Optional.</span></span> <span data-ttu-id="aaa36-136">Любой допустимый номер ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-136">Any valid error number.</span></span></param>
        <summary><span data-ttu-id="aaa36-137">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-137">Returns the error message that corresponds to a given error number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-138">Сообщение об ошибке, соответствующее данному номеру ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-138">The error message that corresponds to a given error number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-139">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации самой последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="aaa36-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="aaa36-140">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="aaa36-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="aaa36-141">Если `ErrorNumber` является допустимый номер ошибки, но не определен, `ErrorToString` возвращает строку `"Application-defined or object-defined error."` Если `ErrorNumber` является недопустимым, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="aaa36-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="aaa36-142">Если `ErrorNumber` опущено, сообщение, соответствующее последней ошибки во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="aaa36-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="aaa36-143">При отсутствии ошибок во время выполнения или `ErrorNumber` равно 0, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="aaa36-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="aaa36-144">В Visual Basic версии 6.0 и более ранних версиях эти функции были предоставлены `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="aaa36-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-145">В следующем коде используется `ErrorToString` для отображения сообщений об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="aaa36-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-146"><paramref name="ErrorNumber" /> выходит за пределы диапазона.</span><span class="sxs-lookup"><span data-stu-id="aaa36-146"><paramref name="ErrorNumber" /> is out of range.</span></span></exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aaa36-147">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-147">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-148">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-148">Required.</span></span> <span data-ttu-id="aaa36-149">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-149">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-150">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-151">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-151">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-152">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-152">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-153">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-154">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-155">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-156">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-157">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-158">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-159">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-160">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-161">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-162">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-163">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-164">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-165">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-166">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-166">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-167">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-167">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-168">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-168">Required.</span></span> <span data-ttu-id="aaa36-169">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-169">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-170">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-171">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-171">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-172">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-172">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-173">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-174">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-175">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-176">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-177">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-178">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-179">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-180">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-181">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-182">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-183">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-184">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-185">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-186">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-186">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-187">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-187">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-188">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-188">Required.</span></span> <span data-ttu-id="aaa36-189">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-189">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-190">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-191">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-191">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-192">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-192">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-193">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-194">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-195">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-196">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-197">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-198">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-199">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-200">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-201">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-202">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-203">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-204">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-205">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-206">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-206">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-207">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-207">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-208">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-208">Required.</span></span> <span data-ttu-id="aaa36-209">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-209">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-210">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-211">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-211">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-212">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-212">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-213">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-214">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-215">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-216">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-217">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-218">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-219">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-220">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-221">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-222">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-223">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-224">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-225">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-226">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-226">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-227">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-227">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-228">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-228">Required.</span></span> <span data-ttu-id="aaa36-229">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-229">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-230">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-231">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-231">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-232">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-232">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-233">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-234">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-235">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-236">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-237">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-238">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-239">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-240">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-241">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-242">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-243">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-244">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-245">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-246">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-246">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-247">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-247">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-248">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-248">Required.</span></span> <span data-ttu-id="aaa36-249">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-249">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-250">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-251">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-251">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-252">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-252">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-253">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-254">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-255">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-256">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-257">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-258">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-259">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-260">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-261">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-262">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-263">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-264">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-265">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-266">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-266">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-267">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-267">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-268">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-268">Required.</span></span> <span data-ttu-id="aaa36-269">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-269">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-270">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-271">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-271">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-272">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-272">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-273">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-274">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-275">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-276">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-277">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-278">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-279">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-280">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-281">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-282">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-283">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-284">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-285">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-286">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-286">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-287">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-287">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aaa36-288">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-288">Returns a string representing the hexadecimal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-289">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-289">Required.</span></span> <span data-ttu-id="aaa36-290">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-290">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-291">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-291">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-292">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-292">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-293">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-294">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-294">If `Number` is</span></span>|<span data-ttu-id="aaa36-295">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-296">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-296">Empty</span></span>|<span data-ttu-id="aaa36-297">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-297">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-298">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-298">Any numeric value</span></span>|<span data-ttu-id="aaa36-299">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-300">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-301">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-302">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-303"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-303"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-304"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-304"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-305">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-305">Required.</span></span> <span data-ttu-id="aaa36-306">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-306">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-307">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-307">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-308">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-308">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-309">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-310">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-310">If `Number` is</span></span>|<span data-ttu-id="aaa36-311">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-312">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-312">Empty</span></span>|<span data-ttu-id="aaa36-313">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-313">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-314">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-314">Any numeric value</span></span>|<span data-ttu-id="aaa36-315">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-316">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-317">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-318">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-319"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-319"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-320"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-320"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-321">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-321">Required.</span></span> <span data-ttu-id="aaa36-322">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-322">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-323">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-323">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-324">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-324">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-325">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-326">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-326">If `Number` is</span></span>|<span data-ttu-id="aaa36-327">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-328">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-328">Empty</span></span>|<span data-ttu-id="aaa36-329">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-329">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-330">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-330">Any numeric value</span></span>|<span data-ttu-id="aaa36-331">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-332">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-333">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-334">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-335"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-335"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-336"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-336"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-337">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-337">Required.</span></span> <span data-ttu-id="aaa36-338">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-338">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-339">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-339">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-340">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-340">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-341">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-342">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-342">If `Number` is</span></span>|<span data-ttu-id="aaa36-343">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-344">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-344">Empty</span></span>|<span data-ttu-id="aaa36-345">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-345">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-346">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-346">Any numeric value</span></span>|<span data-ttu-id="aaa36-347">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-348">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-349">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-350">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-351"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-351"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-352"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-352"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-353">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-353">Required.</span></span> <span data-ttu-id="aaa36-354">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-354">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-355">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-355">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-356">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-356">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-357">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-358">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-358">If `Number` is</span></span>|<span data-ttu-id="aaa36-359">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-360">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-360">Empty</span></span>|<span data-ttu-id="aaa36-361">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-361">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-362">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-362">Any numeric value</span></span>|<span data-ttu-id="aaa36-363">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-364">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-365">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-366">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-367"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-367"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-368"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-368"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-369">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-369">Required.</span></span> <span data-ttu-id="aaa36-370">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-370">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-371">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-371">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-372">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-372">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-373">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-374">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-374">If `Number` is</span></span>|<span data-ttu-id="aaa36-375">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-376">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-376">Empty</span></span>|<span data-ttu-id="aaa36-377">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-377">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-378">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-378">Any numeric value</span></span>|<span data-ttu-id="aaa36-379">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-380">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-381">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-382">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-383"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-383"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-384"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-384"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-385">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-385">Required.</span></span> <span data-ttu-id="aaa36-386">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-386">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-387">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-387">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-388">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-388">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-389">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-390">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-390">If `Number` is</span></span>|<span data-ttu-id="aaa36-391">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-392">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-392">Empty</span></span>|<span data-ttu-id="aaa36-393">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-393">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-394">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-394">Any numeric value</span></span>|<span data-ttu-id="aaa36-395">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-396">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-397">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-398">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-399"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-399"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-400"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-400"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-401">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-401">Required.</span></span> <span data-ttu-id="aaa36-402">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-402">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-403">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-403">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-404">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-404">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-405">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-406">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-406">If `Number` is</span></span>|<span data-ttu-id="aaa36-407">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-408">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-408">Empty</span></span>|<span data-ttu-id="aaa36-409">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-409">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-410">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-410">Any numeric value</span></span>|<span data-ttu-id="aaa36-411">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-412">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-413">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-414">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-415"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-415"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-416"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-416"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-417">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-417">Required.</span></span> <span data-ttu-id="aaa36-418">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-418">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-419">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-419">Returns a string representing the hexadecimal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-420">Возвращает строку, представляющую шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-420">Returns a string representing the hexadecimal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-421">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-422">Если `Number` является</span><span class="sxs-lookup"><span data-stu-id="aaa36-422">If `Number` is</span></span>|<span data-ttu-id="aaa36-423">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="aaa36-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-424">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-424">Empty</span></span>|<span data-ttu-id="aaa36-425">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-425">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-426">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="aaa36-426">Any numeric value</span></span>|<span data-ttu-id="aaa36-427">До шестнадцати шестнадцатеричных символов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="aaa36-428">Может представлять шестнадцатеричные числа напрямую, поставив перед числами в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="aaa36-429">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="aaa36-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-430">В этом примере используется `Hex` функцию для возврата шестнадцатеричного значения числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-431"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-431"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-432"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-432"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aaa36-433">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-433">Return the integer portion of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-434">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-434">Required.</span></span> <span data-ttu-id="aaa36-435">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-435">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-436">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-437">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-437">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-438">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-438">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-439">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-440">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-441">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-442">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-443">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-444">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-445">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-446">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-447">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-448">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-449">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-450">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-451">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-452">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-452">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-453">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-453">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-454">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-454">Required.</span></span> <span data-ttu-id="aaa36-455">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-455">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-456">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-457">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-457">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-458">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-458">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-459">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-460">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-461">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-462">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-463">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-464">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-465">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-466">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-467">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-468">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-469">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-470">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-471">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-472">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-472">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-473">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-473">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-474">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-474">Required.</span></span> <span data-ttu-id="aaa36-475">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-475">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-476">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-477">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-477">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-478">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-478">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-479">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-480">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-481">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-482">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-483">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-484">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-485">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-486">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-487">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-488">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-489">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-490">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-491">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-492">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-492">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-493">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-493">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-494">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-494">Required.</span></span> <span data-ttu-id="aaa36-495">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-495">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-496">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-497">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-497">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-498">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-498">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-499">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-500">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-501">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-502">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-503">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-504">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-505">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-506">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-507">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-508">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-509">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-510">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-511">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-512">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-512">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-513">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-513">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-514">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-514">Required.</span></span> <span data-ttu-id="aaa36-515">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-515">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-516">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-517">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-517">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-518">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-518">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-519">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-520">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-521">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-522">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-523">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-524">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-525">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-526">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-527">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-528">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-529">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-530">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-531">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-532">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-532">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-533">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-533">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-534">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-534">Required.</span></span> <span data-ttu-id="aaa36-535">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-535">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-536">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-537">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-537">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-538">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-538">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-539">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-540">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-541">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-542">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-543">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-544">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-545">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-546">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-547">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-548">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-549">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-550">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-551">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-552">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-552">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-553">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-553">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-554">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-554">Required.</span></span> <span data-ttu-id="aaa36-555">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-555">A number of type <see langword="Double" /> or any valid numeric expression.</span></span> <span data-ttu-id="aaa36-556">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span></span></param>
        <summary><span data-ttu-id="aaa36-557">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-557">Return the integer portion of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-558">Возвращают целую часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-558">Return the integer portion of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-559">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращает итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="aaa36-560">Разница между `Int` и `Fix` функции is, если `Number` отрицательное, `Int` возвращает первое отрицательное число, меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="aaa36-561">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="aaa36-562">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="aaa36-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-563">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="aaa36-564">В случае отрицательного числовой аргумент `Int` функция возвращает первое отрицательное число, меньше или равно числу; `Fix` функция возвращает первое отрицательное число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="aaa36-565">В следующем примере требуется указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="aaa36-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="aaa36-566">Можно использовать `CInt` для явного преобразования типов данных в тип `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="aaa36-567">Однако `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="aaa36-568">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="aaa36-569">Можно использовать `CInt` функция с результатом вызова метода `Fix` или `Int` выполнить явное преобразование в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="aaa36-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="aaa36-570">Пример:</span><span class="sxs-lookup"><span data-stu-id="aaa36-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="aaa36-571">Дополнительные сведения о `CInt`, в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="aaa36-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="aaa36-572">Число не указано.</span><span class="sxs-lookup"><span data-stu-id="aaa36-572">Number is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="aaa36-573">Число не является числовым типом.</span><span class="sxs-lookup"><span data-stu-id="aaa36-573">Number is not a numeric type.</span></span></exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aaa36-574">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-574">Returns a string representing the octal value of a number.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-575">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-575">Required.</span></span> <span data-ttu-id="aaa36-576">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-576">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-577">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-577">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-578">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-578">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-579">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-580">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-580">If Number is</span></span>|<span data-ttu-id="aaa36-581">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-582">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-582">Empty</span></span>|<span data-ttu-id="aaa36-583">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-583">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-584">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-584">Any other number</span></span>|<span data-ttu-id="aaa36-585">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-586">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-587">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-588">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-589"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-589"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-590"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-590"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-591">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-591">Required.</span></span> <span data-ttu-id="aaa36-592">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-592">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-593">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-593">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-594">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-594">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-595">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-596">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-596">If Number is</span></span>|<span data-ttu-id="aaa36-597">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-598">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-598">Empty</span></span>|<span data-ttu-id="aaa36-599">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-599">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-600">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-600">Any other number</span></span>|<span data-ttu-id="aaa36-601">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-602">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-603">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-604">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-605"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-605"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-606"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-606"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-607">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-607">Required.</span></span> <span data-ttu-id="aaa36-608">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-608">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-609">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-609">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-610">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-610">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-611">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-612">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-612">If Number is</span></span>|<span data-ttu-id="aaa36-613">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-614">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-614">Empty</span></span>|<span data-ttu-id="aaa36-615">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-615">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-616">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-616">Any other number</span></span>|<span data-ttu-id="aaa36-617">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-618">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-619">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-620">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-621"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-621"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-622"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-622"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-623">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-623">Required.</span></span> <span data-ttu-id="aaa36-624">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-624">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-625">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-625">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-626">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-626">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-627">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-628">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-628">If Number is</span></span>|<span data-ttu-id="aaa36-629">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-630">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-630">Empty</span></span>|<span data-ttu-id="aaa36-631">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-631">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-632">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-632">Any other number</span></span>|<span data-ttu-id="aaa36-633">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-634">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-635">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-636">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-637"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-637"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-638"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-638"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-639">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-639">Required.</span></span> <span data-ttu-id="aaa36-640">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-640">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-641">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-641">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-642">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-642">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-643">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-644">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-644">If Number is</span></span>|<span data-ttu-id="aaa36-645">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-646">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-646">Empty</span></span>|<span data-ttu-id="aaa36-647">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-647">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-648">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-648">Any other number</span></span>|<span data-ttu-id="aaa36-649">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-650">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-651">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-652">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-653"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-653"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-654"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-654"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-655">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-655">Required.</span></span> <span data-ttu-id="aaa36-656">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-656">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-657">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-657">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-658">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-658">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-659">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-660">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-660">If Number is</span></span>|<span data-ttu-id="aaa36-661">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-662">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-662">Empty</span></span>|<span data-ttu-id="aaa36-663">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-663">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-664">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-664">Any other number</span></span>|<span data-ttu-id="aaa36-665">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-666">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-667">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-668">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-669"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-669"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-670"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-670"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-671">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-671">Required.</span></span> <span data-ttu-id="aaa36-672">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-672">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-673">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-673">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-674">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-674">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-675">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-676">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-676">If Number is</span></span>|<span data-ttu-id="aaa36-677">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-678">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-678">Empty</span></span>|<span data-ttu-id="aaa36-679">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-679">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-680">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-680">Any other number</span></span>|<span data-ttu-id="aaa36-681">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-682">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-683">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-684">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-685"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-685"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-686"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-686"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-687">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-687">Required.</span></span> <span data-ttu-id="aaa36-688">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-688">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-689">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-689">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-690">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-690">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-691">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-692">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-692">If Number is</span></span>|<span data-ttu-id="aaa36-693">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-694">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-694">Empty</span></span>|<span data-ttu-id="aaa36-695">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-695">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-696">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-696">Any other number</span></span>|<span data-ttu-id="aaa36-697">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-698">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-699">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-700">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-701"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-701"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-702"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-702"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-703">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-703">Required.</span></span> <span data-ttu-id="aaa36-704">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-704">Any valid numeric expression or <see langword="String" /> expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-705">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-705">Returns a string representing the octal value of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-706">Возвращает строку, представляющую восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-706">Returns a string representing the octal value of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-707">Если `Number` еще не целое число, оно округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="aaa36-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="aaa36-708">Если число</span><span class="sxs-lookup"><span data-stu-id="aaa36-708">If Number is</span></span>|<span data-ttu-id="aaa36-709">Результат функции Oct</span><span class="sxs-lookup"><span data-stu-id="aaa36-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="aaa36-710">Empty</span><span class="sxs-lookup"><span data-stu-id="aaa36-710">Empty</span></span>|<span data-ttu-id="aaa36-711">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="aaa36-711">Zero (0)</span></span>|  
|<span data-ttu-id="aaa36-712">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="aaa36-712">Any other number</span></span>|<span data-ttu-id="aaa36-713">До 22 восьмеричных знаков</span><span class="sxs-lookup"><span data-stu-id="aaa36-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="aaa36-714">Можно представить восьмеричные числа напрямую, поставив перед числами в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="aaa36-715">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="aaa36-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-716">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-717"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-717"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-718"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-718"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number"><span data-ttu-id="aaa36-719">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-719">Required.</span></span> <span data-ttu-id="aaa36-720"><see langword="Object" />, содержащий любое допустимое числовое выражение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-720">An <see langword="Object" /> containing any valid numeric expression.</span></span></param>
        <summary><span data-ttu-id="aaa36-721">Возвращает представление <see langword="String" /> числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-721">Returns a <see langword="String" /> representation of a number.</span></span></summary>
        <returns><span data-ttu-id="aaa36-722">Возвращает представление <see langword="String" /> числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-722">Returns a <see langword="String" /> representation of a number.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-723">При преобразовании чисел в строки начальный пробел всегда резервируется для знака `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="aaa36-724">Если `Number` является положительным, возвращаемая строка содержит начальный пробел и знак «плюс» подразумевается.</span><span class="sxs-lookup"><span data-stu-id="aaa36-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="aaa36-725">Отрицательное число включает знак минус (-) и не имеет начального пробела.</span><span class="sxs-lookup"><span data-stu-id="aaa36-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="aaa36-726">Используйте `Format` функцию для преобразования числовых значений, следует форматировать как даты или времени, валюты или других пользовательских форматов.</span><span class="sxs-lookup"><span data-stu-id="aaa36-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="aaa36-727">В отличие от `Str` функции `Format` функция не включает начальный пробел для знака `Number`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-728">`Str` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="aaa36-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="aaa36-729">Если другие десятичные разделители используются (например, в международных приложениях), используйте `CStr` или `Format` функции для преобразования числа в строку.</span><span class="sxs-lookup"><span data-stu-id="aaa36-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="aaa36-730">Чтобы получить строковое представление числа в определенного языка и региональных параметров, используйте число `ToString(IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="aaa36-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="aaa36-731">Например, использовать <xref:System.Double.ToString%2A> при преобразовании значения типа `Double` в строку.</span><span class="sxs-lookup"><span data-stu-id="aaa36-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-732">В этом примере используется `Str` функция, возвращающая `String` представление числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="aaa36-733">Когда положительное число преобразуется в строку, начальный пробел всегда резервируется для знака.</span><span class="sxs-lookup"><span data-stu-id="aaa36-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="aaa36-734"><paramref name="Number" /> не задан.</span><span class="sxs-lookup"><span data-stu-id="aaa36-734"><paramref name="Number" /> is not specified.</span></span></exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="aaa36-735"><paramref name="Number" /> не относится к числовому типу.</span><span class="sxs-lookup"><span data-stu-id="aaa36-735"><paramref name="Number" /> is not a numeric type.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="aaa36-736">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="aaa36-737">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-737">Required.</span></span> <span data-ttu-id="aaa36-738">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="aaa36-739">Если <c>Expression</c> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="aaa36-740">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="aaa36-741">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-742">`Val` Функция прекращает чтение строки на первый символ не удается распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="aaa36-743">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="aaa36-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="aaa36-744">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="aaa36-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="aaa36-745">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="aaa36-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="aaa36-746">Следующий вызов возвращает значение 1615198.</span><span class="sxs-lookup"><span data-stu-id="aaa36-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="aaa36-747">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="aaa36-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-748">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="aaa36-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="aaa36-749">Если используются другие десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="aaa36-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="aaa36-750">Чтобы преобразовать строковое представление числа в определенного языка и региональных параметров в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="aaa36-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="aaa36-751">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-752"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные нередко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="aaa36-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="aaa36-753">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="aaa36-754">Конфликт между числом в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если она не содержалась в строке.</span><span class="sxs-lookup"><span data-stu-id="aaa36-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-755">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="aaa36-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="aaa36-756">`Val` прекращает преобразование на первом знаке, которое не может быть интерпретировано как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="aaa36-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="aaa36-757"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-757"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-758"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-758"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression"><span data-ttu-id="aaa36-759">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-759">Required.</span></span> <span data-ttu-id="aaa36-760">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="aaa36-761">Если <c>Expression</c> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="aaa36-762">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="aaa36-763">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-764">`Val` Функция прекращает чтение строки на первый символ не удается распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="aaa36-765">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="aaa36-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="aaa36-766">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="aaa36-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="aaa36-767">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="aaa36-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="aaa36-768">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="aaa36-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="aaa36-769">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="aaa36-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-770">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="aaa36-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="aaa36-771">Если используются другие десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="aaa36-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="aaa36-772">Чтобы преобразовать строковое представление числа в определенного языка и региональных параметров в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="aaa36-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="aaa36-773">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-774"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные нередко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="aaa36-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="aaa36-775">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="aaa36-776">Конфликт между числом в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="aaa36-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-777">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="aaa36-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="aaa36-778">`Val` прекращает преобразование на первом знаке, которое не может быть интерпретировано как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="aaa36-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="aaa36-779"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-779"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-780"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-780"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr"><span data-ttu-id="aaa36-781">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="aaa36-781">Required.</span></span> <span data-ttu-id="aaa36-782">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span></span> <span data-ttu-id="aaa36-783">Если <c>Expression</c> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span></span></param>
        <summary><span data-ttu-id="aaa36-784">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></summary>
        <returns><span data-ttu-id="aaa36-785">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="aaa36-786">`Val` Функция прекращает чтение строки на первый символ не удается распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="aaa36-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="aaa36-787">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="aaa36-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="aaa36-788">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="aaa36-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="aaa36-789">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="aaa36-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="aaa36-790">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="aaa36-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="aaa36-791">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="aaa36-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-792">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="aaa36-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="aaa36-793">Если используются другие десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="aaa36-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="aaa36-794">Чтобы преобразовать строковое представление числа в определенного языка и региональных параметров в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="aaa36-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="aaa36-795">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="aaa36-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="aaa36-796"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные нередко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="aaa36-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="aaa36-797">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="aaa36-798">Конфликт между числом в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="aaa36-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="aaa36-799">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="aaa36-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="aaa36-800">`Val` прекращает преобразование на первом знаке, которое не может быть интерпретировано как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="aaa36-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="aaa36-801"><paramref name="InputStr" /> — слишком большое значение.</span><span class="sxs-lookup"><span data-stu-id="aaa36-801"><paramref name="InputStr" /> is too large.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="aaa36-802"><see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span><span class="sxs-lookup"><span data-stu-id="aaa36-802"><paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>