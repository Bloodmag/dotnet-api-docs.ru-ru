<Type Name="Conversion" FullName="Microsoft.VisualBasic.Conversion">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1c4b88e0f959fcc023aedd3a8d043a4ec5422b0" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39906714" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Conversion" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Conversion extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Conversion" />
  <TypeSignature Language="VB.NET" Value="Public Module Conversion" />
  <TypeSignature Language="C++ CLI" Value="public ref class Conversion sealed" />
  <TypeSignature Language="F#" Value="type Conversion = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="1abfd-101">В модуле <see langword="Conversion" /> содержатся процедуры, используемые для выполнения различных операций преобразования.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1abfd-101">The <see langword="Conversion" /> module contains the procedures used to perform various conversion operations.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-102">Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения для преобразования десятичных чисел в другую систему исчисления чисел в строки, строк в числа и одного типа к другому.</span><span class="sxs-lookup"><span data-stu-id="1abfd-102">This module supports the Visual Basic language keywords and run-time library members that convert decimal numbers to other bases, numbers to strings, strings to numbers, and one data type to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-103">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-103">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CTypeDynamic">
      <MemberSignature Language="C#" Value="public static object CTypeDynamic (object Expression, Type TargetType);" />
      <MemberSignature Language="ILAsm" Value=".method public static object CTypeDynamic(object Expression, class System.Type TargetType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic (Expression As Object, TargetType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ CTypeDynamic(System::Object ^ Expression, Type ^ TargetType);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj * Type -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic (Expression, TargetType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="TargetType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1abfd-104">Преобразуемый объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-104">The object to convert.</span>
          </span>
        </param>
        <param name="TargetType">
          <span data-ttu-id="1abfd-105">Тип данных, в который требуется преобразовать объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-105">The type to which to convert the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-106">Преобразовывает объект в указанный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-106">Converts an object to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-107">Объект, тип которого во время выполнения является запрошенным типом целевого объекта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-107">An object whose type at run time is the requested target type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-108">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром `TargetType` параметр.</span><span class="sxs-lookup"><span data-stu-id="1abfd-108">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the `TargetType` parameter.</span></span> <span data-ttu-id="1abfd-109">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="1abfd-109">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="1abfd-110">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенные самим объектом.</span><span class="sxs-lookup"><span data-stu-id="1abfd-110">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="1abfd-111">Если динамический объект наследует свойства от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` сначала пытается выполнить преобразование, с помощью преобразования определяемых пользователем, статический метод.</span><span class="sxs-lookup"><span data-stu-id="1abfd-111">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="1abfd-112">При сбое преобразования определяемых пользователем, статические, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="1abfd-112">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="1abfd-113">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статических преобразований.</span><span class="sxs-lookup"><span data-stu-id="1abfd-113">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-114">В следующем примере используется `CTypeDynamic` метод для преобразования динамический объект в строку с помощью преобразования определяется динамический объект.</span><span class="sxs-lookup"><span data-stu-id="1abfd-114">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim sampleString = CTypeDynamic(dyn, GetType(String))  
        Console.WriteLine(sampleString)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="CTypeDynamic&lt;TargetType&gt;">
      <MemberSignature Language="C#" Value="public static TargetType CTypeDynamic&lt;TargetType&gt; (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static !!TargetType CTypeDynamic&lt;TargetType&gt;(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function CTypeDynamic(Of TargetType) (Expression As Object) As TargetType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TargetType&gt;&#xA; static TargetType CTypeDynamic(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member CTypeDynamic : obj -&gt; 'argetType" Usage="Microsoft.VisualBasic.Conversion.CTypeDynamic Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TargetType</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TargetType" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <typeparam name="TargetType">
          <span data-ttu-id="1abfd-115">Тип данных, в который требуется преобразовать объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-115">The type to which to convert the object.</span>
          </span>
        </typeparam>
        <param name="Expression">
          <span data-ttu-id="1abfd-116">Преобразуемый объект.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-116">The object to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-117">Преобразует объект в указанный универсальный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-117">Converts an object to the specified generic type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-118">Объект со статической типизацией, имеющий запрошенный универсальный тип.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-118">An object statically typed as the requested generic type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-119">`CTypeDynamic` Метод преобразует объект, переданный в качестве `Expression` параметра типа, заданного параметром типа универсального параметра.</span><span class="sxs-lookup"><span data-stu-id="1abfd-119">The `CTypeDynamic` method converts the object passed as the `Expression` parameter to the type specified by the type of the generic parameter.</span></span> <span data-ttu-id="1abfd-120">Если объект является динамическим объектом, `CTypeDynamic` метод применяет доступные динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="1abfd-120">If the object is a dynamic object, the `CTypeDynamic` method applies available dynamic conversions.</span></span>  
  
 <span data-ttu-id="1abfd-121">`CTypeDynamic` Метод применяет динамическое преобразование в соответствии с семантикой преобразования, определенные самим объектом.</span><span class="sxs-lookup"><span data-stu-id="1abfd-121">The `CTypeDynamic` method applies dynamic conversions in accordance with the conversion semantics defined by the object itself.</span></span> <span data-ttu-id="1abfd-122">Если динамический объект наследует свойства от <xref:System.Dynamic.DynamicObject>, `CTypeDynamic` сначала пытается выполнить преобразование, с помощью преобразования определяемых пользователем, статический метод.</span><span class="sxs-lookup"><span data-stu-id="1abfd-122">If a dynamic object inherits from <xref:System.Dynamic.DynamicObject>, the `CTypeDynamic` method first attempts to perform the conversion by using a user-defined, static conversion.</span></span> <span data-ttu-id="1abfd-123">При сбое преобразования определяемых пользователем, статические, `CTypeDynamic` метод пытается выполнить преобразование, используя динамические преобразования.</span><span class="sxs-lookup"><span data-stu-id="1abfd-123">If the user-defined, static conversion fails, the `CTypeDynamic` method attempts to perform the conversion by using dynamic conversions.</span></span> <span data-ttu-id="1abfd-124">Если динамический объект реализует <xref:System.Dynamic.IDynamicMetaObjectProvider>, `CTypeDynamic` метод предоставляет приоритет для динамическое преобразование через определяемые пользователем, статических преобразований.</span><span class="sxs-lookup"><span data-stu-id="1abfd-124">If a dynamic object implements <xref:System.Dynamic.IDynamicMetaObjectProvider>, the `CTypeDynamic` method gives precedence to dynamic conversions over user-defined, static conversions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-125">В следующем примере используется `CTypeDynamic` метод для преобразования динамический объект в строку с помощью преобразования определяется динамический объект.</span><span class="sxs-lookup"><span data-stu-id="1abfd-125">The following example uses the `CTypeDynamic` method to convert a dynamic object to a string by using the conversion defined by the dynamic object.</span></span>  
  
```vb  
Imports System.Dynamic  
  
Module Module1  
    Sub Main()  
        Dim dyn As Object = New SampleDynamicObject  
        Dim str = CTypeDynamic(Of String)(dyn)  
        Console.WriteLine(str)  
    End Sub  
End Module  
  
Class SampleDynamicObject  
    Inherits DynamicObject  
  
    Public Overrides Function TryConvert(ByVal binder As ConvertBinder,  
                                         ByRef result As Object) As Boolean  
  
        If binder.Type = GetType(String) Then  
            result = "Sample String"  
            Return True  
        End If  
  
        Return False  
    End Function  
End Class  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)" />
        <altmember cref="M:System.Dynamic.DynamicMetaObject.BindConvert(System.Dynamic.ConvertBinder)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ErrorToString">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-126">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-126">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString();" />
      <MemberSignature Language="F#" Value="static member ErrorToString : unit -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-127">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-127">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-128">Сообщение об ошибке, соответствующее самой последней ошибке времени выполнения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-128">The error message that corresponds to the most recent run-time error.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-129">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="1abfd-129">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="1abfd-130">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="1abfd-130">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="1abfd-131">При отсутствии ошибок времени выполнения, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="1abfd-131">If no run-time error has occurred, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="1abfd-132">В Visual Basic версии 6.0 и более ранних версий, эти функции были предоставлены по `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="1abfd-132">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-133">В следующем коде используется `ErrorToString` функцию для отображения сообщения об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="1abfd-133">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-134">
            <paramref name="ErrorNumber" /> выходит за пределы диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-134">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ErrorToString">
      <MemberSignature Language="C#" Value="public static string ErrorToString (int ErrorNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string ErrorToString(int32 ErrorNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.ErrorToString(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ErrorToString (ErrorNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ ErrorToString(int ErrorNumber);" />
      <MemberSignature Language="F#" Value="static member ErrorToString : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.ErrorToString ErrorNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ErrorNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ErrorNumber">
          <span data-ttu-id="1abfd-135">Необязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-135">Optional.</span>
          </span>
          <span data-ttu-id="1abfd-136">Любой допустимый номер ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-136">Any valid error number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-137">Возвращает сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-137">Returns the error message that corresponds to a given error number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-138">Сообщение об ошибке, соответствующее данному номеру ошибки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-138">The error message that corresponds to a given error number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-139">`ErrorToString` Функция проверяет параметры свойства `Err` объект для идентификации последней ошибке времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="1abfd-139">The `ErrorToString` function examines the property settings of the `Err` object to identify the most recent run-time error.</span></span> <span data-ttu-id="1abfd-140">Возвращаемое значение `ErrorToString` соответствует функции `Description` свойство `Err` объекта.</span><span class="sxs-lookup"><span data-stu-id="1abfd-140">The return value of the `ErrorToString` function corresponds to the `Description` property of the `Err` object.</span></span> <span data-ttu-id="1abfd-141">Если `ErrorNumber` — это допустимый номер ошибки, но не задано, `ErrorToString` возвращает строку `"Application-defined or object-defined error."` Если `ErrorNumber` является недопустимым, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="1abfd-141">If `ErrorNumber` is a valid error number but is not defined, `ErrorToString` returns the string `"Application-defined or object-defined error."` If `ErrorNumber` is not valid, an error occurs.</span></span> <span data-ttu-id="1abfd-142">Если `ErrorNumber` опущен, сообщение, соответствующее самой последней ошибки времени выполнения.</span><span class="sxs-lookup"><span data-stu-id="1abfd-142">If `ErrorNumber` is omitted, the message corresponding to the most recent run-time error is returned.</span></span> <span data-ttu-id="1abfd-143">Если произошло ни одной ошибки времени выполнения или `ErrorNumber` равно 0, `ErrorToString` возвращает строку нулевой длины (»»).</span><span class="sxs-lookup"><span data-stu-id="1abfd-143">If no run-time error has occurred or `ErrorNumber` is 0, `ErrorToString` returns a zero-length string ("").</span></span>  
  
 <span data-ttu-id="1abfd-144">В Visual Basic версии 6.0 и более ранних версий, эти функции были предоставлены по `Error` функции.</span><span class="sxs-lookup"><span data-stu-id="1abfd-144">In Visual Basic version 6.0 and earlier, this functionality was provided by the `Error` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-145">В следующем коде используется `ErrorToString` функцию для отображения сообщения об ошибках, которые соответствуют числам указанной ошибки.</span><span class="sxs-lookup"><span data-stu-id="1abfd-145">The following code uses the `ErrorToString` function to display error messages that correspond to the specified error numbers.</span></span>  
  
 [!code-vb[VbVbalrCatRef#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-146">
            <paramref name="ErrorNumber" /> выходит за пределы диапазона.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-146">
              <paramref name="ErrorNumber" /> is out of range.</span>
          </span>
        </exception>
        <altmember cref="T:Microsoft.VisualBasic.ErrObject" />
        <altmember cref="P:Microsoft.VisualBasic.ErrObject.Description" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fix">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-147">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-147">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static decimal Fix (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Fix(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Fix(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Fix : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-148">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-148">Required.</span>
          </span>
          <span data-ttu-id="1abfd-149">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-149">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-150">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-150">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-151">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-151">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-152">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-152">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-153">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-153">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-154">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-154">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-155">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-155">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-156">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-156">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-157">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-157">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-158">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-158">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-159">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-159">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-160">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-160">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-161">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-161">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-162">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-162">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-163">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-163">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-164">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-164">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-165">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-165">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-166">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-166">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-167">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-167">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static double Fix (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Fix(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Fix(double Number);" />
      <MemberSignature Language="F#" Value="static member Fix : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-168">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-168">Required.</span>
          </span>
          <span data-ttu-id="1abfd-169">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-169">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-170">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-170">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-171">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-171">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-172">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-172">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-173">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-173">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-174">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-174">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-175">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-175">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-176">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-176">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-177">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-177">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-178">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-178">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-179">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-179">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-180">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-180">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-181">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-181">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-182">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-182">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-183">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-183">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-184">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-184">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-185">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-185">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-186">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-186">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-187">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-187">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static short Fix (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Fix(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Fix(short Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-188">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-188">Required.</span>
          </span>
          <span data-ttu-id="1abfd-189">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-189">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-190">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-190">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-191">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-191">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-192">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-192">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-193">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-193">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-194">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-194">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-195">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-195">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-196">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-196">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-197">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-197">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-198">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-198">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-199">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-199">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-200">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-200">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-201">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-201">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-202">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-202">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-203">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-203">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-204">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-204">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-205">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-205">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-206">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-206">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-207">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-207">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static int Fix (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Fix(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Fix(int Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-208">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-208">Required.</span>
          </span>
          <span data-ttu-id="1abfd-209">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-209">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-210">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-210">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-211">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-211">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-212">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-212">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-213">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-213">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-214">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-214">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-215">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-215">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-216">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-216">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-217">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-217">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-218">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-218">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-219">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-219">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-220">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-220">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-221">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-221">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-222">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-222">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-223">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-223">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-224">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-224">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-225">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-225">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-226">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-226">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-227">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-227">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static long Fix (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Fix(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Fix(long Number);" />
      <MemberSignature Language="F#" Value="static member Fix : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-228">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-228">Required.</span>
          </span>
          <span data-ttu-id="1abfd-229">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-229">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-230">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-230">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-231">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-231">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-232">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-232">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-233">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-233">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-234">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-234">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-235">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-235">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-236">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-236">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-237">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-237">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-238">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-238">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-239">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-239">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-240">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-240">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-241">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-241">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-242">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-242">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-243">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-243">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-244">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-244">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-245">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-245">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-246">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-246">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-247">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-247">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static object Fix (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Fix(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Fix(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Fix : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-248">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-248">Required.</span>
          </span>
          <span data-ttu-id="1abfd-249">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-249">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-250">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-250">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-251">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-251">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-252">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-252">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-253">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-253">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-254">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-254">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-255">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-255">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-256">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-256">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-257">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-257">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-258">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-258">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-259">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-259">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-260">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-260">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-261">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-261">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-262">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-262">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-263">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-263">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-264">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-264">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-265">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-265">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-266">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-266">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-267">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-267">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Fix">
      <MemberSignature Language="C#" Value="public static float Fix (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Fix(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Fix(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Fix (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Fix(float Number);" />
      <MemberSignature Language="F#" Value="static member Fix : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Fix Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-268">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-268">Required.</span>
          </span>
          <span data-ttu-id="1abfd-269">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-269">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-270">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-270">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-271">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-271">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-272">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-272">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-273">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-273">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-274">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-274">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-275">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-275">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-276">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-276">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-277">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-277">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-278">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-278">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-279">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-279">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-280">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-280">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-281">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-281">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-282">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-282">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-283">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-283">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-284">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-284">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-285">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-285">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-286">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-286">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-287">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-287">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Hex">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-288">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-288">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-289">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-289">Required.</span>
          </span>
          <span data-ttu-id="1abfd-290">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-290">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-291">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-291">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-292">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-292">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-293">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-293">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-294">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-294">If `Number` is</span></span>|<span data-ttu-id="1abfd-295">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-295">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-296">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-296">Empty</span></span>|<span data-ttu-id="1abfd-297">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-297">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-298">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-298">Any numeric value</span></span>|<span data-ttu-id="1abfd-299">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-299">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-300">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-300">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-301">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-301">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-302">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-302">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-303">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-303">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-304">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-304">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(short Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-305">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-305">Required.</span>
          </span>
          <span data-ttu-id="1abfd-306">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-306">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-307">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-307">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-308">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-308">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-309">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-309">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-310">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-310">If `Number` is</span></span>|<span data-ttu-id="1abfd-311">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-311">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-312">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-312">Empty</span></span>|<span data-ttu-id="1abfd-313">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-313">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-314">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-314">Any numeric value</span></span>|<span data-ttu-id="1abfd-315">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-315">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-316">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-316">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-317">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-317">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-318">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-318">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-319">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-319">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-320">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-320">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(int Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-321">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-321">Required.</span>
          </span>
          <span data-ttu-id="1abfd-322">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-322">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-323">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-323">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-324">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-324">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-325">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-325">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-326">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-326">If `Number` is</span></span>|<span data-ttu-id="1abfd-327">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-327">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-328">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-328">Empty</span></span>|<span data-ttu-id="1abfd-329">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-329">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-330">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-330">Any numeric value</span></span>|<span data-ttu-id="1abfd-331">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-331">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-332">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-332">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-333">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-333">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-334">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-334">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-335">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-335">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-336">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-336">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(long Number);" />
      <MemberSignature Language="F#" Value="static member Hex : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-337">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-337">Required.</span>
          </span>
          <span data-ttu-id="1abfd-338">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-338">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-339">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-339">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-340">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-340">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-341">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-341">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-342">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-342">If `Number` is</span></span>|<span data-ttu-id="1abfd-343">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-343">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-344">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-344">Empty</span></span>|<span data-ttu-id="1abfd-345">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-345">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-346">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-346">Any numeric value</span></span>|<span data-ttu-id="1abfd-347">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-347">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-348">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-348">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-349">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-349">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-350">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-350">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-351">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-351">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-352">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-352">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Hex : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-353">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-353">Required.</span>
          </span>
          <span data-ttu-id="1abfd-354">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-354">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-355">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-355">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-356">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-356">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-357">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-357">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-358">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-358">If `Number` is</span></span>|<span data-ttu-id="1abfd-359">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-359">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-360">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-360">Empty</span></span>|<span data-ttu-id="1abfd-361">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-361">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-362">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-362">Any numeric value</span></span>|<span data-ttu-id="1abfd-363">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-363">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-364">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-364">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-365">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-365">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-366">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-366">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-367">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-367">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-368">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-368">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Hex : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-369">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-369">Required.</span>
          </span>
          <span data-ttu-id="1abfd-370">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-370">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-371">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-371">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-372">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-372">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-373">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-373">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-374">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-374">If `Number` is</span></span>|<span data-ttu-id="1abfd-375">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-375">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-376">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-376">Empty</span></span>|<span data-ttu-id="1abfd-377">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-377">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-378">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-378">Any numeric value</span></span>|<span data-ttu-id="1abfd-379">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-379">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-380">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-380">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-381">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-381">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-382">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-382">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-383">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-383">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-384">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-384">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-385">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-385">Required.</span>
          </span>
          <span data-ttu-id="1abfd-386">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-386">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-387">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-387">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-388">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-388">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-389">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-389">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-390">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-390">If `Number` is</span></span>|<span data-ttu-id="1abfd-391">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-391">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-392">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-392">Empty</span></span>|<span data-ttu-id="1abfd-393">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-393">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-394">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-394">Any numeric value</span></span>|<span data-ttu-id="1abfd-395">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-395">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-396">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-396">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-397">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-397">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-398">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-398">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-399">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-399">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-400">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-400">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-401">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-401">Required.</span>
          </span>
          <span data-ttu-id="1abfd-402">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-402">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-403">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-403">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-404">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-404">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-405">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-405">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-406">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-406">If `Number` is</span></span>|<span data-ttu-id="1abfd-407">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-407">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-408">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-408">Empty</span></span>|<span data-ttu-id="1abfd-409">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-409">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-410">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-410">Any numeric value</span></span>|<span data-ttu-id="1abfd-411">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-411">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-412">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-412">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-413">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-413">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-414">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-414">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-415">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-415">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-416">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-416">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Hex">
      <MemberSignature Language="C#" Value="public static string Hex (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Hex(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Hex(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Hex (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Hex(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Hex : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Hex Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-417">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-417">Required.</span>
          </span>
          <span data-ttu-id="1abfd-418">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-418">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-419">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-419">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-420">Возвращает строку, представляющую шестнадцатеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-420">Returns a string representing the hexadecimal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-421">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-421">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-422">Если `Number` —</span><span class="sxs-lookup"><span data-stu-id="1abfd-422">If `Number` is</span></span>|<span data-ttu-id="1abfd-423">Hex возвращает</span><span class="sxs-lookup"><span data-stu-id="1abfd-423">Hex returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-424">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-424">Empty</span></span>|<span data-ttu-id="1abfd-425">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-425">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-426">Любое числовое значение</span><span class="sxs-lookup"><span data-stu-id="1abfd-426">Any numeric value</span></span>|<span data-ttu-id="1abfd-427">Более шестнадцати шестнадцатеричных символов</span><span class="sxs-lookup"><span data-stu-id="1abfd-427">Up to sixteen hexadecimal characters</span></span>|  
  
 <span data-ttu-id="1abfd-428">Могут быть представлены шестнадцатеричные числа непосредственно предшествует чисел в необходимом диапазоне `&H`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-428">You can represent hexadecimal numbers directly by preceding numbers in the proper range with `&H`.</span></span> <span data-ttu-id="1abfd-429">Например `&H10` представляет десятичное 16 в шестнадцатеричном формате.</span><span class="sxs-lookup"><span data-stu-id="1abfd-429">For example, `&H10` represents decimal 16 in hexadecimal notation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-430">В этом примере используется `Hex` функция, возвращающая шестнадцатеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-430">This example uses the `Hex` function to return the hexadecimal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Hex(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-431">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-431">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-432">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-432">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Oct" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Int">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-433">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-433">Return the integer portion of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static decimal Int (decimal Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.Decimal Int(valuetype System.Decimal Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Decimal) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Decimal Int(System::Decimal Number);" />
      <MemberSignature Language="F#" Value="static member Int : decimal -&gt; decimal" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-434">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-434">Required.</span>
          </span>
          <span data-ttu-id="1abfd-435">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-435">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-436">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-436">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-437">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-437">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-438">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-438">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-439">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-439">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-440">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-440">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-441">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-441">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-442">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-442">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-443">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-443">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-444">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-444">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-445">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-445">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-446">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-446">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-447">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-447">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-448">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-448">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-449">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-449">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-450">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-450">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-451">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-451">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-452">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-452">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-453">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-453">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static double Int (double Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Int(float64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Int(double Number);" />
      <MemberSignature Language="F#" Value="static member Int : double -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-454">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-454">Required.</span>
          </span>
          <span data-ttu-id="1abfd-455">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-455">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-456">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-456">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-457">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-457">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-458">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-458">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-459">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-459">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-460">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-460">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-461">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-461">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-462">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-462">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-463">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-463">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-464">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-464">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-465">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-465">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-466">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-466">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-467">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-467">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-468">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-468">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-469">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-469">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-470">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-470">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-471">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-471">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-472">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-472">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-473">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-473">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static short Int (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int16 Int(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Short) As Short" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static short Int(short Number);" />
      <MemberSignature Language="F#" Value="static member Int : int16 -&gt; int16" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-474">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-474">Required.</span>
          </span>
          <span data-ttu-id="1abfd-475">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-475">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-476">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-476">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-477">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-477">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-478">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-478">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-479">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-479">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-480">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-480">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-481">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-481">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-482">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-482">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-483">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-483">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-484">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-484">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-485">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-485">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-486">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-486">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-487">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-487">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-488">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-488">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-489">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-489">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-490">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-490">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-491">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-491">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-492">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-492">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-493">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-493">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static int Int (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Int(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Int(int Number);" />
      <MemberSignature Language="F#" Value="static member Int : int -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-494">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-494">Required.</span>
          </span>
          <span data-ttu-id="1abfd-495">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-495">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-496">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-496">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-497">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-497">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-498">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-498">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-499">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-499">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-500">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-500">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-501">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-501">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-502">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-502">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-503">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-503">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-504">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-504">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-505">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-505">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-506">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-506">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-507">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-507">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-508">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-508">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-509">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-509">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-510">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-510">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-511">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-511">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-512">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-512">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-513">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-513">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static long Int (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Int(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Long) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Int(long Number);" />
      <MemberSignature Language="F#" Value="static member Int : int64 -&gt; int64" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-514">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-514">Required.</span>
          </span>
          <span data-ttu-id="1abfd-515">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-515">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-516">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-516">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-517">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-517">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-518">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-518">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-519">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-519">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-520">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-520">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-521">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-521">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-522">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-522">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-523">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-523">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-524">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-524">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-525">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-525">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-526">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-526">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-527">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-527">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-528">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-528">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-529">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-529">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-530">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-530">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-531">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-531">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-532">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-532">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-533">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-533">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static object Int (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static object Int(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Int(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Int : obj -&gt; obj" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-534">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-534">Required.</span>
          </span>
          <span data-ttu-id="1abfd-535">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-535">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-536">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-536">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-537">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-537">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-538">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-538">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-539">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-539">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-540">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-540">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-541">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-541">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-542">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-542">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-543">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-543">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-544">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-544">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-545">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-545">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-546">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-546">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-547">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-547">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-548">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-548">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-549">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-549">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-550">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-550">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-551">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-551">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-552">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-552">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-553">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-553">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Int">
      <MemberSignature Language="C#" Value="public static float Int (float Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static float32 Int(float32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Int(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Int (Number As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static float Int(float Number);" />
      <MemberSignature Language="F#" Value="static member Int : single -&gt; single" Usage="Microsoft.VisualBasic.Conversion.Int Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-554">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-554">Required.</span>
          </span>
          <span data-ttu-id="1abfd-555">Число типа <see langword="Double" /> или любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-555">A number of type <see langword="Double" /> or any valid numeric expression.</span>
          </span>
          <span data-ttu-id="1abfd-556">Если параметр <c>Number</c> содержит <see langword="Nothing" />, то возвращается значение <see langword="Nothing" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-556">If <c>Number</c> contains <see langword="Nothing" />, <see langword="Nothing" /> is returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-557">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-557">Return the integer portion of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-558">Возвращают целую часть числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-558">Return the integer portion of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-559">Как `Int` и `Fix` функции удалить дробную часть `Number` и возвращают итоговое целочисленное значение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-559">Both the `Int` and `Fix` functions remove the fractional part of `Number` and return the resulting integer value.</span></span>  
  
 <span data-ttu-id="1abfd-560">Разница между `Int` и `Fix` "функции" — что если `Number` отрицательное, `Int` возвращает первое отрицательное целое число меньше или равно `Number`, тогда как `Fix` возвращает первое отрицательное целое число больше или равно `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-560">The difference between `Int` and `Fix` functions is that if `Number` is negative, `Int` returns the first negative integer less than or equal to `Number`, whereas `Fix` returns the first negative integer greater than or equal to `Number`.</span></span> <span data-ttu-id="1abfd-561">Например `Int` преобразует-8.4 в -9, и `Fix` преобразует-8.4 в -8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-561">For example, `Int` converts -8.4 to -9, and `Fix` converts -8.4 to -8.</span></span>  
  
 <span data-ttu-id="1abfd-562">`Fix(number)` эквивалентно `Sign(number) * Int(Abs(number)).`</span><span class="sxs-lookup"><span data-stu-id="1abfd-562">`Fix(number)` is equivalent to `Sign(number) * Int(Abs(number)).`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-563">В этом примере показано, как `Int` и `Fix` функции возвращают целой части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-563">This example illustrates how the `Int` and `Fix` functions return integer portions of numbers.</span></span> <span data-ttu-id="1abfd-564">В случае отрицательных числовой аргумент `Int` функция возвращает первый отрицательное целое число меньше или равно числу; `Fix` функция возвращает первый отрицательное целое число, больше или равно числу.</span><span class="sxs-lookup"><span data-stu-id="1abfd-564">In the case of a negative number argument, the `Int` function returns the first negative integer less than or equal to the number; the `Fix` function returns the first negative integer greater than or equal to the number.</span></span> <span data-ttu-id="1abfd-565">В следующем примере требуется, можно указать `Option Strict Off` , так как неявные преобразования из типа `Double` ввода `Integer` не разрешены в `Option Strict On`:</span><span class="sxs-lookup"><span data-stu-id="1abfd-565">The following example requires you to specify `Option Strict Off` because implicit conversions from type `Double` to type `Integer` are not allowed under `Option Strict On`:</span></span>  
  
 [!code-vb[VbVbalrMath#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class2.vb#4)]  
  
 <span data-ttu-id="1abfd-566">Можно использовать `CInt` функцию для явного преобразования типов данных к типу `Integer` с `Option Strict Off`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-566">You can use the `CInt` function to explicitly convert other data types to type `Integer` with `Option Strict Off`.</span></span> <span data-ttu-id="1abfd-567">Тем не менее `CInt` округляет значение до ближайшего целого числа вместо отбрасывания дробной части числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-567">However, `CInt` rounds to the nearest integer instead of truncating the fractional part of numbers.</span></span> <span data-ttu-id="1abfd-568">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-568">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#5)]  
  
 <span data-ttu-id="1abfd-569">Можно использовать `CInt` функция результат вызова `Fix` или `Int` для выполнения явного преобразования в целое число без округления.</span><span class="sxs-lookup"><span data-stu-id="1abfd-569">You can use the `CInt` function on the result of a call to `Fix` or `Int` to perform explicit conversion to integer without rounding.</span></span> <span data-ttu-id="1abfd-570">Пример:</span><span class="sxs-lookup"><span data-stu-id="1abfd-570">For example:</span></span>  
  
 [!code-vb[VbVbalrMath#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#6)]  
  
 <span data-ttu-id="1abfd-571">Дополнительные сведения о `CInt`, см. в разделе [функции преобразования типов](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span><span class="sxs-lookup"><span data-stu-id="1abfd-571">For more information on `CInt`, see [Type Conversion Functions](~/docs/visual-basic/language-reference/functions/type-conversion-functions.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-572">Число не указано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-572">Number is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-573">Число не является числовым типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-573">Number is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Oct">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-574">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-574">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (byte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Byte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Byte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : byte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-575">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-575">Required.</span>
          </span>
          <span data-ttu-id="1abfd-576">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-576">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-577">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-577">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-578">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-578">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-579">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-579">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-580">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-580">If Number is</span></span>|<span data-ttu-id="1abfd-581">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-581">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-582">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-582">Empty</span></span>|<span data-ttu-id="1abfd-583">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-583">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-584">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-584">Any other number</span></span>|<span data-ttu-id="1abfd-585">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-585">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-586">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-586">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-587">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-587">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-588">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-588">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-589">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-589">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-590">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-590">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (short Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Short) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(short Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-591">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-591">Required.</span>
          </span>
          <span data-ttu-id="1abfd-592">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-592">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-593">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-593">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-594">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-594">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-595">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-595">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-596">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-596">If Number is</span></span>|<span data-ttu-id="1abfd-597">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-597">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-598">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-598">Empty</span></span>|<span data-ttu-id="1abfd-599">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-599">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-600">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-600">Any other number</span></span>|<span data-ttu-id="1abfd-601">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-601">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-602">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-602">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-603">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-603">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-604">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-604">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-605">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-605">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-606">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-606">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(int Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-607">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-607">Required.</span>
          </span>
          <span data-ttu-id="1abfd-608">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-608">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-609">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-609">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-610">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-610">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-611">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-611">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-612">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-612">If Number is</span></span>|<span data-ttu-id="1abfd-613">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-613">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-614">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-614">Empty</span></span>|<span data-ttu-id="1abfd-615">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-615">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-616">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-616">Any other number</span></span>|<span data-ttu-id="1abfd-617">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-617">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-618">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-618">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-619">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-619">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-620">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-620">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-621">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-621">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-622">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-622">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (long Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Long) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(long Number);" />
      <MemberSignature Language="F#" Value="static member Oct : int64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-623">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-623">Required.</span>
          </span>
          <span data-ttu-id="1abfd-624">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-624">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-625">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-625">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-626">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-626">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-627">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-627">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-628">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-628">If Number is</span></span>|<span data-ttu-id="1abfd-629">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-629">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-630">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-630">Empty</span></span>|<span data-ttu-id="1abfd-631">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-631">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-632">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-632">Any other number</span></span>|<span data-ttu-id="1abfd-633">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-633">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-634">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-634">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-635">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-635">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-636">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-636">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-637">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-637">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-638">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-638">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Oct : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-639">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-639">Required.</span>
          </span>
          <span data-ttu-id="1abfd-640">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-640">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-641">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-641">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-642">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-642">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-643">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-643">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-644">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-644">If Number is</span></span>|<span data-ttu-id="1abfd-645">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-645">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-646">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-646">Empty</span></span>|<span data-ttu-id="1abfd-647">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-647">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-648">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-648">Any other number</span></span>|<span data-ttu-id="1abfd-649">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-649">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-650">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-650">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-651">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-651">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-652">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-652">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-653">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-653">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-654">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-654">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (sbyte Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(int8 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As SByte) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::SByte Number);" />
      <MemberSignature Language="F#" Value="static member Oct : sbyte -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-655">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-655">Required.</span>
          </span>
          <span data-ttu-id="1abfd-656">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-656">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-657">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-657">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-658">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-658">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-659">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-659">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-660">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-660">If Number is</span></span>|<span data-ttu-id="1abfd-661">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-661">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-662">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-662">Empty</span></span>|<span data-ttu-id="1abfd-663">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-663">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-664">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-664">Any other number</span></span>|<span data-ttu-id="1abfd-665">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-665">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-666">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-666">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-667">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-667">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-668">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-668">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Byte)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-669">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-669">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-670">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-670">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ushort Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int16 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UShort) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt16 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint16 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-671">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-671">Required.</span>
          </span>
          <span data-ttu-id="1abfd-672">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-672">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-673">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-673">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-674">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-674">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-675">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-675">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-676">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-676">If Number is</span></span>|<span data-ttu-id="1abfd-677">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-677">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-678">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-678">Empty</span></span>|<span data-ttu-id="1abfd-679">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-679">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-680">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-680">Any other number</span></span>|<span data-ttu-id="1abfd-681">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-681">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-682">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-682">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-683">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-683">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-684">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-684">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int16)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-685">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-685">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-686">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-686">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (uint Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As UInteger) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt32 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint32 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-687">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-687">Required.</span>
          </span>
          <span data-ttu-id="1abfd-688">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-688">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-689">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-689">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-690">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-690">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-691">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-691">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-692">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-692">If Number is</span></span>|<span data-ttu-id="1abfd-693">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-693">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-694">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-694">Empty</span></span>|<span data-ttu-id="1abfd-695">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-695">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-696">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-696">Any other number</span></span>|<span data-ttu-id="1abfd-697">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-697">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-698">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-698">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-699">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-699">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-700">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-700">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int32)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-701">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-701">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-702">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-702">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Oct">
      <MemberSignature Language="C#" Value="public static string Oct (ulong Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Oct(unsigned int64 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Oct(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Oct (Number As ULong) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Oct(System::UInt64 Number);" />
      <MemberSignature Language="F#" Value="static member Oct : uint64 -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Oct Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-703">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-703">Required.</span>
          </span>
          <span data-ttu-id="1abfd-704">Любое допустимое числовое выражение или выражение типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-704">Any valid numeric expression or <see langword="String" /> expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-705">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-705">Returns a string representing the octal value of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-706">Возвращает строку, представляющую восьмеричное значение числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-706">Returns a string representing the octal value of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-707">Если `Number` еще не целым числом, его значение округляется до ближайшего целого числа перед вычислением.</span><span class="sxs-lookup"><span data-stu-id="1abfd-707">If `Number` is not already a whole number, it is rounded to the nearest whole number before being evaluated.</span></span>  
  
|<span data-ttu-id="1abfd-708">Если число</span><span class="sxs-lookup"><span data-stu-id="1abfd-708">If Number is</span></span>|<span data-ttu-id="1abfd-709">Возвращает октября</span><span class="sxs-lookup"><span data-stu-id="1abfd-709">Oct returns</span></span>|  
|-|-|  
|<span data-ttu-id="1abfd-710">Empty</span><span class="sxs-lookup"><span data-stu-id="1abfd-710">Empty</span></span>|<span data-ttu-id="1abfd-711">Ноль (0)</span><span class="sxs-lookup"><span data-stu-id="1abfd-711">Zero (0)</span></span>|  
|<span data-ttu-id="1abfd-712">Любое другое число</span><span class="sxs-lookup"><span data-stu-id="1abfd-712">Any other number</span></span>|<span data-ttu-id="1abfd-713">До 22 восьмеричные знаки</span><span class="sxs-lookup"><span data-stu-id="1abfd-713">Up to 22 octal characters</span></span>|  
  
 <span data-ttu-id="1abfd-714">Могут быть представлены восьмеричные цифры непосредственно перед чисел в необходимом диапазоне `&O`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-714">You can represent octal numbers directly by preceding numbers in the proper range with `&O`.</span></span> <span data-ttu-id="1abfd-715">Например `&O10` является восьмеричной нотации для десятичного 8.</span><span class="sxs-lookup"><span data-stu-id="1abfd-715">For example, `&O10` is the octal notation for decimal 8.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-716">В этом примере используется `Oct` функция возвращает восьмеричное значение числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-716">This example uses the `Oct` function to return the octal value of a number.</span></span>  
  
 [!code-vb[VbVbalrStrings#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Conversion.Oct(System.Int64)" />
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-717">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-717">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-718">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-718">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Hex" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="Str">
      <MemberSignature Language="C#" Value="public static string Str (object Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Str(object Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Str (Number As Object) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Str(System::Object ^ Number);" />
      <MemberSignature Language="F#" Value="static member Str : obj -&gt; string" Usage="Microsoft.VisualBasic.Conversion.Str Number" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">
          <span data-ttu-id="1abfd-719">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-719">Required.</span>
          </span>
          <span data-ttu-id="1abfd-720">
            <see langword="Object" />, содержащий любое допустимое числовое выражение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-720">An <see langword="Object" /> containing any valid numeric expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-721">Возвращает представление <see langword="String" /> числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-721">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-722">Возвращает представление <see langword="String" /> числа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-722">Returns a <see langword="String" /> representation of a number.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-723">При преобразовании чисел в строки, начальный пробел всегда резервируется для знака `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-723">When numbers are converted to strings, a leading space is always reserved for the sign of `Number`.</span></span> <span data-ttu-id="1abfd-724">Если `Number` является положительным, возвращаемая строка содержит начальный пробел и знак «плюс» подразумевается.</span><span class="sxs-lookup"><span data-stu-id="1abfd-724">If `Number` is positive, the returned string contains a leading space, and the plus sign is implied.</span></span> <span data-ttu-id="1abfd-725">Отрицательное число включает знак минус (-) и не начальным пробелом.</span><span class="sxs-lookup"><span data-stu-id="1abfd-725">A negative number will include the minus sign (-) and no leading space.</span></span>  
  
 <span data-ttu-id="1abfd-726">Используйте `Format` функцию для преобразования числовых значений, следует форматировать как даты или времени, валюты или в других пользовательских форматах.</span><span class="sxs-lookup"><span data-stu-id="1abfd-726">Use the `Format` function to convert numeric values you want formatted as dates, times, or currency or in other user-defined formats.</span></span> <span data-ttu-id="1abfd-727">В отличие от `Str` функции `Format` функция не включает начальный пробел для знак `Number`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-727">Unlike the `Str` function, the `Format` function does not include a leading space for the sign of `Number`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-728">`Str` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="1abfd-728">The `Str` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1abfd-729">Если используются разные десятичные разделители (например, в международных приложениях), используйте `CStr` или `Format` функции для преобразования числа в строку.</span><span class="sxs-lookup"><span data-stu-id="1abfd-729">If different decimal separators are used (for example, in international applications), use the `CStr` or `Format` functions to convert a number to a string.</span></span> <span data-ttu-id="1abfd-730">Чтобы получить строковое представление числа в определенного языка и региональных параметров, используйте номер `ToString(IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="1abfd-730">To get the string representation of a number in a particular culture, use the number's `ToString(IFormatProvider)` method.</span></span> <span data-ttu-id="1abfd-731">Например, использовать <xref:System.Double.ToString%2A> при преобразовании значения типа `Double` в строку.</span><span class="sxs-lookup"><span data-stu-id="1abfd-731">For example, use <xref:System.Double.ToString%2A> when converting a value of type `Double` to a string.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-732">В этом примере используется `Str` функция, возвращающая `String` представление числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-732">This example uses the `Str` function to return a `String` representation of a number.</span></span> <span data-ttu-id="1abfd-733">Если положительное число преобразуется в строку, начальный пробел всегда резервируется для знака.</span><span class="sxs-lookup"><span data-stu-id="1abfd-733">When a positive number is converted to a string, a leading space is always reserved for its sign.</span></span>  
  
 [!code-vb[VbVbalrStrings#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="1abfd-734">
            <paramref name="Number" /> не задан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-734">
              <paramref name="Number" /> is not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="1abfd-735">
            <paramref name="Number" /> не относится к числовому типу.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-735">
              <paramref name="Number" /> is not a numeric type.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Conversion.Val" />
        <altmember cref="T:System.ArgumentNullException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Val">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1abfd-736">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-736">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static int Val (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Val(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Val(char Expression);" />
      <MemberSignature Language="F#" Value="static member Val : char -&gt; int" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1abfd-737">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-737">Required.</span>
          </span>
          <span data-ttu-id="1abfd-738">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-738">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1abfd-739">Если <c>Expression</c> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-739">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-740">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-740">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-741">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-741">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-742">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-742">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1abfd-743">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="1abfd-743">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1abfd-744">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="1abfd-744">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1abfd-745">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="1abfd-745">Blanks, tabs, and linefeed characters are stripped from the argument.</span></span>  
  
 <span data-ttu-id="1abfd-746">Следующий вызов возвращает значение 1615198.</span><span class="sxs-lookup"><span data-stu-id="1abfd-746">The following call returns the value 1615198.</span></span>  
  
```  
  
Val(" 1615 198th Street N.E.")   
```  
  
 <span data-ttu-id="1abfd-747">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="1abfd-747">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-748">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="1abfd-748">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1abfd-749">Если используются разные десятичные разделители, например приложения на разных языках, использовать `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="1abfd-749">When different decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1abfd-750">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="1abfd-750">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1abfd-751">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-751">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-752"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="1abfd-752">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1abfd-753">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-753">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1abfd-754">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если она не содержалась в строке.</span><span class="sxs-lookup"><span data-stu-id="1abfd-754">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if it were not contained in a string.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-755">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="1abfd-755">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1abfd-756">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="1abfd-756">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1abfd-757">
            <paramref name="InputStr" /> — слишком большое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-757">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-758">
            <see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-758">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (Expression As Object) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::Object ^ Expression);" />
      <MemberSignature Language="F#" Value="static member Val : obj -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val Expression" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">
          <span data-ttu-id="1abfd-759">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-759">Required.</span>
          </span>
          <span data-ttu-id="1abfd-760">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-760">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1abfd-761">Если <c>Expression</c> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-761">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-762">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-762">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-763">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-763">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-764">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-764">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1abfd-765">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="1abfd-765">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1abfd-766">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="1abfd-766">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1abfd-767">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="1abfd-767">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="1abfd-768">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="1abfd-768">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="1abfd-769">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="1abfd-769">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-770">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="1abfd-770">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1abfd-771">При использовании других десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="1abfd-771">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1abfd-772">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="1abfd-772">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1abfd-773">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-773">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-774"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="1abfd-774">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1abfd-775">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-775">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1abfd-776">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="1abfd-776">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-777">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="1abfd-777">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1abfd-778">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="1abfd-778">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1abfd-779">
            <paramref name="InputStr" /> — слишком большое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-779">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-780">
            <see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-780">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Val">
      <MemberSignature Language="C#" Value="public static double Val (string InputStr);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Val(string InputStr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Conversion.Val(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Val (InputStr As String) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double Val(System::String ^ InputStr);" />
      <MemberSignature Language="F#" Value="static member Val : string -&gt; double" Usage="Microsoft.VisualBasic.Conversion.Val InputStr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="InputStr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="InputStr">
          <span data-ttu-id="1abfd-781">Обязательно.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-781">Required.</span>
          </span>
          <span data-ttu-id="1abfd-782">Любое допустимое выражение<see langword="String" />, переменная <see langword="Object" /> или значение <see langword="Char" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-782">Any valid <see langword="String" /> expression, <see langword="Object" /> variable, or <see langword="Char" /> value.</span>
          </span>
          <span data-ttu-id="1abfd-783">Если <c>Expression</c> имеет тип <see langword="Object" />, значение должно быть преобразуемым в <see langword="String" />. В противном случае возникает ошибка <see cref="T:System.ArgumentException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-783">If <c>Expression</c> is of type <see langword="Object" />, its value must be convertible to <see langword="String" /> or an <see cref="T:System.ArgumentException" /> error occurs.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1abfd-784">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-784">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1abfd-785">Возвращает порядковый номер, который содержится в строке в виде числовых значений соответствующего типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-785">Returns the numbers contained in a string as a numeric value of appropriate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1abfd-786">`Val` Функция прекращает чтение строки на первом знаке, она не может распознать как часть числа.</span><span class="sxs-lookup"><span data-stu-id="1abfd-786">The `Val` function stops reading the string at the first character it cannot recognize as part of a number.</span></span> <span data-ttu-id="1abfd-787">Символы и символы, которые часто считаются частями числовых значений, таких как знак доллара и запятые, не распознаются.</span><span class="sxs-lookup"><span data-stu-id="1abfd-787">Symbols and characters that are often considered parts of numeric values, such as dollar signs and commas, are not recognized.</span></span> <span data-ttu-id="1abfd-788">Однако функция распознает префиксы основание системы счисления `&O` (для восьмеричной) и `&H` (для шестнадцатеричной).</span><span class="sxs-lookup"><span data-stu-id="1abfd-788">However, the function recognizes the radix prefixes `&O` (for octal) and `&H` (for hexadecimal).</span></span> <span data-ttu-id="1abfd-789">Пробелы, знаки табуляции и символы перевода строки удаляются из аргумента.</span><span class="sxs-lookup"><span data-stu-id="1abfd-789">Blanks, tabs, and linefeed characters are removed from the argument.</span></span>  
  
 <span data-ttu-id="1abfd-790">Следующий вызов возвращает значение 1234123.</span><span class="sxs-lookup"><span data-stu-id="1abfd-790">The following call returns the value 1234123.</span></span>  
  
```  
  
Val(" 1234 123th Street N.E.")   
```  
  
 <span data-ttu-id="1abfd-791">Следующий вызов возвращает десятичное значение -1.</span><span class="sxs-lookup"><span data-stu-id="1abfd-791">The following call returns the decimal value -1.</span></span>  
  
```  
  
Val("&HFFFF")   
```  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-792">`Val` Функция распознает только точку (`.`) в качестве допустимого десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="1abfd-792">The `Val` function recognizes only the period (`.`) as a valid decimal separator.</span></span> <span data-ttu-id="1abfd-793">При использовании других десятичные разделители, например в приложениях, используйте `CDbl` или `CInt` вместо этого для преобразования строки в число.</span><span class="sxs-lookup"><span data-stu-id="1abfd-793">When other decimal separators are used, as in international applications, use `CDbl` or `CInt` instead to convert a string to a number.</span></span> <span data-ttu-id="1abfd-794">Чтобы преобразовать строковое представление числа в определенной культуры в числовое значение, используйте числовой тип `Parse(String, IFormatProvider)` метод.</span><span class="sxs-lookup"><span data-stu-id="1abfd-794">To convert the string representation of a number in a particular culture to a numeric value, use the numeric type's `Parse(String, IFormatProvider)` method.</span></span> <span data-ttu-id="1abfd-795">Например, использовать <xref:System.Double.Parse%2A?displayProperty=nameWithType> при преобразовании строки в `Double`.</span><span class="sxs-lookup"><span data-stu-id="1abfd-795">For example, use <xref:System.Double.Parse%2A?displayProperty=nameWithType> when converting a string to a `Double`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1abfd-796"><xref:System.InvalidCastException> Исключение может возникать в ответ на определенные редко числовые форматы.</span><span class="sxs-lookup"><span data-stu-id="1abfd-796">An <xref:System.InvalidCastException> exception might be raised in response to certain uncommon number formats.</span></span> <span data-ttu-id="1abfd-797">Например следующий код вызывает это исключение.</span><span class="sxs-lookup"><span data-stu-id="1abfd-797">For example, the following code raises this exception.</span></span>  
>   
>  `' These examples cause run-time errors.`  
>   
>  `'Console.WriteLine(Val("1.34%"))`  
>   
>  `'Console.WriteLine(Val("1.34&"))`  
>   
>  <span data-ttu-id="1abfd-798">Конфликт между номером в формате `Double` и `Integer` и `Long` символы типа должен обнаруживаться компилятором, если конфликт не содержится в строках.</span><span class="sxs-lookup"><span data-stu-id="1abfd-798">The conflict between the number formatted as a `Double` and the `Integer` and `Long` type characters would be caught by the compiler if the conflict were not contained in strings.</span></span>  
>   
>  `' These examples cause compiler errors.`  
>   
>  `'Dim m = 1.34%`  
>   
>  `'Dim n = 1.34&`  
  
   
  
## Examples  
 <span data-ttu-id="1abfd-799">В следующем примере используется `Val` функция, возвращающая чисел, содержащихся в каждой строке.</span><span class="sxs-lookup"><span data-stu-id="1abfd-799">The following example uses the `Val` function to return the numbers contained in each string.</span></span> <span data-ttu-id="1abfd-800">`Val` прекращает преобразование на первом знаке, который не может интерпретироваться как цифра, числовой модификатор, числовой знак препинания или пробелы.</span><span class="sxs-lookup"><span data-stu-id="1abfd-800">`Val` stops converting at the first character that cannot be interpreted as a numeric digit, numeric modifier, numeric punctuation, or white space.</span></span>  
  
 [!code-vb[VbVbalrFunctions#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="1abfd-801">
            <paramref name="InputStr" /> — слишком большое значение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-801">
              <paramref name="InputStr" /> is too large.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="1abfd-802">
            <see langword="Object" /> — это выражение типа <see langword="String" />, которое нельзя преобразовать в <paramref name="Expression" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1abfd-802">
              <paramref name="Expression" /> is an <see langword="Object" /> type expression that is not convertible to <see langword="String" />.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.OverflowException" />
        <altmember cref="T:System.InvalidCastException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>