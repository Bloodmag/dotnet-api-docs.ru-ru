<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="698d4c7779138119bfe452e95602b55a06711e5b" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37712148" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="8f967-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8f967-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="8f967-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8f967-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="8f967-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="8f967-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-104">Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, с доступом к файлам и папкам.</span><span class="sxs-lookup"><span data-stu-id="8f967-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-105">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="8f967-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="8f967-106">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-106">Required.</span>
          </span>
          <span data-ttu-id="8f967-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="8f967-108">
            <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="8f967-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-110">Changes the current directory or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="8f967-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="8f967-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-113">`ChDir` Функция меняет каталог по умолчанию, но не диск по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="8f967-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="8f967-114">Например, если по умолчанию это диск C, следующая инструкция изменяет каталог по умолчанию на диске D, но C остается диском по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="8f967-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="8f967-115">Может быть сделан относительным изменения каталога является путем ввода двух точек, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-116">`ChDir` Функция требует разрешение неуправляемого кода, что может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="8f967-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="8f967-117">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и.</span><span class="sxs-lookup"><span data-stu-id="8f967-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-118">В этом примере используется `ChDir` функции для изменения текущего каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="8f967-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-119">
            <paramref name="Path" /> is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-120">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-121">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="8f967-122">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-122">Required.</span>
          </span>
          <span data-ttu-id="8f967-123">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="8f967-124">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="8f967-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-126">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-127">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="8f967-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="8f967-128">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="8f967-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-129">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="8f967-130">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="8f967-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-131">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="8f967-132">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-132">Required.</span>
          </span>
          <span data-ttu-id="8f967-133">String expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="8f967-134">If you supply a zero-length string (""), the current drive does not change.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="8f967-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-136">Changes the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-137">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="8f967-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="8f967-138">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="8f967-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-139">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="8f967-140">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="8f967-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-141">Invalid drive is specified, or drive is unavailable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-142">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="8f967-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="8f967-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f967-145">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="8f967-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="8f967-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-148">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f967-149">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="8f967-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="8f967-150">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-150">Optional.</span>
          </span>
          <span data-ttu-id="8f967-151">
            <see langword="Char" /> expression that specifies an existing drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="8f967-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-153">Returns a string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="8f967-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="8f967-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-156">A string representing the current path.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f967-157">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="8f967-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="8f967-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="8f967-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f967-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="8f967-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="8f967-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-165">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="8f967-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="8f967-166">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="8f967-167">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="8f967-168">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="8f967-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-169">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="8f967-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="8f967-170">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="8f967-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="8f967-171">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="8f967-172">Значение</span><span class="sxs-lookup"><span data-stu-id="8f967-172">Value</span></span>|<span data-ttu-id="8f967-173">Константа</span><span class="sxs-lookup"><span data-stu-id="8f967-173">Constant</span></span>|<span data-ttu-id="8f967-174">Описание:</span><span class="sxs-lookup"><span data-stu-id="8f967-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="8f967-175">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="8f967-175">Default.</span></span> <span data-ttu-id="8f967-176">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="8f967-177">Указывает файлы, доступные только для чтения, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="8f967-178">Задает скрытые файлы, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="8f967-179">Указывает, системные файлы и файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="8f967-180">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="8f967-181">Указывает каталоги или папки, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="8f967-182">Файл был изменен с момента последнего резервного копирования.</span><span class="sxs-lookup"><span data-stu-id="8f967-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="8f967-183">Файл имеет другое имя.</span><span class="sxs-lookup"><span data-stu-id="8f967-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="8f967-184">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="8f967-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-185">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="8f967-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="8f967-186">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-186">Optional.</span>
          </span>
          <span data-ttu-id="8f967-187">
            <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="8f967-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="8f967-189">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-189">Optional.</span>
          </span>
          <span data-ttu-id="8f967-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="8f967-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="8f967-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="8f967-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-196">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="8f967-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="8f967-197">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="8f967-198">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="8f967-199">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="8f967-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-200">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="8f967-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="8f967-201">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="8f967-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="8f967-202">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="8f967-203">Значение</span><span class="sxs-lookup"><span data-stu-id="8f967-203">Value</span></span>|<span data-ttu-id="8f967-204">Константа</span><span class="sxs-lookup"><span data-stu-id="8f967-204">Constant</span></span>|<span data-ttu-id="8f967-205">Описание:</span><span class="sxs-lookup"><span data-stu-id="8f967-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="8f967-206">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="8f967-206">Default.</span></span> <span data-ttu-id="8f967-207">Указывает файлы, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="8f967-208">Указывает файлы только для чтения, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="8f967-209">Задает скрытые файлы, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="8f967-210">Определяет системные файлы, кроме файлов, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="8f967-211">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="8f967-212">Указывает каталоги или папки в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="8f967-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="8f967-213">Файл был изменен с момента последнего резервного копирования.</span><span class="sxs-lookup"><span data-stu-id="8f967-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="8f967-214">Файл имеет другое имя.</span><span class="sxs-lookup"><span data-stu-id="8f967-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="8f967-215">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте кода вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="8f967-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-216">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="8f967-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-217">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-217">Required.</span>
          </span>
          <span data-ttu-id="8f967-218">An <see langword="Integer" /> that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-221">Используйте `EOF` во избежание ошибки, возникшей при попытке получить данные за пределами файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="8f967-222">`EOF` Возвращает `False` пока не будет достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="8f967-223">В файлах, открытых для `Random` или `Binary` доступ, `EOF` возвращает `False` до последнего выполненного `FileGet` функции не удалось прочитать запись целиком.</span><span class="sxs-lookup"><span data-stu-id="8f967-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="8f967-224">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `Input` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="8f967-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="8f967-225">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с `Input`, или использовать `Get` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="8f967-226">В файлах, открытых для `Output`, `EOF` всегда возвращает `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-227">В этом примере используется `EOF` функции, чтобы определить конец файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="8f967-228">В этом примере предполагается, что `Testfile` — текстовый файл, который содержит несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="8f967-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-229">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-230">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-230">Required.</span>
          </span>
          <span data-ttu-id="8f967-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="8f967-232">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="8f967-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-236">The following enumeration values indicate the file access mode:  <list type="table"><item><term> Value  </term><description> Mode  </description></item><item><term> 1  </term><description><see langword="OpenMode.Input" /></description></item><item><term> 2  </term><description><see langword="OpenMode.Output" /></description></item><item><term> 4  </term><description><see langword="OpenMode.Random" /></description></item><item><term> 8  </term><description><see langword="OpenMode.Append" /></description></item><item><term> 32  </term><description><see langword="OpenMode.Binary" /></description></item></list></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-237">Эта функция возвращает перечисление, представляющее режим файла для файлов, открытых `FileOpen` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-237">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-238">В этом примере используется `FileAttr` функция, возвращающая файловый режим открытого файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-238">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="8f967-239">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-239">Optional.</span>
          </span>
          <span data-ttu-id="8f967-240">Parameter array of 0 or more channels to be closed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-240">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-241">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-242">
            <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-242">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="8f967-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-243">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-244">`FileClose` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-244">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-245">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-245">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-246">Дополнительные сведения см. в разделе [как: чтение текста из файлов с помощью StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[как: запись текста в файлы с помощью StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), и [Пошаговое руководство: управление файлами и каталогами в Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-246">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="8f967-247">Если опустить `FileNumbers`, все активные файлы, открываемые `FileOpen` функция закрываются.</span><span class="sxs-lookup"><span data-stu-id="8f967-247">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="8f967-248">При закрытии файлов, открытых для `Output` или `Append`, последнее содержимое буфера выходных данных записывается в буфер операционной системы для этого файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-248">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="8f967-249">Все буферное пространство, связанное с закрытого файл освобождается.</span><span class="sxs-lookup"><span data-stu-id="8f967-249">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="8f967-250">Когда `FileClose` функция выполняется, а связь файла с его файла заканчивается.</span><span class="sxs-lookup"><span data-stu-id="8f967-250">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-251">В этом примере используется `FileClose` функцию, чтобы закрыть файл открыт для `Input`.</span><span class="sxs-lookup"><span data-stu-id="8f967-251">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-252">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-252">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="8f967-253">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-253">Required.</span>
          </span>
          <span data-ttu-id="8f967-254">
            <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-254">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="8f967-255">
            <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-255">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="8f967-256">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-256">Required.</span>
          </span>
          <span data-ttu-id="8f967-257">
            <see langword="String" /> expression that specifies the destination file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-257">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="8f967-258">
            <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-258">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-259">Copies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-259">Copies a file.</span>
          </span>
          <span data-ttu-id="8f967-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-260">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="8f967-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-261">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-262">Если вы попытаетесь использовать `FileCopy` работать на открытый файл, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-262">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="8f967-263">`FileCopy` требует полного доверия для работы на локальном диске.</span><span class="sxs-lookup"><span data-stu-id="8f967-263">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-264">В этом примере используется `FileCopy` функции для копирования одного файла в другой.</span><span class="sxs-lookup"><span data-stu-id="8f967-264">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="8f967-265">Для целей этого примера, предположим, что `SrcFile` — это файл, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-265">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-266">
            <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-266">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-267">File is already open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-267">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-268">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-268">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="8f967-269">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-269">Required.</span>
          </span>
          <span data-ttu-id="8f967-270">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-270">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="8f967-271">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-271">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-272">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="8f967-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-273">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="8f967-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-274">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-275">
            <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-275">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f967-276">В этом примере используется `FileDateTime` создания или последнего изменения функции для определения даты и времени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-276">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="8f967-277">Формат даты и времени зависит от параметров языкового стандарта системы.</span><span class="sxs-lookup"><span data-stu-id="8f967-277">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-278">
            <paramref name="PathName" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-278">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-279">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-279">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-280">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-280">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-281">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-282">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-283">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-283">Required.</span>
          </span>
          <span data-ttu-id="8f967-284">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-284">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-285">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-285">Required.</span>
          </span>
          <span data-ttu-id="8f967-286">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-286">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-287">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-287">Optional.</span>
          </span>
          <span data-ttu-id="8f967-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-288">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-289">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-289">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-290">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-291">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-292">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-292">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-293">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-293">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-294">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-294">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-295">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-295">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-296">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-296">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-297">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-297">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-298">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-298">Random Mode</span></span>  
 <span data-ttu-id="8f967-299">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-299">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-300">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-300">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-301">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-301">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-302">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-302">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-303">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-303">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-304">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-304">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-305">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-305">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-306">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-306">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-307">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-307">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-308">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-308">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-309">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-309">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-310">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-310">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-311">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-311">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-312">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-312">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-313">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-313">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-314">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-314">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-315">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-315">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-316">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-316">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-317">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-317">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-318">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-318">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-319">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-319">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-320">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-320">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-321">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-321">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-322">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-322">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-323">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-323">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-324">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-324">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-325">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-325">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-326">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-326">Binary Mode</span></span>  
 <span data-ttu-id="8f967-327">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-327">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-328">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-328">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-329">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-329">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-330">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-330">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-331">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-331">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-332">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-332">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-333">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-333">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-334">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-334">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-335">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-335">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-336">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-336">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-337">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-337">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-338">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-338">Required.</span>
          </span>
          <span data-ttu-id="8f967-339">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-339">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-340">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-340">Required.</span>
          </span>
          <span data-ttu-id="8f967-341">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-341">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-342">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-342">Optional.</span>
          </span>
          <span data-ttu-id="8f967-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-343">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-344">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-344">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-345">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-346">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-347">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-347">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-348">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-348">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-349">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-349">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-350">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-350">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-351">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-351">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-352">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-352">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-353">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-353">Random Mode</span></span>  
 <span data-ttu-id="8f967-354">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-354">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-355">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-355">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-356">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-356">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-357">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-357">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-358">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-358">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-359">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-359">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-360">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-360">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-361">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-361">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-362">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-362">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-363">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-363">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-364">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-364">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-365">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-365">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-366">Если дескриптор не используется.</span><span class="sxs-lookup"><span data-stu-id="8f967-366">If the descriptor is not used.</span></span> <span data-ttu-id="8f967-367">Размер и границы массива, передан в `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-367">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-368">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-368">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-369">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-369">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-370">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-370">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-371">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-371">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-372">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-372">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-373">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-373">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-374">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-374">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-375">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-375">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-376">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-376">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-377">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-377">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-378">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-378">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-379">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-379">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-380">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-380">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-381">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-381">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-382">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-382">Binary Mode</span></span>  
 <span data-ttu-id="8f967-383">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-383">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-384">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-384">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-385">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-385">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-386">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-386">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-387">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-387">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-388">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-388">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-389">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-389">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-390">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-390">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-391">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-391">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-392">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-392">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-393">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-393">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-394">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-394">Required.</span>
          </span>
          <span data-ttu-id="8f967-395">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-395">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-396">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-396">Required.</span>
          </span>
          <span data-ttu-id="8f967-397">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-397">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-398">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-398">Optional.</span>
          </span>
          <span data-ttu-id="8f967-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-399">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-400">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-400">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-401">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-402">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-403">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-403">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-404">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-404">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-405">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-405">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-406">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-406">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-407">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-407">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-408">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-408">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-409">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-409">Random Mode</span></span>  
 <span data-ttu-id="8f967-410">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-410">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-411">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-411">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-412">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-412">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-413">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-413">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-414">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-414">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-415">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-415">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-416">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-416">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-417">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-417">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-418">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-418">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-419">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-419">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-420">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-420">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-421">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-421">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-422">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-422">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-423">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-423">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-424">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-424">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-425">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-425">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-426">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-426">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-427">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-427">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-428">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-428">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-429">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-429">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-430">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-430">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-431">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-431">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-432">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-432">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-433">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-433">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-434">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-434">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-435">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-435">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-436">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-436">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-437">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-437">Binary Mode</span></span>  
 <span data-ttu-id="8f967-438">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-438">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-439">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-439">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-440">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-440">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-441">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-441">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-442">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-442">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-443">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-443">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-444">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-444">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-445">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-445">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-446">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-446">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-447">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-447">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-448">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-448">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-449">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-449">Required.</span>
          </span>
          <span data-ttu-id="8f967-450">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-450">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-451">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-451">Required.</span>
          </span>
          <span data-ttu-id="8f967-452">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-452">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-453">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-453">Optional.</span>
          </span>
          <span data-ttu-id="8f967-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-454">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-455">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-455">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-456">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-457">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-458">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-458">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-459">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-459">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-460">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-460">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-461">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-461">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-462">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-462">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-463">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-463">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-464">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-464">Random Mode</span></span>  
 <span data-ttu-id="8f967-465">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-465">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-466">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции`FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-466">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-467">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-467">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-468">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-468">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-469">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-469">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-470">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-470">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-471">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-471">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-472">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-472">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-473">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-473">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-474">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-474">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-475">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-475">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-476">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-476">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-477">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-477">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-478">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-478">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-479">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-479">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-480">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-480">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-481">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-481">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-482">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-482">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-483">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-483">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-484">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-484">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-485">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-485">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-486">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-486">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-487">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-487">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-488">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-488">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-489">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-489">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-490">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-490">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-491">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-491">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-492">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-492">Binary Mode</span></span>  
 <span data-ttu-id="8f967-493">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-493">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-494">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-494">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-495">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-495">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-496">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-496">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-497">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-497">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-498">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-498">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-499">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-499">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-500">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-500">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-501">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-501">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-502">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-502">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-503">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-503">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-504">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-504">Required.</span>
          </span>
          <span data-ttu-id="8f967-505">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-505">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-506">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-506">Required.</span>
          </span>
          <span data-ttu-id="8f967-507">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-507">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-508">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-508">Optional.</span>
          </span>
          <span data-ttu-id="8f967-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-509">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-510">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-510">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-511">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-512">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-513">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-513">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-514">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-514">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-515">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-515">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-516">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-516">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-517">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-517">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-518">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-518">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-519">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-519">Random Mode</span></span>  
 <span data-ttu-id="8f967-520">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-520">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-521">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-521">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-522">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-522">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-523">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-523">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-524">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-524">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-525">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-525">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-526">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-526">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-527">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-527">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-528">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-528">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-529">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-529">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-530">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-530">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-531">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-531">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-532">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-532">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-533">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-533">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-534">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-534">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-535">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-535">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-536">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-536">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-537">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-537">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-538">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-538">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-539">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-539">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-540">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-540">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-541">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-541">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-542">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-542">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-543">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-543">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-544">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-544">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-545">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-545">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-546">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-546">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-547">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-547">Binary Mode</span></span>  
 <span data-ttu-id="8f967-548">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-548">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-549">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-549">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-550">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-550">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-551">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-551">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-552">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-552">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-553">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-553">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-554">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-554">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-555">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-555">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-556">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-556">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-557">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-557">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-558">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-558">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-559">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-559">Required.</span>
          </span>
          <span data-ttu-id="8f967-560">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-560">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-561">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-561">Required.</span>
          </span>
          <span data-ttu-id="8f967-562">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-562">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-563">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-563">Optional.</span>
          </span>
          <span data-ttu-id="8f967-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-564">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-565">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-565">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-566">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-567">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-568">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-568">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-569">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-569">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-570">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-570">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-571">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-571">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-572">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-572">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-573">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-573">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-574">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-574">Random Mode</span></span>  
 <span data-ttu-id="8f967-575">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-575">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-576">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-576">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-577">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-577">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-578">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-578">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-579">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-579">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-580">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-580">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-581">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-581">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-582">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-582">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-583">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-583">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-584">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-584">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-585">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-585">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-586">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-586">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-587">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-587">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-588">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-588">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-589">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-589">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-590">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-590">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-591">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-591">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-592">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-592">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-593">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-593">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-594">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-594">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-595">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-595">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-596">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-596">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-597">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-597">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-598">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-598">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-599">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-599">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-600">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-600">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-601">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-601">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-602">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-602">Binary Mode</span></span>  
 <span data-ttu-id="8f967-603">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-603">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-604">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-604">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-605">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-605">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-606">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-606">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-607">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-607">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-608">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-608">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-609">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-609">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-610">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-610">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-611">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-611">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-612">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-612">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-613">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-613">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-614">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-614">Required.</span>
          </span>
          <span data-ttu-id="8f967-615">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-615">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-616">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-616">Required.</span>
          </span>
          <span data-ttu-id="8f967-617">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-617">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-618">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-618">Optional.</span>
          </span>
          <span data-ttu-id="8f967-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-619">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-620">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-620">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-621">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-622">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-623">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-623">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-624">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-624">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-625">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-625">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-626">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-626">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-627">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-627">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-628">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-628">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-629">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-629">Random Mode</span></span>  
 <span data-ttu-id="8f967-630">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-630">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-631">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-631">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-632">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-632">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-633">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-633">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-634">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-634">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-635">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-635">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-636">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-636">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-637">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-637">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-638">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-638">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-639">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-639">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-640">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-640">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-641">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-641">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-642">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-642">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-643">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-643">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-644">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-644">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-645">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-645">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-646">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-646">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-647">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-647">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-648">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-648">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-649">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-649">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-650">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-650">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-651">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-651">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-652">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-652">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-653">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-653">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-654">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-654">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-655">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-655">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-656">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-656">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-657">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-657">Binary Mode</span></span>  
 <span data-ttu-id="8f967-658">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-658">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-659">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-659">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-660">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-660">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-661">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-661">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-662">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-662">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-663">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-663">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-664">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-664">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-665">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-665">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-666">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-666">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-667">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-667">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-668">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-668">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-669">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-669">Required.</span>
          </span>
          <span data-ttu-id="8f967-670">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-670">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-671">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-671">Required.</span>
          </span>
          <span data-ttu-id="8f967-672">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-672">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-673">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-673">Optional.</span>
          </span>
          <span data-ttu-id="8f967-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-674">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-675">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-675">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-678">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-678">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-679">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-679">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-680">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-680">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-681">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-681">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-682">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-682">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-683">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-683">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-684">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-684">Random Mode</span></span>  
 <span data-ttu-id="8f967-685">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-685">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-686">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-686">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-687">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-687">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-688">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-688">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-689">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-689">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-690">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-690">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-691">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-691">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-692">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-692">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-693">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-693">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-694">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-694">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-695">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-695">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-696">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-696">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-697">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-697">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-698">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-698">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-699">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-699">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-700">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-700">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-701">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-701">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-702">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-702">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-703">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-703">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-704">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-704">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-705">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-705">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-706">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-706">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-707">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-707">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-708">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-708">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-709">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-709">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-710">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-710">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-711">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-711">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-712">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-712">Binary Mode</span></span>  
 <span data-ttu-id="8f967-713">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-713">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-714">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-714">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-715">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-715">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-716">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-716">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-717">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-717">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-718">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-718">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-719">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-719">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-720">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-720">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-721">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-721">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-722">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-722">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-723">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-723">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-724">Required.</span>
          </span>
          <span data-ttu-id="8f967-725">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-725">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-726">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-726">Required.</span>
          </span>
          <span data-ttu-id="8f967-727">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-727">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-728">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-728">Optional.</span>
          </span>
          <span data-ttu-id="8f967-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-729">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-730">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-730">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-731">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-732">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-733">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-733">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-734">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-734">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-735">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-735">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-736">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-736">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-737">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-737">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-738">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-738">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-739">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-739">Random Mode</span></span>  
 <span data-ttu-id="8f967-740">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-740">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-741">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-741">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-742">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-742">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-743">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-743">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-744">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-744">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-745">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-745">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-746">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-746">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-747">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-747">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-748">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-748">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-749">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-749">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-750">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-750">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-751">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-751">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-752">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-752">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-753">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-753">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-754">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-754">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-755">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-755">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-756">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-756">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-757">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-757">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-758">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-758">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-759">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-759">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-760">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-760">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-761">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-761">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-762">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-762">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-763">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-763">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-764">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-764">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-765">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-765">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-766">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-766">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-767">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-767">Binary Mode</span></span>  
 <span data-ttu-id="8f967-768">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-768">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-769">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-769">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-770">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-770">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-771">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-771">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-772">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-772">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-773">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-773">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-774">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-774">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-775">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-775">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-776">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-776">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-777">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-777">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-778">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-778">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-779">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-779">Required.</span>
          </span>
          <span data-ttu-id="8f967-780">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-780">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-781">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-781">Required.</span>
          </span>
          <span data-ttu-id="8f967-782">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-782">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-783">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-783">Optional.</span>
          </span>
          <span data-ttu-id="8f967-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-784">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-785">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-785">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-786">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-787">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-788">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-788">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-789">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-789">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-790">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-790">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-791">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-791">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-792">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-792">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-793">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-793">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-794">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-794">Random Mode</span></span>  
 <span data-ttu-id="8f967-795">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-795">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-796">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-796">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-797">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-797">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-798">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-798">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-799">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-799">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-800">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-800">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-801">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-801">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-802">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-802">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-803">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-803">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-804">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-805">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-805">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-806">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-806">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-807">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-807">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-808">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-808">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-809">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-809">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-810">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-810">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-811">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-811">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-812">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-812">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-813">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-813">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-814">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-814">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-815">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-815">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-816">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-816">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-817">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-817">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-818">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-818">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-819">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-819">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-820">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-820">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-821">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-821">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-822">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-822">Binary Mode</span></span>  
 <span data-ttu-id="8f967-823">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-823">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-824">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-824">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-825">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-825">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-826">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-826">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-827">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-827">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-828">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-828">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-829">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-829">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-830">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-830">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-831">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-831">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-832">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-832">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-833">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-833">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-834">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-834">Required.</span>
          </span>
          <span data-ttu-id="8f967-835">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-835">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-836">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-836">Required.</span>
          </span>
          <span data-ttu-id="8f967-837">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-837">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-838">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-838">Optional.</span>
          </span>
          <span data-ttu-id="8f967-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-839">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-840">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-840">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-843">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-843">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-844">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-844">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-845">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-846">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-846">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-847">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-847">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-848">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-848">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-849">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-849">Random Mode</span></span>  
 <span data-ttu-id="8f967-850">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-850">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-851">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-851">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-852">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-852">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-853">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-853">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-854">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-854">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-855">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-855">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-856">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-856">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-857">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-857">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-858">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-858">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-859">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-859">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-860">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-860">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-861">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-861">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-862">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-862">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-863">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-864">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-865">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-865">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-866">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-867">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-867">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-868">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-868">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-869">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-869">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-870">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-870">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-871">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-872">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-872">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-873">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-873">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-874">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-875">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-875">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-876">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-877">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-877">Binary Mode</span></span>  
 <span data-ttu-id="8f967-878">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-878">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-879">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-879">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-880">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-880">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-881">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-881">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-882">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-882">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-883">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-883">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-884">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-884">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-885">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-885">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-886">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-886">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-887">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-887">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-888">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-888">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-889">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-889">Required.</span>
          </span>
          <span data-ttu-id="8f967-890">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-890">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-891">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-891">Required.</span>
          </span>
          <span data-ttu-id="8f967-892">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-892">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-893">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-893">Optional.</span>
          </span>
          <span data-ttu-id="8f967-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="8f967-895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-895">Optional.</span>
          </span>
          <span data-ttu-id="8f967-896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="8f967-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-897">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="8f967-898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-899">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-899">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-902">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-902">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-903">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-903">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-904">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-905">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-905">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-906">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-906">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-907">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-907">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-908">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-908">Random Mode</span></span>  
 <span data-ttu-id="8f967-909">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-909">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-910">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-910">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-911">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-911">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-912">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-912">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-913">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-913">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-914">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-914">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-915">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-915">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-916">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-916">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-917">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-917">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-918">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-918">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-919">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-919">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-920">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-920">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-921">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-921">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-922">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-922">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-923">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-923">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-924">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-925">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-925">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-926">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-926">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-927">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-927">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-928">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-928">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-929">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-929">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-930">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-931">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-931">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-932">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-932">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-933">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-934">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-934">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-935">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-936">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-936">Binary Mode</span></span>  
 <span data-ttu-id="8f967-937">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-937">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-938">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-938">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-939">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-939">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-940">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-940">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-941">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-941">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-942">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-942">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-943">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-943">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-944">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-944">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-945">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-945">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-946">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-946">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-947">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-947">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-948">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-948">Required.</span>
          </span>
          <span data-ttu-id="8f967-949">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-949">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-950">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-950">Required.</span>
          </span>
          <span data-ttu-id="8f967-951">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-951">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-952">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-952">Optional.</span>
          </span>
          <span data-ttu-id="8f967-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-953">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="8f967-954">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-954">Optional.</span>
          </span>
          <span data-ttu-id="8f967-955">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-955">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="8f967-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-956">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="8f967-957">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-957">Optional.</span>
          </span>
          <span data-ttu-id="8f967-958">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-958">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="8f967-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-959">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="8f967-960">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-960">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-961">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-961">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-962">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="8f967-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-963">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-964">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-964">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-965">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-965">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="8f967-966">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-966">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-967">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-967">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-968">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-968">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-969">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-969">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-970">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-970">Random Mode</span></span>  
 <span data-ttu-id="8f967-971">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-971">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-972">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-972">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-973">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-973">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-974">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-974">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-975">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-975">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-976">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-976">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-977">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-977">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-978">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-978">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-979">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-979">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="8f967-980">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-980">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-981">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-981">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="8f967-982">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="8f967-982">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="8f967-983">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-983">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="8f967-984">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-984">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-985">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-985">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-986">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-987">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-987">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="8f967-988">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-988">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="8f967-989">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="8f967-989">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="8f967-990">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-990">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="8f967-991">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-991">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="8f967-992">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-992">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-993">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-993">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-994">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-994">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-995">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="8f967-995">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="8f967-996">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-996">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-997">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-997">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-998">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-998">Binary Mode</span></span>  
 <span data-ttu-id="8f967-999">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-999">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1000">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1000">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1001">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1001">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1002">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1002">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1003">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1003">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="8f967-1004">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1004">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="8f967-1005">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1005">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1006">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1006">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="8f967-1007">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1007">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1008">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1008">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1009">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1009">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1010">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1010">Required.</span>
          </span>
          <span data-ttu-id="8f967-1011">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1011">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1012">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1012">Required.</span>
          </span>
          <span data-ttu-id="8f967-1013">Valid variable name into which data is read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1013">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1014">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1014">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1015">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1016">Reads data from an open disk file into a variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1016">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="8f967-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1017">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="8f967-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1018">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1019">`FileGetObject` Функции используется вместо `FileGet` во избежание неоднозначности во время компиляции, если тип `Object` возвращается вместо другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1019">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="8f967-1020">Если вы собираетесь записать `Variant` типа, `FileGetObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="8f967-1020">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="8f967-1021">Если вы сомневаетесь, если вы используете объект для второго параметра, всегда рекомендуется использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1021">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="8f967-1022">`FileGetObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1022">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1023">Данные, считанные с `FileGetObject` записываются с `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1023">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="8f967-1024">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1024">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1025">Если опустить `RecordNumber`, `FileGetObject` считывает записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или на которые указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="8f967-1025">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1026">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1026">Random Mode</span></span>  
 <span data-ttu-id="8f967-1027">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1027">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1028">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGetObject` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1028">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1029">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1029">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1030">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется иметь совпадает с длиной данных длиной записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-1030">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="8f967-1031">Если переменная представляет собой строку, по умолчанию `FileGetObject` считывает двухбайтовый дескриптор, содержащий длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1031">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1032">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1032">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1033">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины и при записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1033">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="8f967-1034">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1034">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1035">Если переменная, считываемых в массив, а затем записей длину, заданную `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1035">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1036">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1036">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1037">Его длина равно 2, а также 8 умножается на количество измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="8f967-1037">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="8f967-1038">Например, следующее объявление массива требуется 218 байтов при записи на диск:</span><span class="sxs-lookup"><span data-stu-id="8f967-1038">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="8f967-1039">218 байт распределяются следующим образом: 18 байт для дескриптора (2 + 8 \* 2) и 100 байт для данных (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="8f967-1039">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="8f967-1040">`FileGetObject` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1040">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="8f967-1041">На диске, динамический массив в определяемый пользователем тип (с `FilePutObject`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="8f967-1041">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="8f967-1042">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов, включая массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="8f967-1043"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Класс может быть применен к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1043">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1044">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1044">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1045">Для открытия файлов в `Binary` режим, все `Random` применяются правила, со следующими исключениями:</span><span class="sxs-lookup"><span data-stu-id="8f967-1045">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="8f967-1046">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1046">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1047">`FileGetObject` Считывает все переменные с диска непрерывно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1047">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1048">Для любого массива, кроме массива в виде структуры `FileGetObject` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1048">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="8f967-1049">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1049">No descriptor is read.</span></span>  
  
 <span data-ttu-id="8f967-1050">`FileGetObject` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1050">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1051">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1051">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-1052">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1052">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-1053">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-1053">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1054">В следующем примере выполняется запись в файл теста и затем получает его.</span><span class="sxs-lookup"><span data-stu-id="8f967-1054">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="8f967-1055">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1055">Required.</span>
          </span>
          <span data-ttu-id="8f967-1056">
            <see langword="String" /> expression that specifies a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1056">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="8f967-1057">
            <c>PathName</c> may include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1057">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1058">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="8f967-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1059">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="8f967-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1060">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-1061">
            <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1061">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1062">Если указанный файл открыт, когда `FileLen` вызывается функция, возвращаемое значение представляет размер файла на момент его открытия.</span><span class="sxs-lookup"><span data-stu-id="8f967-1062">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-1063">Чтобы получить текущую длину открытого файла, используйте `LOF` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-1063">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1064">В этом примере используется `FileLen` функция возвращает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="8f967-1064">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="8f967-1065">Для целей этого примера, предположим, что `TestFile` — это файл, который содержит некоторые данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1065">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-1066">File does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1066">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1067">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1067">Required.</span>
          </span>
          <span data-ttu-id="8f967-1068">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1068">Any valid file number.</span>
          </span>
          <span data-ttu-id="8f967-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1069">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="8f967-1070">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1070">Required.</span>
          </span>
          <span data-ttu-id="8f967-1071">
            <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1071">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="8f967-1072">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1072">Required.</span>
          </span>
          <span data-ttu-id="8f967-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1073">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="8f967-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1074">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="8f967-1075">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1075">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1076">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="8f967-1077">Defaults to <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1077">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="8f967-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1078">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="8f967-1079">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1079">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1080">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="8f967-1081">Defaults to <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1081">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="8f967-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1082">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="8f967-1083">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1083">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1084">Number less than or equal to 32,767 (bytes).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1084">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="8f967-1085">For files opened for random access, this value is the record length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1085">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="8f967-1086">For sequential files, this value is the number of characters buffered.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1086">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1087">Opens a file for input or output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1087">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="8f967-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1088">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="8f967-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1089">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1090">`FileOpen` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-1090">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-1091">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-1091">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-1092">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-1092">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-1093">Перед выполнением любой операции ввода-вывода на нем необходимо открыть файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1093">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="8f967-1094">`FileOpen` выделяет буфер для ввода-вывода в файл и определяет режим доступа для использования с буфером.</span><span class="sxs-lookup"><span data-stu-id="8f967-1094">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-1095">При записи в файл приложения может потребоваться создать файл, если файл, к которому он пытается получить запись не существует.</span><span class="sxs-lookup"><span data-stu-id="8f967-1095">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="8f967-1096">Чтобы сделать это, ему разрешения для каталога, в котором должен быть создан файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1096">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="8f967-1097">Тем не менее если файл, заданный параметром `FileName` существует, приложению `Write` разрешение только на сам файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1097">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="8f967-1098">Везде, где возможно, в целях повышения безопасности, создать файл во время развертывания и предоставить `Write` разрешение на этот файл только, а не для всего каталога.</span><span class="sxs-lookup"><span data-stu-id="8f967-1098">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="8f967-1099">В целях повышения безопасности, записывайте данные в каталоги пользователей, а не в корневом каталоге или каталоге Program Files.</span><span class="sxs-lookup"><span data-stu-id="8f967-1099">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="8f967-1100">Канал, чтобы открыть можно найти с помощью `FreeFile()` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-1100">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-1101">`FileOpen` Функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления, который может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="8f967-1101">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="8f967-1102">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1102">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1103">В этом примере показаны различные способы `FileOpen` функцию входные и выходные данные в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1103">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="8f967-1104">Следующий код открывает файл `TestFile` в `Input` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-1104">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="8f967-1105">Этот пример открывает файл в `Binary` режиме для записи только операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-1105">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="8f967-1106">В следующем примере открывается файл в `Random` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-1106">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="8f967-1107">Файл содержит записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1107">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="8f967-1108">Данный пример кода открывает файл в `Output` режиме; любой процесс может прочитать или записать в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1108">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="8f967-1109">Данный пример кода открывает файл в `Binary` режиме для чтения; другие процессы не удается прочитать файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1109">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1110">Record length is negative (and not equal to -1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1110">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1111">
            <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1111">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-1112">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1112">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1114">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1115">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1115">Required.</span>
          </span>
          <span data-ttu-id="8f967-1116">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1116">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1117">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1117">Required.</span>
          </span>
          <span data-ttu-id="8f967-1118">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1118">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1119">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1119">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1120">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1121">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1121">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1122">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1123">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1124">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1124">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1125">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1125">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1126">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1126">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1127">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1127">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1128">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1128">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1129">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1129">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1130">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1130">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1131">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1131">Random Mode</span></span>  
 <span data-ttu-id="8f967-1132">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1132">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1133">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1133">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1134">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1134">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1135">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1135">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1136">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1136">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1137">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1137">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1138">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1138">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1139">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1139">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1140">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1140">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1141">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1141">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1142">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1142">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1143">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1143">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1144">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1144">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1145">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1145">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1146">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1146">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1147">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1147">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1148">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1148">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1149">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1149">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1150">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1150">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1151">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1151">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1152">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1152">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1153">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1153">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1154">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1154">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1155">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1155">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1156">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1156">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1157">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1157">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1158">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1158">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1159">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1159">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1160">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1160">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1161">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1161">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1162">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1162">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1163">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1163">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1164">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1164">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1165">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1165">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1166">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1166">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1167">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1167">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1168">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1168">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1169">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1169">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1170">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1170">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1171">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1171">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1172">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1172">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1173">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1173">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1174">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1174">Required.</span>
          </span>
          <span data-ttu-id="8f967-1175">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1175">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1176">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1176">Required.</span>
          </span>
          <span data-ttu-id="8f967-1177">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1177">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1178">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1178">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1179">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1180">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1180">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1181">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1182">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1183">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1183">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1184">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1184">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1185">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1185">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1186">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1186">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1187">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1187">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1188">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1188">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1189">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1189">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1190">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1190">Random Mode</span></span>  
 <span data-ttu-id="8f967-1191">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1191">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1192">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1192">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1193">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1193">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1194">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1194">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1195">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1195">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1196">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1196">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1197">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1197">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1198">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1198">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1199">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1199">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1200">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1201">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1201">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1202">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1202">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1203">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1203">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1204">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1204">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1205">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1205">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1206">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1206">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1207">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1207">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1208">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1208">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1209">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1209">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1210">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1210">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1211">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1211">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1212">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1212">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1213">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1213">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1214">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1214">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1215">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1215">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1216">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1216">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1217">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1217">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1218">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1218">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1219">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1219">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1220">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1220">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1221">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1221">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1222">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1222">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1223">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1223">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1224">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1224">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1225">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1225">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1226">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1226">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1227">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1227">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1228">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1228">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1229">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1229">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1230">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1230">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1231">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1231">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1232">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1232">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1233">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1233">Required.</span>
          </span>
          <span data-ttu-id="8f967-1234">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1234">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1235">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1235">Required.</span>
          </span>
          <span data-ttu-id="8f967-1236">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1236">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1237">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1237">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1238">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1239">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1239">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1240">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1241">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1242">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1242">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1243">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1243">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1244">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1244">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1245">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1245">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1246">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1246">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1247">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1247">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1248">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1248">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1249">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1249">Random Mode</span></span>  
 <span data-ttu-id="8f967-1250">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1250">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1251">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1251">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1252">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1252">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1253">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1253">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1254">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1254">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1255">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1255">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1256">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1256">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1257">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1257">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1258">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1258">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1259">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1259">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1260">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1260">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1261">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1261">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1262">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1262">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1263">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1263">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1264">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1264">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1265">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1265">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1266">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1266">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1267">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1267">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1268">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1268">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1269">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1269">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1270">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1270">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1271">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1271">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1272">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1272">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1273">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1273">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1274">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1274">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1275">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1275">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1276">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1276">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1277">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1277">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1278">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1278">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1279">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1279">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1280">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1280">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1281">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1281">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1282">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1282">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1283">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1283">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1284">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1284">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1285">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1285">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1286">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1286">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1287">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1287">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1288">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1288">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1289">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1289">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1290">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1290">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1291">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1291">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1292">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1292">Required.</span>
          </span>
          <span data-ttu-id="8f967-1293">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1293">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1294">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1294">Required.</span>
          </span>
          <span data-ttu-id="8f967-1295">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1295">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1296">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1296">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1298">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1298">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1301">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1302">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1303">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1304">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1305">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1306">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1307">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1308">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1308">Random Mode</span></span>  
 <span data-ttu-id="8f967-1309">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1310">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1311">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1312">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1313">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1314">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1315">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1316">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1317">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1318">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1319">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1320">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1321">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1322">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1323">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1324">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1325">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1326">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1327">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1328">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1329">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1330">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1331">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1332">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1333">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1334">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1335">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1336">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1336">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1337">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1338">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1339">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1340">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1341">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1342">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1343">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1344">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1345">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1346">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1347">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1348">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1349">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1349">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1350">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1350">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1351">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1351">Required.</span>
          </span>
          <span data-ttu-id="8f967-1352">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1352">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1353">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1353">Required.</span>
          </span>
          <span data-ttu-id="8f967-1354">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1354">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1355">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1355">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1356">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1357">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1357">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1358">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1359">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1360">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1360">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1361">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1361">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1362">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1362">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1363">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1363">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1364">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1364">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1365">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1365">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1366">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1366">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1367">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1367">Random Mode</span></span>  
 <span data-ttu-id="8f967-1368">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1368">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1369">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1369">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1370">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1370">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1371">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1371">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1372">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1372">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1373">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1373">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1374">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1374">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1375">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1375">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1376">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1376">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1377">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1378">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1378">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1379">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1379">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1380">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1380">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1381">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1381">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1382">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1382">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1383">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1383">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1384">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1384">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1385">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1385">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1386">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1386">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1387">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1387">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1388">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1388">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1389">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1389">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1390">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1390">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1391">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1391">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1392">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1392">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1393">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1393">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1394">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1394">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1395">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1395">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1396">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1396">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1397">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1397">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1398">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1398">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1399">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1399">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1400">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1400">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1401">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1401">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1402">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1402">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1403">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1403">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1404">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1404">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1405">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1405">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1406">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1406">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1407">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1407">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1408">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1408">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1409">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1409">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1410">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1410">Required.</span>
          </span>
          <span data-ttu-id="8f967-1411">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1411">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1412">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1412">Required.</span>
          </span>
          <span data-ttu-id="8f967-1413">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1413">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1414">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1414">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1415">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1416">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1416">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1417">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1418">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1419">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1419">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1420">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1420">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1421">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1421">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1422">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1422">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1423">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1423">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1424">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1424">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1425">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1425">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1426">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1426">Random Mode</span></span>  
 <span data-ttu-id="8f967-1427">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1427">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1428">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1428">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1429">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1429">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1430">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1430">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1431">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1431">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1432">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1432">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1433">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1433">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1434">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1434">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1435">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1435">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1436">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1436">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1437">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1437">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1438">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1439">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1439">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1440">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1440">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1441">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1441">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1442">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1442">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1443">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1443">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1444">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1444">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1445">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1445">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1446">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1446">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1447">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1447">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1448">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1448">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1449">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1449">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1450">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1450">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1451">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1451">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1452">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1452">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1453">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1453">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1454">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1454">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1455">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1455">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1456">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1456">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1457">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1457">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1458">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1458">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1459">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1459">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1460">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1460">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1461">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1461">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1462">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1462">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1463">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1463">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1464">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1464">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1465">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1465">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1466">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1466">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1467">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1467">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1468">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1468">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1469">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1469">Required.</span>
          </span>
          <span data-ttu-id="8f967-1470">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1470">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1471">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1471">Required.</span>
          </span>
          <span data-ttu-id="8f967-1472">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1472">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1473">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1473">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1475">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1475">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1478">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1479">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1480">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1481">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1482">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1483">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1484">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1485">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1485">Random Mode</span></span>  
 <span data-ttu-id="8f967-1486">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1487">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1488">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1489">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1490">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1491">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1492">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1493">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1494">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1495">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1496">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор`VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1497">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1498">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1499">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1500">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1501">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1502">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1503">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1504">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1505">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1506">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1507">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1508">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1509">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1510">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1511">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1512">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1513">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1513">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1514">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1515">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1516">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1517">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1518">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1519">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1520">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1521">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1522">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1523">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1524">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1525">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1526">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1526">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1527">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1527">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1528">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1528">Required.</span>
          </span>
          <span data-ttu-id="8f967-1529">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1529">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1530">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1530">Required.</span>
          </span>
          <span data-ttu-id="8f967-1531">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1531">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1532">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1532">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1533">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1534">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1534">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1537">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1537">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1538">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1538">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1539">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1539">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1540">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1540">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1541">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1541">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1542">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1542">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1543">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1543">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1544">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1544">Random Mode</span></span>  
 <span data-ttu-id="8f967-1545">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1545">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1546">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1546">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1547">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1547">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1548">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1548">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1549">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1549">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1550">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1550">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1551">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1551">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1552">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1552">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1553">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1553">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1554">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1554">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1555">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1555">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1556">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1556">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1557">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1557">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1558">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1558">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1559">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1559">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1560">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1560">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1561">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1561">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1562">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1562">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1563">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1563">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1564">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1564">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1565">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1565">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1566">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1566">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1567">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1567">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1568">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1568">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1569">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1569">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1570">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1570">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1571">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1571">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1572">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1572">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1573">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1573">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1574">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1574">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1575">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1575">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1576">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1576">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1577">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1577">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1578">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1578">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1579">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1579">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1580">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1580">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1581">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1581">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1582">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1582">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1583">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1583">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1584">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1584">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1585">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1585">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1586">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1586">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1587">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1587">Required.</span>
          </span>
          <span data-ttu-id="8f967-1588">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1588">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1589">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1589">Required.</span>
          </span>
          <span data-ttu-id="8f967-1590">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1590">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1591">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1591">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1592">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1593">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1593">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1594">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1595">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1596">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1596">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1597">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1597">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1598">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1598">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1599">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1599">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1600">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1600">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1601">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1601">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1602">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1602">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1603">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1603">Random Mode</span></span>  
 <span data-ttu-id="8f967-1604">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1604">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1605">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1605">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1606">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1606">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1607">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1607">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1608">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1608">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1609">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1609">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1610">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1610">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1611">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1611">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1612">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1612">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1613">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1613">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1614">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1614">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1615">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1616">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1616">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1617">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1617">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1618">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1618">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1619">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1619">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1620">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1621">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1621">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1622">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1622">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1623">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1623">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1624">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1624">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1625">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1625">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1626">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1626">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1627">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1627">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1628">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1628">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1629">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1629">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1630">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1630">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1631">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1631">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1632">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1632">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1633">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1633">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1634">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1634">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1635">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1635">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1636">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1636">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1637">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1637">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1638">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1638">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1639">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1639">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1640">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1640">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1641">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1641">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1642">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1642">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1643">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1643">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1644">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1644">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1645">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1645">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1646">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1646">Required.</span>
          </span>
          <span data-ttu-id="8f967-1647">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1647">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1648">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1648">Required.</span>
          </span>
          <span data-ttu-id="8f967-1649">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1649">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1650">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1650">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1651">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1652">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1652">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1653">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1654">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1655">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1655">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1656">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1656">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1657">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1657">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1658">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1658">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1659">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1659">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1660">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1660">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1661">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1661">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1662">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1662">Random Mode</span></span>  
 <span data-ttu-id="8f967-1663">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1663">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1664">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1664">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1665">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1665">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1666">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1666">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1667">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1667">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1668">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1668">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1669">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1669">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1670">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1670">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1671">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1671">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1672">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1672">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1673">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1673">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1674">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1674">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1675">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1675">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1676">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1676">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1677">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1677">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1678">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1678">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1679">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1679">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1680">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1680">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1681">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1682">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1683">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1683">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1684">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1685">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1685">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1686">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1687">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1687">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1688">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1688">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1689">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1689">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1690">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1690">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1691">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1691">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1692">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1692">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1693">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1693">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1694">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1694">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1695">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1695">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1696">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1696">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1697">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1697">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1698">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1698">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1699">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1699">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1700">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1700">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1701">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1701">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1702">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1702">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1703">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1703">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1704">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1704">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1705">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1705">Required.</span>
          </span>
          <span data-ttu-id="8f967-1706">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1706">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1707">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1707">Required.</span>
          </span>
          <span data-ttu-id="8f967-1708">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1708">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1709">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1709">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1710">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1711">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1711">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1712">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1713">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1714">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1714">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1715">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1715">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1716">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1716">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1717">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1717">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1718">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1718">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1719">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1719">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1720">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1720">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1721">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1721">Random Mode</span></span>  
 <span data-ttu-id="8f967-1722">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1723">Если длина записываемых данных меньше, чем длина, указанная в`RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1723">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1724">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1725">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1726">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1726">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1727">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1727">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1728">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1728">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1729">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1729">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1730">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1730">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1731">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1731">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1732">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1732">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1733">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1733">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1734">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1734">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1735">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1735">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1736">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1736">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1737">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1737">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1738">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1738">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1739">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1739">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1740">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1740">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1741">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1741">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1742">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1742">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1743">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1743">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1744">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1744">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1745">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1745">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1746">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1746">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1747">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1747">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1748">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1748">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1749">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1749">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1750">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1751">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1752">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1753">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1753">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1754">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1754">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1755">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1755">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1756">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1756">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1757">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1757">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1758">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1758">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1759">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1759">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1760">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1760">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1761">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1761">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1762">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1762">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1763">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1763">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1764">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1764">Required.</span>
          </span>
          <span data-ttu-id="8f967-1765">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1765">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1766">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1766">Required.</span>
          </span>
          <span data-ttu-id="8f967-1767">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1767">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1768">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1768">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1769">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1770">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1770">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1771">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1772">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1773">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1773">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1774">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1774">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1775">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1775">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1776">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1776">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1777">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1777">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1778">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1778">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1779">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1779">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1780">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1780">Random Mode</span></span>  
 <span data-ttu-id="8f967-1781">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1781">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1782">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1782">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1783">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1783">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1784">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1784">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1785">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1785">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1786">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1786">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1787">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1787">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1788">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1788">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1789">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1789">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1790">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1790">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1791">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1791">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1792">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1792">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1793">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1793">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1794">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1794">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1795">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1795">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1796">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1796">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1797">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1797">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1798">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1798">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1799">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1799">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1800">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1800">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1801">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1801">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1802">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1802">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1803">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1803">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1804">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1804">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1805">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1805">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1806">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1806">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1807">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1807">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1808">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1808">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1809">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1809">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1810">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1810">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1811">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1811">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1812">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1812">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1813">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1813">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1814">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1814">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1815">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1815">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1816">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1816">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1817">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1817">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1818">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1818">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1819">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1819">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1820">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1820">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1821">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1821">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1822">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1822">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1823">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1823">Required.</span>
          </span>
          <span data-ttu-id="8f967-1824">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1824">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1825">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1825">Required.</span>
          </span>
          <span data-ttu-id="8f967-1826">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1826">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1827">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1827">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="8f967-1829">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1829">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1830">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1830">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="8f967-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1831">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="8f967-1832">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1832">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1833">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1833">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1834">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1835">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1836">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1836">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1837">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1837">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1838">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1838">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1839">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1839">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1840">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1840">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1841">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1841">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1842">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1842">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1843">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1843">Random Mode</span></span>  
 <span data-ttu-id="8f967-1844">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1844">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1845">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1845">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1846">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1846">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1847">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1847">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1848">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1848">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1849">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1849">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1850">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1850">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1851">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1851">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1852">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1852">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1853">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1853">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1854">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1854">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1855">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1856">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1856">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1857">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1857">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1858">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1858">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1859">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1859">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1860">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1861">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1861">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1862">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1862">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1863">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1863">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1864">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1864">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1865">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1865">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1866">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1866">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1867">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1867">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1868">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1868">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1869">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1869">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1870">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1870">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1871">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1871">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1872">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1872">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1873">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1873">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1874">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1874">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1875">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1875">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1876">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1876">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1877">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1877">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1878">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1878">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1879">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1879">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1880">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1880">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1881">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1881">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1882">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1882">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1883">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1883">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1884">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1884">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1885">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1885">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1886">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1886">Required.</span>
          </span>
          <span data-ttu-id="8f967-1887">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1887">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1888">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1888">Required.</span>
          </span>
          <span data-ttu-id="8f967-1889">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1889">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1890">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1890">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1891">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="8f967-1892">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1892">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1893">Applies only when writing an array.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1893">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="8f967-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1894">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="8f967-1895">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1895">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1896">Applies only when writing a string.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1896">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="8f967-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="8f967-1898">The default is <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1898">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1899">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1899">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="8f967-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1902">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1903">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="8f967-1904">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1905">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="8f967-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="8f967-1906">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1907">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1908">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1909">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1909">Random Mode</span></span>  
 <span data-ttu-id="8f967-1910">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1911">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1912">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1913">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1914">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1915">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="8f967-1916">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="8f967-1917">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1918">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1919">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1920">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1921">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1922">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1923">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="8f967-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="8f967-1924">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="8f967-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="8f967-1925">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="8f967-1926">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="8f967-1927">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="8f967-1928">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1929">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="8f967-1930">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1931">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="8f967-1932">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="8f967-1933">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="8f967-1934">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="8f967-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="8f967-1935">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="8f967-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="8f967-1936">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="8f967-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1937">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1937">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1938">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="8f967-1939">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="8f967-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="8f967-1940">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1941">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="8f967-1942">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="8f967-1943">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="8f967-1944">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="8f967-1945">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="8f967-1946">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="8f967-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="8f967-1947">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1948">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="8f967-1949">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-1950">
            <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1950">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-1951">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1951">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1952">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1952">Required.</span>
          </span>
          <span data-ttu-id="8f967-1953">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1953">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-1954">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1954">Required.</span>
          </span>
          <span data-ttu-id="8f967-1955">Valid variable name that contains data written to disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1955">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="8f967-1956">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1956">Optional.</span>
          </span>
          <span data-ttu-id="8f967-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1957">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1958">Writes data from a variable to a disk file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1958">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="8f967-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1959">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="8f967-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1960">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-1961">`FilePutObject` Функции используется вместо `FilePut` во избежание неоднозначности во время компиляции, если тип `Object` передается вместо другого типа, например `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1961">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="8f967-1962">`FilePutObject` Записывает и читает дескрипторы, описывающие объект.</span><span class="sxs-lookup"><span data-stu-id="8f967-1962">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="8f967-1963">Если вы собираетесь записать `Variant` типа, `FilePutObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="8f967-1963">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="8f967-1964">Если вы сомневаетесь, если вы используете объект для второго параметра, мы рекомендуем всегда использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1964">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="8f967-1965">`FilePutObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="8f967-1965">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-1966">Данные, записанные с использованием `FilePutObject`, обычно считываются с помощью `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1966">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="8f967-1967">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-1967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="8f967-1968">Если опустить `RecordNumber`, `FilePutObject` записывает Далее записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или записи или единственного байта, на которые указывают последнего `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="8f967-1968">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="8f967-1969">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="8f967-1969">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="8f967-1970">`FilePutObject` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="8f967-1970">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="8f967-1971">При использовании `StringIsFixedLength`  =  `True` с `FilePutObject`, что необходимо сделать то же самое с `FileGetObject`, а также необходимо убедиться в том, что строка инициализируется длина ожидалось.</span><span class="sxs-lookup"><span data-stu-id="8f967-1971">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="8f967-1972">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="8f967-1972">Random Mode</span></span>  
 <span data-ttu-id="8f967-1973">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="8f967-1973">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="8f967-1974">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePutObject` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="8f967-1974">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="8f967-1975">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1975">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="8f967-1976">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-1976">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="8f967-1977">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="8f967-1977">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="8f967-1978">Если записываемая переменная является объектом, содержащим числовой тип, `FilePutObject` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="8f967-1978">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="8f967-1979">Например, при написании объект, содержащий целое число, `FilePutObject` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="8f967-1979">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="8f967-1980">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-1980">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="8f967-1981">Если записываемая переменная — это объект, который содержит строку, `FilePutObject` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1981">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="8f967-1982">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1982">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="8f967-1983">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-1983">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="8f967-1984">Если записываемая переменная является массивом, а затем записей длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="8f967-1984">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="8f967-1985">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="8f967-1985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="8f967-1986">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="8f967-1986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="8f967-1987">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="8f967-1987">Binary Mode</span></span>  
 <span data-ttu-id="8f967-1988">Для открытия файлов в `Binary` режим, все `Random` применяются правила режиме, за исключением:</span><span class="sxs-lookup"><span data-stu-id="8f967-1988">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="8f967-1989">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="8f967-1989">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="8f967-1990">`FilePutObject` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="8f967-1990">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-1991">В этом примере используется `FilePutObject` функцию для записи строки в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-1991">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-1992">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1992">Required.</span>
          </span>
          <span data-ttu-id="8f967-1993">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1993">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="8f967-1994">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1994">Required.</span>
          </span>
          <span data-ttu-id="8f967-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1995">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="8f967-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1996">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="8f967-1997">The default value for <c>RecordWidth</c> is 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1997">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-1998">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="8f967-1999">В этом примере используется `FileWidth` функцию для задания ширины строки вывода для файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-1999">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2000">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2000">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2001">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2003">Используйте `FreeFile` для номера файла, который уже не используется.</span><span class="sxs-lookup"><span data-stu-id="8f967-2003">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2004">В этом примере используется `FreeFile` функцию для возврата следующего свободного номера файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2004">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="8f967-2005">Для вывода в цикле открывается пять файлов, и некоторые примеры данных записывается для каждого.</span><span class="sxs-lookup"><span data-stu-id="8f967-2005">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2006">More than 255 files are in use.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2006">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="8f967-2007">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2007">Required.</span>
          </span>
          <span data-ttu-id="8f967-2008">
            <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2008">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="8f967-2009">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2009">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2010">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="8f967-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2011">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="8f967-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2012">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2013">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:  <list type="table"><item><term> Value  </term><description> Constant  </description><description> Description  </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.  </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.  </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.  </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.  </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.  </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.  </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.  </description></item></list><block subset="none" type="note"><para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para></block></span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2014">Чтобы определить, какие атрибуты имеют значения, используйте `And` оператор для выполнения побитовое сравнение значения, возвращенного `GetAttr` функции и значения атрибута файла необходимо.</span><span class="sxs-lookup"><span data-stu-id="8f967-2014">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="8f967-2015">Если результат не равен нулю, этот атрибут имеет значение для указанного файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2015">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="8f967-2016">Например, возвращаемое значение из следующих `And` выражение является нуль, если `Archive` атрибут не задан:</span><span class="sxs-lookup"><span data-stu-id="8f967-2016">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="8f967-2017">Ненулевое значение возвращается в том случае, если `Archive` атрибут имеет значение.</span><span class="sxs-lookup"><span data-stu-id="8f967-2017">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2018">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="8f967-2018">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2019">
            <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2019">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-2020">Target file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2020">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2021">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2022">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2022">Required.</span>
          </span>
          <span data-ttu-id="8f967-2023">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2023">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2024">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2024">Required.</span>
          </span>
          <span data-ttu-id="8f967-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2025">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2026">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2027">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2027">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2028">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2028">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2029">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2029">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2030">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2030">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2031">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2031">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2032">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2032">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2033">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2033">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2034">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2034">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2035">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2035">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2036">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2036">Data</span></span>|<span data-ttu-id="8f967-2037">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2037">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2038">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2038">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2039">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2039">Empty</span></span>|  
|<span data-ttu-id="8f967-2040">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2040">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2041">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2041">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2042">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2042">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2043">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2043">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2044">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2044">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2045">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2045">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2046">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2046">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2047">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2047">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2048">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2048">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2049">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2049">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2050">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2050">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2051">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2051">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2052">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2052">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2053">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2053">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2054">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2054">Required.</span>
          </span>
          <span data-ttu-id="8f967-2055">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2055">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2056">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2056">Required.</span>
          </span>
          <span data-ttu-id="8f967-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2057">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2058">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2059">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2059">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2060">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2060">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2061">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2061">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2062">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2062">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2063">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2063">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2064">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2064">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2065">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2065">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2066">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2066">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2067">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2067">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2068">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2068">Data</span></span>|<span data-ttu-id="8f967-2069">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2069">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2070">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2070">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2071">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2071">Empty</span></span>|  
|<span data-ttu-id="8f967-2072">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2072">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2073">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2073">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2074">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2074">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2075">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2075">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2076">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2076">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2077">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2077">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2078">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2078">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2079">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2079">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2080">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2080">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2081">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2081">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2082">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2082">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2083">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2083">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2084">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2084">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2085">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2085">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2086">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2086">Required.</span>
          </span>
          <span data-ttu-id="8f967-2087">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2087">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2088">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2088">Required.</span>
          </span>
          <span data-ttu-id="8f967-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2089">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2090">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2091">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2091">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2092">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2093">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2094">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2094">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2095">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2095">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2096">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2096">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2097">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2097">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2098">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2098">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2099">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2099">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2100">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2100">Data</span></span>|<span data-ttu-id="8f967-2101">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2101">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2102">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2102">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2103">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2103">Empty</span></span>|  
|<span data-ttu-id="8f967-2104">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2104">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2105">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2105">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2106">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2106">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2107">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2107">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2108">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2108">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2109">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2109">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2110">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2110">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2111">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2111">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2112">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2112">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2113">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2113">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2114">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2114">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2115">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2115">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2116">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2116">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2117">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2117">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2118">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2118">Required.</span>
          </span>
          <span data-ttu-id="8f967-2119">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2119">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2120">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2120">Required.</span>
          </span>
          <span data-ttu-id="8f967-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2121">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2122">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2123">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2123">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2124">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2124">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2125">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2125">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2126">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2126">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2127">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2127">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2128">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2128">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2129">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2129">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2130">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2130">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2131">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2131">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2132">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2132">Data</span></span>|<span data-ttu-id="8f967-2133">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2133">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2134">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2134">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2135">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2135">Empty</span></span>|  
|<span data-ttu-id="8f967-2136">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2136">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2137">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2137">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2138">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2138">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2139">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2139">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2140">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2140">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2141">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2141">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2142">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2142">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2143">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2143">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2144">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2144">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2145">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2145">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2146">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2146">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2147">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2147">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2148">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2148">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2149">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2149">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2150">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2150">Required.</span>
          </span>
          <span data-ttu-id="8f967-2151">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2151">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2152">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2152">Required.</span>
          </span>
          <span data-ttu-id="8f967-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2153">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2154">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2155">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2155">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2156">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2156">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2157">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2157">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2158">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2158">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2159">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2159">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2160">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2160">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2161">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2161">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2162">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2162">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2163">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2163">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2164">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2164">Data</span></span>|<span data-ttu-id="8f967-2165">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2165">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2166">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2166">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2167">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2167">Empty</span></span>|  
|<span data-ttu-id="8f967-2168">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2168">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2169">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2169">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2170">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2170">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2171">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2171">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2172">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2172">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2173">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2173">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2174">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2174">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2175">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2175">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2176">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2176">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2177">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2177">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2178">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2178">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2179">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2179">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2180">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2180">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2181">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2181">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2182">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2182">Required.</span>
          </span>
          <span data-ttu-id="8f967-2183">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2183">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2184">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2184">Required.</span>
          </span>
          <span data-ttu-id="8f967-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2185">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2186">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2187">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2187">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2188">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2188">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2189">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2189">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2190">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2190">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2191">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2191">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2192">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2192">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2193">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2193">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2194">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2194">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2195">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2195">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2196">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2196">Data</span></span>|<span data-ttu-id="8f967-2197">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2197">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2198">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2198">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2199">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2199">Empty</span></span>|  
|<span data-ttu-id="8f967-2200">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2200">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2201">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2201">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2202">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2202">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2203">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2203">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2204">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2204">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2205">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2205">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2206">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2206">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2207">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2207">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2208">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2208">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2209">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2209">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2210">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2210">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2211">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2211">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2212">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2212">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2213">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2213">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2214">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2214">Required.</span>
          </span>
          <span data-ttu-id="8f967-2215">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2215">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2216">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2216">Required.</span>
          </span>
          <span data-ttu-id="8f967-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2217">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2218">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2219">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2219">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2220">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2220">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2221">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2221">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2222">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2222">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2223">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2223">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2224">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2224">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2225">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2225">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2226">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2226">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2227">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2227">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2228">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2228">Data</span></span>|<span data-ttu-id="8f967-2229">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2229">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2230">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2230">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2231">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2231">Empty</span></span>|  
|<span data-ttu-id="8f967-2232">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2232">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2233">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2233">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2234">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2234">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2235">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2235">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2236">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2236">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2237">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2237">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2238">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2238">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2239">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2239">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2240">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2240">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2241">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2241">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2242">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2242">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2243">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2243">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2244">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2244">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2245">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2245">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2246">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2246">Required.</span>
          </span>
          <span data-ttu-id="8f967-2247">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2247">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2248">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2248">Required.</span>
          </span>
          <span data-ttu-id="8f967-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2249">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2250">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2251">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2251">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2252">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2253">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2253">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2254">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2254">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2255">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2255">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2256">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2256">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2257">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2257">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2258">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2258">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2259">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2259">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2260">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2260">Data</span></span>|<span data-ttu-id="8f967-2261">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2261">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2262">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2262">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2263">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2263">Empty</span></span>|  
|<span data-ttu-id="8f967-2264">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2264">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2265">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2265">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2266">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2266">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2267">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2267">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2268">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2268">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2269">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2269">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2270">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2270">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2271">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2271">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2272">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2272">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2273">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2273">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2274">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2274">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2275">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2275">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2276">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2276">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2277">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2277">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2278">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2278">Required.</span>
          </span>
          <span data-ttu-id="8f967-2279">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2279">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2280">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2280">Required.</span>
          </span>
          <span data-ttu-id="8f967-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2281">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2282">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2283">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2283">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2284">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2284">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2285">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2285">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2286">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2286">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2287">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2287">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2288">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2288">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2289">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2289">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2290">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2290">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2291">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2291">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2292">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2292">Data</span></span>|<span data-ttu-id="8f967-2293">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2293">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2294">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2294">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2295">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2295">Empty</span></span>|  
|<span data-ttu-id="8f967-2296">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2296">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2297">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2297">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2298">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2298">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2299">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2299">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2300">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2300">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2301">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2301">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2302">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2302">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2303">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2303">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2304">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2304">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2305">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2305">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2306">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2306">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2307">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2307">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2308">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2308">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2309">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2309">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2310">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2310">Required.</span>
          </span>
          <span data-ttu-id="8f967-2311">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2311">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2312">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2312">Required.</span>
          </span>
          <span data-ttu-id="8f967-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2313">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2314">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2315">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2315">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2316">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2316">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2317">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2317">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2318">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2318">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2319">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2319">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2320">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2320">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2321">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2321">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2322">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2322">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2323">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2323">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2324">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2324">Data</span></span>|<span data-ttu-id="8f967-2325">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2325">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2326">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2326">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2327">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2327">Empty</span></span>|  
|<span data-ttu-id="8f967-2328">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2328">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2329">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2329">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2330">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2330">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2331">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2331">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2332">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2332">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2333">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2333">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2334">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2334">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2335">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2335">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2336">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2336">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2337">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2337">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2338">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2338">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2339">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2339">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2340">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2340">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2341">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2341">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2342">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2342">Required.</span>
          </span>
          <span data-ttu-id="8f967-2343">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2343">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2344">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2344">Required.</span>
          </span>
          <span data-ttu-id="8f967-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2345">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2346">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2347">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2347">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2348">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2348">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2349">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2349">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2350">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2350">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2351">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2351">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2352">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2352">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2353">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2353">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2354">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2354">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2355">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2355">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2356">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2356">Data</span></span>|<span data-ttu-id="8f967-2357">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2357">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2358">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2358">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2359">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2359">Empty</span></span>|  
|<span data-ttu-id="8f967-2360">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2360">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2361">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2361">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2362">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2362">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2363">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2363">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2364">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2364">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2365">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2365">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2366">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2366">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2367">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2367">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2368">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2368">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2369">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2369">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2370">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2370">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2371">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2371">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2372">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2372">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2373">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2373">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2374">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2374">Required.</span>
          </span>
          <span data-ttu-id="8f967-2375">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2375">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="8f967-2376">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2376">Required.</span>
          </span>
          <span data-ttu-id="8f967-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2377">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2378">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2379">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2379">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2380">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2380">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2381">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2381">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2382">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2382">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="8f967-2383">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2383">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2384">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2384">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2385">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="8f967-2385">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="8f967-2386">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2386">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="8f967-2387">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2387">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="8f967-2388">Данные</span><span class="sxs-lookup"><span data-stu-id="8f967-2388">Data</span></span>|<span data-ttu-id="8f967-2389">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="8f967-2389">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="8f967-2390">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="8f967-2390">Delimiting comma or blank line</span></span>|<span data-ttu-id="8f967-2391">Empty</span><span class="sxs-lookup"><span data-stu-id="8f967-2391">Empty</span></span>|  
|<span data-ttu-id="8f967-2392">NULL #</span><span class="sxs-lookup"><span data-stu-id="8f967-2392">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="8f967-2393">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="8f967-2393">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="8f967-2394">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="8f967-2394">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="8f967-2395">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="8f967-2395">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="8f967-2396">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="8f967-2396">#ERROR `errornumber`#</span></span>|<span data-ttu-id="8f967-2397">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="8f967-2397">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="8f967-2398">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2398">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2399">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="8f967-2399">The `Input` function is not localized.</span></span> <span data-ttu-id="8f967-2400">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="8f967-2400">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2401">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2401">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2402">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2402">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2403">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="8f967-2403">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="8f967-2404">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="8f967-2404">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2405">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2405">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2406">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2406">Required.</span>
          </span>
          <span data-ttu-id="8f967-2407">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2407">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="8f967-2408">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2408">Required.</span>
          </span>
          <span data-ttu-id="8f967-2409">Any valid numeric expression specifying the number of characters to read.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2409">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2410">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="8f967-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2411">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="8f967-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2412">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2413">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="8f967-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2414">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2415">`InputString` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2415">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2416">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2416">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2417">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2417">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2418">Данные, считанные с `InputString` функции, обычно записываются в файл с помощью `Print` или `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2418">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="8f967-2419">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="8f967-2419">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="8f967-2420">В отличие от `Input` функции `InputString` функция возвращает все символы, которые считывает.</span><span class="sxs-lookup"><span data-stu-id="8f967-2420">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="8f967-2421">Сюда входят запятые, символы возврата каретки, перевода строки, кавычки и пробелы.</span><span class="sxs-lookup"><span data-stu-id="8f967-2421">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="8f967-2422">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `InputString` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="8f967-2422">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="8f967-2423">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с помощью `InputString`, или использовать `FileGet` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2423">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2424">При считывании из файла решения по обеспечению безопасности содержимое файла, в зависимости от расширения имени файла не следует.</span><span class="sxs-lookup"><span data-stu-id="8f967-2424">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="8f967-2425">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-2425">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2426">В этом примере используется `InputString` функции считывают один символ за раз из файла и распечатать его, чтобы `Output` окна.</span><span class="sxs-lookup"><span data-stu-id="8f967-2426">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="8f967-2427">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="8f967-2427">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2428">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2428">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-2429">
            <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2429">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="8f967-2430">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2430">Required.</span>
          </span>
          <span data-ttu-id="8f967-2431">
            <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2431">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="8f967-2432">
            <c>PathName</c> can include the directory or folder, and the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2432">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2433">Deletes files from a disk.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2433">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="8f967-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2434">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="8f967-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2435">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2436">`Kill` поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="8f967-2436">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="8f967-2437">**Примечание по безопасности** для выполнения, `Kill` функции требуется `Read` и `PathDiscovery` флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="8f967-2437">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="8f967-2438">Дополнительные сведения см. в разделе <xref:System.Security.SecurityException> [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="8f967-2438">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2439">В этом примере используется `Kill` функции, чтобы удалить файл с диска.</span><span class="sxs-lookup"><span data-stu-id="8f967-2439">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2440">Target file(s) open.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2440">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-2441">Target file(s) not found.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2441">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8f967-2442">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2442">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2443">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2443">Required.</span>
          </span>
          <span data-ttu-id="8f967-2444">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2444">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2445">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2446">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2447">`LineInput` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2447">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2448">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2448">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2449">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2449">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2450">Данные, считанные с `LineInput` , обычно записываются в файл с помощью `Print`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2450">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2451">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2451">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="8f967-2452">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-2452">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="8f967-2453">`LineInput` Функция считывает из файла одного символа во время, пока встретится символ возврата каретки (`Chr(13)`) или каретки и перевода строки веб-канал (`Chr(13) + Chr(10)`) последовательности.</span><span class="sxs-lookup"><span data-stu-id="8f967-2453">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="8f967-2454">Веб-канала последовательностей каретки и перевода строки, добавляемой в конце символьной строки, вместо пропускаются.</span><span class="sxs-lookup"><span data-stu-id="8f967-2454">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2455">Чтение из файла с помощью `LineInput` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2455">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2456">В этом примере используется `LineInput` функция для чтения строки из последовательного файла и присвоить его переменной.</span><span class="sxs-lookup"><span data-stu-id="8f967-2456">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="8f967-2457">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="8f967-2457">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="8f967-2458">End of file reached.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2458">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2459">
            <paramref name="FileNumber" /> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2459">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2460">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2460">Required.</span>
          </span>
          <span data-ttu-id="8f967-2461">Any valid <see langword="Integer" /> file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2461">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2462">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2463">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2464">`Loc` Функция отсчитываются от нуля, использовании ее для получения первого байта в файле возвратит значение 0.</span><span class="sxs-lookup"><span data-stu-id="8f967-2464">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="8f967-2465">`Loc` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2465">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2466">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2467">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2468">Ниже описаны возвращаемое значение для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2468">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="8f967-2469">Режим</span><span class="sxs-lookup"><span data-stu-id="8f967-2469">Mode</span></span>|<span data-ttu-id="8f967-2470">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="8f967-2470">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="8f967-2471">Номер последней записи, чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2471">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="8f967-2472">Текущая позиция байта в файле, деленная на 128.</span><span class="sxs-lookup"><span data-stu-id="8f967-2472">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="8f967-2473">Тем не менее, возвращаются сведения по `Loc` для последовательных файлов не используется и не требуется.</span><span class="sxs-lookup"><span data-stu-id="8f967-2473">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="8f967-2474">Позиция последнего байта чтения или записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-2474">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2475">В этом примере используется `Loc` функция, возвращающая текущую позицию чтения/записи в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2475">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="8f967-2476">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="8f967-2476">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2477">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2477">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2478">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2481">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2481">Required.</span>
          </span>
          <span data-ttu-id="8f967-2482">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2482">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2483">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2484">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2485">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2486">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2486">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="8f967-2487">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="8f967-2487">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="8f967-2488">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2488">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="8f967-2489">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2489">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="8f967-2490">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="8f967-2490">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="8f967-2491">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2491">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2492">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2492">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="8f967-2493">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2493">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2494">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2494">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2495">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2495">Required.</span>
          </span>
          <span data-ttu-id="8f967-2496">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2496">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="8f967-2497">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2497">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2498">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2498">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2499">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2500">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2501">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2502">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2502">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="8f967-2503">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="8f967-2503">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="8f967-2504">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2504">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="8f967-2505">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2505">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="8f967-2506">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="8f967-2506">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="8f967-2507">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2507">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2508">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2508">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="8f967-2509">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2509">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2510">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2510">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2511">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2511">Required.</span>
          </span>
          <span data-ttu-id="8f967-2512">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2512">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="8f967-2513">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2513">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2514">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2514">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="8f967-2515">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2515">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2516">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2516">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2517">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2520">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2520">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="8f967-2521">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="8f967-2521">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="8f967-2522">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2522">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="8f967-2523">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2523">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="8f967-2524">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="8f967-2524">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="8f967-2525">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2525">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2526">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2526">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="8f967-2527">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2527">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2528">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2529">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2529">Required.</span>
          </span>
          <span data-ttu-id="8f967-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2530">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2531">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="8f967-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2534">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2536">Используйте `FileLen` функции для получения длины файла, не являющийся открытым.</span><span class="sxs-lookup"><span data-stu-id="8f967-2536">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2537">В этом примере используется `LOF` функцию, чтобы определить размер открытого файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2537">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="8f967-2538">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий данные образца.</span><span class="sxs-lookup"><span data-stu-id="8f967-2538">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2539">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2539">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="8f967-2540">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2540">Required.</span>
          </span>
          <span data-ttu-id="8f967-2541">
            <see langword="String" /> expression that identifies the directory to be created.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2541">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="8f967-2542">The <c>Path</c> may include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2542">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="8f967-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2543">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2544">Creates a new directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2544">Creates a new directory.</span>
          </span>
          <span data-ttu-id="8f967-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="8f967-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2546">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2547">Эта функция создает новый каталог.</span><span class="sxs-lookup"><span data-stu-id="8f967-2547">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2548">В этом примере используется `MkDir` функции для создания каталога.</span><span class="sxs-lookup"><span data-stu-id="8f967-2548">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="8f967-2549">Если диск не указан, новый каталог создается на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="8f967-2549">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-2550">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2550">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="8f967-2551">Permission denied.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2551">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2552">Directory already exists.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2552">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2553">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2553">Required.</span>
          </span>
          <span data-ttu-id="8f967-2554">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2554">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="8f967-2555">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2555">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2556">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2556">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="8f967-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2557">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="8f967-2558">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2558">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2559">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2559">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2560">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2560">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2561">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2561">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2562">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2562">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2563">`Print` не включает символ перевода строки в конце строки; Тем не менее `PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-2563">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="8f967-2564">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2564">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="8f967-2565">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="8f967-2565">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="8f967-2566">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="8f967-2566">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="8f967-2567">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="8f967-2567">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="8f967-2568">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2568">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="8f967-2569">Дата данные записываются в файл с помощью стандартных краткий формат, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="8f967-2569">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="8f967-2570">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2570">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="8f967-2571">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="8f967-2571">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="8f967-2572">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2572">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="8f967-2573">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2573">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="8f967-2574">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2574">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="8f967-2575">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="8f967-2575">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="8f967-2576">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="8f967-2576">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="8f967-2577">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2577">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2578">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2578">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2579">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2579">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2580">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2580">Required.</span>
          </span>
          <span data-ttu-id="8f967-2581">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2581">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="8f967-2582">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2582">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2583">Zero or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2583">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="8f967-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2584">The <c>Output</c> argument settings are:  <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="8f967-2585">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2585">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2586">Writes display-formatted data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2586">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2587">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2587">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2588">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2588">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2589">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2589">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2590">`Print` не включает символ перевода строки в конце строки; Тем не менее`PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="8f967-2590">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="8f967-2591">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2591">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="8f967-2592">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="8f967-2592">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="8f967-2593">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="8f967-2593">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="8f967-2594">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="8f967-2594">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="8f967-2595">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2595">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="8f967-2596">Дата данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="8f967-2596">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="8f967-2597">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2597">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="8f967-2598">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="8f967-2598">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="8f967-2599">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2599">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="8f967-2600">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2600">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="8f967-2601">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2601">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="8f967-2602">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="8f967-2602">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="8f967-2603">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="8f967-2603">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="8f967-2604">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2604">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2605">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2605">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2606">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2606">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="8f967-2607">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2607">Required.</span>
          </span>
          <span data-ttu-id="8f967-2608">
            <see langword="String" /> expression that specifies the existing file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2608">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="8f967-2609">
            <c>OldPath</c> may include the directory, and drive, of the file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2609">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="8f967-2610">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2610">Required.</span>
          </span>
          <span data-ttu-id="8f967-2611">
            <see langword="String" /> expression that specifies the new file name and location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2611">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="8f967-2612">
            <c>NewPath</c> may include directory and drive of the destination location.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2612">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="8f967-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2613">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2614">Renames a disk file or directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2614">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="8f967-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2615">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="8f967-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2616">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2617">`Rename` Функция переименовывает файл и перемещает ее в другой каталог, если это необходимо.</span><span class="sxs-lookup"><span data-stu-id="8f967-2617">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="8f967-2618">`Rename` Функции можно переместить файл на дисках, но его можно только переименовать существующий каталог, если оба `NewPath` и `OldPath` расположены на одном диске.</span><span class="sxs-lookup"><span data-stu-id="8f967-2618">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="8f967-2619">`Rename` не удается создать новый файл или каталог.</span><span class="sxs-lookup"><span data-stu-id="8f967-2619">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="8f967-2620">С помощью `Rename` функции к открытому файлу выводит сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="8f967-2620">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="8f967-2621">Необходимо закрыть файл перед его переименованием.</span><span class="sxs-lookup"><span data-stu-id="8f967-2621">You must close an open file before renaming it.</span></span> <span data-ttu-id="8f967-2622">`Rename` аргументы не могут содержать знак (\*) и подстановочные знаки одного знака (?).</span><span class="sxs-lookup"><span data-stu-id="8f967-2622">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="8f967-2623">При использовании `Rename` чтобы скопировать файл из незащищенное место в защищенном месте, в файле сохраняются менее ограниченные права.</span><span class="sxs-lookup"><span data-stu-id="8f967-2623">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="8f967-2624">Проверьте, чтобы убедиться в том, что вы не представляете возможную угрозу безопасности.</span><span class="sxs-lookup"><span data-stu-id="8f967-2624">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2625">В этом примере используется `Rename` функции, чтобы переименовать файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2625">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="8f967-2626">Для целей этого примера предполагается, что каталоги, которые указаны в уже существуют.</span><span class="sxs-lookup"><span data-stu-id="8f967-2626">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-2627">Path is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2627">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-2628">
            <paramref name="OldPath" /> file does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2628">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2629">Cannot rename to different device.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2629">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2630">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="8f967-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2633">`Reset` Функция закрывает все активные файлы, открываемые `FileOpen` функцию и делает то же самое `FileClose()` без параметров.</span><span class="sxs-lookup"><span data-stu-id="8f967-2633">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2634">В этом примере используется `Reset` функцию, чтобы закрыть все открытые файлы и записи на диск содержимое всех буферов файлов.</span><span class="sxs-lookup"><span data-stu-id="8f967-2634">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="8f967-2635">Обратите внимание на использование `Object` переменной `FileNumber` как строка и номером.</span><span class="sxs-lookup"><span data-stu-id="8f967-2635">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="8f967-2636">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2636">Required.</span>
          </span>
          <span data-ttu-id="8f967-2637">
            <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2637">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="8f967-2638">
            <c>Path</c> can include the drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2638">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="8f967-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2639">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2640">Removes an existing directory.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2640">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="8f967-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2641">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="8f967-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2642">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2643">Произошла ошибка при попытке использовать `RmDir` на каталог, содержащий файлы.</span><span class="sxs-lookup"><span data-stu-id="8f967-2643">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="8f967-2644">Используйте `Kill` функции, чтобы удалить все файлы, прежде чем пытаться удалить каталог.</span><span class="sxs-lookup"><span data-stu-id="8f967-2644">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2645">В этом примере используется `RmDir` функцию для удаления существующего каталога.</span><span class="sxs-lookup"><span data-stu-id="8f967-2645">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-2646">
            <paramref name="Path" /> is not specified or is empty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2646">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2647">Target directory contains files.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2647">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="8f967-2648">Directory does not exist.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2648">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2649">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="8f967-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2652">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2652">Required.</span>
          </span>
          <span data-ttu-id="8f967-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2653">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2654">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2655">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="8f967-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2656">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2657">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2658">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 – 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="8f967-2658">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="8f967-2659">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2659">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="8f967-2660">Режим</span><span class="sxs-lookup"><span data-stu-id="8f967-2660">Mode</span></span>|<span data-ttu-id="8f967-2661">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="8f967-2661">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="8f967-2662">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="8f967-2662">Number of the next record read or written</span></span>|  
|<span data-ttu-id="8f967-2663">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="8f967-2663">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="8f967-2664">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2664">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="8f967-2665">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-2665">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2666">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="8f967-2666">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="8f967-2667">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2667">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="8f967-2668">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-2668">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="8f967-2669">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2669">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="8f967-2670">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="8f967-2670">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="8f967-2671">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2671">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="8f967-2672">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2672">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="8f967-2673">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="8f967-2673">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2674">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2674">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2675">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2675">Required.</span>
          </span>
          <span data-ttu-id="8f967-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2676">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="8f967-2677">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2677">Required.</span>
          </span>
          <span data-ttu-id="8f967-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2678">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2679">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="8f967-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2681">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2682">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 – 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="8f967-2682">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="8f967-2683">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2683">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="8f967-2684">Режим</span><span class="sxs-lookup"><span data-stu-id="8f967-2684">Mode</span></span>|<span data-ttu-id="8f967-2685">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="8f967-2685">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="8f967-2686">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="8f967-2686">Number of the next record read or written</span></span>|  
|<span data-ttu-id="8f967-2687">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="8f967-2687">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="8f967-2688">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2688">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="8f967-2689">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="8f967-2689">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2690">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="8f967-2690">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="8f967-2691">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2691">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="8f967-2692">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-2692">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="8f967-2693">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2693">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="8f967-2694">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="8f967-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="8f967-2695">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2695">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="8f967-2696">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2696">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="8f967-2697">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="8f967-2697">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2698">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2698">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="8f967-2699">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2699">Required.</span>
          </span>
          <span data-ttu-id="8f967-2700">
            <see langword="String" /> expression that specifies a file name.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2700">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="8f967-2701">
            <c>PathName</c> can include directory or folder, and drive.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2701">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="8f967-2702">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2702">Required.</span>
          </span>
          <span data-ttu-id="8f967-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2703">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2704">Sets attribute information for a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2704">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="8f967-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2705">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="8f967-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2706">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2707">Ошибка времени выполнения возникает при попытке установить атрибуты для открытого файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2707">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="8f967-2708">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="8f967-2708">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="8f967-2709">Значение</span><span class="sxs-lookup"><span data-stu-id="8f967-2709">Value</span></span>|<span data-ttu-id="8f967-2710">Константа</span><span class="sxs-lookup"><span data-stu-id="8f967-2710">Constant</span></span>|<span data-ttu-id="8f967-2711">Описание:</span><span class="sxs-lookup"><span data-stu-id="8f967-2711">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="8f967-2712">Обычный (по умолчанию).</span><span class="sxs-lookup"><span data-stu-id="8f967-2712">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="8f967-2713">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="8f967-2713">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="8f967-2714">Скрыты.</span><span class="sxs-lookup"><span data-stu-id="8f967-2714">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="8f967-2715">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2715">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="8f967-2716">Метка тома</span><span class="sxs-lookup"><span data-stu-id="8f967-2716">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="8f967-2717">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="8f967-2717">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="8f967-2718">Файл был изменен с момента последнего резервного копирования.</span><span class="sxs-lookup"><span data-stu-id="8f967-2718">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="8f967-2719">Файл имеет другое имя.</span><span class="sxs-lookup"><span data-stu-id="8f967-2719">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2720">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="8f967-2720">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="8f967-2721">Имена можно использовать в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="8f967-2721">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2722">В этом примере используется `SetAttr` функцию для задания атрибутов файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2722">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="8f967-2723">
            <paramref name="Attribute" /> type is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2723">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="8f967-2724">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2724">Required.</span>
          </span>
          <span data-ttu-id="8f967-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2725">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2726">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2727">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2728">Если `Count` меньше ширины строки вывода, следующая позиция печати непосредственно следует за количество напечатанных пробелов.</span><span class="sxs-lookup"><span data-stu-id="8f967-2728">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="8f967-2729">Если`Count` больше, чем выводимой строки `SPC` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="8f967-2729">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="8f967-2730">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="8f967-2730">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="8f967-2731">Например, если текущая позиция печати равна 24, выводимой строки — 80, а `SPC(90)`, печать начнется с позиции 34 (текущая позиция печати + остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="8f967-2731">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="8f967-2732">Если разница между текущей позицией печати и ширину строки вывода меньше, чем `Count` (или `Count` `Mod` *ширины*), `SPC` функция переходит в начало следующей строки и создает пробелы, равные `Count` — (*ширины* — *текущая_позиция_печати*).</span><span class="sxs-lookup"><span data-stu-id="8f967-2732">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2733">Убедитесь, что столбцы таблицы достаточно широки разрешить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-2733">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2734">В этом примере используется `SPC` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="8f967-2734">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2735">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2736">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2737">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2738">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="8f967-2738">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="8f967-2739">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="8f967-2739">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="8f967-2740">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="8f967-2740">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="8f967-2741">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="8f967-2741">Column Mod width</span></span>  
  
 <span data-ttu-id="8f967-2742">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="8f967-2742">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="8f967-2743">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="8f967-2743">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="8f967-2744">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-2744">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="8f967-2745">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="8f967-2745">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="8f967-2746">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2746">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="8f967-2747">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2747">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="8f967-2748">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2748">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2749">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-2749">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2750">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="8f967-2750">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="8f967-2751">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2751">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2752">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="8f967-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2753">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2754">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="8f967-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2755">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2756">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="8f967-2756">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="8f967-2757">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="8f967-2757">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="8f967-2758">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="8f967-2758">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="8f967-2759">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="8f967-2759">Column Mod width</span></span>  
  
 <span data-ttu-id="8f967-2760">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="8f967-2760">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="8f967-2761">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="8f967-2761">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="8f967-2762">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="8f967-2762">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="8f967-2763">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="8f967-2763">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="8f967-2764">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2764">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="8f967-2765">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2765">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="8f967-2766">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2766">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="8f967-2767">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="8f967-2767">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2768">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="8f967-2768">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="8f967-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2769">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2772">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2772">Required.</span>
          </span>
          <span data-ttu-id="8f967-2773">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2773">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2774">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2775">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2776">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2777">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2777">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="8f967-2778">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="8f967-2778">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="8f967-2779">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2779">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="8f967-2780">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2780">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="8f967-2781">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="8f967-2781">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="8f967-2782">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2782">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2783">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2783">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="8f967-2784">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2784">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2785">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2785">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2786">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2786">Required.</span>
          </span>
          <span data-ttu-id="8f967-2787">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2787">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="8f967-2788">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2788">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2789">Number of the only record or byte to lock or unlock</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2789">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2793">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2793">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="8f967-2794">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="8f967-2794">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="8f967-2795">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2795">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="8f967-2796">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2796">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="8f967-2797">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="8f967-2797">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="8f967-2798">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2798">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2799">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2799">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="8f967-2800">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2800">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2801">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2801">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2802">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2802">Required.</span>
          </span>
          <span data-ttu-id="8f967-2803">Any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2803">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="8f967-2804">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2804">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2805">Number of the first record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2805">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="8f967-2806">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2806">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2807">Number of the last record or byte to lock or unlock.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2807">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2808">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="8f967-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2809">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="8f967-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2810">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2811">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2811">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="8f967-2812">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="8f967-2812">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="8f967-2813">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2813">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="8f967-2814">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="8f967-2814">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="8f967-2815">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="8f967-2815">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="8f967-2816">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2816">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2817">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="8f967-2817">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="8f967-2818">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2818">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2819">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2819">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2820">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2820">Required.</span>
          </span>
          <span data-ttu-id="8f967-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2821">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="8f967-2822">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2822">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2823">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2823">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2824">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2824">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="8f967-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2825">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2826">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2826">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2827">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2827">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2828">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2828">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2829">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2829">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="8f967-2830">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2830">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="8f967-2831">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2831">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="8f967-2832">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="8f967-2832">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="8f967-2833">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2833">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="8f967-2834">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="8f967-2834">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="8f967-2835">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="8f967-2835">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="8f967-2836">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="8f967-2836">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="8f967-2837">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2837">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="8f967-2838">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="8f967-2838">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="8f967-2839">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2839">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="8f967-2840">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="8f967-2840">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="8f967-2841">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-2841">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="8f967-2842">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2842">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="8f967-2843">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2843">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="8f967-2844">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2844">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="8f967-2845">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="8f967-2845">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="8f967-2846">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="8f967-2846">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="8f967-2847">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2847">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="8f967-2848">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2848">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2849">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2849">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2850">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2850">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="8f967-2851">File mode is invalid.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2851">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="8f967-2852">Required.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2852">Required.</span>
          </span>
          <span data-ttu-id="8f967-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2853">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="8f967-2854">Optional.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2854">Optional.</span>
          </span>
          <span data-ttu-id="8f967-2855">One or more comma-delimited expressions to write to a file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2855">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="8f967-2856">Writes data to a sequential file.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2856">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="8f967-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="8f967-2857">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="8f967-2858">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2858">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="8f967-2859">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="8f967-2859">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="8f967-2860">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="8f967-2860">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="8f967-2861">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2861">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="8f967-2862">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="8f967-2862">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="8f967-2863">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2863">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="8f967-2864">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="8f967-2864">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="8f967-2865">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="8f967-2865">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="8f967-2866">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="8f967-2866">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="8f967-2867">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="8f967-2867">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="8f967-2868">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="8f967-2868">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="8f967-2869">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2869">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="8f967-2870">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="8f967-2870">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="8f967-2871">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2871">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="8f967-2872">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="8f967-2872">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="8f967-2873">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="8f967-2873">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="8f967-2874">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2874">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="8f967-2875">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="8f967-2875">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="8f967-2876">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="8f967-2876">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="8f967-2877">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="8f967-2877">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="8f967-2878">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="8f967-2878">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="8f967-2879">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="8f967-2879">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="8f967-2880">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="8f967-2880">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="8f967-2881">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="8f967-2881">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="8f967-2882">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="8f967-2882">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>