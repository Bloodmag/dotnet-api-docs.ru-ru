<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="830ac7c790b02bf9f1140e7f10329e88d2adad5d" /><Meta Name="ms.sourcegitcommit" Value="9e3550fb2088d4faf2043f0acb29da4555519937" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/12/2018" /><Meta Name="ms.locfileid" Value="53300977" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c745f-101">В модуле <see langword="FileSystem" /> содержатся процедуры, используемые для выполнения операций с файлами, папками или каталогами и системой.</span><span class="sxs-lookup"><span data-stu-id="c745f-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="c745f-102">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие в операциях файлового ввода-вывода по сравнению с модулем <see langword="FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="c745f-103">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-104">Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, с доступом к файлам и папкам.</span><span class="sxs-lookup"><span data-stu-id="c745f-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-105">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c745f-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="c745f-106">Сводка по каталогам и файлам</span><span class="sxs-lookup"><span data-stu-id="c745f-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="c745f-107">Сводка по вводу и выводу</span><span class="sxs-lookup"><span data-stu-id="c745f-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="c745f-108">Ключевые слова (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="c745f-109">Члены библиотеки времени выполнения Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="c745f-110">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-110">Required.</span></span> <span data-ttu-id="c745f-111">Выражение <see langword="String" />, определяющее, какая папка или каталог становятся новым каталогом или папкой по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c745f-111">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="c745f-112">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="c745f-113">Если диск не указан, функция <see langword="ChDir" /> меняет каталог или папку по умолчанию на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="c745f-114">Изменяет текущую папку или каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-114">Changes the current directory or folder.</span></span> <span data-ttu-id="c745f-115">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие операций файлового ввода-вывода по сравнению с функциями <see langword="ChDir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="c745f-116">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-117">`ChDir` Функция меняет каталог по умолчанию, но не диск по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c745f-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="c745f-118">Например, если по умолчанию это диск C, следующая инструкция изменяет каталог по умолчанию на диске D, но C остается диском по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="c745f-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="c745f-119">Может быть сделан относительным изменения каталога является путем ввода двух точек, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-120">`ChDir` Функция требует разрешение неуправляемого кода, что может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c745f-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c745f-121">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и.</span><span class="sxs-lookup"><span data-stu-id="c745f-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-122">В этом примере используется `ChDir` функции для изменения текущего каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c745f-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-123">Параметр <paramref name="Path" /> пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-124">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="c745f-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="c745f-125">Практическое руководство. Анализ путей к файлам в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="c745f-126">Создание, удаление и перемещение файлов и папок в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-127">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="c745f-128">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-128">Required.</span></span> <span data-ttu-id="c745f-129">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="c745f-130">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="c745f-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="c745f-131">Если аргумент <paramref name="Drive" /> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="c745f-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="c745f-132">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-133">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c745f-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c745f-134">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c745f-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-135">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="c745f-136">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-137">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="c745f-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-138">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="c745f-139">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-139">Required.</span></span> <span data-ttu-id="c745f-140">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="c745f-141">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="c745f-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="c745f-142">Если аргумент <paramref name="Drive" /> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="c745f-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="c745f-143">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-144">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c745f-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c745f-145">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c745f-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-146">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="c745f-147">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-148">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="c745f-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-149">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-150">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-150">Returns a string representing the current path.</span></span> <span data-ttu-id="c745f-151">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="c745f-152">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c745f-153">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-153">Returns a string representing the current path.</span></span> <span data-ttu-id="c745f-154">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="c745f-155">Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-156">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c745f-157">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="c745f-158">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-158">Optional.</span></span> <span data-ttu-id="c745f-159">Выражение типа <see langword="Char" />, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="c745f-160">Если диск не указан или параметр <paramref name="Drive" /> является пустой строкой (""), функция <see langword="CurDir" /> возвращает путь для текущего диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="c745f-161">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-161">Returns a string representing the current path.</span></span> <span data-ttu-id="c745f-162">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="c745f-163">Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-164">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c745f-165">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-166">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="c745f-167">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="c745f-168">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c745f-169">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="c745f-170">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="c745f-171">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="c745f-172">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-173">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="c745f-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c745f-174">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="c745f-175">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="c745f-176">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="c745f-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-177">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="c745f-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c745f-178">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c745f-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="c745f-179">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c745f-180">Значение</span><span class="sxs-lookup"><span data-stu-id="c745f-180">Value</span></span>|<span data-ttu-id="c745f-181">Константа</span><span class="sxs-lookup"><span data-stu-id="c745f-181">Constant</span></span>|<span data-ttu-id="c745f-182">Описание</span><span class="sxs-lookup"><span data-stu-id="c745f-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="c745f-183">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c745f-183">Default.</span></span> <span data-ttu-id="c745f-184">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c745f-185">Указывает файлы, доступные только для чтения, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c745f-186">Задает скрытые файлы, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c745f-187">Указывает, системные файлы и файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c745f-188">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c745f-189">Указывает каталоги или папки, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c745f-190">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c745f-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c745f-191">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c745f-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c745f-192">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="c745f-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-193">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="c745f-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c745f-194">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-194">Optional.</span></span> <span data-ttu-id="c745f-195">Выражение типа <see langword="String" />, задающее имя файла, имя каталога или папки, либо метку тома диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-195"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="c745f-196">Если параметр <paramref name="PathName" /> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span><span class="sxs-lookup"><span data-stu-id="c745f-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes"><span data-ttu-id="c745f-197">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-197">Optional.</span></span> <span data-ttu-id="c745f-198">Перечисление или числовое выражение, значение которого задает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-198">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="c745f-199">Если этот параметр опущен, функция <see langword="Dir" /> возвращает файлы, соответствующие параметру <paramref name="PathName" />, но не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-199">If omitted, <see langword="Dir" /> returns files that match <paramref name="PathName" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="c745f-200">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-200">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="c745f-201">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-201">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="c745f-202">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-202">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="c745f-203">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-203">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-204">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="c745f-204">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c745f-205">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-205">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="c745f-206">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-206">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="c745f-207">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="c745f-207">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-208">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="c745f-208">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c745f-209">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c745f-209">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="c745f-210">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-210">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c745f-211">Значение</span><span class="sxs-lookup"><span data-stu-id="c745f-211">Value</span></span>|<span data-ttu-id="c745f-212">Константа</span><span class="sxs-lookup"><span data-stu-id="c745f-212">Constant</span></span>|<span data-ttu-id="c745f-213">Описание:</span><span class="sxs-lookup"><span data-stu-id="c745f-213">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="c745f-214">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c745f-214">Default.</span></span> <span data-ttu-id="c745f-215">Указывает файлы, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-215">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c745f-216">Указывает файлы только для чтения, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-216">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c745f-217">Задает скрытые файлы, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-217">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c745f-218">Определяет системные файлы, кроме файлов, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-218">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c745f-219">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-219">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c745f-220">Указывает каталоги или папки в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c745f-220">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c745f-221">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c745f-221">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c745f-222">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c745f-222">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c745f-223">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте кода вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="c745f-223">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-224">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="c745f-224">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-225">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-225">Required.</span></span> <span data-ttu-id="c745f-226">Значение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-226">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-227">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="c745f-227">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="c745f-228">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="c745f-228">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-229">Используйте `EOF` во избежание ошибки, возникшей при попытке получить данные за пределами файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-229">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="c745f-230">`EOF` Возвращает `False` пока не будет достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-230">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="c745f-231">В файлах, открытых для `Random` или `Binary` доступ, `EOF` возвращает `False` до последнего выполненного `FileGet` функции не удалось прочитать запись целиком.</span><span class="sxs-lookup"><span data-stu-id="c745f-231">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="c745f-232">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `Input` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="c745f-232">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="c745f-233">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с `Input`, или использовать `Get` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-233">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="c745f-234">В файлах, открытых для `Output`, `EOF` всегда возвращает `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-234">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-235">В этом примере используется `EOF` функции, чтобы определить конец файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-235">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="c745f-236">В этом примере предполагается, что `Testfile` — текстовый файл, который содержит несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c745f-236">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-237">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-237">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-238">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-238">Required.</span></span> <span data-ttu-id="c745f-239"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-239"><see langword="Integer" />.</span></span> <span data-ttu-id="c745f-240">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-240">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-241">Возвращает перечисление, представляющее режим файла для файлов, открытых функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-241">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-242">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="FileAttr" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-242">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="c745f-243">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-243">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="c745f-244">Следующие значения перечисления определяют режим доступа к файлу:</span><span class="sxs-lookup"><span data-stu-id="c745f-244">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="c745f-245">Значение</span><span class="sxs-lookup"><span data-stu-id="c745f-245">Value</span></span> 
 </term><description> <span data-ttu-id="c745f-246">Режим</span><span class="sxs-lookup"><span data-stu-id="c745f-246">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="c745f-247">1</span><span class="sxs-lookup"><span data-stu-id="c745f-247">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="c745f-248">2</span><span class="sxs-lookup"><span data-stu-id="c745f-248">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="c745f-249">4</span><span class="sxs-lookup"><span data-stu-id="c745f-249">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="c745f-250">8</span><span class="sxs-lookup"><span data-stu-id="c745f-250">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="c745f-251">32</span><span class="sxs-lookup"><span data-stu-id="c745f-251">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-252">Эта функция возвращает перечисление, представляющее режим файла для файлов, открытых `FileOpen` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-252">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-253">В этом примере используется `FileAttr` функция, возвращающая файловый режим открытого файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-253">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-254">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-254">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="c745f-255">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-255">Optional.</span></span> <span data-ttu-id="c745f-256">Массив параметров из 0 или нескольких каналов, которые должны быть закрыты.</span><span class="sxs-lookup"><span data-stu-id="c745f-256">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="c745f-257">Завершает операции ввода-вывода с файлом, открытым с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-257">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-258">Возможность <see langword="My" /> предоставляет лучшие показатели производительности и быстродействии в операциях файлового ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-258"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="c745f-259">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-259">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-260">`FileClose` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-260">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-261">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-261">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-262">Дополнительные сведения см. в разделе [Как Чтение текста из файлов с помощью StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [как: Запись текста в файлы с помощью StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), и [Пошаговое руководство: Операции с файлами и каталогами в Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-262">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="c745f-263">Если опустить `FileNumbers`, все активные файлы, открываемые `FileOpen` функция закрываются.</span><span class="sxs-lookup"><span data-stu-id="c745f-263">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="c745f-264">При закрытии файлов, открытых для `Output` или `Append`, последнее содержимое буфера выходных данных записывается в буфер операционной системы для этого файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-264">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="c745f-265">Все буферное пространство, связанное с закрытого файл освобождается.</span><span class="sxs-lookup"><span data-stu-id="c745f-265">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="c745f-266">Когда `FileClose` функция выполняется, а связь файла с его файла заканчивается.</span><span class="sxs-lookup"><span data-stu-id="c745f-266">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-267">В этом примере используется `FileClose` функцию, чтобы закрыть файл открыт для `Input`.</span><span class="sxs-lookup"><span data-stu-id="c745f-267">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-268"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-268"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="c745f-269">Оператор End</span><span class="sxs-lookup"><span data-stu-id="c745f-269">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="c745f-270">Оператор Stop (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-270">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-271">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-271">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="c745f-272">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-272">Required.</span></span> <span data-ttu-id="c745f-273">Выражение <see langword="String" />, задающее имя копируемого файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-273"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="c745f-274">Параметр <paramref name="Source" /> может содержать имя каталога или папки, а также имя диска, где находится исходный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-274"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="c745f-275">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-275">Required.</span></span> <span data-ttu-id="c745f-276">Выражение <see langword="String" />, определяющее имя файла назначения.</span><span class="sxs-lookup"><span data-stu-id="c745f-276"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="c745f-277">Параметр <paramref name="Destination" /> может содержать имя каталога или папки, а также имя диска, где находится файл назначения.</span><span class="sxs-lookup"><span data-stu-id="c745f-277"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="c745f-278">Копирует файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-278">Copies a file.</span></span> <span data-ttu-id="c745f-279">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-279">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="c745f-280">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-280">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-281">Если вы попытаетесь использовать `FileCopy` работать на открытый файл, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-281">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="c745f-282">`FileCopy` требует полного доверия для работы на локальном диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-282">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-283">В этом примере используется `FileCopy` функции для копирования одного файла в другой.</span><span class="sxs-lookup"><span data-stu-id="c745f-283">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="c745f-284">Для целей этого примера, предположим, что `SrcFile` — это файл, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-284">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-285">Параметр <paramref name="Source" /> или <paramref name="Destination" /> недопустим или не указан.</span><span class="sxs-lookup"><span data-stu-id="c745f-285"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-286">Этот файл уже открыт.</span><span class="sxs-lookup"><span data-stu-id="c745f-286">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-287">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-287">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="c745f-288">Практическое руководство. Создание копии файла в другом каталоге в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-288">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="c745f-289">Практическое руководство. Создание копии файла в том же каталоге в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-289">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="c745f-290">Практическое руководство. Копирование каталога в другой каталог в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-290">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c745f-291">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-291">Required.</span></span> <span data-ttu-id="c745f-292">Выражение типа <see langword="String" />, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-292"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="c745f-293"><paramref name="PathName" /> — может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-293"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c745f-294">Возвращает значение типа <see langword="Date" />, которое указывает дату и время последней операции записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-294">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="c745f-295">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-295">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="c745f-296">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-296">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="c745f-297">Значение типа <see langword="Date" />, которое указывает дату и время создания или последнего изменения файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-297"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c745f-298">В этом примере используется `FileDateTime` создания или последнего изменения функции для определения даты и времени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-298">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="c745f-299">Формат даты и времени зависит от параметров языкового стандарта системы.</span><span class="sxs-lookup"><span data-stu-id="c745f-299">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-300">Параметр <paramref name="PathName" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="c745f-300"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-301">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-301">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-302">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-302">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-303">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-303">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-304">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-304">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-305">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-305">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-306">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-306">Required.</span></span> <span data-ttu-id="c745f-307">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-307">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-308">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-308">Required.</span></span> <span data-ttu-id="c745f-309">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-309">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-310">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-310">Optional.</span></span> <span data-ttu-id="c745f-311">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-311">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-312">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-312">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-313">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-313">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-314">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-314">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-315">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-315">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-316">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-316">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-317">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-317">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-318">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-318">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-319">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-319">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-320">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-320">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-321">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-321">Random Mode</span></span>  
 <span data-ttu-id="c745f-322">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-322">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-323">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-323">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-324">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-324">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-325">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-325">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-326">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-326">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-327">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-327">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-328">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-328">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-329">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-329">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-330">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-330">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-331">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-331">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-332">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-332">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-333">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-333">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-334">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-334">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-335">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-335">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-336">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-336">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-337">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-337">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-338">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-338">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-339">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-339">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-340">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-340">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-341">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-341">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-342">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-342">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-343">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-343">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-344">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-344">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-345">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-345">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-346">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-347">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-347">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-348">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-348">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-349">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-349">Binary Mode</span></span>  
 <span data-ttu-id="c745f-350">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-350">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-351">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-351">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-352">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-352">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-353">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-353">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-354">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-354">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-355">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-355">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-356">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-356">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-357">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-357">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-358">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-358">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-359"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-359"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-360">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-361">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-361">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-362">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-362">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-363">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-363">Required.</span></span> <span data-ttu-id="c745f-364">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-364">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-365">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-365">Required.</span></span> <span data-ttu-id="c745f-366">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-366">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-367">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-367">Optional.</span></span> <span data-ttu-id="c745f-368">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-368">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-369">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-369">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-370">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-370">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-371">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-371">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-372">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-372">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-373">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-373">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-374">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-374">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-375">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-375">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-376">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-376">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-377">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-377">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-378">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-378">Random Mode</span></span>  
 <span data-ttu-id="c745f-379">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-379">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-380">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-380">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-381">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-381">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-382">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-382">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-383">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-383">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-384">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-384">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-385">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-385">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-386">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-386">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-387">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-387">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-388">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-388">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-389">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-389">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-390">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-390">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-391">Если дескриптор не используется.</span><span class="sxs-lookup"><span data-stu-id="c745f-391">If the descriptor is not used.</span></span> <span data-ttu-id="c745f-392">Размер и границы массива, передан в `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-392">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-393">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-394">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-395">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-395">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-396">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-397">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-397">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-398">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-398">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-399">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-399">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-400">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-400">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-401">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-401">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-402">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-402">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-403">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-403">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-404">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-405">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-405">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-406">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-406">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-407">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-407">Binary Mode</span></span>  
 <span data-ttu-id="c745f-408">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-408">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-409">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-409">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-410">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-410">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-411">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-411">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-412">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-412">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-413">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-413">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-414">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-414">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-415">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-415">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-416">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-416">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-417"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-417"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-418">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-418">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-419">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-419">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-420">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-420">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-421">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-421">Required.</span></span> <span data-ttu-id="c745f-422">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-422">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-423">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-423">Required.</span></span> <span data-ttu-id="c745f-424">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-424">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-425">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-425">Optional.</span></span> <span data-ttu-id="c745f-426">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-426">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-427">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-427">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-428">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-428">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-429">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-429">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-430">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-430">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-431">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-431">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-432">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-432">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-433">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-433">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-434">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-434">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-435">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-435">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-436">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-436">Random Mode</span></span>  
 <span data-ttu-id="c745f-437">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-437">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-438">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-438">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-439">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-439">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-440">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-440">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-441">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-441">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-442">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-442">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-443">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-443">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-444">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-444">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-445">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-445">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-446">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-446">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-447">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-447">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-448">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-448">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-449">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-449">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-450">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-450">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-451">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-451">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-452">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-452">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-453">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-453">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-454">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-454">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-455">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-455">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-456">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-456">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-457">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-457">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-458">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-458">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-459">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-459">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-460">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-460">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-461">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-462">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-462">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-463">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-463">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-464">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-464">Binary Mode</span></span>  
 <span data-ttu-id="c745f-465">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-465">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-466">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-466">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-467">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-467">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-468">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-468">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-469">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-469">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-470">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-470">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-471">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-471">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-472">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-472">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-473">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-473">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-474"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-475">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-475">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-476">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-476">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-477">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-477">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-478">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-478">Required.</span></span> <span data-ttu-id="c745f-479">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-479">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-480">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-480">Required.</span></span> <span data-ttu-id="c745f-481">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-481">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-482">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-482">Optional.</span></span> <span data-ttu-id="c745f-483">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-483">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-484">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-484">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-485">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-485">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-486">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-486">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-487">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-487">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-488">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-488">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-489">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-489">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-490">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-490">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-491">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-491">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-492">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-492">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-493">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-493">Random Mode</span></span>  
 <span data-ttu-id="c745f-494">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-494">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-495">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции`FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-495">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-496">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-496">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-497">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-497">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-498">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-498">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-499">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-499">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-500">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-500">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-501">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-501">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-502">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-502">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-503">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-504">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-504">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-505">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-505">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-506">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-506">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-507">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-508">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-509">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-509">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-510">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-511">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-511">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-512">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-512">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-513">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-513">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-514">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-514">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-515">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-515">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-516">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-516">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-517">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-517">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-518">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-519">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-519">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-520">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-520">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-521">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-521">Binary Mode</span></span>  
 <span data-ttu-id="c745f-522">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-522">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-523">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-523">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-524">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-524">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-525">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-525">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-526">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-526">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-527">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-527">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-528">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-528">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-529">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-529">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-530">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-530">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-531"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-531"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-532">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-532">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-533">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-533">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-534">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-534">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-535">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-535">Required.</span></span> <span data-ttu-id="c745f-536">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-537">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-537">Required.</span></span> <span data-ttu-id="c745f-538">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-538">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-539">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-539">Optional.</span></span> <span data-ttu-id="c745f-540">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-541">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-541">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-542">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-543">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-544">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-544">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-545">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-545">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-546">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-547">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-547">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-548">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-548">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-549">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-549">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-550">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-550">Random Mode</span></span>  
 <span data-ttu-id="c745f-551">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-551">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-552">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-552">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-553">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-553">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-554">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-554">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-555">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-555">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-556">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-556">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-557">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-557">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-558">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-558">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-559">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-559">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-560">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-560">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-561">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-561">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-562">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-562">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-563">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-563">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-564">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-565">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-566">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-566">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-567">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-568">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-568">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-569">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-569">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-570">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-570">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-571">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-571">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-572">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-573">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-573">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-574">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-574">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-575">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-576">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-576">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-577">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-578">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-578">Binary Mode</span></span>  
 <span data-ttu-id="c745f-579">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-579">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-580">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-580">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-581">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-581">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-582">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-582">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-583">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-583">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-584">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-584">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-585">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-585">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-586">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-586">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-587">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-587">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-588"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-588"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-589">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-589">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-590">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-590">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-591">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-592">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-592">Required.</span></span> <span data-ttu-id="c745f-593">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-594">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-594">Required.</span></span> <span data-ttu-id="c745f-595">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-595">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-596">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-596">Optional.</span></span> <span data-ttu-id="c745f-597">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-598">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-598">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-599">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-600">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-601">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-601">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-602">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-602">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-603">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-604">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-604">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-605">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-605">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-606">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-606">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-607">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-607">Random Mode</span></span>  
 <span data-ttu-id="c745f-608">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-608">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-609">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-609">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-610">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-610">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-611">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-611">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-612">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-612">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-613">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-613">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-614">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-614">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-615">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-615">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-616">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-616">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-617">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-617">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-618">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-618">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-619">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-619">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-620">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-620">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-621">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-621">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-622">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-622">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-623">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-623">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-624">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-624">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-625">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-625">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-626">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-626">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-627">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-627">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-628">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-628">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-629">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-630">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-630">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-631">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-631">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-632">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-633">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-633">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-634">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-635">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-635">Binary Mode</span></span>  
 <span data-ttu-id="c745f-636">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-636">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-637">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-637">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-638">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-638">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-639">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-639">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-640">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-640">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-641">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-641">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-642">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-642">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-643">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-643">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-644">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-644">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-645"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-645"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-646">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-646">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-647">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-647">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-648">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-648">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-649">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-649">Required.</span></span> <span data-ttu-id="c745f-650">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-650">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-651">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-651">Required.</span></span> <span data-ttu-id="c745f-652">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-652">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-653">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-653">Optional.</span></span> <span data-ttu-id="c745f-654">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-655">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-655">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-656">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-657">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-658">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-658">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-659">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-659">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-660">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-661">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-661">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-662">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-662">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-663">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-663">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-664">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-664">Random Mode</span></span>  
 <span data-ttu-id="c745f-665">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-665">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-666">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-666">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-667">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-667">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-668">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-668">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-669">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-669">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-670">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-670">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-671">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-671">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-672">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-672">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-673">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-673">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-674">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-674">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-675">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-675">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-676">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-676">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-677">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-677">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-678">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-678">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-679">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-679">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-680">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-681">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-681">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-682">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-682">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-683">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-683">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-684">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-684">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-685">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-685">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-686">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-687">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-687">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-688">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-688">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-689">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-690">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-690">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-691">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-692">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-692">Binary Mode</span></span>  
 <span data-ttu-id="c745f-693">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-693">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-694">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-694">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-695">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-695">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-696">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-696">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-697">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-697">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-698">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-698">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-699">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-699">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-700">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-700">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-701">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-701">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-702"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-702"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-703">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-703">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-704">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-704">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-705">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-705">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-706">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-706">Required.</span></span> <span data-ttu-id="c745f-707">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-707">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-708">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-708">Required.</span></span> <span data-ttu-id="c745f-709">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-709">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-710">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-710">Optional.</span></span> <span data-ttu-id="c745f-711">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-712">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-712">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-713">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-714">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-715">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-715">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-716">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-716">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-717">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-718">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-718">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-719">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-719">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-720">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-720">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-721">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-721">Random Mode</span></span>  
 <span data-ttu-id="c745f-722">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-722">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-723">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-723">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-724">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-724">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-725">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-725">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-726">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-726">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-727">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-727">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-728">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-728">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-729">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-729">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-730">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-730">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-731">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-731">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-732">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-732">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-733">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-733">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-734">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-734">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-735">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-735">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-736">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-736">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-737">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-738">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-738">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-739">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-739">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-740">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-740">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-741">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-741">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-742">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-742">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-743">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-744">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-744">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-745">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-745">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-746">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-747">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-747">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-748">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-749">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-749">Binary Mode</span></span>  
 <span data-ttu-id="c745f-750">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-750">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-751">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-751">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-752">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-752">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-753">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-753">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-754">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-754">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-755">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-755">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-756">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-756">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-757">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-757">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-758">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-758">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-759"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-759"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-760">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-760">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-761">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-761">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-762">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-762">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-763">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-763">Required.</span></span> <span data-ttu-id="c745f-764">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-764">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-765">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-765">Required.</span></span> <span data-ttu-id="c745f-766">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-766">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-767">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-767">Optional.</span></span> <span data-ttu-id="c745f-768">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-768">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-769">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-769">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-770">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-770">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-771">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-771">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-772">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-772">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-773">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-773">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-774">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-774">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-775">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-775">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-776">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-776">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-777">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-777">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-778">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-778">Random Mode</span></span>  
 <span data-ttu-id="c745f-779">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-779">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-780">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-780">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-781">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-781">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-782">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-782">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-783">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-783">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-784">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-784">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-785">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-785">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-786">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-786">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-787">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-787">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-788">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-788">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-789">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-789">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-790">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-790">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-791">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-791">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-792">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-792">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-793">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-793">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-794">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-794">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-795">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-795">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-796">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-796">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-797">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-797">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-798">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-798">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-799">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-799">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-800">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-800">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-801">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-801">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-802">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-802">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-803">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-804">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-804">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-805">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-805">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-806">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-806">Binary Mode</span></span>  
 <span data-ttu-id="c745f-807">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-807">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-808">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-808">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-809">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-809">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-810">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-810">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-811">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-811">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-812">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-812">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-813">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-813">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-814">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-814">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-815">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-815">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-816"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-816"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-817">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-817">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-818">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-818">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-819">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-819">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-820">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-820">Required.</span></span> <span data-ttu-id="c745f-821">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-821">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-822">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-822">Required.</span></span> <span data-ttu-id="c745f-823">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-823">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-824">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-824">Optional.</span></span> <span data-ttu-id="c745f-825">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-825">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-826">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-826">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-827">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-827">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-828">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-828">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-829">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-829">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-830">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-830">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-831">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-831">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-832">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-832">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-833">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-833">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-834">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-834">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-835">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-835">Random Mode</span></span>  
 <span data-ttu-id="c745f-836">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-836">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-837">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-837">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-838">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-838">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-839">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-839">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-840">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-840">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-841">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-841">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-842">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-842">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-843">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-843">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-844">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-844">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-845">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-845">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-846">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-846">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-847">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-847">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-848">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-848">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-849">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-849">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-850">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-850">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-851">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-851">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-852">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-852">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-853">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-853">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-854">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-854">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-855">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-855">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-856">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-856">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-857">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-857">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-858">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-858">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-859">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-859">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-860">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-861">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-861">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-862">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-862">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-863">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-863">Binary Mode</span></span>  
 <span data-ttu-id="c745f-864">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-864">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-865">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-865">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-866">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-866">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-867">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-867">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-868">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-868">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-869">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-869">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-870">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-870">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-871">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-871">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-872">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-872">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-873"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-873"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-874">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-874">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-875">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-875">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-876">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-876">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-877">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-877">Required.</span></span> <span data-ttu-id="c745f-878">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-878">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-879">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-879">Required.</span></span> <span data-ttu-id="c745f-880">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-880">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-881">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-881">Optional.</span></span> <span data-ttu-id="c745f-882">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-882">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-883">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-883">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-884">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-884">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-885">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-885">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-886">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-886">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-887">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-887">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-888">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-888">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-889">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-889">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-890">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-890">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-891">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-891">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-892">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-892">Random Mode</span></span>  
 <span data-ttu-id="c745f-893">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-893">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-894">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-894">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-895">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-895">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-896">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-896">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-897">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-897">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-898">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-898">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-899">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-899">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-900">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-900">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-901">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-901">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-902">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-902">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-903">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-903">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-904">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-904">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-905">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-905">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-906">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-906">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-907">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-907">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-908">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-908">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-909">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-909">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-910">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-910">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-911">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-911">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-912">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-912">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-913">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-913">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-914">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-914">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-915">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-915">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-916">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-916">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-917">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-918">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-918">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-919">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-919">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-920">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-920">Binary Mode</span></span>  
 <span data-ttu-id="c745f-921">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-921">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-922">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-922">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-923">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-923">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-924">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-924">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-925">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-925">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-926">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-926">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-927">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-927">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-928">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-928">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-929">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-929">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-930"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-930"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-931">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-931">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-932">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-932">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-933">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-933">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-934">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-934">Required.</span></span> <span data-ttu-id="c745f-935">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-935">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-936">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-936">Required.</span></span> <span data-ttu-id="c745f-937">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-937">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-938">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-938">Optional.</span></span> <span data-ttu-id="c745f-939">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-939">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c745f-940">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-940">Optional.</span></span> <span data-ttu-id="c745f-941">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-941">Applies only when writing a string.</span></span> <span data-ttu-id="c745f-942">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-942">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="c745f-943">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-943">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c745f-944">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-944">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-945">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-946">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-947">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-947">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-948">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-948">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-949">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-949">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-950">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-950">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-951">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-951">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-952">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-952">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-953">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-953">Random Mode</span></span>  
 <span data-ttu-id="c745f-954">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-954">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-955">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-955">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-956">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-956">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-957">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-957">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-958">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-958">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-959">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-959">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-960">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-960">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-961">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-961">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-962">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-962">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-963">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-963">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-964">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-964">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-965">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-965">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-966">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-966">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-967">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-967">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-968">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-968">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-969">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-969">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-970">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-970">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-971">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-971">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-972">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-972">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-973">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-973">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-974">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-974">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-975">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-975">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-976">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-976">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-977">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-977">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-978">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-979">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-979">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-980">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-980">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-981">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-981">Binary Mode</span></span>  
 <span data-ttu-id="c745f-982">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-982">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-983">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-983">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-984">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-984">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-985">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-985">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-986">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-986">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-987">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-987">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-988">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-988">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-989">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-989">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-990">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-990">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-991"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-991"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-992">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-992">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-993">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-993">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-994">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-994">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-995">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-995">Required.</span></span> <span data-ttu-id="c745f-996">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-996">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-997">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-997">Required.</span></span> <span data-ttu-id="c745f-998">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-998">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-999">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-999">Optional.</span></span> <span data-ttu-id="c745f-1000">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-1000">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="c745f-1001">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1001">Optional.</span></span> <span data-ttu-id="c745f-1002">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1002">Applies only when writing an array.</span></span> <span data-ttu-id="c745f-1003">Указывает, нужно ли обрабатывать массив как динамический, и обязательно ли записывать дескриптор массива, описывающий его длину и границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1003">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c745f-1004">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1004">Optional.</span></span> <span data-ttu-id="c745f-1005">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1005">Applies only when writing a string.</span></span> <span data-ttu-id="c745f-1006">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1006">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="c745f-1007">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1007">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c745f-1008">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1008">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c745f-1009">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1009">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c745f-1010">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1010">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1011">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1011">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1012">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1012">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c745f-1013">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1013">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1014">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-1014">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-1015">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1015">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-1016">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-1016">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1017">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1017">Random Mode</span></span>  
 <span data-ttu-id="c745f-1018">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1018">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1019">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1019">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1020">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1020">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1021">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1021">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-1022">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1022">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1023">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1023">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1024">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1024">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-1025">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1025">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1026">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1026">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c745f-1027">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1027">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1028">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1028">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c745f-1029">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c745f-1029">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c745f-1030">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-1030">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c745f-1031">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1031">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1032">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1032">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1033">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1033">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1034">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1034">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c745f-1035">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-1035">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c745f-1036">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c745f-1036">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c745f-1037">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-1037">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-1038">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1038">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c745f-1039">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1039">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-1040">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1040">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-1041">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1041">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1042">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c745f-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c745f-1043">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1043">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-1044">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1044">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1045">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1045">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1046">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1046">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1047">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1047">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1048">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1048">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1049">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1049">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1050">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1050">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c745f-1051">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1051">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c745f-1052">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1052">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1053">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1053">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c745f-1054">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1054">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1055"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1055"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1056">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1056">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-1057">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1057">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1058">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1058">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1059">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1059">Required.</span></span> <span data-ttu-id="c745f-1060">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1060">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1061">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1061">Required.</span></span> <span data-ttu-id="c745f-1062">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1062">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1063">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1063">Optional.</span></span> <span data-ttu-id="c745f-1064">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c745f-1064">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1065">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1065">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="c745f-1066">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="c745f-1067">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1067">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1068">`FileGetObject` Функции используется вместо `FileGet` во избежание неоднозначности во время компиляции, если тип `Object` возвращается вместо другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1068">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="c745f-1069">Если вы собираетесь записать `Variant` типа, `FileGetObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="c745f-1069">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="c745f-1070">Если вы сомневаетесь, если вы используете объект для второго параметра, всегда рекомендуется использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1070">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c745f-1071">`FileGetObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1071">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1072">Данные, считанные с `FileGetObject` записываются с `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1072">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="c745f-1073">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1073">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1074">Если опустить `RecordNumber`, `FileGetObject` считывает записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или на которые указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="c745f-1074">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1075">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1075">Random Mode</span></span>  
 <span data-ttu-id="c745f-1076">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1076">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1077">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGetObject` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1077">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1078">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1078">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1079">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется иметь совпадает с длиной данных длиной записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-1079">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c745f-1080">Если переменная представляет собой строку, по умолчанию `FileGetObject` считывает двухбайтовый дескриптор, содержащий длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1080">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1081">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1081">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1082">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины и при записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1082">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c745f-1083">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1083">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1084">Если переменная, считываемых в массив, а затем записей длину, заданную `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1084">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1085">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1085">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1086">Его длина равна 2 плюс 8, умноженное на количество измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="c745f-1086">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="c745f-1087">Например, следующее объявление массива требуется 218 байтов при записи на диск:</span><span class="sxs-lookup"><span data-stu-id="c745f-1087">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="c745f-1088">218 байт распределяются следующим образом: 18 байт для дескриптора (2 + 8 \* 2) и 100 байт для данных (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c745f-1088">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c745f-1089">`FileGetObject` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1089">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c745f-1090">На диске, динамический массив в определяемый пользователем тип (с `FilePutObject`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="c745f-1090">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="c745f-1091">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов, включая массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1091">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="c745f-1092"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Класс может быть применен к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1092">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1093">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1093">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1094">Для открытия файлов в `Binary` режим, все `Random` применяются правила, со следующими исключениями:</span><span class="sxs-lookup"><span data-stu-id="c745f-1094">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="c745f-1095">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1095">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1096">`FileGetObject` Считывает все переменные с диска непрерывно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1096">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1097">Для любого массива, кроме массива в виде структуры `FileGetObject` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1097">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="c745f-1098">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1098">No descriptor is read.</span></span>  
  
 <span data-ttu-id="c745f-1099">`FileGetObject` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1099">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1100">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1100">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-1101">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1101">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-1102">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-1102">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1103">В следующем примере выполняется запись в файл теста и затем получает его.</span><span class="sxs-lookup"><span data-stu-id="c745f-1103">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-1104">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1104">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1105">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1105">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c745f-1106">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1106">Required.</span></span> <span data-ttu-id="c745f-1107">Выражение <see langword="String" />, которое определяет файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1107"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="c745f-1108"><paramref name="PathName" /> — может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-1108"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c745f-1109">Возвращает значение <see langword="Long" />, которое указывает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="c745f-1109">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="c745f-1110">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1110">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="c745f-1111">Для получения дополнительной информации см. <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1111">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-1112">Значение <see langword="Long" />, которое указывает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="c745f-1112"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1113">Если указанный файл открыт, когда `FileLen` вызывается функция, возвращаемое значение представляет размер файла на момент его открытия.</span><span class="sxs-lookup"><span data-stu-id="c745f-1113">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-1114">Чтобы получить текущую длину открытого файла, используйте `LOF` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-1114">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1115">В этом примере используется `FileLen` функция возвращает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="c745f-1115">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="c745f-1116">Для целей этого примера, предположим, что `TestFile` — это файл, который содержит некоторые данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1116">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-1117">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-1117">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-1118">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1118">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1119">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1119">Required.</span></span> <span data-ttu-id="c745f-1120">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1120">Any valid file number.</span></span> <span data-ttu-id="c745f-1121">Для получения следующего свободного номера файла следует использовать функцию <see langword="FreeFile" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1121">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="c745f-1122">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1122">Required.</span></span> <span data-ttu-id="c745f-1123">Выражение типа <see langword="String" />, которое указывает имя файла. Может включать имя каталога или папки, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-1123"><see langword="String" /> expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="c745f-1124">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1124">Required.</span></span> <span data-ttu-id="c745f-1125">Перечисление, определяющее режим файла: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> или <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1125">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="c745f-1126">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1126">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="c745f-1127">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1127">Optional.</span></span> <span data-ttu-id="c745f-1128">Перечисление, определяющие операции, разрешенные для работы с открытым файлом: <see langword="Read" />, <see langword="Write" /> или <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1128">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="c745f-1129">По умолчанию — <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1129">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="c745f-1130">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1130">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="c745f-1131">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1131">Optional.</span></span> <span data-ttu-id="c745f-1132">Перечисление операций, не разрешенных при работе с файлом, открытым другим процессом: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> и <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1132">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="c745f-1133">По умолчанию — <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1133">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="c745f-1134">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1134">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="c745f-1135">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1135">Optional.</span></span> <span data-ttu-id="c745f-1136">Число, не превышающее 32 767 (байт).</span><span class="sxs-lookup"><span data-stu-id="c745f-1136">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="c745f-1137">Для файлов, открытых с произвольным доступом, это значение является длиной записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-1137">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="c745f-1138">Для файлов с последовательным доступом — это число знаков в буфере.</span><span class="sxs-lookup"><span data-stu-id="c745f-1138">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="c745f-1139">Открывает файл для ввода или вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-1139">Opens a file for input or output.</span></span> <span data-ttu-id="c745f-1140">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1140">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="c745f-1141">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1141">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1142">`FileOpen` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-1142">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-1143">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-1143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-1144">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-1144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-1145">Перед выполнением любой операции ввода-вывода на нем необходимо открыть файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1145">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="c745f-1146">`FileOpen` выделяет буфер для ввода-вывода в файл и определяет режим доступа для использования с буфером.</span><span class="sxs-lookup"><span data-stu-id="c745f-1146">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-1147">При записи в файл приложения может потребоваться создать файл, если файл, к которому он пытается получить запись не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-1147">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="c745f-1148">Чтобы сделать это, ему разрешения для каталога, в котором должен быть создан файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1148">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="c745f-1149">Тем не менее если файл, заданный параметром `FileName` существует, приложению `Write` разрешение только на сам файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1149">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="c745f-1150">Везде, где возможно, в целях повышения безопасности, создать файл во время развертывания и предоставить `Write` разрешение на этот файл только, а не для всего каталога.</span><span class="sxs-lookup"><span data-stu-id="c745f-1150">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="c745f-1151">В целях повышения безопасности, записывайте данные в каталоги пользователей, а не в корневом каталоге или каталоге Program Files.</span><span class="sxs-lookup"><span data-stu-id="c745f-1151">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="c745f-1152">Канал, чтобы открыть можно найти с помощью `FreeFile()` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-1152">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-1153">`FileOpen` Функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления, который может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c745f-1153">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="c745f-1154">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1154">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1155">В этом примере показаны различные способы `FileOpen` функцию входные и выходные данные в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1155">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="c745f-1156">Следующий код открывает файл `TestFile` в `Input` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-1156">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="c745f-1157">Этот пример открывает файл в `Binary` режиме для записи только операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-1157">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="c745f-1158">В следующем примере открывается файл в `Random` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-1158">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="c745f-1159">Файл содержит записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1159">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="c745f-1160">Данный пример кода открывает файл в `Output` режиме; любой процесс может прочитать или записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1160">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="c745f-1161">Данный пример кода открывает файл в `Binary` режиме для чтения; другие процессы не удается прочитать файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1161">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1162">Отрицательная длина записи (не равная –1).</span><span class="sxs-lookup"><span data-stu-id="c745f-1162">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1163">Файл <paramref name="FileName" /> уже открыт, или <paramref name="FileName" /> является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="c745f-1163"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-1164">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1164">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1165">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1165">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-1166">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1166">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1167">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1167">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1168">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1168">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1169">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1169">Required.</span></span> <span data-ttu-id="c745f-1170">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1171">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1171">Required.</span></span> <span data-ttu-id="c745f-1172">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1172">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1173">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1173">Optional.</span></span> <span data-ttu-id="c745f-1174">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1174">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1175">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1175">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1176">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1176">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1177">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1177">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1178">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1178">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1179">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1179">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1180">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1180">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1181">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1181">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1182">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1182">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1183">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1183">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1184">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1184">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1185">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1185">Random Mode</span></span>  
 <span data-ttu-id="c745f-1186">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1186">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1187">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1187">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1188">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1188">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1189">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1189">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1190">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1190">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1191">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1191">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1192">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1192">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1193">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1193">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1194">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1194">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1195">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1195">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1196">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1196">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1197">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1197">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1198">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1198">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1199">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1199">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1200">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1200">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1201">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1201">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1202">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1202">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1203">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1203">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1204">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1204">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1205">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1205">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1206">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1206">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1207">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1207">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1208">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1208">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1209">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1210">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1210">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1211">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1211">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1212">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1212">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1213">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1213">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1214">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1214">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1215">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1215">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1216">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1216">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1217">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1217">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1218">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1218">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1219">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1219">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1220">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1220">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1221">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1221">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1222">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1222">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1223">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1223">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1224">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1224">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1225">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1225">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1226"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1226"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1227">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1227">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1228">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1228">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1229">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1229">Required.</span></span> <span data-ttu-id="c745f-1230">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1230">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1231">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1231">Required.</span></span> <span data-ttu-id="c745f-1232">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1232">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1233">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1233">Optional.</span></span> <span data-ttu-id="c745f-1234">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1234">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1235">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1235">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1236">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1236">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1237">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1237">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1238">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1238">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1239">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1239">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1240">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1240">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1241">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1241">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1242">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1242">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1243">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1243">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1244">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1244">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1245">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1245">Random Mode</span></span>  
 <span data-ttu-id="c745f-1246">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1246">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1247">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1247">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1248">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1248">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1249">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1249">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1250">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1250">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1251">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1251">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1252">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1252">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1253">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1253">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1254">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1254">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1255">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1255">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1256">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1256">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1257">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1257">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1258">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1258">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1259">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1259">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1260">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1260">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1261">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1261">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1262">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1262">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1263">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1263">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1264">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1264">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1265">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1265">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1266">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1266">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1267">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1267">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1268">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1268">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1269">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1270">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1270">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1271">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1271">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1272">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1272">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1273">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1273">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1274">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1274">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1275">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1275">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1276">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1276">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1277">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1277">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1278">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1278">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1279">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1279">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1280">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1280">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1281">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1281">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1282">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1282">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1283">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1283">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1284">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1284">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1285">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1285">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1286"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1286"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1287">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1287">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1288">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1288">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1289">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1289">Required.</span></span> <span data-ttu-id="c745f-1290">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1290">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1291">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1291">Required.</span></span> <span data-ttu-id="c745f-1292">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1292">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1293">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1293">Optional.</span></span> <span data-ttu-id="c745f-1294">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1294">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1295">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1295">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1296">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1296">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1297">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1297">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1298">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1298">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1299">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1299">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1300">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1300">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1301">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1301">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1302">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1302">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1303">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1303">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1304">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1304">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1305">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1305">Random Mode</span></span>  
 <span data-ttu-id="c745f-1306">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1307">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1307">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1308">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1309">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1310">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1310">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1311">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1311">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1312">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1312">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1313">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1313">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1314">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1314">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1315">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1316">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1316">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1317">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1317">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1318">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1318">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1319">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1319">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1320">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1320">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1321">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1321">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1322">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1322">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1323">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1323">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1324">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1324">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1325">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1325">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1326">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1326">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1327">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1327">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1328">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1328">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1329">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1330">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1330">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1331">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1331">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1332">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1332">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1333">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1333">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1334">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1335">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1336">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1337">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1337">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1338">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1338">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1339">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1339">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1340">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1340">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1341">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1341">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1342">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1342">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1343">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1343">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1344">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1344">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1345">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1345">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1346"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1346"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1347">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1347">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1348">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1348">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1349">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1349">Required.</span></span> <span data-ttu-id="c745f-1350">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1350">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1351">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1351">Required.</span></span> <span data-ttu-id="c745f-1352">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1352">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1353">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1353">Optional.</span></span> <span data-ttu-id="c745f-1354">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1354">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1355">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1355">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1356">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1356">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1357">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1357">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1358">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1358">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1359">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1359">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1360">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1360">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1361">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1361">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1362">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1362">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1363">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1363">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1364">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1364">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1365">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1365">Random Mode</span></span>  
 <span data-ttu-id="c745f-1366">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1366">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1367">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1367">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1368">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1368">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1369">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1369">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1370">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1370">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1371">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1371">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1372">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1372">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1373">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1373">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1374">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1374">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1375">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1375">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1376">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1376">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1377">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1378">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1378">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1379">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1379">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1380">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1380">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1381">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1381">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1382">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1382">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1383">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1383">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1384">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1384">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1385">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1385">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1386">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1387">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1387">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1388">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1388">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1389">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1390">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1390">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1391">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1391">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1392">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1392">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1393">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1393">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1394">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1394">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1395">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1395">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1396">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1396">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1397">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1397">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1398">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1398">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1399">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1399">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1400">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1400">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1401">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1401">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1402">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1402">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1403">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1403">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1404">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1404">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1405">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1405">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1406"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1406"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1407">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1407">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1408">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1408">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1409">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1409">Required.</span></span> <span data-ttu-id="c745f-1410">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1410">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1411">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1411">Required.</span></span> <span data-ttu-id="c745f-1412">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1412">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1413">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1413">Optional.</span></span> <span data-ttu-id="c745f-1414">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1414">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1415">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1415">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1416">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1417">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1417">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1418">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1418">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1419">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1419">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1420">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1420">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1421">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1421">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1422">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1422">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1423">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1423">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1424">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1424">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1425">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1425">Random Mode</span></span>  
 <span data-ttu-id="c745f-1426">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1426">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1427">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1427">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1428">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1428">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1429">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1429">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1430">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1430">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1431">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1431">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1432">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1432">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1433">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1433">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1434">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1434">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1435">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1435">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1436">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1436">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1437">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1438">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1438">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1439">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1439">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1440">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1440">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1441">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1441">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1442">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1442">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1443">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1443">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1444">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1444">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1445">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1445">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1446">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1446">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1447">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1447">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1448">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1448">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1449">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1450">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1450">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1451">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1451">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1452">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1452">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1453">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1453">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1454">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1454">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1455">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1455">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1456">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1456">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1457">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1457">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1458">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1458">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1459">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1459">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1460">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1460">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1461">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1461">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1462">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1462">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1463">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1463">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1464">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1464">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1465">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1465">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1466"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1466"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1467">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1467">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1468">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1468">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1469">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1469">Required.</span></span> <span data-ttu-id="c745f-1470">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1470">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1471">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1471">Required.</span></span> <span data-ttu-id="c745f-1472">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1472">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1473">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1473">Optional.</span></span> <span data-ttu-id="c745f-1474">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1474">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1475">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1475">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1476">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1476">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1477">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1477">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1478">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1478">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1479">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1479">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1480">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1480">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1481">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1481">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1482">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1482">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1483">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1483">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1484">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1484">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1485">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1485">Random Mode</span></span>  
 <span data-ttu-id="c745f-1486">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1486">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1487">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1487">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1488">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1488">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1489">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1489">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1490">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1490">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1491">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1491">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1492">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1492">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1493">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1493">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1494">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1494">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1495">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1495">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1496">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1496">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1497">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1497">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1498">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1498">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1499">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1499">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1500">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1500">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1501">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1501">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1502">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1502">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1503">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1503">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1504">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1504">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1505">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1505">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1506">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1506">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1507">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1507">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1508">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1508">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1509">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1510">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1510">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1511">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1511">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1512">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1512">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1513">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1513">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1514">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1514">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1515">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1515">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1516">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1516">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1517">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1517">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1518">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1518">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1519">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1519">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1520">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1520">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1521">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1521">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1522">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1522">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1523">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1523">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1524">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1524">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1525">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1525">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1526"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1526"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1527">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1527">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1528">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1528">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1529">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1529">Required.</span></span> <span data-ttu-id="c745f-1530">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1530">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1531">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1531">Required.</span></span> <span data-ttu-id="c745f-1532">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1532">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1533">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1533">Optional.</span></span> <span data-ttu-id="c745f-1534">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1535">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1535">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1536">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1537">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1538">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1539">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1540">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1541">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1542">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1543">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1544">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1545">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1545">Random Mode</span></span>  
 <span data-ttu-id="c745f-1546">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1547">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1548">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1549">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1550">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1551">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1552">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1553">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1554">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1555">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1556">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор`VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1557">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1558">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1559">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1560">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1561">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1562">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1563">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1564">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1565">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1566">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1567">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1568">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1569">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1570">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1571">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1572">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1573">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1573">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1574">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1575">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1576">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1577">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1578">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1579">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1580">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1581">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1582">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1583">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1584">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1585">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1586"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1586"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1587">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1587">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1588">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1588">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1589">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1589">Required.</span></span> <span data-ttu-id="c745f-1590">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1590">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1591">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1591">Required.</span></span> <span data-ttu-id="c745f-1592">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1592">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1593">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1593">Optional.</span></span> <span data-ttu-id="c745f-1594">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1594">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1595">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1595">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1596">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1596">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1597">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1597">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1598">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1598">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1599">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1599">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1600">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1600">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1601">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1601">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1602">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1602">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1603">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1603">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1604">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1604">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1605">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1605">Random Mode</span></span>  
 <span data-ttu-id="c745f-1606">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1606">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1607">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1607">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1608">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1608">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1609">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1609">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1610">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1610">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1611">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1611">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1612">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1612">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1613">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1613">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1614">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1614">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1615">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1615">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1616">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1616">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1617">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1617">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1618">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1618">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1619">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1619">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1620">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1620">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1621">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1621">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1622">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1622">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1623">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1623">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1624">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1625">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1626">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1626">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1627">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1628">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1628">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1629">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1630">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1630">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1631">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1631">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1632">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1632">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1633">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1633">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1634">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1634">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1635">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1635">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1636">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1636">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1637">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1637">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1638">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1638">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1639">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1639">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1640">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1640">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1641">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1641">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1642">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1642">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1643">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1643">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1644">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1644">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1645">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1645">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1646"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1646"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1647">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1647">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1648">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1648">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1649">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1649">Required.</span></span> <span data-ttu-id="c745f-1650">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1650">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1651">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1651">Required.</span></span> <span data-ttu-id="c745f-1652">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1652">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1653">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1653">Optional.</span></span> <span data-ttu-id="c745f-1654">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1654">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1655">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1655">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1656">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1656">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1657">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1657">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1658">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1658">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1659">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1659">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1660">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1660">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1661">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1661">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1662">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1662">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1663">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1663">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1664">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1664">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1665">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1665">Random Mode</span></span>  
 <span data-ttu-id="c745f-1666">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1666">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1667">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1667">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1668">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1668">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1669">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1669">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1670">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1670">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1671">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1671">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1672">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1672">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1673">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1673">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1674">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1674">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1675">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1676">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1676">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1677">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1677">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1678">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1678">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1679">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1679">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1680">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1680">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1681">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1681">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1682">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1682">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1683">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1683">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1684">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1684">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1685">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1685">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1686">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1686">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1687">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1687">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1688">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1688">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1689">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1690">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1690">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1691">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1691">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1692">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1692">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1693">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1693">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1694">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1694">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1695">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1695">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1696">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1696">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1697">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1697">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1698">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1698">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1699">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1699">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1700">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1700">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1701">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1701">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1702">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1702">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1703">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1703">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1704">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1704">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1705">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1705">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1706"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1706"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1707">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1707">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1708">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1709">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1709">Required.</span></span> <span data-ttu-id="c745f-1710">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1711">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1711">Required.</span></span> <span data-ttu-id="c745f-1712">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1712">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1713">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1713">Optional.</span></span> <span data-ttu-id="c745f-1714">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1715">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1715">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1716">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1717">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1718">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1718">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1719">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1719">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1720">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1721">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1721">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1722">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1722">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1723">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1723">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1724">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1724">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1725">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1725">Random Mode</span></span>  
 <span data-ttu-id="c745f-1726">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1726">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1727">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1727">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1728">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1728">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1729">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1729">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1730">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1730">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1731">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1731">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1732">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1732">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1733">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1733">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1734">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1734">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1735">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1735">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1736">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1736">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1737">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1737">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1738">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1738">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1739">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1739">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1740">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1740">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1741">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1741">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1742">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1742">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1743">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1743">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1744">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1744">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1745">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1745">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1746">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1747">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1747">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1748">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1748">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1749">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1750">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1750">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1751">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1752">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1752">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1753">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1753">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1754">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1754">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1755">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1755">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1756">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1756">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1757">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1757">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1758">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1758">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1759">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1759">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1760">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1760">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1761">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1761">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1762">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1762">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1763">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1763">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1764">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1764">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1765">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1765">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1766"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1766"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1767">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1767">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1768">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1768">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1769">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1769">Required.</span></span> <span data-ttu-id="c745f-1770">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1770">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1771">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1771">Required.</span></span> <span data-ttu-id="c745f-1772">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1772">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1773">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1773">Optional.</span></span> <span data-ttu-id="c745f-1774">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1774">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1775">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1775">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1776">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1777">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1778">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1778">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1779">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1779">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1780">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1780">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1781">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1781">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1782">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1782">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1783">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1783">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1784">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1784">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1785">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1785">Random Mode</span></span>  
 <span data-ttu-id="c745f-1786">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1786">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1787">Если длина записываемых данных меньше, чем длина, указанная в`RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1787">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1788">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1788">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1789">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1789">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1790">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1790">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1791">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1791">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1792">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1792">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1793">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1793">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1794">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1794">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1795">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1795">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1796">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1796">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1797">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1798">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1798">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1799">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1799">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1800">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1800">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1801">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1801">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1802">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1802">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1803">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1803">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1804">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1804">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1805">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1805">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1806">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1807">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1807">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1808">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1808">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1809">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1810">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1810">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1811">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1811">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1812">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1812">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1813">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1813">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1814">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1814">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1815">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1815">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1816">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1816">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1817">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1817">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1818">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1818">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1819">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1819">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1820">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1820">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1821">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1821">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1822">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1822">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1823">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1823">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1824">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1824">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1825">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1825">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1826"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1826"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1827">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1827">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1828">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1828">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1829">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1829">Required.</span></span> <span data-ttu-id="c745f-1830">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1830">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1831">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1831">Required.</span></span> <span data-ttu-id="c745f-1832">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1832">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1833">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1833">Optional.</span></span> <span data-ttu-id="c745f-1834">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1834">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-1835">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1835">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1836">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1836">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1837">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1837">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1838">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1838">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1839">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1839">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1840">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1840">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1841">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1841">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1842">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1842">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1843">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1843">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1844">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1844">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1845">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1845">Random Mode</span></span>  
 <span data-ttu-id="c745f-1846">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1846">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1847">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1847">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1848">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1848">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1849">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1849">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1850">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1850">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1851">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1851">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1852">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1852">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1853">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1853">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1854">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1854">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1855">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1855">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1856">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1856">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1857">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1857">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1858">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1858">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1859">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1859">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1860">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1860">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1861">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1861">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1862">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1862">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1863">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1863">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1864">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1865">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1866">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1866">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1867">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1868">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1868">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1869">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1870">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1870">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1871">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1871">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1872">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1872">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1873">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1873">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1874">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1874">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1875">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1875">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1876">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1876">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1877">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1877">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1878">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1878">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1879">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1879">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1880">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1880">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1881">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1881">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1882">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1882">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1883">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1883">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1884">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1884">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1885">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1885">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1886"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1886"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1887">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1887">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1888">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1888">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1889">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1889">Required.</span></span> <span data-ttu-id="c745f-1890">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1890">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1891">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1891">Required.</span></span> <span data-ttu-id="c745f-1892">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1892">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1893">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1893">Optional.</span></span> <span data-ttu-id="c745f-1894">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1894">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c745f-1895">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1895">Optional.</span></span> <span data-ttu-id="c745f-1896">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1896">Applies only when writing a string.</span></span> <span data-ttu-id="c745f-1897">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1897">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="c745f-1898">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1898">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c745f-1899">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1899">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1900">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1900">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1901">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1901">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1902">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1902">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1903">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1903">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1904">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1904">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1905">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1905">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1906">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1906">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1907">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1907">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1908">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1908">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1909">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1909">Random Mode</span></span>  
 <span data-ttu-id="c745f-1910">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1911">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1911">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1912">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1913">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1914">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1914">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1915">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1915">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1916">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1916">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1917">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1917">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1918">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1918">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1919">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1919">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1920">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1920">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1921">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1921">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1922">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1922">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1923">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1923">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1924">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1924">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1925">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1925">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1926">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1926">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1927">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1927">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1928">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1928">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1929">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1929">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1930">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1930">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1931">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1931">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1932">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1932">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-1933">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-1934">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-1934">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-1935">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1935">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-1936">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-1936">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-1937">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-1937">Binary Mode</span></span>  
 <span data-ttu-id="c745f-1938">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-1939">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-1939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-1940">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-1941">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-1941">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-1942">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1942">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-1943">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1943">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-1944">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-1944">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-1945">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-1945">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-1946">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-1946">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-1947">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-1947">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-1948">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1948">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-1949">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-1949">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-1950"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-1950"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-1951">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1951">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-1952">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-1952">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-1953">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1953">Required.</span></span> <span data-ttu-id="c745f-1954">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1954">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-1955">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-1955">Required.</span></span> <span data-ttu-id="c745f-1956">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1956">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-1957">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1957">Optional.</span></span> <span data-ttu-id="c745f-1958">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="c745f-1959">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1959">Optional.</span></span> <span data-ttu-id="c745f-1960">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1960">Applies only when writing an array.</span></span> <span data-ttu-id="c745f-1961">Указывает, нужно ли обрабатывать массив как динамический, и записывать ли дескриптор массива для строки, определяющий ее длину.</span><span class="sxs-lookup"><span data-stu-id="c745f-1961">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c745f-1962">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-1962">Optional.</span></span> <span data-ttu-id="c745f-1963">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1963">Applies only when writing a string.</span></span> <span data-ttu-id="c745f-1964">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1964">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="c745f-1965">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1965">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c745f-1966">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-1966">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c745f-1967">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1967">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c745f-1968">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-1968">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-1969">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-1969">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-1970">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1970">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c745f-1971">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-1971">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-1972">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c745f-1972">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c745f-1973">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-1973">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-1974">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1974">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-1975">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1975">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-1976">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-1976">Random Mode</span></span>  
 <span data-ttu-id="c745f-1977">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-1977">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-1978">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-1978">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-1979">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-1979">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-1980">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-1980">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-1981">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-1981">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c745f-1982">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1982">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c745f-1983">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1983">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c745f-1984">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-1984">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-1985">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-1985">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-1986">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1986">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-1987">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1987">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-1988">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1988">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-1989">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-1989">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-1990">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="c745f-1990">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c745f-1991">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c745f-1991">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c745f-1992">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-1992">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c745f-1993">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-1993">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c745f-1994">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1994">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c745f-1995">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-1995">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-1996">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-1996">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c745f-1997">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-1997">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-1998">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-1998">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c745f-1999">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-1999">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c745f-2000">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c745f-2001">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="c745f-2001">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c745f-2002">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-2002">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c745f-2003">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c745f-2003">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-2004">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-2004">Binary Mode</span></span>  
 <span data-ttu-id="c745f-2005">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c745f-2005">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c745f-2006">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="c745f-2006">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c745f-2007">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2007">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-2008">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-2008">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c745f-2009">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2009">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c745f-2010">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-2010">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c745f-2011">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2011">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c745f-2012">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2012">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c745f-2013">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c745f-2013">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c745f-2014">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2014">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2015">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2015">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c745f-2016">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2016">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-2017"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c745f-2017"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2018">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2018">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-2019">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2019">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2020">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2020">Required.</span></span> <span data-ttu-id="c745f-2021">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2021">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2022">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2022">Required.</span></span> <span data-ttu-id="c745f-2023">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-2023">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c745f-2024">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2024">Optional.</span></span> <span data-ttu-id="c745f-2025">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c745f-2025">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c745f-2026">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-2026">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="c745f-2027">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2027">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="c745f-2028">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2028">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2029">`FilePutObject` Функции используется вместо `FilePut` во избежание неоднозначности во время компиляции, если тип `Object` передается вместо другого типа, например `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-2029">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="c745f-2030">`FilePutObject` Записывает и читает дескрипторы, описывающие объект.</span><span class="sxs-lookup"><span data-stu-id="c745f-2030">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="c745f-2031">Если вы собираетесь записать `Variant` типа, `FilePutObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2031">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="c745f-2032">Если вы сомневаетесь, если вы используете объект для второго параметра, мы рекомендуем всегда использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2032">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c745f-2033">`FilePutObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c745f-2033">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-2034">Данные, записанные с использованием `FilePutObject`, обычно считываются с помощью `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2034">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c745f-2035">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-2035">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c745f-2036">Если опустить `RecordNumber`, `FilePutObject` записывает Далее записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или записи или единственного байта, на которые указывают последнего `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="c745f-2036">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="c745f-2037">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c745f-2037">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c745f-2038">`FilePutObject` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2038">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c745f-2039">При использовании `StringIsFixedLength`  =  `True` с `FilePutObject`, что необходимо сделать то же самое с `FileGetObject`, а также необходимо убедиться в том, что строка инициализируется длина ожидалось.</span><span class="sxs-lookup"><span data-stu-id="c745f-2039">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c745f-2040">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c745f-2040">Random Mode</span></span>  
 <span data-ttu-id="c745f-2041">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c745f-2041">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c745f-2042">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePutObject` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c745f-2042">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c745f-2043">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2043">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c745f-2044">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2044">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c745f-2045">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="c745f-2045">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="c745f-2046">Если записываемая переменная является объектом, содержащим числовой тип, `FilePutObject` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c745f-2046">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c745f-2047">Например, при написании объект, содержащий целое число, `FilePutObject` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2047">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c745f-2048">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2048">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c745f-2049">Если записываемая переменная — это объект, который содержит строку, `FilePutObject` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2049">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c745f-2050">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2050">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c745f-2051">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2051">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c745f-2052">Если записываемая переменная является массивом, а затем записей длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c745f-2052">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c745f-2053">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c745f-2053">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c745f-2054">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c745f-2054">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c745f-2055">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c745f-2055">Binary Mode</span></span>  
 <span data-ttu-id="c745f-2056">Для открытия файлов в `Binary` режим, все `Random` применяются правила режиме, за исключением:</span><span class="sxs-lookup"><span data-stu-id="c745f-2056">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="c745f-2057">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2057">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c745f-2058">`FilePutObject` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c745f-2058">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2059">В этом примере используется `FilePutObject` функцию для записи строки в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2059">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-2060">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2060">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2061">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2061">Required.</span></span> <span data-ttu-id="c745f-2062">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2062">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="c745f-2063">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2063">Required.</span></span> <span data-ttu-id="c745f-2064">Числовое выражение в диапазоне от 0 до 255 включительно, которое показывает, сколько знаков появится в строке перед началом новой строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2064">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="c745f-2065">Если параметр <paramref name="RecordWidth" /> равен 0, ограничения на длину строки не устанавливаются.</span><span class="sxs-lookup"><span data-stu-id="c745f-2065">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="c745f-2066">Значение по умолчанию для <paramref name="RecordWidth" /> равно 0.</span><span class="sxs-lookup"><span data-stu-id="c745f-2066">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="c745f-2067">Присваивает ширину строки вывода в файле, открытом функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2067">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c745f-2068">В этом примере используется `FileWidth` функцию для задания ширины строки вывода для файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2068">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2069">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2069">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2070">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2070">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c745f-2071">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2071">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="c745f-2072">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2072">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2073">Используйте `FreeFile` для номера файла, который уже не используется.</span><span class="sxs-lookup"><span data-stu-id="c745f-2073">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2074">В этом примере используется `FreeFile` функцию для возврата следующего свободного номера файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2074">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="c745f-2075">Для вывода в цикле открывается пять файлов, и некоторые примеры данных записывается для каждого.</span><span class="sxs-lookup"><span data-stu-id="c745f-2075">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2076">Используется больше 255 файлов.</span><span class="sxs-lookup"><span data-stu-id="c745f-2076">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-2077">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2077">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c745f-2078">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2078">Required.</span></span> <span data-ttu-id="c745f-2079">Выражение типа <see langword="String" />, определяющее имя файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2079"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="c745f-2080">Выражение <paramref name="PathName" /> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2080"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c745f-2081">Возвращает значение <see langword="FileAttribute" />, представляющее атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2081">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="c745f-2082">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2082">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="c745f-2083">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2083">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-2084">Значение, возвращаемое функцией <see langword="GetAttr" />, является суммой следующих значений перечисления:</span><span class="sxs-lookup"><span data-stu-id="c745f-2084">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="c745f-2085">Значение</span><span class="sxs-lookup"><span data-stu-id="c745f-2085">Value</span></span> 
 </term><description> <span data-ttu-id="c745f-2086">Константа</span><span class="sxs-lookup"><span data-stu-id="c745f-2086">Constant</span></span> 
 </description><description> <span data-ttu-id="c745f-2087">Описание:</span><span class="sxs-lookup"><span data-stu-id="c745f-2087">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="c745f-2088">Нормальный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2088">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="c745f-2089">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-2089">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="c745f-2090">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="c745f-2090">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="c745f-2091">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2091">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="c745f-2092">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2092">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="c745f-2093">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c745f-2093">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="c745f-2094">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c745f-2094">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="c745f-2095">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-2095">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="c745f-2096">Эти имена можно использовать в любом месте кода вместо самих значений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2096">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2097">Чтобы определить, какие атрибуты имеют значения, используйте `And` оператор для выполнения побитовое сравнение значения, возвращенного `GetAttr` функции и значения атрибута файла необходимо.</span><span class="sxs-lookup"><span data-stu-id="c745f-2097">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="c745f-2098">Если результат не равен нулю, этот атрибут имеет значение для указанного файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2098">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="c745f-2099">Например, возвращаемое значение из следующих `And` выражение является нуль, если `Archive` атрибут не задан:</span><span class="sxs-lookup"><span data-stu-id="c745f-2099">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="c745f-2100">Ненулевое значение возвращается в том случае, если `Archive` атрибут имеет значение.</span><span class="sxs-lookup"><span data-stu-id="c745f-2100">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2101">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2101">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2102">Параметр <paramref name="Pathname" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="c745f-2102"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-2103">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2103">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="c745f-2104">Оператор And (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2104">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2105">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2105">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-2106">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2106">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2107">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2107">Required.</span></span> <span data-ttu-id="c745f-2108">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2108">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2109">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2109">Required.</span></span> <span data-ttu-id="c745f-2110">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2110">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2111">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2111">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2112">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2112">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2113">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2113">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2114">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2114">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2115">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2115">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2116">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2116">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2117">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2117">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2118">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2118">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2119">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2119">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2120">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2120">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2121">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2121">Data</span></span>|<span data-ttu-id="c745f-2122">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2122">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2123">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2123">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2124">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2124">Empty</span></span>|  
|<span data-ttu-id="c745f-2125">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2125">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2126">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2126">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2127">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2127">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2128">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2128">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2129">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2129">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2130">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2130">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2131">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2131">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2132">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2132">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2133">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2133">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2134">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2134">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2135">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2135">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2136">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2136">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2137">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2137">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2138">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2138">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2139">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2139">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2140">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2140">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2141">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2141">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2142">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2142">Required.</span></span> <span data-ttu-id="c745f-2143">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2143">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2144">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2144">Required.</span></span> <span data-ttu-id="c745f-2145">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2145">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2146">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2146">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2147">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2147">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2148">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2148">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2149">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2149">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2150">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2150">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2151">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2151">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2152">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2152">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2153">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2153">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2154">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2154">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2155">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2155">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2156">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2156">Data</span></span>|<span data-ttu-id="c745f-2157">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2157">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2158">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2158">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2159">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2159">Empty</span></span>|  
|<span data-ttu-id="c745f-2160">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2160">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2161">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2161">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2162">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2162">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2163">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2163">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2164">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2164">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2165">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2165">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2166">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2166">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2167">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2167">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2168">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2168">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2169">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2169">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2170">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2170">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2171">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2171">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2172">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2172">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2173">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2173">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2174">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2174">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2175">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2175">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2176">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2176">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2177">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2177">Required.</span></span> <span data-ttu-id="c745f-2178">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2178">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2179">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2179">Required.</span></span> <span data-ttu-id="c745f-2180">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2180">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2181">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2181">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2182">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2182">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2183">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2183">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2184">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2184">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2185">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2185">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2186">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2186">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2187">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2187">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2188">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2188">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2189">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2189">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2190">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2190">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2191">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2191">Data</span></span>|<span data-ttu-id="c745f-2192">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2192">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2193">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2193">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2194">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2194">Empty</span></span>|  
|<span data-ttu-id="c745f-2195">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2195">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2196">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2196">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2197">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2197">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2198">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2198">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2199">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2199">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2200">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2200">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2201">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2201">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2202">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2202">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2203">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2203">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2204">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2204">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2205">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2205">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2206">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2206">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2207">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2207">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2208">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2208">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2209">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2209">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2210">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2210">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2211">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2211">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2212">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2212">Required.</span></span> <span data-ttu-id="c745f-2213">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2213">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2214">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2214">Required.</span></span> <span data-ttu-id="c745f-2215">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2215">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2216">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2216">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2217">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2217">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2218">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2218">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2219">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2219">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2220">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2220">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2221">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2221">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2222">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2222">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2223">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2223">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2224">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2224">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2225">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2225">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2226">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2226">Data</span></span>|<span data-ttu-id="c745f-2227">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2227">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2228">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2228">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2229">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2229">Empty</span></span>|  
|<span data-ttu-id="c745f-2230">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2230">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2231">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2231">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2232">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2232">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2233">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2233">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2234">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2234">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2235">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2235">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2236">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2236">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2237">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2237">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2238">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2238">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2239">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2239">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2240">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2240">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2241">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2241">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2242">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2242">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2243">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2243">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2244">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2244">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2245">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2245">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2246">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2246">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2247">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2247">Required.</span></span> <span data-ttu-id="c745f-2248">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2248">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2249">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2249">Required.</span></span> <span data-ttu-id="c745f-2250">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2250">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2251">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2251">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2252">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2252">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2253">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2253">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2254">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2254">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2255">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2255">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2256">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2256">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2257">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2257">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2258">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2258">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2259">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2259">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2260">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2260">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2261">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2261">Data</span></span>|<span data-ttu-id="c745f-2262">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2262">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2263">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2263">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2264">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2264">Empty</span></span>|  
|<span data-ttu-id="c745f-2265">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2265">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2266">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2266">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2267">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2267">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2268">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2268">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2269">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2269">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2270">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2270">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2271">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2271">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2272">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2272">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2273">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2273">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2274">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2274">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2275">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2275">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2276">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2276">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2277">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2277">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2278">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2278">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2279">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2279">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2280">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2280">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2281">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2281">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2282">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2282">Required.</span></span> <span data-ttu-id="c745f-2283">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2283">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2284">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2284">Required.</span></span> <span data-ttu-id="c745f-2285">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2285">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2286">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2286">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2287">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2287">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2288">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2288">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2289">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2289">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2290">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2290">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2291">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2291">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2292">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2292">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2293">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2293">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2294">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2294">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2295">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2295">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2296">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2296">Data</span></span>|<span data-ttu-id="c745f-2297">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2297">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2298">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2298">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2299">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2299">Empty</span></span>|  
|<span data-ttu-id="c745f-2300">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2300">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2301">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2301">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2302">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2302">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2303">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2303">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2304">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2304">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2305">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2305">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2306">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2306">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2307">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2307">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2308">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2308">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2309">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2309">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2310">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2310">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2311">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2311">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2312">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2312">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2313">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2313">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2314">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2314">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2315">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2315">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2316">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2316">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2317">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2317">Required.</span></span> <span data-ttu-id="c745f-2318">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2318">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2319">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2319">Required.</span></span> <span data-ttu-id="c745f-2320">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2320">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2321">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2321">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2322">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2322">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2323">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2323">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2324">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2324">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2325">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2325">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2326">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2326">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2327">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2327">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2328">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2328">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2329">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2329">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2330">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2330">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2331">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2331">Data</span></span>|<span data-ttu-id="c745f-2332">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2332">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2333">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2333">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2334">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2334">Empty</span></span>|  
|<span data-ttu-id="c745f-2335">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2335">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2336">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2336">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2337">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2337">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2338">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2338">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2339">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2339">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2340">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2340">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2341">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2341">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2342">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2342">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2343">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2343">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2344">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2344">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2345">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2345">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2346">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2346">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2347">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2347">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2348">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2348">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2349">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2349">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2350">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2350">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2351">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2351">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2352">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2352">Required.</span></span> <span data-ttu-id="c745f-2353">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2354">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2354">Required.</span></span> <span data-ttu-id="c745f-2355">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2355">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2356">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2356">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2357">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2357">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2358">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2358">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2359">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2359">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2360">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2360">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2361">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2361">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2362">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2362">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2363">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2363">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2364">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2364">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2365">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2365">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2366">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2366">Data</span></span>|<span data-ttu-id="c745f-2367">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2367">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2368">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2368">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2369">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2369">Empty</span></span>|  
|<span data-ttu-id="c745f-2370">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2370">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2371">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2371">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2372">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2372">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2373">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2373">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2374">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2374">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2375">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2375">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2376">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2376">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2377">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2377">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2378">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2378">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2379">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2379">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2380">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2380">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2381">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2381">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2382">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2382">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2383">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2383">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2384">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2384">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2385">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2385">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2386">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2386">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2387">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2387">Required.</span></span> <span data-ttu-id="c745f-2388">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2388">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2389">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2389">Required.</span></span> <span data-ttu-id="c745f-2390">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2390">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2391">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2391">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2392">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2392">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2393">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2393">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2394">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2394">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2395">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2395">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2396">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2396">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2397">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2397">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2398">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2398">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2399">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2399">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2400">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2400">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2401">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2401">Data</span></span>|<span data-ttu-id="c745f-2402">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2402">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2403">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2403">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2404">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2404">Empty</span></span>|  
|<span data-ttu-id="c745f-2405">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2405">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2406">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2406">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2407">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2407">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2408">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2408">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2409">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2409">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2410">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2410">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2411">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2411">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2412">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2412">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2413">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2413">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2414">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2414">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2415">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2415">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2416">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2416">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2417">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2417">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2418">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2418">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2419">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2419">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2420">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2420">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2421">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2421">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2422">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2422">Required.</span></span> <span data-ttu-id="c745f-2423">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2423">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2424">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2424">Required.</span></span> <span data-ttu-id="c745f-2425">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2425">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2426">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2426">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2427">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2427">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2428">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2428">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2429">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2429">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2430">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2430">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2431">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2431">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2432">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2432">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2433">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2433">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2434">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2434">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2435">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2435">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2436">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2436">Data</span></span>|<span data-ttu-id="c745f-2437">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2437">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2438">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2438">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2439">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2439">Empty</span></span>|  
|<span data-ttu-id="c745f-2440">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2440">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2441">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2441">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2442">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2442">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2443">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2443">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2444">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2444">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2445">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2445">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2446">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2446">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2447">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2447">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2448">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2448">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2449">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2449">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2450">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2450">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2451">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2451">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2452">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2452">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2453">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2453">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2454">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2454">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2455">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2455">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2456">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2456">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2457">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2457">Required.</span></span> <span data-ttu-id="c745f-2458">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2458">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2459">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2459">Required.</span></span> <span data-ttu-id="c745f-2460">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2460">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2461">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2461">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2462">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2462">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2463">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2463">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2464">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2464">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2465">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2465">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2466">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2466">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2467">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2467">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2468">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2468">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2469">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2469">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2470">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2470">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2471">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2471">Data</span></span>|<span data-ttu-id="c745f-2472">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2472">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2473">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2473">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2474">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2474">Empty</span></span>|  
|<span data-ttu-id="c745f-2475">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2475">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2476">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2476">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2477">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2477">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2478">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2478">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2479">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2479">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2480">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2480">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2481">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2481">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2482">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2482">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2483">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2483">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2484">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2484">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2485">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2485">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2486">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2486">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2487">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2487">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2488">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2488">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2489">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2489">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2490">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2490">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2491">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2491">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2492">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2492">Required.</span></span> <span data-ttu-id="c745f-2493">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2493">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c745f-2494">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2494">Required.</span></span> <span data-ttu-id="c745f-2495">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2495">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c745f-2496">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c745f-2496">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2497">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2497">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2498">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2498">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2499">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2499">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2500">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2500">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c745f-2501">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2501">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2502">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2502">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2503">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c745f-2503">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c745f-2504">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2504">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c745f-2505">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2505">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c745f-2506">Данные</span><span class="sxs-lookup"><span data-stu-id="c745f-2506">Data</span></span>|<span data-ttu-id="c745f-2507">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="c745f-2507">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c745f-2508">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="c745f-2508">Delimiting comma or blank line</span></span>|<span data-ttu-id="c745f-2509">Empty</span><span class="sxs-lookup"><span data-stu-id="c745f-2509">Empty</span></span>|  
|<span data-ttu-id="c745f-2510">NULL #</span><span class="sxs-lookup"><span data-stu-id="c745f-2510">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c745f-2511">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c745f-2511">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c745f-2512">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c745f-2512">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c745f-2513">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c745f-2513">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c745f-2514">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c745f-2514">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c745f-2515">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c745f-2515">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c745f-2516">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2516">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2517">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="c745f-2517">The `Input` function is not localized.</span></span> <span data-ttu-id="c745f-2518">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c745f-2518">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2519">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2519">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2520">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2520">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2521">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c745f-2521">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c745f-2522">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c745f-2522">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2523">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2523">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2524">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2524">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2525">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2525">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2526">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2526">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2527">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2527">Required.</span></span> <span data-ttu-id="c745f-2528">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2528">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="c745f-2529">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2529">Required.</span></span> <span data-ttu-id="c745f-2530">Любое допустимое числовое выражение, указывающее число знаков, которые надо прочитать.</span><span class="sxs-lookup"><span data-stu-id="c745f-2530">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="c745f-2531">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2531">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="c745f-2532">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2532">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="c745f-2533">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2533">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-2534">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="c745f-2535">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2536">`InputString` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2536">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2537">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2537">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2538">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2538">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2539">Данные, считанные с `InputString` функции, обычно записываются в файл с помощью `Print` или `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2539">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="c745f-2540">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c745f-2540">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="c745f-2541">В отличие от `Input` функции `InputString` функция возвращает все символы, которые считывает.</span><span class="sxs-lookup"><span data-stu-id="c745f-2541">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="c745f-2542">Сюда входят запятые, символы возврата каретки, перевода строки, кавычки и пробелы.</span><span class="sxs-lookup"><span data-stu-id="c745f-2542">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="c745f-2543">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `InputString` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2543">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="c745f-2544">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с помощью `InputString`, или использовать `FileGet` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2544">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2545">При считывании из файла решения по обеспечению безопасности содержимое файла, в зависимости от расширения имени файла не следует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2545">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c745f-2546">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-2546">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2547">В этом примере используется `InputString` функции считывают один символ за раз из файла и распечатать его, чтобы `Output` окна.</span><span class="sxs-lookup"><span data-stu-id="c745f-2547">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="c745f-2548">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2548">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2549"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2549"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-2550"><paramref name="CharCount" />&lt; 0 или &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="c745f-2550"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2551">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2551">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2552">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2552">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2553">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2553">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c745f-2554">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2554">Required.</span></span> <span data-ttu-id="c745f-2555">Выражение типа <see langword="String" />, определяющее один или несколько файлов, которые должны быть удалены.</span><span class="sxs-lookup"><span data-stu-id="c745f-2555"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="c745f-2556">Выражение <paramref name="PathName" /> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2556"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c745f-2557">Удаляет файлы с диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2557">Deletes files from a disk.</span></span> <span data-ttu-id="c745f-2558">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2558">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="c745f-2559">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2559">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2560">`Kill` поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="c745f-2560">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c745f-2561">**Примечание по безопасности** для выполнения, `Kill` функции требуется `Read` и `PathDiscovery` флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2561">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c745f-2562">Дополнительные сведения см. в разделе <xref:System.Security.SecurityException> [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="c745f-2562">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2563">В этом примере используется `Kill` функции, чтобы удалить файл с диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2563">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2564">Удаляемые файлы открыты.</span><span class="sxs-lookup"><span data-stu-id="c745f-2564">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-2565">Удаляемые файлы не найдены.</span><span class="sxs-lookup"><span data-stu-id="c745f-2565">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c745f-2566">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="c745f-2566">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2567">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2567">Required.</span></span> <span data-ttu-id="c745f-2568">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2568">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-2569">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2569">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="c745f-2570">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2570">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2571">`LineInput` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2571">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2572">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2572">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2573">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2573">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2574">Данные, считанные с `LineInput` , обычно записываются в файл с помощью `Print`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2574">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2575">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2575">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c745f-2576">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-2576">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="c745f-2577">`LineInput` Функция считывает из файла одного символа во время, пока встретится символ возврата каретки (`Chr(13)`) или каретки и перевода строки веб-канал (`Chr(13) + Chr(10)`) последовательности.</span><span class="sxs-lookup"><span data-stu-id="c745f-2577">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="c745f-2578">Веб-канала последовательностей каретки и перевода строки, добавляемой в конце символьной строки, вместо пропускаются.</span><span class="sxs-lookup"><span data-stu-id="c745f-2578">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2579">Чтение из файла с помощью `LineInput` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2579">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2580">В этом примере используется `LineInput` функция для чтения строки из последовательного файла и присвоить его переменной.</span><span class="sxs-lookup"><span data-stu-id="c745f-2580">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="c745f-2581">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2581">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="c745f-2582">Достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2582">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2583"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2583"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2584">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2584">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2585">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2585">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2586">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2586">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2587">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2587">Required.</span></span> <span data-ttu-id="c745f-2588">Любой допустимый номер файла типа <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2588">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="c745f-2589">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию для ввода-вывода в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="c745f-2589">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="c745f-2590">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию для ввода-вывода в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="c745f-2590">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2591">`Loc` Функция отсчитываются от нуля, использовании ее для получения первого байта в файле возвратит значение 0.</span><span class="sxs-lookup"><span data-stu-id="c745f-2591">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="c745f-2592">`Loc` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2592">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2593">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2593">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2594">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2594">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2595">Ниже описаны возвращаемое значение для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2595">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="c745f-2596">Режим</span><span class="sxs-lookup"><span data-stu-id="c745f-2596">Mode</span></span>|<span data-ttu-id="c745f-2597">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="c745f-2597">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c745f-2598">Номер последней записи, чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2598">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="c745f-2599">Текущая позиция байта в файле, деленная на 128.</span><span class="sxs-lookup"><span data-stu-id="c745f-2599">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="c745f-2600">Тем не менее, возвращаются сведения по `Loc` для последовательных файлов не используется и не требуется.</span><span class="sxs-lookup"><span data-stu-id="c745f-2600">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="c745f-2601">Позиция последнего байта чтения или записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2601">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2602">В этом примере используется `Loc` функция, возвращающая текущую позицию чтения/записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2602">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="c745f-2603">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2603">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2604">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2604">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-2605">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2605">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2606">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2606">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2607">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2607">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2608">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2608">Required.</span></span> <span data-ttu-id="c745f-2609">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2609">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-2610">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2610">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2611">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2611">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2612">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2612">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2613">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2613">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c745f-2614">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c745f-2614">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c745f-2615">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2615">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c745f-2616">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2616">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c745f-2617">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c745f-2617">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c745f-2618">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2618">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2619">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2619">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c745f-2620">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2620">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2621">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2621">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2622">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2622">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2623">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2623">Required.</span></span> <span data-ttu-id="c745f-2624">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2624">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="c745f-2625">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2625">Optional.</span></span> <span data-ttu-id="c745f-2626">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2626">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="c745f-2627">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2627">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2628">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2629">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2630">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2630">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c745f-2631">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c745f-2631">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c745f-2632">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2632">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c745f-2633">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2633">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c745f-2634">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c745f-2634">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c745f-2635">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2635">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2636">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2636">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c745f-2637">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2637">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2638">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2638">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2639">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2639">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2640">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2640">Required.</span></span> <span data-ttu-id="c745f-2641">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2641">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="c745f-2642">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2642">Optional.</span></span> <span data-ttu-id="c745f-2643">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="c745f-2643">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="c745f-2644">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2644">Optional.</span></span> <span data-ttu-id="c745f-2645">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="c745f-2645">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="c745f-2646">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2646">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2647">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2647">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2648">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2648">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2649">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2649">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c745f-2650">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c745f-2650">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c745f-2651">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2651">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c745f-2652">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2652">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c745f-2653">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c745f-2653">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c745f-2654">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2654">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2655">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2655">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c745f-2656">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2656">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2657">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2657">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2658">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2658">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2659">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2659">Required.</span></span> <span data-ttu-id="c745f-2660">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2660">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-2661">Возвращает значение типа <see langword="Long" />, представляющее размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2661">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-2662">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="c745f-2663">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2663">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-2664">Возвращает значение типа <see langword="Long" />, представляющее размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2664">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-2665">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2666">Используйте `FileLen` функции для получения длины файла, не являющийся открытым.</span><span class="sxs-lookup"><span data-stu-id="c745f-2666">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2667">В этом примере используется `LOF` функцию, чтобы определить размер открытого файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2667">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="c745f-2668">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий данные образца.</span><span class="sxs-lookup"><span data-stu-id="c745f-2668">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2669">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2669">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-2670">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2670">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-2671">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2671">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="c745f-2672">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2672">Required.</span></span> <span data-ttu-id="c745f-2673">Выражение типа <see langword="String" />, задающее создаваемый каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-2673"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="c745f-2674">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2674">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="c745f-2675">Если диск не указан, <see langword="MkDir" /> создает каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-2675">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="c745f-2676">Создает каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-2676">Creates a new directory.</span></span> <span data-ttu-id="c745f-2677">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="c745f-2678">Для получения дополнительной информации см. <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2678">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2679">Эта функция создает новый каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-2679">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2680">В этом примере используется `MkDir` функции для создания каталога.</span><span class="sxs-lookup"><span data-stu-id="c745f-2680">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="c745f-2681">Если диск не указан, новый каталог создается на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-2681">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-2682"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-2682"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c745f-2683">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="c745f-2683">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2684">Каталог уже существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2684">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="c745f-2685">Практическое руководство. Создание каталога в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2685">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2686">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2686">Required.</span></span> <span data-ttu-id="c745f-2687">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2687">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c745f-2688">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2688">Optional.</span></span> <span data-ttu-id="c745f-2689">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2689">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="c745f-2690">Параметры аргумента <paramref name="Output" />:</span><span class="sxs-lookup"><span data-stu-id="c745f-2690">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="c745f-2691"><see langword="T:System.IO.IOException" />: Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2691"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="c745f-2692"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2692"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="c745f-2693">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2693">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2694">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2694">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2695">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2695">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2696">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2696">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2697">`Print` не включает символ перевода строки в конце строки; Тем не менее `PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2697">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="c745f-2698">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2698">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="c745f-2699">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="c745f-2699">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="c745f-2700">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="c745f-2700">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="c745f-2701">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-2701">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="c745f-2702">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2702">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="c745f-2703">Дата данные записываются в файл с помощью стандартных краткий формат, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="c745f-2703">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="c745f-2704">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2704">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="c745f-2705">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-2705">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c745f-2706">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2706">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="c745f-2707">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2707">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="c745f-2708">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2708">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="c745f-2709">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c745f-2709">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="c745f-2710">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="c745f-2710">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="c745f-2711">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2711">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2712">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2712">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2713">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2713">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2714">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2714">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2715">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2715">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2716">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2716">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2717">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2717">Required.</span></span> <span data-ttu-id="c745f-2718">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2718">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c745f-2719">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2719">Optional.</span></span> <span data-ttu-id="c745f-2720">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2720">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="c745f-2721">Параметры аргумента <paramref name="Output" />:</span><span class="sxs-lookup"><span data-stu-id="c745f-2721">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="c745f-2722"><see langword="T:System.IO.IOException" />: Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2722"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="c745f-2723"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2723"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="c745f-2724">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2724">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2725">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2725">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2726">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2726">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2727">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2727">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2728">`Print` не включает символ перевода строки в конце строки; Тем не менее`PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2728">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="c745f-2729">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2729">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="c745f-2730">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="c745f-2730">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="c745f-2731">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="c745f-2731">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="c745f-2732">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-2732">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="c745f-2733">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2733">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="c745f-2734">Дата данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="c745f-2734">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="c745f-2735">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2735">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="c745f-2736">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-2736">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c745f-2737">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2737">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="c745f-2738">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2738">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="c745f-2739">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2739">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="c745f-2740">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c745f-2740">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="c745f-2741">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="c745f-2741">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="c745f-2742">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-2742">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-2743">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2743">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2744">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2744">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2745">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2745">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-2746">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2746">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-2747">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2747">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="c745f-2748">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2748">Required.</span></span> <span data-ttu-id="c745f-2749">Выражение типа <see langword="String" />, указывающее имя и местонахождение существующего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2749"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="c745f-2750">Выражение <paramref name="OldPath" /> может содержать имя каталога и метку диска для файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2750"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="c745f-2751">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2751">Required.</span></span> <span data-ttu-id="c745f-2752">Выражение типа <see langword="String" />, указывающее новое имя и местонахождение файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2752"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="c745f-2753">Параметр <paramref name="NewPath" /> может содержать имя каталога и метку диска для нового местонахождения файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2753"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="c745f-2754">Имя файла, заданного параметром <paramref name="NewPath" /> не может быть именем существующего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2754">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="c745f-2755">Переименовывает файл или каталог на диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-2755">Renames a disk file or directory.</span></span> <span data-ttu-id="c745f-2756">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2756">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="c745f-2757">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2757">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2758">`Rename` Функция переименовывает файл и перемещает ее в другой каталог, если это необходимо.</span><span class="sxs-lookup"><span data-stu-id="c745f-2758">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="c745f-2759">`Rename` Функции можно переместить файл на дисках, но его можно только переименовать существующий каталог, если оба `NewPath` и `OldPath` расположены на одном диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-2759">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="c745f-2760">`Rename` не удается создать новый файл или каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-2760">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="c745f-2761">С помощью `Rename` функции к открытому файлу выводит сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2761">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="c745f-2762">Необходимо закрыть файл перед его переименованием.</span><span class="sxs-lookup"><span data-stu-id="c745f-2762">You must close an open file before renaming it.</span></span> <span data-ttu-id="c745f-2763">`Rename` аргументы не могут содержать знак (\*) и подстановочные знаки одного знака (?).</span><span class="sxs-lookup"><span data-stu-id="c745f-2763">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c745f-2764">При использовании `Rename` чтобы скопировать файл из незащищенное место в защищенном месте, в файле сохраняются менее ограниченные права.</span><span class="sxs-lookup"><span data-stu-id="c745f-2764">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="c745f-2765">Проверьте, чтобы убедиться в том, что вы не представляете возможную угрозу безопасности.</span><span class="sxs-lookup"><span data-stu-id="c745f-2765">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2766">В этом примере используется `Rename` функции, чтобы переименовать файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2766">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="c745f-2767">Для целей этого примера предполагается, что каталоги, которые указаны в уже существуют.</span><span class="sxs-lookup"><span data-stu-id="c745f-2767">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-2768">Недопустимый путь.</span><span class="sxs-lookup"><span data-stu-id="c745f-2768">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-2769">Файл <paramref name="OldPath" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2769"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2770">Нельзя переименовать с указанием другого диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2770">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="c745f-2771">Практическое руководство. Переименование файла в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2771">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c745f-2772">Закрывает все файлы на диске, открытые функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2772">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-2773">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="c745f-2774">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2775">`Reset` Функция закрывает все активные файлы, открываемые `FileOpen` функцию и делает то же самое `FileClose()` без параметров.</span><span class="sxs-lookup"><span data-stu-id="c745f-2775">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2776">В этом примере используется `Reset` функцию, чтобы закрыть все открытые файлы и записи на диск содержимое всех буферов файлов.</span><span class="sxs-lookup"><span data-stu-id="c745f-2776">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="c745f-2777">Обратите внимание на использование `Object` переменной `FileNumber` как строка и номером.</span><span class="sxs-lookup"><span data-stu-id="c745f-2777">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="c745f-2778">Оператор End</span><span class="sxs-lookup"><span data-stu-id="c745f-2778">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="c745f-2779">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2779">Required.</span></span> <span data-ttu-id="c745f-2780">Выражение типа <see langword="String" />, определяющее удаляемый каталог или папку.</span><span class="sxs-lookup"><span data-stu-id="c745f-2780"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="c745f-2781">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="c745f-2781"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="c745f-2782">Если диск не указан, <see langword="RmDir" /> удаляет каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c745f-2782">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="c745f-2783">Удаляет существующий каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-2783">Removes an existing directory.</span></span> <span data-ttu-id="c745f-2784">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2784">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="c745f-2785">Дополнительные сведения см. в разделе <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2785">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2786">Произошла ошибка при попытке использовать `RmDir` на каталог, содержащий файлы.</span><span class="sxs-lookup"><span data-stu-id="c745f-2786">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="c745f-2787">Используйте `Kill` функции, чтобы удалить все файлы, прежде чем пытаться удалить каталог.</span><span class="sxs-lookup"><span data-stu-id="c745f-2787">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2788">В этом примере используется `RmDir` функцию для удаления существующего каталога.</span><span class="sxs-lookup"><span data-stu-id="c745f-2788">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-2789"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-2789"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2790">Удаляемый каталог содержит файлы.</span><span class="sxs-lookup"><span data-stu-id="c745f-2790">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c745f-2791">Каталог не существует.</span><span class="sxs-lookup"><span data-stu-id="c745f-2791">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-2792">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2792">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-2793">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="c745f-2794">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2795">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2795">Required.</span></span> <span data-ttu-id="c745f-2796">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2796">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-2797">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2797">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-2798">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2798">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="c745f-2799">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2799">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c745f-2800">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2801">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 - 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="c745f-2801">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="c745f-2802">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2802">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="c745f-2803">Режим</span><span class="sxs-lookup"><span data-stu-id="c745f-2803">Mode</span></span>|<span data-ttu-id="c745f-2804">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="c745f-2804">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c745f-2805">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="c745f-2805">Number of the next record read or written</span></span>|  
|<span data-ttu-id="c745f-2806">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="c745f-2806">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="c745f-2807">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2807">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="c745f-2808">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-2808">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2809">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="c745f-2809">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="c745f-2810">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2810">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="c745f-2811">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2811">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="c745f-2812">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2812">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c745f-2813">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c745f-2813">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="c745f-2814">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2814">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="c745f-2815">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2815">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c745f-2816">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c745f-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2817">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2817">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-2818">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2818">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-2819">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2819">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2820">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2820">Required.</span></span> <span data-ttu-id="c745f-2821">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2821">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="c745f-2822">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2822">Required.</span></span> <span data-ttu-id="c745f-2823">Число в диапазоне от 1 до 2 147 483 647 включительно, определяющее место следующей операции чтения/записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2823">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="c745f-2824">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2824">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c745f-2825">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2825">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="c745f-2826">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2826">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2827">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 - 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="c745f-2827">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="c745f-2828">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2828">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="c745f-2829">Режим</span><span class="sxs-lookup"><span data-stu-id="c745f-2829">Mode</span></span>|<span data-ttu-id="c745f-2830">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="c745f-2830">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c745f-2831">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="c745f-2831">Number of the next record read or written</span></span>|  
|<span data-ttu-id="c745f-2832">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="c745f-2832">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="c745f-2833">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2833">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="c745f-2834">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c745f-2834">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2835">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="c745f-2835">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="c745f-2836">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2836">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="c745f-2837">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2837">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="c745f-2838">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2838">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c745f-2839">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c745f-2839">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="c745f-2840">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2840">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="c745f-2841">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2841">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c745f-2842">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c745f-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2843">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2843">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="c745f-2844">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2844">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="c745f-2845">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2845">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c745f-2846">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2846">Required.</span></span> <span data-ttu-id="c745f-2847">Выражение типа <see langword="String" />, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2847"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="c745f-2848"><paramref name="PathName" /> может включать каталог или папку, а также диск.</span><span class="sxs-lookup"><span data-stu-id="c745f-2848"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="c745f-2849">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2849">Required.</span></span> <span data-ttu-id="c745f-2850">Константа или числовое выражение, сумма которого определяет атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2850">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="c745f-2851">Устанавливает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2851">Sets attribute information for a file.</span></span> <span data-ttu-id="c745f-2852">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2852">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="c745f-2853">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2853">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2854">Ошибка времени выполнения возникает при попытке установить атрибуты для открытого файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2854">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="c745f-2855">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c745f-2855">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c745f-2856">Значение</span><span class="sxs-lookup"><span data-stu-id="c745f-2856">Value</span></span>|<span data-ttu-id="c745f-2857">Константа</span><span class="sxs-lookup"><span data-stu-id="c745f-2857">Constant</span></span>|<span data-ttu-id="c745f-2858">Описание</span><span class="sxs-lookup"><span data-stu-id="c745f-2858">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="c745f-2859">Обычный (по умолчанию).</span><span class="sxs-lookup"><span data-stu-id="c745f-2859">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c745f-2860">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c745f-2860">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c745f-2861">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="c745f-2861">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c745f-2862">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2862">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c745f-2863">Метка тома</span><span class="sxs-lookup"><span data-stu-id="c745f-2863">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c745f-2864">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2864">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c745f-2865">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c745f-2865">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c745f-2866">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c745f-2866">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2867">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c745f-2867">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="c745f-2868">Имена можно использовать в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="c745f-2868">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2869">В этом примере используется `SetAttr` функцию для задания атрибутов файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2869">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c745f-2870">Недопустимый тип <paramref name="Attribute" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2870"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="c745f-2871">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2871">Required.</span></span> <span data-ttu-id="c745f-2872">Число пробелов, вставляемых перед отображением или печатью очередного выражения в списке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2872">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="c745f-2873">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2873">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="c745f-2874">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2874">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2875">Если `Count` меньше ширины строки вывода, следующая позиция печати непосредственно следует за количество напечатанных пробелов.</span><span class="sxs-lookup"><span data-stu-id="c745f-2875">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="c745f-2876">Если`Count` больше, чем выводимой строки `SPC` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="c745f-2876">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c745f-2877">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="c745f-2877">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="c745f-2878">Например, если текущая позиция печати равна 24, выводимой строки — 80, а `SPC(90)`, печать начнется с позиции 34 (текущая позиция печати + остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="c745f-2878">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="c745f-2879">Если разница между текущей позицией печати и ширину строки вывода меньше, чем `Count` (или `Count` `Mod` *ширины*), `SPC` функция переходит в начало следующей строки и создает пробелы, равные `Count` -(*ширины* - *текущая_позиция_печати*).</span><span class="sxs-lookup"><span data-stu-id="c745f-2879">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2880">Убедитесь, что столбцы таблицы достаточно широки разрешить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2880">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2881">В этом примере используется `SPC` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="c745f-2881">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="c745f-2882">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2882">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-2883">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2883">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c745f-2884">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2884">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="c745f-2885">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2885">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2886">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="c745f-2886">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="c745f-2887">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="c745f-2887">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="c745f-2888">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="c745f-2888">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c745f-2889">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="c745f-2889">Column Mod width</span></span>  
  
 <span data-ttu-id="c745f-2890">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="c745f-2890">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="c745f-2891">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-2891">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="c745f-2892">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2892">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="c745f-2893">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="c745f-2893">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="c745f-2894">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2894">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="c745f-2895">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2895">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="c745f-2896">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2896">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2897">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2897">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2898">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="c745f-2898">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="c745f-2899">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2899">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="c745f-2900">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2900">Optional.</span></span> <span data-ttu-id="c745f-2901">Номер столбца, в который помещается курсор перед отображением или печатью следующего выражения из списка.</span><span class="sxs-lookup"><span data-stu-id="c745f-2901">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="c745f-2902">Если этот параметр опущен, <see langword="TAB" /> перемещает положение курсора в начало следующей зоны печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-2902">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="c745f-2903">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2903">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="c745f-2904">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c745f-2904">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2905">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="c745f-2905">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="c745f-2906">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="c745f-2906">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="c745f-2907">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="c745f-2907">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c745f-2908">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="c745f-2908">Column Mod width</span></span>  
  
 <span data-ttu-id="c745f-2909">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="c745f-2909">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="c745f-2910">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-2910">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="c745f-2911">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2911">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="c745f-2912">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="c745f-2912">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="c745f-2913">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2913">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="c745f-2914">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2914">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="c745f-2915">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c745f-2915">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c745f-2916">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="c745f-2916">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2917">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="c745f-2917">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="c745f-2918">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-2918">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c745f-2919">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2919">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2920">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2920">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2921">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2921">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2922">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2922">Required.</span></span> <span data-ttu-id="c745f-2923">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2923">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c745f-2924">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2924">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2925">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2925">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2926">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2926">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2927">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2927">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c745f-2928">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c745f-2928">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c745f-2929">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2929">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c745f-2930">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2930">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c745f-2931">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c745f-2931">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c745f-2932">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2932">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2933">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2933">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c745f-2934">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2934">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2935">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2935">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2936">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2936">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2937">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2937">Required.</span></span> <span data-ttu-id="c745f-2938">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2938">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="c745f-2939">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2939">Optional.</span></span> <span data-ttu-id="c745f-2940">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="c745f-2940">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="c745f-2941">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2941">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2942">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2942">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2943">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2943">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2944">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2944">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c745f-2945">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c745f-2945">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c745f-2946">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2946">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c745f-2947">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2947">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c745f-2948">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c745f-2948">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c745f-2949">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2949">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2950">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2950">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c745f-2951">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2951">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2952">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2952">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2953">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2953">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2954">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2954">Required.</span></span> <span data-ttu-id="c745f-2955">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2955">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="c745f-2956">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2956">Optional.</span></span> <span data-ttu-id="c745f-2957">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="c745f-2957">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="c745f-2958">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2958">Optional.</span></span> <span data-ttu-id="c745f-2959">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="c745f-2959">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="c745f-2960">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c745f-2960">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c745f-2961">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2961">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c745f-2962">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2962">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2963">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2963">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c745f-2964">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c745f-2964">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c745f-2965">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2965">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c745f-2966">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2966">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c745f-2967">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c745f-2967">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c745f-2968">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2968">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-2969">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c745f-2969">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c745f-2970">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2970">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-2971">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2971">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-2972">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-2972">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-2973">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-2973">Required.</span></span> <span data-ttu-id="c745f-2974">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-2974">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c745f-2975">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-2975">Optional.</span></span> <span data-ttu-id="c745f-2976">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2976">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="c745f-2977">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2977">Writes data to a sequential file.</span></span> <span data-ttu-id="c745f-2978">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-2978">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-2979">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2979">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-2980">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-2980">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-2981">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-2981">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-2982">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2982">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="c745f-2983">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-2983">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="c745f-2984">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2984">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="c745f-2985">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="c745f-2985">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="c745f-2986">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-2986">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="c745f-2987">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="c745f-2987">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="c745f-2988">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c745f-2988">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="c745f-2989">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-2989">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="c745f-2990">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2990">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="c745f-2991">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="c745f-2991">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="c745f-2992">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-2992">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="c745f-2993">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-2993">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c745f-2994">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-2994">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="c745f-2995">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="c745f-2995">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="c745f-2996">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-2996">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="c745f-2997">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-2997">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="c745f-2998">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="c745f-2998">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="c745f-2999">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="c745f-2999">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="c745f-3000">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="c745f-3000">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="c745f-3001">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-3001">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-3002">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-3002">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-3003">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3003">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c745f-3004">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-3004">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-3005">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-3005">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-3006">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-3006">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-3007">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-3007">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c745f-3008">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="c745f-3008">Required.</span></span> <span data-ttu-id="c745f-3009">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c745f-3009">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c745f-3010">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="c745f-3010">Optional.</span></span> <span data-ttu-id="c745f-3011">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3011">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="c745f-3012">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3012">Writes data to a sequential file.</span></span> <span data-ttu-id="c745f-3013">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="c745f-3013">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c745f-3014">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-3014">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c745f-3015">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c745f-3015">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c745f-3016">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c745f-3016">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c745f-3017">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3017">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="c745f-3018">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="c745f-3018">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="c745f-3019">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3019">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="c745f-3020">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="c745f-3020">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="c745f-3021">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="c745f-3021">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="c745f-3022">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="c745f-3022">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="c745f-3023">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c745f-3023">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="c745f-3024">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="c745f-3024">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="c745f-3025">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-3025">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="c745f-3026">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="c745f-3026">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="c745f-3027">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3027">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="c745f-3028">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c745f-3028">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c745f-3029">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="c745f-3029">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="c745f-3030">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="c745f-3030">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="c745f-3031">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c745f-3031">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="c745f-3032">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="c745f-3032">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="c745f-3033">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="c745f-3033">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="c745f-3034">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="c745f-3034">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="c745f-3035">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="c745f-3035">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="c745f-3036">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c745f-3036">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c745f-3037">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c745f-3037">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c745f-3038">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c745f-3038">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="c745f-3039">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-3039">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="c745f-3040">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="c745f-3040">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="c745f-3041">Как выполнить Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c745f-3041">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>