<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8058ee2dd6ec3c4b99d565a5d45e466a5bf00f3c" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55412296" /></Metadata><TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="4f537-101">В модуле <see langword="FileSystem" /> содержатся процедуры, используемые для выполнения операций с файлами, папками или каталогами и системой.</span><span class="sxs-lookup"><span data-stu-id="4f537-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="4f537-102">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие в операциях файлового ввода-вывода по сравнению с модулем <see langword="FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="4f537-103">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-104">Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, с доступом к файлам и папкам.</span><span class="sxs-lookup"><span data-stu-id="4f537-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-105">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="4f537-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/directories-and-files-summary.md"><span data-ttu-id="4f537-106">Сводка по каталогам и файлам</span><span class="sxs-lookup"><span data-stu-id="4f537-106">Directories and Files Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/input-and-output-summary.md"><span data-ttu-id="4f537-107">Сводка по вводу и выводу</span><span class="sxs-lookup"><span data-stu-id="4f537-107">Input and Output Summary</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md"><span data-ttu-id="4f537-108">Ключевые слова (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-108">Keywords (Visual Basic)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md"><span data-ttu-id="4f537-109">Члены библиотеки времени выполнения Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-109">Visual Basic Run-Time Library Members</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="4f537-110">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-110">Required.</span></span> <span data-ttu-id="4f537-111">Строковое выражение, определяющее, какая папка или каталог становятся новым каталогом или папкой по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="4f537-111">A string expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="4f537-112">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-112"><paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="4f537-113">Если диск не указан, функция <see langword="ChDir" /> меняет каталог или папку по умолчанию на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-113">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="4f537-114">Изменяет текущую папку или каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-114">Changes the current directory or folder.</span></span> <span data-ttu-id="4f537-115">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие операций файлового ввода-вывода по сравнению с функциями <see langword="ChDir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-115">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="4f537-116">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-116">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-117">`ChDir` Функция меняет каталог по умолчанию, но не диск по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="4f537-117">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="4f537-118">Например, если по умолчанию это диск C, следующая инструкция изменяет каталог по умолчанию на диске D, но C остается диском по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="4f537-118">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="4f537-119">Может быть сделан относительным изменения каталога является путем ввода двух точек, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-119">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-120">`ChDir` Функция требует разрешение неуправляемого кода, что может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="4f537-120">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="4f537-121">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и.</span><span class="sxs-lookup"><span data-stu-id="4f537-121">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-122">В этом примере используется `ChDir` функции для изменения текущего каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="4f537-122">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-123">Параметр <paramref name="Path" /> пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-123"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-124">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="4f537-124">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-parse-file-paths.md"><span data-ttu-id="4f537-125">Практическое руководство. Анализ путей к файлам в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-125">How to: Parse File Paths in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/creating-deleting-and-moving-files-and-directories.md"><span data-ttu-id="4f537-126">Создание, удаление и перемещение файлов и папок в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-126">Creating, Deleting, and Moving Files and Directories in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-127">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-127">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="4f537-128">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-128">Required.</span></span> <span data-ttu-id="4f537-129">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-129">String expression that specifies an existing drive.</span></span> <span data-ttu-id="4f537-130">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="4f537-130">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="4f537-131">Если аргумент <paramref name="Drive" /> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="4f537-131">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="4f537-132">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-132">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-133">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="4f537-133">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="4f537-134">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="4f537-134">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-135">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-135">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="4f537-136">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-136">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-137">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="4f537-137">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-138">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-138">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="4f537-139">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-139">Required.</span></span> <span data-ttu-id="4f537-140">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-140">String expression that specifies an existing drive.</span></span> <span data-ttu-id="4f537-141">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="4f537-141">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="4f537-142">Если аргумент <paramref name="Drive" /> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="4f537-142">If the <paramref name="Drive" /> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="4f537-143">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-143">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-144">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="4f537-144">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="4f537-145">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="4f537-145">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-146">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-146">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="4f537-147">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-147">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-148">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="4f537-148">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-149">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-149">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-150">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-150">Returns a string representing the current path.</span></span> <span data-ttu-id="4f537-151">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-151">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="4f537-152">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-152">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f537-153">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-153">Returns a string representing the current path.</span></span> <span data-ttu-id="4f537-154">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="4f537-155">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-156">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4f537-157">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="4f537-158">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-158">Optional.</span></span> <span data-ttu-id="4f537-159">Выражение типа <see langword="Char" />, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-159"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="4f537-160">Если диск не указан или параметр <paramref name="Drive" /> является пустой строкой (""), функция <see langword="CurDir" /> возвращает путь для текущего диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-160">If no drive is specified, or if <paramref name="Drive" /> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="4f537-161">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-161">Returns a string representing the current path.</span></span> <span data-ttu-id="4f537-162">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="4f537-163">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-163">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-164">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-164">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4f537-165">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-165">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-166">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-166">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="4f537-167">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-167">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="4f537-168">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-168">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f537-169">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-169">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="4f537-170">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-170">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="4f537-171">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-171">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="4f537-172">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-172">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-173">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="4f537-173">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="4f537-174">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-174">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="4f537-175">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-175">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="4f537-176">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="4f537-176">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-177">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="4f537-177">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="4f537-178">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="4f537-178">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="4f537-179">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-179">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="4f537-180">Значение</span><span class="sxs-lookup"><span data-stu-id="4f537-180">Value</span></span>|<span data-ttu-id="4f537-181">Константа</span><span class="sxs-lookup"><span data-stu-id="4f537-181">Constant</span></span>|<span data-ttu-id="4f537-182">Описание</span><span class="sxs-lookup"><span data-stu-id="4f537-182">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="4f537-183">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="4f537-183">Default.</span></span> <span data-ttu-id="4f537-184">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-184">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="4f537-185">Указывает файлы, доступные только для чтения, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-185">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="4f537-186">Задает скрытые файлы, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-186">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="4f537-187">Указывает, системные файлы и файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-187">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="4f537-188">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-188">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="4f537-189">Указывает каталоги или папки, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-189">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="4f537-190">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="4f537-190">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="4f537-191">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="4f537-191">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4f537-192">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="4f537-192">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-193">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="4f537-193">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netframework-1.1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4f537-194">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-194">Optional.</span></span> <span data-ttu-id="4f537-195">Строковое выражение, задающее имя файла, имя каталога или папки, либо метку тома диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-195">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="4f537-196">Если параметр <paramref name="PathName" /> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span><span class="sxs-lookup"><span data-stu-id="4f537-196">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Pathname"><span data-ttu-id="4f537-197">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-197">Optional.</span></span> <span data-ttu-id="4f537-198">Строковое выражение, задающее имя файла, имя каталога или папки, либо метку тома диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-198">A string expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="4f537-199">Если параметр <paramref name="PathName" /> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span><span class="sxs-lookup"><span data-stu-id="4f537-199">A zero-length string (<see langword="&quot;&quot;" />) is returned if <paramref name="PathName" /> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="4f537-200">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-200">Optional.</span></span> <span data-ttu-id="4f537-201">Перечисление или числовое выражение, значение которого задает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-201">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="4f537-202">Если этот параметр опущен, функция <see langword="Dir" /> возвращает файлы, соответствующие параметру <paramref name="PathName" />, но не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-202">If omitted, <see langword="Dir" /> returns files that match <paramref name="PathName" /> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="4f537-203">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-203">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="4f537-204">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-204">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="4f537-205">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-205">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="4f537-206">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-206">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-207">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="4f537-207">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="4f537-208">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-208">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="4f537-209">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-209">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="4f537-210">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="4f537-210">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-211">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="4f537-211">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="4f537-212">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="4f537-212">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="4f537-213">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-213">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="4f537-214">Значение</span><span class="sxs-lookup"><span data-stu-id="4f537-214">Value</span></span>|<span data-ttu-id="4f537-215">Константа</span><span class="sxs-lookup"><span data-stu-id="4f537-215">Constant</span></span>|<span data-ttu-id="4f537-216">Описание</span><span class="sxs-lookup"><span data-stu-id="4f537-216">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="4f537-217">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="4f537-217">Default.</span></span> <span data-ttu-id="4f537-218">Указывает файлы, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-218">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="4f537-219">Указывает файлы только для чтения, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-219">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="4f537-220">Задает скрытые файлы, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-220">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="4f537-221">Определяет системные файлы, кроме файлов, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-221">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="4f537-222">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-222">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="4f537-223">Указывает каталоги или папки в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="4f537-223">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="4f537-224">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="4f537-224">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="4f537-225">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="4f537-225">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4f537-226">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте кода вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="4f537-226">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-227">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="4f537-227">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-228">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-228">Required.</span></span> <span data-ttu-id="4f537-229">Значение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-229">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-230">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="4f537-230">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="4f537-231">Логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="4f537-231">A Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-232">Используйте `EOF` во избежание ошибки, возникшей при попытке получить данные за пределами файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-232">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="4f537-233">`EOF` Возвращает `False` пока не будет достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-233">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="4f537-234">В файлах, открытых для `Random` или `Binary` доступ, `EOF` возвращает `False` до последнего выполненного `FileGet` функции не удалось прочитать запись целиком.</span><span class="sxs-lookup"><span data-stu-id="4f537-234">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="4f537-235">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `Input` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="4f537-235">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="4f537-236">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с `Input`, или использовать `Get` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-236">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="4f537-237">В файлах, открытых для `Output`, `EOF` всегда возвращает `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-237">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-238">В этом примере используется `EOF` функции, чтобы определить конец файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-238">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="4f537-239">В этом примере предполагается, что `Testfile` — текстовый файл, который содержит несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="4f537-239">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-240">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-240">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-241">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-241">Required.</span></span> <span data-ttu-id="4f537-242"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-242"><see langword="Integer" />.</span></span> <span data-ttu-id="4f537-243">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-243">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-244">Возвращает перечисление, представляющее режим файла для файлов, открытых функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-244">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-245">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="FileAttr" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-245">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="4f537-246">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-246">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="4f537-247">Следующие значения перечисления определяют режим доступа к файлу:</span><span class="sxs-lookup"><span data-stu-id="4f537-247">The following enumeration values indicate the file access mode:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="4f537-248">Значение</span><span class="sxs-lookup"><span data-stu-id="4f537-248">Value</span></span> 
 </term><description> <span data-ttu-id="4f537-249">Режим</span><span class="sxs-lookup"><span data-stu-id="4f537-249">Mode</span></span> 
 </description></item><item><term> <span data-ttu-id="4f537-250">1</span><span class="sxs-lookup"><span data-stu-id="4f537-250">1</span></span> 
 </term><description><see langword="OpenMode.Input" /></description></item><item><term> <span data-ttu-id="4f537-251">2</span><span class="sxs-lookup"><span data-stu-id="4f537-251">2</span></span> 
 </term><description><see langword="OpenMode.Output" /></description></item><item><term> <span data-ttu-id="4f537-252">4</span><span class="sxs-lookup"><span data-stu-id="4f537-252">4</span></span> 
 </term><description><see langword="OpenMode.Random" /></description></item><item><term> <span data-ttu-id="4f537-253">8</span><span class="sxs-lookup"><span data-stu-id="4f537-253">8</span></span> 
 </term><description><see langword="OpenMode.Append" /></description></item><item><term> <span data-ttu-id="4f537-254">32</span><span class="sxs-lookup"><span data-stu-id="4f537-254">32</span></span> 
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-255">Эта функция возвращает перечисление, представляющее режим файла для файлов, открытых `FileOpen` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-255">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-256">В этом примере используется `FileAttr` функция, возвращающая файловый режим открытого файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-256">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-257">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-257">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="4f537-258">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-258">Optional.</span></span> <span data-ttu-id="4f537-259">Массив параметров из 0 или нескольких каналов, которые должны быть закрыты.</span><span class="sxs-lookup"><span data-stu-id="4f537-259">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="4f537-260">Завершает операции ввода-вывода с файлом, открытым с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-260">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-261">Возможность <see langword="My" /> предоставляет лучшие показатели производительности и быстродействии в операциях файлового ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-261"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="4f537-262">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-262">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-263">`FileClose` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-263">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-264">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-264">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-265">Дополнительные сведения см. в разделе [Как Чтение текста из файлов с помощью StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [как: Запись текста в файлы с помощью StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), и [Пошаговое руководство: Операции с файлами и каталогами в Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-265">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md), [How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="4f537-266">Если опустить `FileNumbers`, все активные файлы, открываемые `FileOpen` функция закрываются.</span><span class="sxs-lookup"><span data-stu-id="4f537-266">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="4f537-267">При закрытии файлов, открытых для `Output` или `Append`, последнее содержимое буфера выходных данных записывается в буфер операционной системы для этого файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-267">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="4f537-268">Все буферное пространство, связанное с закрытого файл освобождается.</span><span class="sxs-lookup"><span data-stu-id="4f537-268">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="4f537-269">Когда `FileClose` функция выполняется, а связь файла с его файла заканчивается.</span><span class="sxs-lookup"><span data-stu-id="4f537-269">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-270">В этом примере используется `FileClose` функцию, чтобы закрыть файл открыт для `Input`.</span><span class="sxs-lookup"><span data-stu-id="4f537-270">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-271"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-271"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="4f537-272">Оператор End</span><span class="sxs-lookup"><span data-stu-id="4f537-272">End Statement</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/stop-statement.md"><span data-ttu-id="4f537-273">Оператор Stop (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-273">Stop Statement (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-274">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-274">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="4f537-275">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-275">Required.</span></span> <span data-ttu-id="4f537-276">Строковое выражение, задающее имя копируемого файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-276">A string expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="4f537-277">Параметр <paramref name="Source" /> может содержать имя каталога или папки, а также имя диска, где находится исходный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-277"><paramref name="Source" /> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="4f537-278">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-278">Required.</span></span> <span data-ttu-id="4f537-279">Строковое выражение, определяющее имя файла назначения.</span><span class="sxs-lookup"><span data-stu-id="4f537-279">A string expression that specifies the destination file name.</span></span> <span data-ttu-id="4f537-280">Параметр <paramref name="Destination" /> может содержать имя каталога или папки, а также имя диска, где находится файл назначения.</span><span class="sxs-lookup"><span data-stu-id="4f537-280"><paramref name="Destination" /> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="4f537-281">Копирует файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-281">Copies a file.</span></span> <span data-ttu-id="4f537-282">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-282">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="4f537-283">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-283">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-284">Если вы попытаетесь использовать `FileCopy` работать на открытый файл, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-284">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="4f537-285">`FileCopy` требует полного доверия для работы на локальном диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-285">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-286">В этом примере используется `FileCopy` функции для копирования одного файла в другой.</span><span class="sxs-lookup"><span data-stu-id="4f537-286">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="4f537-287">Для целей этого примера, предположим, что `SrcFile` — это файл, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-287">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-288">Параметр <paramref name="Source" /> или <paramref name="Destination" /> недопустим или не указан.</span><span class="sxs-lookup"><span data-stu-id="4f537-288"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-289">Этот файл уже открыт.</span><span class="sxs-lookup"><span data-stu-id="4f537-289">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-290">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-290">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-a-different-directory.md"><span data-ttu-id="4f537-291">Практическое руководство. Создание копии файла в другом каталоге в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-291">How to: Create a Copy of a File in a Different Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-copy-of-a-file-in-the-same-directory.md"><span data-ttu-id="4f537-292">Практическое руководство. Создание копии файла в том же каталоге в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-292">How to: Create a Copy of a File in the Same Directory in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-copy-a-directory-to-another-directory.md"><span data-ttu-id="4f537-293">Практическое руководство. Копирование каталога в другой каталог в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-293">How to: Copy a Directory to Another Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4f537-294">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-294">Required.</span></span> <span data-ttu-id="4f537-295">Строковое выражение, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-295">A string expression that specifies a file name.</span></span> <span data-ttu-id="4f537-296"><paramref name="PathName" /> — может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-296"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4f537-297">Возвращает значение типа <see langword="Date" />, которое указывает дату и время последней операции записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-297">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="4f537-298">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-298">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="4f537-299">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-299">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns><span data-ttu-id="4f537-300">Значение типа <see langword="Date" />, которое указывает дату и время создания или последнего изменения файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-300"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4f537-301">В этом примере используется `FileDateTime` создания или последнего изменения функции для определения даты и времени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-301">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="4f537-302">Формат даты и времени зависит от параметров языкового стандарта системы.</span><span class="sxs-lookup"><span data-stu-id="4f537-302">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-303">Параметр <paramref name="PathName" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="4f537-303"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-304">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-304">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-305">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-305">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-306">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-306">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-307">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-307">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-308">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-308">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-309">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-309">Required.</span></span> <span data-ttu-id="4f537-310">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-310">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-311">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-311">Required.</span></span> <span data-ttu-id="4f537-312">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-312">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-313">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-313">Optional.</span></span> <span data-ttu-id="4f537-314">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-314">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-315">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-315">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-316">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-316">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-317">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-317">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-318">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-318">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-319">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-319">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-320">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-320">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-321">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-321">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-322">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-322">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-323">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-323">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-324">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-324">Random Mode</span></span>  
 <span data-ttu-id="4f537-325">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-325">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-326">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-326">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-327">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-327">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-328">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-328">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-329">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-329">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-330">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-330">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-331">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-331">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-332">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-332">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-333">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-333">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-334">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-334">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-335">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-335">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-336">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-336">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-337">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-337">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-338">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-338">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-339">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-339">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-340">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-340">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-341">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-341">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-342">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-342">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-343">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-343">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-344">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-344">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-345">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-345">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-346">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-346">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-347">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-347">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-348">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-348">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-349">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-349">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-350">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-350">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-351">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-351">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-352">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-352">Binary Mode</span></span>  
 <span data-ttu-id="4f537-353">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-353">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-354">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-354">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-355">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-355">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-356">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-356">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-357">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-357">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-358">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-358">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-359">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-359">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-360">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-360">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-361">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-361">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-362"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-362"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-363">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-363">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-364">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-364">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-365">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-365">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-366">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-366">Required.</span></span> <span data-ttu-id="4f537-367">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-367">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-368">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-368">Required.</span></span> <span data-ttu-id="4f537-369">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-369">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-370">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-370">Optional.</span></span> <span data-ttu-id="4f537-371">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-371">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-372">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-372">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-373">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-373">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-374">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-374">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-375">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-375">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-376">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-376">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-377">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-377">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-378">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-378">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-379">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-379">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-380">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-380">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-381">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-381">Random Mode</span></span>  
 <span data-ttu-id="4f537-382">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-382">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-383">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-383">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-384">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-384">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-385">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-385">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-386">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-386">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-387">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-387">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-388">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-388">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-389">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-389">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-390">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-390">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-391">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-392">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-392">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-393">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-393">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-394">Если дескриптор не используется.</span><span class="sxs-lookup"><span data-stu-id="4f537-394">If the descriptor is not used.</span></span> <span data-ttu-id="4f537-395">Размер и границы массива, передан в `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-395">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-396">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-396">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-397">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-397">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-398">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-398">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-399">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-399">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-400">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-400">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-401">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-401">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-402">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-402">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-403">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-403">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-404">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-404">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-405">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-405">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-406">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-406">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-407">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-407">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-408">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-408">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-409">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-409">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-410">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-410">Binary Mode</span></span>  
 <span data-ttu-id="4f537-411">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-411">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-412">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-412">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-413">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-413">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-414">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-414">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-415">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-415">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-416">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-416">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-417">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-417">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-418">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-418">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-419">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-419">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-420"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-420"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-421">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-422">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-422">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-423">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-423">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-424">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-424">Required.</span></span> <span data-ttu-id="4f537-425">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-425">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-426">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-426">Required.</span></span> <span data-ttu-id="4f537-427">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-427">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-428">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-428">Optional.</span></span> <span data-ttu-id="4f537-429">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-429">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-430">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-430">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-431">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-431">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-432">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-432">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-433">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-433">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-434">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-434">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-435">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-435">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-436">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-436">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-437">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-437">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-438">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-438">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-439">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-439">Random Mode</span></span>  
 <span data-ttu-id="4f537-440">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-440">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-441">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-441">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-442">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-442">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-443">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-443">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-444">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-444">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-445">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-445">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-446">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-446">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-447">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-447">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-448">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-448">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-449">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-449">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-450">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-450">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-451">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-451">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-452">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-452">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-453">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-453">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-454">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-454">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-455">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-455">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-456">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-456">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-457">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-457">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-458">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-458">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-459">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-459">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-460">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-460">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-461">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-461">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-462">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-462">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-463">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-463">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-464">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-464">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-465">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-465">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-466">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-466">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-467">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-467">Binary Mode</span></span>  
 <span data-ttu-id="4f537-468">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-468">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-469">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-469">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-470">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-470">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-471">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-471">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-472">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-472">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-473">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-473">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-474">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-474">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-475">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-475">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-476">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-476">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-477"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-477"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-478">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-478">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-479">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-479">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-480">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-480">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-481">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-481">Required.</span></span> <span data-ttu-id="4f537-482">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-482">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-483">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-483">Required.</span></span> <span data-ttu-id="4f537-484">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-484">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-485">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-485">Optional.</span></span> <span data-ttu-id="4f537-486">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-486">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-487">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-487">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-488">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-488">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-489">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-489">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-490">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-490">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-491">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-491">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-492">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-492">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-493">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-493">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-494">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-494">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-495">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-495">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-496">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-496">Random Mode</span></span>  
 <span data-ttu-id="4f537-497">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-497">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-498">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции`FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-498">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-499">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-499">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-500">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-500">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-501">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-501">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-502">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-502">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-503">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-503">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-504">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-504">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-505">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-505">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-506">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-506">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-507">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-507">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-508">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-508">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-509">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-509">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-510">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-510">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-511">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-511">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-512">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-512">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-513">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-513">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-514">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-514">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-515">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-515">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-516">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-516">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-517">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-517">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-518">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-518">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-519">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-519">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-520">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-520">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-521">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-521">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-522">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-522">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-523">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-523">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-524">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-524">Binary Mode</span></span>  
 <span data-ttu-id="4f537-525">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-525">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-526">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-526">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-527">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-527">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-528">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-528">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-529">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-529">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-530">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-530">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-531">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-531">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-532">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-532">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-533">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-533">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-534"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-534"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-535">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-535">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-536">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-536">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-537">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-537">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-538">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-538">Required.</span></span> <span data-ttu-id="4f537-539">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-539">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-540">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-540">Required.</span></span> <span data-ttu-id="4f537-541">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-541">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-542">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-542">Optional.</span></span> <span data-ttu-id="4f537-543">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-543">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-544">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-544">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-545">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-545">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-546">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-546">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-547">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-547">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-548">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-548">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-549">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-549">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-550">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-550">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-551">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-551">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-552">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-552">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-553">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-553">Random Mode</span></span>  
 <span data-ttu-id="4f537-554">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-554">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-555">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-555">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-556">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-556">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-557">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-557">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-558">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-558">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-559">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-559">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-560">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-560">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-561">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-561">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-562">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-562">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-563">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-563">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-564">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-564">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-565">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-565">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-566">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-566">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-567">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-568">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-569">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-569">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-570">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-571">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-571">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-572">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-572">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-573">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-573">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-574">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-574">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-575">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-576">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-576">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-577">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-577">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-578">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-578">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-579">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-579">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-580">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-580">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-581">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-581">Binary Mode</span></span>  
 <span data-ttu-id="4f537-582">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-582">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-583">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-583">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-584">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-584">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-585">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-585">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-586">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-586">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-587">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-587">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-588">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-588">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-589">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-589">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-590">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-590">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-591"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-591"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-592">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-592">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-593">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-593">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-594">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-594">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-595">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-595">Required.</span></span> <span data-ttu-id="4f537-596">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-596">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-597">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-597">Required.</span></span> <span data-ttu-id="4f537-598">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-598">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-599">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-599">Optional.</span></span> <span data-ttu-id="4f537-600">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-600">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-601">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-601">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-602">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-602">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-603">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-603">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-604">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-604">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-605">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-605">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-606">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-606">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-607">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-607">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-608">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-608">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-609">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-609">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-610">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-610">Random Mode</span></span>  
 <span data-ttu-id="4f537-611">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-612">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-612">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-613">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-614">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-615">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-615">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-616">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-616">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-617">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-617">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-618">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-618">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-619">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-619">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-620">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-620">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-621">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-621">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-622">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-622">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-623">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-623">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-624">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-624">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-625">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-625">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-626">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-626">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-627">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-627">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-628">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-628">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-629">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-629">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-630">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-630">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-631">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-631">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-632">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-633">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-633">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-634">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-634">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-635">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-635">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-636">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-636">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-637">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-637">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-638">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-638">Binary Mode</span></span>  
 <span data-ttu-id="4f537-639">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-640">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-641">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-642">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-642">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-643">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-643">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-644">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-644">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-645">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-645">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-646">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-646">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-647">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-647">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-648"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-648"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-649">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-649">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-650">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-650">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-651">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-652">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-652">Required.</span></span> <span data-ttu-id="4f537-653">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-654">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-654">Required.</span></span> <span data-ttu-id="4f537-655">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-655">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-656">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-656">Optional.</span></span> <span data-ttu-id="4f537-657">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-658">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-658">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-659">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-660">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-661">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-661">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-662">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-662">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-663">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-664">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-664">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-665">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-665">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-666">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-666">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-667">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-667">Random Mode</span></span>  
 <span data-ttu-id="4f537-668">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-668">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-669">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-669">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-670">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-670">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-671">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-671">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-672">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-672">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-673">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-673">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-674">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-674">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-675">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-675">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-676">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-676">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-677">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-677">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-678">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-678">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-679">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-679">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-680">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-680">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-681">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-681">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-682">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-682">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-683">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-683">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-684">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-684">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-685">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-685">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-686">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-686">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-687">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-687">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-688">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-688">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-689">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-690">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-690">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-691">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-691">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-692">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-693">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-693">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-694">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-695">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-695">Binary Mode</span></span>  
 <span data-ttu-id="4f537-696">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-696">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-697">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-697">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-698">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-698">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-699">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-699">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-700">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-700">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-701">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-701">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-702">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-702">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-703">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-703">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-704">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-704">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-705"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-705"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-706">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-706">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-707">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-707">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-708">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-708">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-709">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-709">Required.</span></span> <span data-ttu-id="4f537-710">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-710">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-711">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-711">Required.</span></span> <span data-ttu-id="4f537-712">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-712">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-713">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-713">Optional.</span></span> <span data-ttu-id="4f537-714">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-714">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-715">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-715">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-716">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-716">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-717">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-717">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-718">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-718">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-719">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-719">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-720">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-720">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-721">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-721">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-722">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-722">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-723">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-723">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-724">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-724">Random Mode</span></span>  
 <span data-ttu-id="4f537-725">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-725">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-726">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-726">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-727">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-727">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-728">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-728">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-729">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-729">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-730">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-730">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-731">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-731">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-732">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-732">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-733">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-733">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-734">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-734">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-735">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-735">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-736">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-736">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-737">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-737">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-738">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-738">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-739">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-739">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-740">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-741">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-741">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-742">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-742">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-743">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-743">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-744">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-744">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-745">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-745">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-746">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-747">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-747">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-748">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-748">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-749">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-750">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-750">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-751">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-751">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-752">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-752">Binary Mode</span></span>  
 <span data-ttu-id="4f537-753">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-753">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-754">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-754">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-755">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-755">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-756">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-756">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-757">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-757">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-758">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-758">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-759">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-759">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-760">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-760">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-761">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-761">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-762"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-762"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-763">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-763">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-764">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-764">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-765">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-765">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-766">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-766">Required.</span></span> <span data-ttu-id="4f537-767">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-767">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-768">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-768">Required.</span></span> <span data-ttu-id="4f537-769">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-769">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-770">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-770">Optional.</span></span> <span data-ttu-id="4f537-771">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-771">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-772">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-772">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-773">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-773">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-774">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-774">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-775">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-775">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-776">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-776">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-777">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-777">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-778">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-778">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-779">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-779">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-780">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-780">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-781">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-781">Random Mode</span></span>  
 <span data-ttu-id="4f537-782">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-783">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-783">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-784">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-785">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-786">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-786">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-787">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-787">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-788">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-788">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-789">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-789">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-790">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-790">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-791">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-791">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-792">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-792">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-793">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-793">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-794">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-794">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-795">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-795">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-796">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-796">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-797">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-798">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-798">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-799">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-799">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-800">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-800">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-801">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-801">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-802">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-802">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-803">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-803">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-804">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-804">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-805">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-805">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-806">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-806">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-807">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-807">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-808">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-808">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-809">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-809">Binary Mode</span></span>  
 <span data-ttu-id="4f537-810">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-811">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-812">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-813">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-813">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-814">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-814">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-815">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-815">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-816">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-816">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-817">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-817">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-818">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-818">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-819"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-819"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-820">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-820">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-821">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-822">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-823">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-823">Required.</span></span> <span data-ttu-id="4f537-824">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-824">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-825">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-825">Required.</span></span> <span data-ttu-id="4f537-826">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-826">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-827">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-827">Optional.</span></span> <span data-ttu-id="4f537-828">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-828">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-829">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-829">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-830">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-831">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-832">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-832">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-833">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-833">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-834">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-834">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-835">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-835">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-836">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-836">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-837">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-837">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-838">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-838">Random Mode</span></span>  
 <span data-ttu-id="4f537-839">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-839">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-840">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-840">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-841">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-841">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-842">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-842">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-843">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-843">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-844">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-844">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-845">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-845">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-846">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-846">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-847">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-847">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-848">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-848">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-849">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-849">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-850">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-850">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-851">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-851">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-852">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-852">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-853">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-853">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-854">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-855">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-855">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-856">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-856">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-857">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-857">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-858">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-858">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-859">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-859">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-860">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-860">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-861">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-861">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-862">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-862">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-863">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-863">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-864">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-864">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-865">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-865">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-866">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-866">Binary Mode</span></span>  
 <span data-ttu-id="4f537-867">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-867">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-868">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-868">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-869">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-869">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-870">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-870">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-871">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-871">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-872">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-872">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-873">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-873">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-874">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-874">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-875">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-875">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-876"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-876"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-877">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-877">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-878">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-878">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-879">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-879">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-880">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-880">Required.</span></span> <span data-ttu-id="4f537-881">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-881">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-882">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-882">Required.</span></span> <span data-ttu-id="4f537-883">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-883">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-884">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-884">Optional.</span></span> <span data-ttu-id="4f537-885">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-885">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-886">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-886">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-887">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-887">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-888">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-888">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-889">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-889">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-890">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-890">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-891">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-891">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-892">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-892">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-893">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-893">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-894">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-894">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-895">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-895">Random Mode</span></span>  
 <span data-ttu-id="4f537-896">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-896">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-897">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-897">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-898">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-898">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-899">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-899">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-900">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-900">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-901">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-901">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-902">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-902">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-903">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-903">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-904">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-904">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-905">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-905">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-906">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-906">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-907">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-907">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-908">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-908">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-909">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-909">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-910">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-910">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-911">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-911">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-912">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-912">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-913">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-913">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-914">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-914">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-915">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-915">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-916">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-916">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-917">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-917">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-918">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-918">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-919">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-919">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-920">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-920">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-921">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-921">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-922">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-922">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-923">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-923">Binary Mode</span></span>  
 <span data-ttu-id="4f537-924">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-924">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-925">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-925">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-926">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-926">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-927">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-927">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-928">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-928">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-929">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-929">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-930">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-930">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-931">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-931">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-932">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-932">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-933"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-933"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-934">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-934">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-935">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-935">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-936">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-936">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-937">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-937">Required.</span></span> <span data-ttu-id="4f537-938">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-938">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-939">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-939">Required.</span></span> <span data-ttu-id="4f537-940">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-940">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-941">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-941">Optional.</span></span> <span data-ttu-id="4f537-942">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-942">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4f537-943">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-943">Optional.</span></span> <span data-ttu-id="4f537-944">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-944">Applies only when writing a string.</span></span> <span data-ttu-id="4f537-945">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-945">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="4f537-946">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-946">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4f537-947">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-947">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-948">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-948">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-949">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-949">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-950">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-950">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-951">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-951">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-952">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-952">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-953">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-953">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-954">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-954">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-955">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-955">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-956">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-956">Random Mode</span></span>  
 <span data-ttu-id="4f537-957">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-957">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-958">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-958">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-959">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-959">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-960">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-960">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-961">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-961">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-962">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-962">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-963">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-963">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-964">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-964">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-965">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-965">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-966">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-966">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-967">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-967">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-968">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-968">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-969">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-969">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-970">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-970">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-971">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-971">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-972">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-972">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-973">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-973">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-974">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-974">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-975">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-975">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-976">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-976">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-977">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-977">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-978">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-978">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-979">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-979">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-980">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-980">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-981">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-981">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-982">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-982">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-983">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-983">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-984">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-984">Binary Mode</span></span>  
 <span data-ttu-id="4f537-985">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-985">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-986">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-986">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-987">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-987">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-988">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-988">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-989">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-989">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-990">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-990">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-991">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-991">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-992">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-992">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-993">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-993">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-994"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-994"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-995">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-995">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-996">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-996">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-997">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-997">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-998">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-998">Required.</span></span> <span data-ttu-id="4f537-999">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-999">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1000">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1000">Required.</span></span> <span data-ttu-id="4f537-1001">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1001">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1002">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1002">Optional.</span></span> <span data-ttu-id="4f537-1003">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-1003">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="4f537-1004">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1004">Optional.</span></span> <span data-ttu-id="4f537-1005">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1005">Applies only when writing an array.</span></span> <span data-ttu-id="4f537-1006">Указывает, нужно ли обрабатывать массив как динамический, и обязательно ли записывать дескриптор массива, описывающий его длину и границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1006">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4f537-1007">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1007">Optional.</span></span> <span data-ttu-id="4f537-1008">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1008">Applies only when writing a string.</span></span> <span data-ttu-id="4f537-1009">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1009">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="4f537-1010">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1010">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4f537-1011">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1011">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="4f537-1012">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="4f537-1013">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1014">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1014">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1015">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1015">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="4f537-1016">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1016">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1017">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-1017">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-1018">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1018">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-1019">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-1019">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1020">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1020">Random Mode</span></span>  
 <span data-ttu-id="4f537-1021">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1021">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1022">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1022">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1023">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1023">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1024">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1024">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-1025">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1025">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1026">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1026">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1027">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1027">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-1028">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1028">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1029">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1029">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="4f537-1030">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1030">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1031">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1031">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="4f537-1032">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="4f537-1032">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="4f537-1033">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-1033">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="4f537-1034">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1034">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1035">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1035">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1036">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1036">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1037">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1037">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="4f537-1038">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-1038">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="4f537-1039">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="4f537-1039">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="4f537-1040">200 байт для данных: (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-1040">200 bytes for the data: (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-1041">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1041">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="4f537-1042">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1042">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-1043">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1043">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-1044">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1044">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1045">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="4f537-1045">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="4f537-1046">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1046">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-1047">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1047">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1048">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1048">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1049">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1049">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1050">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1050">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1051">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1051">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1052">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1052">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1053">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1053">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="4f537-1054">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1054">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="4f537-1055">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1055">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1056">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1056">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="4f537-1057">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1057">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1058"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1058"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1059">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1059">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-1060">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1060">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1061">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1061">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1062">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1062">Required.</span></span> <span data-ttu-id="4f537-1063">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1063">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1064">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1064">Required.</span></span> <span data-ttu-id="4f537-1065">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1065">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1066">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1066">Optional.</span></span> <span data-ttu-id="4f537-1067">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="4f537-1067">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1068">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1068">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="4f537-1069">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1069">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="4f537-1070">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1070">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1071">`FileGetObject` Функции используется вместо `FileGet` во избежание неоднозначности во время компиляции, если тип `Object` возвращается вместо другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1071">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="4f537-1072">Если вы собираетесь записать `Variant` типа, `FileGetObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="4f537-1072">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="4f537-1073">Если вы сомневаетесь, если вы используете объект для второго параметра, всегда рекомендуется использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1073">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="4f537-1074">`FileGetObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1074">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1075">Данные, считанные с `FileGetObject` записываются с `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1075">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="4f537-1076">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1076">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1077">Если опустить `RecordNumber`, `FileGetObject` считывает записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или на которые указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="4f537-1077">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1078">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1078">Random Mode</span></span>  
 <span data-ttu-id="4f537-1079">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1079">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1080">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGetObject` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1080">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1081">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1081">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1082">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется иметь совпадает с длиной данных длиной записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-1082">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="4f537-1083">Если переменная представляет собой строку, по умолчанию `FileGetObject` считывает двухбайтовый дескриптор, содержащий длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1083">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1084">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1084">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1085">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины и при записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1085">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="4f537-1086">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1086">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1087">Если переменная, считываемых в массив, а затем записей длину, заданную `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1087">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1088">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1088">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1089">Его длина равна 2 плюс 8, умноженное на количество измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="4f537-1089">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="4f537-1090">Например, следующее объявление массива требуется 218 байтов при записи на диск:</span><span class="sxs-lookup"><span data-stu-id="4f537-1090">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="4f537-1091">218 байт распределяются следующим образом: 18 байт для дескриптора (2 + 8 \* 2) и 100 байт для данных (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="4f537-1091">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="4f537-1092">`FileGetObject` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1092">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="4f537-1093">На диске, динамический массив в определяемый пользователем тип (с `FilePutObject`) начинается дескриптора, длина которого равна 2 плюс 8 раз число измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="4f537-1093">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="4f537-1094">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов, включая массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1094">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="4f537-1095"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Класс может быть применен к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1095">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1096">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1096">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1097">Для открытия файлов в `Binary` режим, все `Random` применяются правила, со следующими исключениями:</span><span class="sxs-lookup"><span data-stu-id="4f537-1097">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="4f537-1098">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1098">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1099">`FileGetObject` Считывает все переменные с диска непрерывно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1099">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1100">Для любого массива, кроме массива в виде структуры `FileGetObject` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1100">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="4f537-1101">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1101">No descriptor is read.</span></span>  
  
 <span data-ttu-id="4f537-1102">`FileGetObject` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1102">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1103">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1103">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-1104">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1104">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-1105">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-1105">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1106">В следующем примере выполняется запись в файл теста и затем получает его.</span><span class="sxs-lookup"><span data-stu-id="4f537-1106">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-1107">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1107">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1108">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1108">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4f537-1109">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1109">Required.</span></span> <span data-ttu-id="4f537-1110">Строковое выражение, которое определяет файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1110">A string expression that specifies a file.</span></span> <span data-ttu-id="4f537-1111"><paramref name="PathName" /> — может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-1111"><paramref name="PathName" /> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4f537-1112">Возвращает значение, которое указывает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="4f537-1112">Returns a value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="4f537-1113">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1113">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="4f537-1114">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1114">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-1115">Длина файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="4f537-1115">The length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1116">Если указанный файл открыт, когда `FileLen` вызывается функция, возвращаемое значение представляет размер файла на момент его открытия.</span><span class="sxs-lookup"><span data-stu-id="4f537-1116">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-1117">Чтобы получить текущую длину открытого файла, используйте `LOF` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-1117">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1118">В этом примере используется `FileLen` функция возвращает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="4f537-1118">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="4f537-1119">Для целей этого примера, предположим, что `TestFile` — это файл, который содержит некоторые данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1119">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-1120">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-1120">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-1121">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1121">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1122">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1122">Required.</span></span> <span data-ttu-id="4f537-1123">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1123">Any valid file number.</span></span> <span data-ttu-id="4f537-1124">Для получения следующего свободного номера файла следует использовать функцию <see langword="FreeFile" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1124">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="4f537-1125">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1125">Required.</span></span> <span data-ttu-id="4f537-1126">Строковое выражение, которое указывает имя файла. Может включать имя каталога или папки, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-1126">A string expression that specifies a file name - may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="4f537-1127">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1127">Required.</span></span> <span data-ttu-id="4f537-1128">Перечисление, определяющее режим файла: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> или <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1128">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="4f537-1129">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1129">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="4f537-1130">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1130">Optional.</span></span> <span data-ttu-id="4f537-1131">Перечисление, определяющие операции, разрешенные для работы с открытым файлом: <see langword="Read" />, <see langword="Write" /> или <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1131">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="4f537-1132">По умолчанию — <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1132">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="4f537-1133">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1133">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="4f537-1134">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1134">Optional.</span></span> <span data-ttu-id="4f537-1135">Перечисление операций, не разрешенных при работе с файлом, открытым другим процессом: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> и <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1135">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="4f537-1136">По умолчанию — <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1136">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="4f537-1137">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1137">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="4f537-1138">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1138">Optional.</span></span> <span data-ttu-id="4f537-1139">Число, не превышающее 32 767 (байт).</span><span class="sxs-lookup"><span data-stu-id="4f537-1139">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="4f537-1140">Для файлов, открытых с произвольным доступом, это значение является длиной записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-1140">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="4f537-1141">Для файлов с последовательным доступом — это число знаков в буфере.</span><span class="sxs-lookup"><span data-stu-id="4f537-1141">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="4f537-1142">Открывает файл для ввода или вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-1142">Opens a file for input or output.</span></span> <span data-ttu-id="4f537-1143">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1143">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="4f537-1144">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1144">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1145">`FileOpen` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-1145">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-1146">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-1146">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-1147">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-1147">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-1148">Перед выполнением любой операции ввода-вывода на нем необходимо открыть файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1148">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="4f537-1149">`FileOpen` выделяет буфер для ввода-вывода в файл и определяет режим доступа для использования с буфером.</span><span class="sxs-lookup"><span data-stu-id="4f537-1149">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-1150">При записи в файл приложения может потребоваться создать файл, если файл, к которому он пытается получить запись не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-1150">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="4f537-1151">Чтобы сделать это, ему разрешения для каталога, в котором должен быть создан файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1151">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="4f537-1152">Тем не менее если файл, заданный параметром `FileName` существует, приложению `Write` разрешение только на сам файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1152">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="4f537-1153">Везде, где возможно, в целях повышения безопасности, создать файл во время развертывания и предоставить `Write` разрешение на этот файл только, а не для всего каталога.</span><span class="sxs-lookup"><span data-stu-id="4f537-1153">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="4f537-1154">В целях повышения безопасности, записывайте данные в каталоги пользователей, а не в корневом каталоге или каталоге Program Files.</span><span class="sxs-lookup"><span data-stu-id="4f537-1154">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="4f537-1155">Канал, чтобы открыть можно найти с помощью `FreeFile()` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-1155">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-1156">`FileOpen` Функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления, который может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="4f537-1156">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="4f537-1157">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1157">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1158">В этом примере показаны различные способы `FileOpen` функцию входные и выходные данные в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1158">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="4f537-1159">Следующий код открывает файл `TestFile` в `Input` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-1159">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="4f537-1160">Этот пример открывает файл в `Binary` режиме для записи только операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-1160">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="4f537-1161">В следующем примере открывается файл в `Random` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-1161">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="4f537-1162">Файл содержит записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1162">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="4f537-1163">Данный пример кода открывает файл в `Output` режиме; любой процесс может прочитать или записать в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1163">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="4f537-1164">Данный пример кода открывает файл в `Binary` режиме для чтения; другие процессы не удается прочитать файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1164">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1165">Отрицательная длина записи (не равная –1).</span><span class="sxs-lookup"><span data-stu-id="4f537-1165">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1166">Файл <paramref name="FileName" /> уже открыт, или <paramref name="FileName" /> является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="4f537-1166"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-1167">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1167">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1168">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1168">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-1169">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1169">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1170">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1170">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1171">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1171">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1172">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1172">Required.</span></span> <span data-ttu-id="4f537-1173">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1173">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1174">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1174">Required.</span></span> <span data-ttu-id="4f537-1175">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1175">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1176">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1176">Optional.</span></span> <span data-ttu-id="4f537-1177">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1177">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1178">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1178">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1179">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1179">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1180">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1180">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1181">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1181">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1182">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1182">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1183">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1183">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1184">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1184">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1185">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1185">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1186">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1186">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1187">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1187">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1188">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1188">Random Mode</span></span>  
 <span data-ttu-id="4f537-1189">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1189">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1190">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1190">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1191">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1191">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1192">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1192">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1193">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1193">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1194">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1194">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1195">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1195">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1196">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1196">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1197">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1197">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1198">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1198">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1199">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1199">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1200">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1200">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1201">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1201">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1202">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1202">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1203">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1203">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1204">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1204">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1205">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1205">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1206">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1206">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1207">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1207">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1208">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1208">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1209">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1209">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1210">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1210">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1211">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1211">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1212">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1213">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1213">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1214">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1214">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1215">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1215">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1216">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1216">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1217">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1217">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1218">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1218">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1219">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1219">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1220">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1220">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1221">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1221">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1222">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1222">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1223">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1223">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1224">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1224">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1225">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1225">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1226">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1226">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1227">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1227">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1228">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1228">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1229"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1229"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1230">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1230">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1231">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1231">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1232">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1232">Required.</span></span> <span data-ttu-id="4f537-1233">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1233">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1234">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1234">Required.</span></span> <span data-ttu-id="4f537-1235">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1235">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1236">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1236">Optional.</span></span> <span data-ttu-id="4f537-1237">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1237">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1238">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1238">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1239">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1239">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1240">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1240">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1241">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1241">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1242">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1242">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1243">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1243">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1244">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1244">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1245">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1245">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1246">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1246">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1247">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1247">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1248">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1248">Random Mode</span></span>  
 <span data-ttu-id="4f537-1249">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1249">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1250">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1250">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1251">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1251">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1252">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1252">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1253">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1253">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1254">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1254">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1255">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1255">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1256">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1256">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1257">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1257">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1258">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1258">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1259">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1259">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1260">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1261">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1261">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1262">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1262">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1263">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1263">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1264">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1264">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1265">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1265">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1266">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1266">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1267">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1267">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1268">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1268">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1269">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1269">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1270">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1270">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1271">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1271">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1272">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1272">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1273">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1273">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1274">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1274">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1275">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1275">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1276">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1276">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1277">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1277">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1278">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1278">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1279">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1279">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1280">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1280">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1281">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1281">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1282">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1282">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1283">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1283">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1284">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1284">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1285">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1285">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1286">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1286">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1287">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1287">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1288">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1288">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1289"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1289"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1290">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1290">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1291">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1291">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1292">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1292">Required.</span></span> <span data-ttu-id="4f537-1293">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1293">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1294">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1294">Required.</span></span> <span data-ttu-id="4f537-1295">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1295">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1296">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1296">Optional.</span></span> <span data-ttu-id="4f537-1297">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1297">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1298">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1298">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1299">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1299">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1300">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1300">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1301">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1301">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1302">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1302">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1303">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1303">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1304">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1304">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1305">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1305">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1306">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1306">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1307">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1307">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1308">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1308">Random Mode</span></span>  
 <span data-ttu-id="4f537-1309">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1309">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1310">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1310">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1311">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1311">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1312">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1312">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1313">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1313">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1314">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1314">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1315">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1315">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1316">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1316">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1317">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1317">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1318">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1318">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1319">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1319">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1320">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1320">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1321">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1321">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1322">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1322">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1323">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1323">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1324">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1324">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1325">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1325">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1326">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1326">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1327">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1327">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1328">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1328">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1329">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1329">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1330">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1330">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1331">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1331">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1332">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1332">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1333">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1333">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1334">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1334">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1335">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1335">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1336">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1336">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1337">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1337">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1338">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1338">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1339">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1339">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1340">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1340">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1341">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1341">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1342">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1342">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1343">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1343">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1344">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1344">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1345">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1345">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1346">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1346">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1347">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1347">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1348">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1348">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1349"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1349"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1350">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1350">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1351">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1351">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1352">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1352">Required.</span></span> <span data-ttu-id="4f537-1353">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1353">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1354">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1354">Required.</span></span> <span data-ttu-id="4f537-1355">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1355">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1356">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1356">Optional.</span></span> <span data-ttu-id="4f537-1357">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1358">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1358">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1359">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1360">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1361">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1362">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1363">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1364">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1365">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1366">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1367">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1368">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1368">Random Mode</span></span>  
 <span data-ttu-id="4f537-1369">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1370">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1371">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1372">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1373">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1374">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1375">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1376">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1377">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1378">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1379">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1380">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1381">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1382">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1383">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1384">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1385">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1386">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1387">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1388">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1389">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1390">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1391">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1392">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1393">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1394">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1395">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1396">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1396">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1397">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1398">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1399">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1400">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1401">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1402">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1403">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1404">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1405">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1406">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1407">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1408">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1409"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1409"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1410">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1410">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1411">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1411">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1412">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1412">Required.</span></span> <span data-ttu-id="4f537-1413">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1413">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1414">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1414">Required.</span></span> <span data-ttu-id="4f537-1415">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1415">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1416">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1416">Optional.</span></span> <span data-ttu-id="4f537-1417">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1417">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1418">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1418">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1419">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1419">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1420">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1420">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1421">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1421">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1422">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1422">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1423">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1423">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1424">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1424">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1425">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1425">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1426">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1426">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1427">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1427">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1428">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1428">Random Mode</span></span>  
 <span data-ttu-id="4f537-1429">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1429">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1430">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1430">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1431">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1431">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1432">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1432">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1433">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1433">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1434">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1434">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1435">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1435">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1436">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1436">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1437">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1437">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1438">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1438">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1439">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1439">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1440">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1440">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1441">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1441">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1442">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1442">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1443">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1443">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1444">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1444">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1445">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1445">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1446">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1446">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1447">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1447">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1448">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1448">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1449">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1449">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1450">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1450">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1451">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1451">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1452">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1452">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1453">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1453">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1454">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1454">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1455">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1455">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1456">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1456">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1457">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1457">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1458">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1458">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1459">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1459">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1460">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1460">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1461">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1461">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1462">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1462">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1463">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1463">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1464">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1464">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1465">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1465">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1466">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1466">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1467">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1467">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1468">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1468">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1469"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1469"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1470">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1470">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1471">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1471">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1472">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1472">Required.</span></span> <span data-ttu-id="4f537-1473">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1473">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1474">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1474">Required.</span></span> <span data-ttu-id="4f537-1475">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1475">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1476">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1476">Optional.</span></span> <span data-ttu-id="4f537-1477">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1477">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1478">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1478">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1479">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1479">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1480">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1480">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1481">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1481">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1482">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1482">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1483">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1483">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1484">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1484">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1485">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1485">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1486">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1486">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1487">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1487">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1488">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1488">Random Mode</span></span>  
 <span data-ttu-id="4f537-1489">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1489">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1490">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1490">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1491">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1491">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1492">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1492">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1493">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1493">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1494">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1494">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1495">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1495">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1496">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1496">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1497">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1497">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1498">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1499">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1499">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1500">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1500">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1501">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1501">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1502">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1502">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1503">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1503">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1504">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1504">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1505">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1505">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1506">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1506">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1507">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1507">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1508">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1508">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1509">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1509">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1510">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1510">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1511">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1511">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1512">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1512">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1513">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1513">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1514">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1514">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1515">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1515">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1516">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1516">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1517">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1517">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1518">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1518">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1519">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1519">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1520">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1520">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1521">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1521">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1522">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1522">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1523">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1523">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1524">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1524">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1525">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1525">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1526">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1526">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1527">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1527">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1528">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1528">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1529"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1529"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1530">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1530">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1531">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1531">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1532">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1532">Required.</span></span> <span data-ttu-id="4f537-1533">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1533">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1534">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1534">Required.</span></span> <span data-ttu-id="4f537-1535">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1535">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1536">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1536">Optional.</span></span> <span data-ttu-id="4f537-1537">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1537">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1538">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1538">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1539">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1539">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1540">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1540">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1541">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1541">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1542">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1542">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1543">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1543">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1544">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1544">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1545">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1545">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1546">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1546">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1547">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1547">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1548">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1548">Random Mode</span></span>  
 <span data-ttu-id="4f537-1549">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1549">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1550">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1550">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1551">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1551">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1552">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1552">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1553">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1553">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1554">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1554">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1555">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1555">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1556">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1556">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1557">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1557">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1558">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1558">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1559">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор`VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1559">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1560">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1560">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1561">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1561">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1562">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1562">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1563">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1563">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1564">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1564">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1565">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1565">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1566">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1566">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1567">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1567">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1568">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1568">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1569">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1570">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1570">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1571">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1571">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1572">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1573">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1573">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1574">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1574">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1575">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1575">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1576">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1576">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1577">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1577">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1578">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1578">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1579">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1579">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1580">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1580">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1581">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1581">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1582">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1582">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1583">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1583">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1584">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1584">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1585">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1585">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1586">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1586">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1587">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1587">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1588">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1588">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1589"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1589"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1590">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1590">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1591">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1591">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1592">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1592">Required.</span></span> <span data-ttu-id="4f537-1593">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1593">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1594">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1594">Required.</span></span> <span data-ttu-id="4f537-1595">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1595">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1596">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1596">Optional.</span></span> <span data-ttu-id="4f537-1597">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1597">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1598">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1598">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1599">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1599">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1600">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1600">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1601">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1601">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1602">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1602">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1603">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1603">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1604">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1604">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1605">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1605">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1606">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1606">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1607">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1607">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1608">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1608">Random Mode</span></span>  
 <span data-ttu-id="4f537-1609">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1609">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1610">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1610">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1611">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1611">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1612">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1612">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1613">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1613">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1614">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1614">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1615">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1615">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1616">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1616">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1617">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1617">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1618">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1618">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1619">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1619">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1620">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1621">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1621">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1622">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1622">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1623">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1623">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1624">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1624">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1625">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1625">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1626">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1626">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1627">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1627">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1628">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1628">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1629">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1629">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1630">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1630">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1631">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1631">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1632">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1632">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1633">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1633">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1634">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1634">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1635">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1635">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1636">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1636">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1637">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1637">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1638">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1638">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1639">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1639">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1640">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1640">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1641">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1641">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1642">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1642">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1643">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1643">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1644">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1644">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1645">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1645">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1646">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1646">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1647">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1647">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1648">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1648">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1649"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1649"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1650">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1650">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1651">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1651">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1652">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1652">Required.</span></span> <span data-ttu-id="4f537-1653">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1653">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1654">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1654">Required.</span></span> <span data-ttu-id="4f537-1655">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1655">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1656">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1656">Optional.</span></span> <span data-ttu-id="4f537-1657">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1657">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1658">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1658">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1659">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1660">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1661">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1661">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1662">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1662">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1663">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1663">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1664">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1664">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1665">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1665">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1666">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1666">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1667">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1667">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1668">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1668">Random Mode</span></span>  
 <span data-ttu-id="4f537-1669">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1669">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1670">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1670">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1671">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1671">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1672">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1672">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1673">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1673">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1674">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1674">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1675">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1675">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1676">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1676">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1677">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1677">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1678">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1678">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1679">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1679">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1680">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1680">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1681">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1681">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1682">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1682">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1683">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1683">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1684">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1684">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1685">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1685">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1686">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1686">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1687">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1687">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1688">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1688">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1689">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1689">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1690">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1690">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1691">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1691">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1692">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1692">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1693">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1693">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1694">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1694">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1695">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1695">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1696">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1696">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1697">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1697">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1698">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1698">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1699">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1699">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1700">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1700">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1701">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1701">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1702">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1702">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1703">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1703">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1704">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1704">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1705">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1705">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1706">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1706">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1707">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1707">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1708">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1708">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1709"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1709"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1710">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1710">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1711">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1711">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1712">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1712">Required.</span></span> <span data-ttu-id="4f537-1713">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1714">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1714">Required.</span></span> <span data-ttu-id="4f537-1715">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1716">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1716">Optional.</span></span> <span data-ttu-id="4f537-1717">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1718">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1719">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1720">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1721">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1722">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1723">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1724">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1725">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1726">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1727">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1728">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1728">Random Mode</span></span>  
 <span data-ttu-id="4f537-1729">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1730">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1730">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1731">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1732">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1733">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1734">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1735">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1736">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1737">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1738">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1739">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1740">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1741">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1742">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1743">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1744">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1745">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1746">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1747">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1748">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1749">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1750">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1751">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1752">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1753">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1754">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1755">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1756">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1756">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1757">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1758">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1759">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1760">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1761">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1762">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1763">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1764">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1765">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1766">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1767">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1768">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1769"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1770">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1771">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1771">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1772">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1772">Required.</span></span> <span data-ttu-id="4f537-1773">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1773">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1774">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1774">Required.</span></span> <span data-ttu-id="4f537-1775">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1775">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1776">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1776">Optional.</span></span> <span data-ttu-id="4f537-1777">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1777">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1778">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1778">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1779">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1780">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1781">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1781">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1782">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1782">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1783">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1783">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1784">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1784">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1785">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1785">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1786">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1786">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1787">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1787">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1788">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1788">Random Mode</span></span>  
 <span data-ttu-id="4f537-1789">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1789">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1790">Если длина записываемых данных меньше, чем длина, указанная в`RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1790">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1791">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1791">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1792">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1792">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1793">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1793">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1794">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1794">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1795">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1795">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1796">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1796">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1797">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1797">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1798">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1798">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1799">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1799">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1800">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1800">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1801">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1801">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1802">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1802">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1803">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1803">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1804">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1804">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1805">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1806">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1806">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1807">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1807">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1808">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1808">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1809">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1809">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1810">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1810">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1811">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1811">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1812">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1812">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1813">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1813">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1814">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1814">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1815">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1815">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1816">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1816">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1817">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1817">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1818">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1818">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1819">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1819">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1820">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1820">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1821">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1821">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1822">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1822">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1823">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1823">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1824">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1824">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1825">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1825">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1826">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1826">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1827">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1827">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1828">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1828">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1829"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1829"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1830">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1830">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1831">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1831">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1832">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1832">Required.</span></span> <span data-ttu-id="4f537-1833">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1833">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1834">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1834">Required.</span></span> <span data-ttu-id="4f537-1835">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1835">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1836">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1836">Optional.</span></span> <span data-ttu-id="4f537-1837">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1837">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-1838">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1838">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1839">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1839">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1840">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1840">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1841">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1841">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1842">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1842">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1843">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1843">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1844">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1844">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1845">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1845">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1846">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1846">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1847">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1847">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1848">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1848">Random Mode</span></span>  
 <span data-ttu-id="4f537-1849">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1849">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1850">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1850">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1851">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1851">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1852">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1852">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1853">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1853">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1854">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1854">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1855">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1855">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1856">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1856">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1857">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1857">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1858">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1858">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1859">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1859">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1860">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1861">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1861">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1862">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1862">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1863">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1863">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1864">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1864">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1865">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1865">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1866">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1866">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1867">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1867">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1868">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1868">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1869">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1869">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1870">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1870">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1871">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1871">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1872">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1873">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1873">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1874">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1874">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1875">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1875">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1876">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1876">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1877">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1877">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1878">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1878">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1879">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1879">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1880">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1880">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1881">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1881">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1882">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1882">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1883">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1883">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1884">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1884">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1885">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1885">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1886">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1886">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1887">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1887">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1888">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1888">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1889"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1889"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1890">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1890">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1891">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1891">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1892">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1892">Required.</span></span> <span data-ttu-id="4f537-1893">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1893">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1894">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1894">Required.</span></span> <span data-ttu-id="4f537-1895">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1895">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1896">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1896">Optional.</span></span> <span data-ttu-id="4f537-1897">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1897">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4f537-1898">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1898">Optional.</span></span> <span data-ttu-id="4f537-1899">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1899">Applies only when writing a string.</span></span> <span data-ttu-id="4f537-1900">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1900">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="4f537-1901">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1901">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4f537-1902">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1902">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1903">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1903">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1904">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1904">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1905">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1905">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1906">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1906">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1907">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1907">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1908">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1908">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1909">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1909">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1910">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1910">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1911">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1911">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1912">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1912">Random Mode</span></span>  
 <span data-ttu-id="4f537-1913">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1913">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1914">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1914">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1915">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1915">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1916">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1916">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1917">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1917">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1918">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1918">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1919">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1919">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1920">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1920">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1921">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1921">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1922">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1923">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1923">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1924">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1924">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1925">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1925">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1926">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1926">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1927">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1927">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1928">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1928">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1929">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1929">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1930">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1930">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1931">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1931">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1932">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1932">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-1933">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1933">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-1934">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1934">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-1935">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1935">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-1936">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1936">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-1937">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-1937">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-1938">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1938">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-1939">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-1939">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-1940">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-1940">Binary Mode</span></span>  
 <span data-ttu-id="4f537-1941">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1941">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-1942">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-1942">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-1943">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1943">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-1944">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-1944">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-1945">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1945">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-1946">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1946">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-1947">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-1947">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-1948">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-1948">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-1949">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-1949">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-1950">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-1950">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-1951">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1951">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-1952">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-1952">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-1953"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-1953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-1954">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1954">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-1955">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-1955">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-1956">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1956">Required.</span></span> <span data-ttu-id="4f537-1957">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1957">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-1958">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-1958">Required.</span></span> <span data-ttu-id="4f537-1959">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-1959">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-1960">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1960">Optional.</span></span> <span data-ttu-id="4f537-1961">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-1961">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="4f537-1962">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1962">Optional.</span></span> <span data-ttu-id="4f537-1963">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1963">Applies only when writing an array.</span></span> <span data-ttu-id="4f537-1964">Указывает, нужно ли обрабатывать массив как динамический, и записывать ли дескриптор массива для строки, определяющий ее длину.</span><span class="sxs-lookup"><span data-stu-id="4f537-1964">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="4f537-1965">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-1965">Optional.</span></span> <span data-ttu-id="4f537-1966">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1966">Applies only when writing a string.</span></span> <span data-ttu-id="4f537-1967">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1967">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="4f537-1968">Значение по умолчанию — <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1968">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="4f537-1969">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-1969">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="4f537-1970">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1970">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="4f537-1971">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-1971">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-1972">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-1972">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-1973">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1973">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="4f537-1974">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-1975">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="4f537-1975">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="4f537-1976">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-1977">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1977">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-1978">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1978">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-1979">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-1979">Random Mode</span></span>  
 <span data-ttu-id="4f537-1980">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-1981">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-1982">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-1983">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-1983">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-1984">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="4f537-1985">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1985">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="4f537-1986">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1986">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="4f537-1987">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-1987">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-1988">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-1988">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-1989">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-1990">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1990">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-1991">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1991">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-1992">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-1992">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-1993">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="4f537-1993">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="4f537-1994">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="4f537-1994">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="4f537-1995">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-1995">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="4f537-1996">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-1996">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="4f537-1997">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-1997">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="4f537-1998">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-1998">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-1999">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-1999">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="4f537-2000">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-2000">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-2001">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-2001">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="4f537-2002">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2002">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="4f537-2003">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2003">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="4f537-2004">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="4f537-2004">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="4f537-2005">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-2005">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="4f537-2006">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="4f537-2006">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-2007">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-2007">Binary Mode</span></span>  
 <span data-ttu-id="4f537-2008">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="4f537-2008">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="4f537-2009">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="4f537-2009">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="4f537-2010">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2010">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-2011">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-2011">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="4f537-2012">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2012">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="4f537-2013">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-2013">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="4f537-2014">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2014">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="4f537-2015">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2015">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="4f537-2016">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="4f537-2016">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="4f537-2017">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2017">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2018">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2018">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="4f537-2019">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2019">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-2020"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="4f537-2020"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2021">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2021">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-2022">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2022">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2023">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2023">Required.</span></span> <span data-ttu-id="4f537-2024">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2024">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2025">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2025">Required.</span></span> <span data-ttu-id="4f537-2026">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-2026">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="4f537-2027">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2027">Optional.</span></span> <span data-ttu-id="4f537-2028">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="4f537-2028">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="4f537-2029">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-2029">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="4f537-2030">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2030">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="4f537-2031">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2031">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2032">`FilePutObject` Функции используется вместо `FilePut` во избежание неоднозначности во время компиляции, если тип `Object` передается вместо другого типа, например `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-2032">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="4f537-2033">`FilePutObject` Записывает и читает дескрипторы, описывающие объект.</span><span class="sxs-lookup"><span data-stu-id="4f537-2033">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="4f537-2034">Если вы собираетесь записать `Variant` типа, `FilePutObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2034">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="4f537-2035">Если вы сомневаетесь, если вы используете объект для второго параметра, мы рекомендуем всегда использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2035">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="4f537-2036">`FilePutObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="4f537-2036">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-2037">Данные, записанные с использованием `FilePutObject`, обычно считываются с помощью `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2037">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="4f537-2038">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-2038">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="4f537-2039">Если опустить `RecordNumber`, `FilePutObject` записывает Далее записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или записи или единственного байта, на которые указывают последнего `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="4f537-2039">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="4f537-2040">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="4f537-2040">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="4f537-2041">`FilePutObject` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2041">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="4f537-2042">При использовании `StringIsFixedLength`  =  `True` с `FilePutObject`, что необходимо сделать то же самое с `FileGetObject`, а также необходимо убедиться в том, что строка инициализируется длина ожидалось.</span><span class="sxs-lookup"><span data-stu-id="4f537-2042">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="4f537-2043">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="4f537-2043">Random Mode</span></span>  
 <span data-ttu-id="4f537-2044">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="4f537-2044">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="4f537-2045">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePutObject` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="4f537-2045">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="4f537-2046">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2046">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="4f537-2047">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2047">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="4f537-2048">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="4f537-2048">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="4f537-2049">Если записываемая переменная является объектом, содержащим числовой тип, `FilePutObject` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="4f537-2049">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="4f537-2050">Например, при написании объект, содержащий целое число, `FilePutObject` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2050">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="4f537-2051">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2051">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="4f537-2052">Если записываемая переменная — это объект, который содержит строку, `FilePutObject` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2052">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="4f537-2053">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2053">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="4f537-2054">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2054">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="4f537-2055">Если записываемая переменная является массивом, а затем записей длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="4f537-2055">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="4f537-2056">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="4f537-2056">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="4f537-2057">Его длина равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="4f537-2057">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="4f537-2058">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="4f537-2058">Binary Mode</span></span>  
 <span data-ttu-id="4f537-2059">Для открытия файлов в `Binary` режим, все `Random` применяются правила режиме, за исключением:</span><span class="sxs-lookup"><span data-stu-id="4f537-2059">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="4f537-2060">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2060">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="4f537-2061">`FilePutObject` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="4f537-2061">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2062">В этом примере используется `FilePutObject` функцию для записи строки в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2062">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-2063">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2063">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2064">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2064">Required.</span></span> <span data-ttu-id="4f537-2065">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2065">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="4f537-2066">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2066">Required.</span></span> <span data-ttu-id="4f537-2067">Числовое выражение в диапазоне от 0 до 255 включительно, которое показывает, сколько знаков появится в строке перед началом новой строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2067">Numeric expression in the range 0-255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="4f537-2068">Если параметр <paramref name="RecordWidth" /> равен 0, ограничения на длину строки не устанавливаются.</span><span class="sxs-lookup"><span data-stu-id="4f537-2068">If <paramref name="RecordWidth" /> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="4f537-2069">Значение по умолчанию для <paramref name="RecordWidth" /> равно 0.</span><span class="sxs-lookup"><span data-stu-id="4f537-2069">The default value for <paramref name="RecordWidth" /> is 0.</span></span></param>
        <summary><span data-ttu-id="4f537-2070">Присваивает ширину строки вывода в файле, открытом функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2070">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="4f537-2071">В этом примере используется `FileWidth` функцию для задания ширины строки вывода для файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2071">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2072">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2073">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2073">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f537-2074">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2074">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="4f537-2075">Целочисленное значение, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2075">An integer value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2076">Используйте `FreeFile` для номера файла, который уже не используется.</span><span class="sxs-lookup"><span data-stu-id="4f537-2076">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2077">В этом примере используется `FreeFile` функцию для возврата следующего свободного номера файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2077">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="4f537-2078">Для вывода в цикле открывается пять файлов, и некоторые примеры данных записывается для каждого.</span><span class="sxs-lookup"><span data-stu-id="4f537-2078">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2079">Используется больше 255 файлов.</span><span class="sxs-lookup"><span data-stu-id="4f537-2079">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-2080">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2080">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4f537-2081">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2081">Required.</span></span> <span data-ttu-id="4f537-2082">Строковое выражение, определяющее имя файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2082">A string expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="4f537-2083">Выражение <paramref name="PathName" /> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2083"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4f537-2084">Возвращает значение <see langword="FileAttribute" />, представляющее атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2084">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="4f537-2085">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2085">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="4f537-2086">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2086">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-2087">Значение, возвращаемое функцией <see langword="GetAttr" />, является суммой следующих значений перечисления:</span><span class="sxs-lookup"><span data-stu-id="4f537-2087">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span> 
 <list type="table"><item><term> <span data-ttu-id="4f537-2088">Значение</span><span class="sxs-lookup"><span data-stu-id="4f537-2088">Value</span></span> 
 </term><description> <span data-ttu-id="4f537-2089">Константа</span><span class="sxs-lookup"><span data-stu-id="4f537-2089">Constant</span></span> 
 </description><description> <span data-ttu-id="4f537-2090">Описание</span><span class="sxs-lookup"><span data-stu-id="4f537-2090">Description</span></span> 
 </description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> <span data-ttu-id="4f537-2091">Нормальный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2091">Normal.</span></span>  
  
 </description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> <span data-ttu-id="4f537-2092">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-2092">Read-only.</span></span>  
  
 </description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> <span data-ttu-id="4f537-2093">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="4f537-2093">Hidden.</span></span>  
  
 </description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> <span data-ttu-id="4f537-2094">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2094">System file.</span></span>  
  
 </description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> <span data-ttu-id="4f537-2095">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2095">Directory or folder.</span></span>  
  
 </description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> <span data-ttu-id="4f537-2096">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="4f537-2096">File has changed since last backup.</span></span>  
  
 </description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> <span data-ttu-id="4f537-2097">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="4f537-2097">File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="4f537-2098">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-2098">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="4f537-2099">Эти имена можно использовать в любом месте кода вместо самих значений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2099">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2100">Чтобы определить, какие атрибуты имеют значения, используйте `And` оператор для выполнения побитовое сравнение значения, возвращенного `GetAttr` функции и значения атрибута файла необходимо.</span><span class="sxs-lookup"><span data-stu-id="4f537-2100">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="4f537-2101">Если результат не равен нулю, этот атрибут имеет значение для указанного файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2101">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="4f537-2102">Например, возвращаемое значение из следующих `And` выражение является нуль, если `Archive` атрибут не задан:</span><span class="sxs-lookup"><span data-stu-id="4f537-2102">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="4f537-2103">Ненулевое значение возвращается в том случае, если `Archive` атрибут имеет значение.</span><span class="sxs-lookup"><span data-stu-id="4f537-2103">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2104">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2104">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2105">Параметр <paramref name="Pathname" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="4f537-2105"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-2106">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2106">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/and-operator.md"><span data-ttu-id="4f537-2107">Оператор And (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2107">And Operator (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2108">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2108">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-2109">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2110">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2110">Required.</span></span> <span data-ttu-id="4f537-2111">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2111">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2112">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2112">Required.</span></span> <span data-ttu-id="4f537-2113">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2113">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2114">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2114">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2115">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2115">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2116">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2116">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2117">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2117">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2118">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2118">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2119">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2119">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2120">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2120">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2121">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2121">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2122">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2122">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2123">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2123">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2124">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2124">Data</span></span>|<span data-ttu-id="4f537-2125">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2125">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2126">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2126">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2127">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2127">Empty</span></span>|  
|<span data-ttu-id="4f537-2128">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2128">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2129">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2129">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2130">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2130">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2131">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2131">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2132">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2132">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2133">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2133">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2134">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2134">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2135">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2135">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2136">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2136">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2137">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2137">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2138">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2138">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2139">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2139">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2140">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2140">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2141">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2141">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2142">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2142">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2143">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2143">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2144">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2144">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2145">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2145">Required.</span></span> <span data-ttu-id="4f537-2146">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2146">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2147">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2147">Required.</span></span> <span data-ttu-id="4f537-2148">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2148">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2149">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2149">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2150">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2150">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2151">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2151">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2152">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2152">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2153">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2153">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2154">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2154">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2155">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2155">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2156">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2156">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2157">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2157">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2158">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2158">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2159">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2159">Data</span></span>|<span data-ttu-id="4f537-2160">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2160">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2161">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2161">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2162">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2162">Empty</span></span>|  
|<span data-ttu-id="4f537-2163">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2163">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2164">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2164">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2165">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2165">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2166">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2166">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2167">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2167">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2168">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2168">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2169">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2169">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2170">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2170">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2171">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2171">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2172">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2172">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2173">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2173">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2174">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2174">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2175">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2175">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2176">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2176">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2177">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2177">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2178">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2178">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2179">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2179">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2180">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2180">Required.</span></span> <span data-ttu-id="4f537-2181">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2181">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2182">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2182">Required.</span></span> <span data-ttu-id="4f537-2183">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2183">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2184">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2184">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2185">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2185">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2186">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2186">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2187">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2187">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2188">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2188">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2189">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2189">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2190">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2190">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2191">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2191">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2192">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2192">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2193">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2193">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2194">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2194">Data</span></span>|<span data-ttu-id="4f537-2195">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2195">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2196">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2196">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2197">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2197">Empty</span></span>|  
|<span data-ttu-id="4f537-2198">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2198">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2199">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2199">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2200">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2200">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2201">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2201">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2202">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2202">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2203">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2203">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2204">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2204">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2205">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2205">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2206">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2206">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2207">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2207">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2208">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2208">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2209">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2209">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2210">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2210">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2211">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2211">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2212">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2212">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2213">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2213">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2214">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2214">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2215">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2215">Required.</span></span> <span data-ttu-id="4f537-2216">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2216">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2217">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2217">Required.</span></span> <span data-ttu-id="4f537-2218">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2218">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2219">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2219">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2220">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2220">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2221">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2221">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2222">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2222">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2223">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2223">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2224">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2224">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2225">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2225">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2226">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2226">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2227">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2227">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2228">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2228">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2229">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2229">Data</span></span>|<span data-ttu-id="4f537-2230">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2230">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2231">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2231">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2232">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2232">Empty</span></span>|  
|<span data-ttu-id="4f537-2233">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2233">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2234">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2234">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2235">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2235">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2236">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2236">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2237">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2237">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2238">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2238">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2239">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2239">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2240">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2240">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2241">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2241">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2242">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2242">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2243">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2243">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2244">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2244">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2245">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2245">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2246">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2246">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2247">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2247">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2248">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2248">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2249">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2249">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2250">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2250">Required.</span></span> <span data-ttu-id="4f537-2251">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2251">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2252">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2252">Required.</span></span> <span data-ttu-id="4f537-2253">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2253">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2254">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2254">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2255">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2255">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2256">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2256">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2257">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2257">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2258">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2258">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2259">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2259">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2260">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2260">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2261">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2261">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2262">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2262">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2263">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2263">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2264">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2264">Data</span></span>|<span data-ttu-id="4f537-2265">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2265">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2266">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2266">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2267">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2267">Empty</span></span>|  
|<span data-ttu-id="4f537-2268">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2268">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2269">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2269">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2270">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2270">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2271">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2271">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2272">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2272">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2273">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2273">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2274">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2274">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2275">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2275">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2276">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2276">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2277">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2277">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2278">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2278">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2279">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2279">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2280">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2280">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2281">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2281">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2282">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2282">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2283">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2283">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2284">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2284">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2285">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2285">Required.</span></span> <span data-ttu-id="4f537-2286">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2286">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2287">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2287">Required.</span></span> <span data-ttu-id="4f537-2288">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2288">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2289">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2289">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2290">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2290">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2291">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2291">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2292">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2292">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2293">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2293">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2294">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2294">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2295">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2295">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2296">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2296">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2297">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2297">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2298">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2298">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2299">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2299">Data</span></span>|<span data-ttu-id="4f537-2300">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2300">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2301">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2301">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2302">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2302">Empty</span></span>|  
|<span data-ttu-id="4f537-2303">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2303">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2304">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2304">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2305">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2305">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2306">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2306">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2307">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2307">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2308">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2308">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2309">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2309">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2310">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2310">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2311">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2311">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2312">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2312">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2313">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2313">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2314">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2314">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2315">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2315">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2316">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2316">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2317">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2317">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2318">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2318">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2319">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2319">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2320">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2320">Required.</span></span> <span data-ttu-id="4f537-2321">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2321">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2322">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2322">Required.</span></span> <span data-ttu-id="4f537-2323">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2323">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2324">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2324">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2325">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2325">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2326">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2326">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2327">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2327">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2328">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2328">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2329">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2329">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2330">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2330">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2331">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2331">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2332">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2332">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2333">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2333">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2334">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2334">Data</span></span>|<span data-ttu-id="4f537-2335">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2335">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2336">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2336">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2337">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2337">Empty</span></span>|  
|<span data-ttu-id="4f537-2338">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2338">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2339">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2339">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2340">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2340">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2341">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2341">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2342">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2342">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2343">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2343">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2344">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2344">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2345">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2345">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2346">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2346">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2347">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2347">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2348">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2348">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2349">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2349">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2350">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2350">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2351">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2351">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2352">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2352">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2353">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2353">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2354">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2354">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2355">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2355">Required.</span></span> <span data-ttu-id="4f537-2356">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2356">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2357">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2357">Required.</span></span> <span data-ttu-id="4f537-2358">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2358">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2359">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2359">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2360">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2360">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2361">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2361">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2362">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2362">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2363">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2363">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2364">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2364">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2365">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2365">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2366">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2366">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2367">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2367">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2368">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2368">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2369">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2369">Data</span></span>|<span data-ttu-id="4f537-2370">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2370">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2371">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2371">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2372">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2372">Empty</span></span>|  
|<span data-ttu-id="4f537-2373">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2373">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2374">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2374">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2375">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2375">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2376">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2376">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2377">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2377">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2378">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2378">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2379">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2379">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2380">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2380">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2381">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2381">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2382">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2382">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2383">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2383">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2384">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2384">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2385">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2385">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2386">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2386">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2387">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2387">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2388">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2388">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2389">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2389">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2390">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2390">Required.</span></span> <span data-ttu-id="4f537-2391">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2391">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2392">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2392">Required.</span></span> <span data-ttu-id="4f537-2393">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2393">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2394">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2394">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2395">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2395">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2396">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2396">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2397">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2397">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2398">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2398">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2399">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2399">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2400">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2400">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2401">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2401">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2402">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2402">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2403">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2403">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2404">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2404">Data</span></span>|<span data-ttu-id="4f537-2405">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2405">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2406">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2406">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2407">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2407">Empty</span></span>|  
|<span data-ttu-id="4f537-2408">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2408">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2409">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2409">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2410">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2410">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2411">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2411">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2412">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2412">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2413">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2413">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2414">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2414">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2415">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2415">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2416">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2416">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2417">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2417">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2418">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2418">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2419">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2419">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2420">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2420">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2421">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2421">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2422">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2422">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2423">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2423">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2424">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2424">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2425">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2425">Required.</span></span> <span data-ttu-id="4f537-2426">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2426">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2427">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2427">Required.</span></span> <span data-ttu-id="4f537-2428">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2428">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2429">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2429">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2430">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2430">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2431">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2431">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2432">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2432">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2433">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2433">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2434">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2434">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2435">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2435">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2436">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2436">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2437">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2437">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2438">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2438">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2439">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2439">Data</span></span>|<span data-ttu-id="4f537-2440">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2440">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2441">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2441">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2442">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2442">Empty</span></span>|  
|<span data-ttu-id="4f537-2443">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2443">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2444">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2444">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2445">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2445">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2446">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2446">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2447">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2447">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2448">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2448">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2449">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2449">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2450">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2450">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2451">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2451">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2452">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2452">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2453">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2453">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2454">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2454">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2455">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2455">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2456">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2456">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2457">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2457">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2458">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2458">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2459">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2459">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2460">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2460">Required.</span></span> <span data-ttu-id="4f537-2461">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2461">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2462">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2462">Required.</span></span> <span data-ttu-id="4f537-2463">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2463">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2464">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2464">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2465">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2465">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2466">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2466">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2467">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2467">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2468">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2468">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2469">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2469">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2470">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2470">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2471">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2471">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2472">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2472">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2473">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2473">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2474">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2474">Data</span></span>|<span data-ttu-id="4f537-2475">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2475">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2476">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2476">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2477">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2477">Empty</span></span>|  
|<span data-ttu-id="4f537-2478">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2478">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2479">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2479">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2480">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2480">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2481">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2481">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2482">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2482">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2483">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2483">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2484">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2484">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2485">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2485">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2486">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2486">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2487">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2487">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2488">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2488">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2489">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2489">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2490">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2490">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2491">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2491">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2492">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2492">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2493">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2493">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2494">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2494">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2495">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2495">Required.</span></span> <span data-ttu-id="4f537-2496">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2496">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="4f537-2497">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2497">Required.</span></span> <span data-ttu-id="4f537-2498">Переменная, которой присваиваются значения, считанные из файла. Не может быть массивом или объектной переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2498">Variable that is assigned the values read from the file - cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="4f537-2499">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="4f537-2499">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2500">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2500">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2501">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2501">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2502">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2502">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2503">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2503">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="4f537-2504">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2504">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2505">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2505">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2506">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="4f537-2506">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="4f537-2507">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2507">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="4f537-2508">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2508">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="4f537-2509">Данные</span><span class="sxs-lookup"><span data-stu-id="4f537-2509">Data</span></span>|<span data-ttu-id="4f537-2510">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="4f537-2510">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="4f537-2511">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="4f537-2511">Delimiting comma or blank line</span></span>|<span data-ttu-id="4f537-2512">Empty</span><span class="sxs-lookup"><span data-stu-id="4f537-2512">Empty</span></span>|  
|<span data-ttu-id="4f537-2513">NULL #</span><span class="sxs-lookup"><span data-stu-id="4f537-2513">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="4f537-2514">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="4f537-2514">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="4f537-2515">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="4f537-2515">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="4f537-2516">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="4f537-2516">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="4f537-2517">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="4f537-2517">#ERROR `errornumber`#</span></span>|<span data-ttu-id="4f537-2518">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="4f537-2518">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="4f537-2519">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2519">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2520">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="4f537-2520">The `Input` function is not localized.</span></span> <span data-ttu-id="4f537-2521">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="4f537-2521">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2522">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2522">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2523">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2523">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2524">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="4f537-2524">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="4f537-2525">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="4f537-2525">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2526">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2526">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2527">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2527">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2528">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2528">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2529">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2529">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2530">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2530">Required.</span></span> <span data-ttu-id="4f537-2531">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2531">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="4f537-2532">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2532">Required.</span></span> <span data-ttu-id="4f537-2533">Любое допустимое числовое выражение, указывающее число знаков, которые надо прочитать.</span><span class="sxs-lookup"><span data-stu-id="4f537-2533">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="4f537-2534">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2534">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="4f537-2535">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2535">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="4f537-2536">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2536">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-2537">Строка, содержащая знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2537">A string that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="4f537-2538">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2538">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2539">`InputString` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2539">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2540">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2540">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2541">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2541">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2542">Данные, считанные с `InputString` функции, обычно записываются в файл с помощью `Print` или `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2542">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="4f537-2543">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="4f537-2543">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="4f537-2544">В отличие от `Input` функции `InputString` функция возвращает все символы, которые считывает.</span><span class="sxs-lookup"><span data-stu-id="4f537-2544">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="4f537-2545">Сюда входят запятые, символы возврата каретки, перевода строки, кавычки и пробелы.</span><span class="sxs-lookup"><span data-stu-id="4f537-2545">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="4f537-2546">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `InputString` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2546">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="4f537-2547">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с помощью `InputString`, или использовать `FileGet` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2547">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2548">При считывании из файла решения по обеспечению безопасности содержимое файла, в зависимости от расширения имени файла не следует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2548">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="4f537-2549">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-2549">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2550">В этом примере используется `InputString` функции считывают один символ за раз из файла и распечатать его, чтобы `Output` окна.</span><span class="sxs-lookup"><span data-stu-id="4f537-2550">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="4f537-2551">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2551">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2552"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2552"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-2553"><paramref name="CharCount" />&lt; 0 или &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="4f537-2553"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2554">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2554">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2555">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2555">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2556">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2556">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4f537-2557">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2557">Required.</span></span> <span data-ttu-id="4f537-2558">Строковое выражение, определяющее файлы, которые должны быть удалены.</span><span class="sxs-lookup"><span data-stu-id="4f537-2558">A string expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="4f537-2559">Выражение <paramref name="PathName" /> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2559"><paramref name="PathName" /> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="4f537-2560">Удаляет файлы с диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2560">Deletes files from a disk.</span></span> <span data-ttu-id="4f537-2561">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2561">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="4f537-2562">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2562">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2563">`Kill` поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="4f537-2563">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="4f537-2564">**Примечание по безопасности** для выполнения, `Kill` функции требуется `Read` и `PathDiscovery` флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2564">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="4f537-2565">Дополнительные сведения см. в разделе <xref:System.Security.SecurityException> [разрешений доступа к коду](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="4f537-2565">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](https://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2566">В этом примере используется `Kill` функции, чтобы удалить файл с диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2566">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2567">Удаляемые файлы открыты.</span><span class="sxs-lookup"><span data-stu-id="4f537-2567">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-2568">Удаляемые файлы не найдены.</span><span class="sxs-lookup"><span data-stu-id="4f537-2568">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4f537-2569">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="4f537-2569">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2570">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2570">Required.</span></span> <span data-ttu-id="4f537-2571">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2571">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-2572">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2572">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="4f537-2573">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2573">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2574">`LineInput` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2574">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2575">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2575">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2576">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2576">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2577">Данные, считанные с `LineInput` , обычно записываются в файл с помощью `Print`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2577">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2578">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2578">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="4f537-2579">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-2579">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="4f537-2580">`LineInput` Функция считывает из файла одного символа во время, пока встретится символ возврата каретки (`Chr(13)`) или каретки и перевода строки веб-канал (`Chr(13) + Chr(10)`) последовательности.</span><span class="sxs-lookup"><span data-stu-id="4f537-2580">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="4f537-2581">Веб-канала последовательностей каретки и перевода строки, добавляемой в конце символьной строки, вместо пропускаются.</span><span class="sxs-lookup"><span data-stu-id="4f537-2581">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2582">Чтение из файла с помощью `LineInput` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2582">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2583">В этом примере используется `LineInput` функция для чтения строки из последовательного файла и присвоить его переменной.</span><span class="sxs-lookup"><span data-stu-id="4f537-2583">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="4f537-2584">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2584">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="4f537-2585">Достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2585">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2586"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2586"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2587">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2587">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2588">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2588">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2589">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2589">How to: Write Text to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2590">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2590">Required.</span></span> <span data-ttu-id="4f537-2591">Любой допустимый номер файла типа <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2591">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="4f537-2592">Возвращает значение, указывающее текущую позицию для ввода-вывода в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="4f537-2592">Returns a value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="4f537-2593">Текущая позиция чтения или записи в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="4f537-2593">The current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2594">`Loc` Функция отсчитываются от нуля, использовании ее для получения первого байта в файле возвратит значение 0.</span><span class="sxs-lookup"><span data-stu-id="4f537-2594">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="4f537-2595">`Loc` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2595">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2596">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2596">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2597">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2597">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2598">Ниже описаны возвращаемое значение для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2598">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="4f537-2599">Режим</span><span class="sxs-lookup"><span data-stu-id="4f537-2599">Mode</span></span>|<span data-ttu-id="4f537-2600">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="4f537-2600">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="4f537-2601">Номер последней записи, чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2601">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="4f537-2602">Текущая позиция байта в файле, деленная на 128.</span><span class="sxs-lookup"><span data-stu-id="4f537-2602">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="4f537-2603">Тем не менее, возвращаются сведения по `Loc` для последовательных файлов не используется и не требуется.</span><span class="sxs-lookup"><span data-stu-id="4f537-2603">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="4f537-2604">Позиция последнего байта чтения или записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2604">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2605">В этом примере используется `Loc` функция, возвращающая текущую позицию чтения/записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2605">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="4f537-2606">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2606">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2607">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2607">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-2608">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2608">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2609">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2609">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2610">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2610">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2611">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2611">Required.</span></span> <span data-ttu-id="4f537-2612">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2612">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-2613">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2613">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2614">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2614">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2615">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2615">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2616">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2616">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4f537-2617">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="4f537-2617">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4f537-2618">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2618">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4f537-2619">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2619">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4f537-2620">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="4f537-2620">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4f537-2621">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2621">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2622">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2622">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4f537-2623">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2623">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2624">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2624">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2625">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2625">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2626">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2626">Required.</span></span> <span data-ttu-id="4f537-2627">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2627">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="4f537-2628">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2628">Optional.</span></span> <span data-ttu-id="4f537-2629">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2629">Number of the only record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="4f537-2630">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2630">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2631">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2631">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2632">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2632">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2633">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2633">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4f537-2634">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="4f537-2634">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4f537-2635">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2635">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4f537-2636">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2636">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4f537-2637">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="4f537-2637">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4f537-2638">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2638">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2639">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2639">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4f537-2640">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2640">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2641">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2641">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2642">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2642">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2643">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2643">Required.</span></span> <span data-ttu-id="4f537-2644">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2644">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="4f537-2645">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2645">Optional.</span></span> <span data-ttu-id="4f537-2646">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f537-2646">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="4f537-2647">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2647">Optional.</span></span> <span data-ttu-id="4f537-2648">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f537-2648">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="4f537-2649">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2649">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2650">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2650">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2651">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2651">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2652">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2652">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4f537-2653">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="4f537-2653">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4f537-2654">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2654">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4f537-2655">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2655">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4f537-2656">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="4f537-2656">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4f537-2657">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2657">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2658">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2658">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4f537-2659">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2659">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2660">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2660">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2661">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2661">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2662">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2662">Required.</span></span> <span data-ttu-id="4f537-2663">Целое число, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2663">An integer that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-2664">Возвращает размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2664">Returns the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-2665">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2665">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="4f537-2666">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2666">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-2667">Размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2667">The size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-2668">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2668">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2669">Используйте `FileLen` функции для получения длины файла, не являющийся открытым.</span><span class="sxs-lookup"><span data-stu-id="4f537-2669">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2670">В этом примере используется `LOF` функцию, чтобы определить размер открытого файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2670">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="4f537-2671">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий данные образца.</span><span class="sxs-lookup"><span data-stu-id="4f537-2671">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2672">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2672">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-2673">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2673">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-2674">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2674">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="4f537-2675">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2675">Required.</span></span> <span data-ttu-id="4f537-2676">Строковое выражение, задающее создаваемый каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-2676">A string expression that identifies the directory to be created.</span></span> <span data-ttu-id="4f537-2677">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2677">The <paramref name="Path" /> may include the drive.</span></span> <span data-ttu-id="4f537-2678">Если диск не указан, <see langword="MkDir" /> создает каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-2678">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="4f537-2679">Создает каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-2679">Creates a new directory.</span></span> <span data-ttu-id="4f537-2680">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2680">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="4f537-2681">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2681">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2682">Эта функция создает новый каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-2682">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2683">В этом примере используется `MkDir` функции для создания каталога.</span><span class="sxs-lookup"><span data-stu-id="4f537-2683">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="4f537-2684">Если диск не указан, новый каталог создается на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-2684">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-2685"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-2685"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="4f537-2686">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="4f537-2686">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2687">Каталог уже существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2687">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-create-a-directory.md"><span data-ttu-id="4f537-2688">Практическое руководство. Создание каталога в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2688">How to: Create a Directory in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2689">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2689">Required.</span></span> <span data-ttu-id="4f537-2690">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2690">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4f537-2691">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2691">Optional.</span></span> <span data-ttu-id="4f537-2692">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2692">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="4f537-2693">Параметры аргумента <paramref name="Output" />:</span><span class="sxs-lookup"><span data-stu-id="4f537-2693">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="4f537-2694"><see langword="T:System.IO.IOException" />: Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2694"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="4f537-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2695"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="4f537-2696">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2696">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2697">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2697">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2698">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2698">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2699">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2699">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2700">`Print` не включает символ перевода строки в конце строки; Тем не менее `PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2700">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="4f537-2701">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2701">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="4f537-2702">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="4f537-2702">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="4f537-2703">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="4f537-2703">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="4f537-2704">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-2704">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="4f537-2705">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2705">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="4f537-2706">Дата данные записываются в файл с помощью стандартных краткий формат, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="4f537-2706">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="4f537-2707">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2707">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="4f537-2708">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-2708">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4f537-2709">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2709">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="4f537-2710">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2710">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="4f537-2711">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2711">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="4f537-2712">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="4f537-2712">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="4f537-2713">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="4f537-2713">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="4f537-2714">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2714">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2715">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2715">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2716">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2716">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2717">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2717">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2718">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2718">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2719">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2719">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2720">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2720">Required.</span></span> <span data-ttu-id="4f537-2721">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2721">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4f537-2722">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2722">Optional.</span></span> <span data-ttu-id="4f537-2723">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2723">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
<span data-ttu-id="4f537-2724">Параметры аргумента <paramref name="Output" />:</span><span class="sxs-lookup"><span data-stu-id="4f537-2724">The <paramref name="Output" /> argument settings are:</span></span> 
 <span data-ttu-id="4f537-2725"><see langword="T:System.IO.IOException" />: Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2725"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="4f537-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2726"><see langword="T:System.IO.IOException" />: <paramref name="FileNumber" /> does not exist.</span></span></param>
        <summary><span data-ttu-id="4f537-2727">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2727">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2728">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2728">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2729">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2729">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2730">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2730">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2731">`Print` не включает символ перевода строки в конце строки; Тем не менее`PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2731">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="4f537-2732">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2732">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="4f537-2733">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="4f537-2733">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="4f537-2734">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="4f537-2734">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="4f537-2735">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-2735">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="4f537-2736">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2736">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="4f537-2737">Дата данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="4f537-2737">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="4f537-2738">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2738">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="4f537-2739">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-2739">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4f537-2740">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2740">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="4f537-2741">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2741">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="4f537-2742">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2742">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="4f537-2743">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="4f537-2743">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="4f537-2744">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="4f537-2744">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="4f537-2745">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-2745">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-2746">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2746">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2747">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2747">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2748">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2748">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-2749">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2749">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-2750">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2750">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="4f537-2751">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2751">Required.</span></span> <span data-ttu-id="4f537-2752">Строковое выражение, указывающее имя и расположение существующего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2752">A string expression that specifies the existing file name and location.</span></span> <span data-ttu-id="4f537-2753">Выражение <paramref name="OldPath" /> может содержать имя каталога и метку диска для файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2753"><paramref name="OldPath" /> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="4f537-2754">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2754">Required.</span></span> <span data-ttu-id="4f537-2755">Строковое выражение, указывающее имя и расположение нового файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2755">A string expression that specifies the new file name and location.</span></span> <span data-ttu-id="4f537-2756">Параметр <paramref name="NewPath" /> может содержать имя каталога и метку диска для нового местонахождения файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2756"><paramref name="NewPath" /> may include directory and drive of the destination location.</span></span> <span data-ttu-id="4f537-2757">Имя файла, заданного параметром <paramref name="NewPath" /> не может быть именем существующего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2757">The file name specified by <paramref name="NewPath" /> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="4f537-2758">Переименовывает файл или каталог на диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-2758">Renames a disk file or directory.</span></span> <span data-ttu-id="4f537-2759">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2759">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="4f537-2760">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2760">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2761">`Rename` Функция переименовывает файл и перемещает ее в другой каталог, если это необходимо.</span><span class="sxs-lookup"><span data-stu-id="4f537-2761">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="4f537-2762">`Rename` Функции можно переместить файл на дисках, но его можно только переименовать существующий каталог, если оба `NewPath` и `OldPath` расположены на одном диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-2762">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="4f537-2763">`Rename` не удается создать новый файл или каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-2763">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="4f537-2764">С помощью `Rename` функции к открытому файлу выводит сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2764">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="4f537-2765">Необходимо закрыть файл перед его переименованием.</span><span class="sxs-lookup"><span data-stu-id="4f537-2765">You must close an open file before renaming it.</span></span> <span data-ttu-id="4f537-2766">`Rename` аргументы не могут содержать знак (\*) и подстановочные знаки одного знака (?).</span><span class="sxs-lookup"><span data-stu-id="4f537-2766">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="4f537-2767">При использовании `Rename` чтобы скопировать файл из незащищенное место в защищенном месте, в файле сохраняются менее ограниченные права.</span><span class="sxs-lookup"><span data-stu-id="4f537-2767">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="4f537-2768">Проверьте, чтобы убедиться в том, что вы не представляете возможную угрозу безопасности.</span><span class="sxs-lookup"><span data-stu-id="4f537-2768">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2769">В этом примере используется `Rename` функции, чтобы переименовать файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2769">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="4f537-2770">Для целей этого примера предполагается, что каталоги, которые указаны в уже существуют.</span><span class="sxs-lookup"><span data-stu-id="4f537-2770">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-2771">Недопустимый путь.</span><span class="sxs-lookup"><span data-stu-id="4f537-2771">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-2772">Файл <paramref name="OldPath" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2772"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2773">Нельзя переименовать с указанием другого диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2773">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-rename-a-file.md"><span data-ttu-id="4f537-2774">Практическое руководство. Переименование файла в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2774">How to: Rename a File in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f537-2775">Закрывает все файлы на диске, открытые функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2775">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-2776">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2776">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="4f537-2777">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2777">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2778">`Reset` Функция закрывает все активные файлы, открываемые `FileOpen` функцию и делает то же самое `FileClose()` без параметров.</span><span class="sxs-lookup"><span data-stu-id="4f537-2778">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2779">В этом примере используется `Reset` функцию, чтобы закрыть все открытые файлы и записи на диск содержимое всех буферов файлов.</span><span class="sxs-lookup"><span data-stu-id="4f537-2779">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="4f537-2780">Обратите внимание на использование `Object` переменной `FileNumber` как строка и номером.</span><span class="sxs-lookup"><span data-stu-id="4f537-2780">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/statements/end-statement.md"><span data-ttu-id="4f537-2781">Оператор End</span><span class="sxs-lookup"><span data-stu-id="4f537-2781">End Statement</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="4f537-2782">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2782">Required.</span></span> <span data-ttu-id="4f537-2783">Строковое выражение, определяющее удаляемый каталог или папку.</span><span class="sxs-lookup"><span data-stu-id="4f537-2783">A string expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="4f537-2784">Параметр <paramref name="Path" /> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="4f537-2784"><paramref name="Path" /> can include the drive.</span></span> <span data-ttu-id="4f537-2785">Если диск не указан, <see langword="RmDir" /> удаляет каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="4f537-2785">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="4f537-2786">Удаляет существующий каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-2786">Removes an existing directory.</span></span> <span data-ttu-id="4f537-2787">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="4f537-2788">Дополнительные сведения см. в разделе <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2788">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2789">Произошла ошибка при попытке использовать `RmDir` на каталог, содержащий файлы.</span><span class="sxs-lookup"><span data-stu-id="4f537-2789">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="4f537-2790">Используйте `Kill` функции, чтобы удалить все файлы, прежде чем пытаться удалить каталог.</span><span class="sxs-lookup"><span data-stu-id="4f537-2790">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2791">В этом примере используется `RmDir` функцию для удаления существующего каталога.</span><span class="sxs-lookup"><span data-stu-id="4f537-2791">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-2792"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-2792"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2793">Удаляемый каталог содержит файлы.</span><span class="sxs-lookup"><span data-stu-id="4f537-2793">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="4f537-2794">Каталог не существует.</span><span class="sxs-lookup"><span data-stu-id="4f537-2794">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-2795">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2795">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-2796">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="4f537-2797">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2798">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2798">Required.</span></span> <span data-ttu-id="4f537-2799">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2799">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-2800">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2800">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-2801">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2801">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="4f537-2802">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2802">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="4f537-2803">Значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2803">A <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2804">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 - 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="4f537-2804">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="4f537-2805">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2805">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="4f537-2806">Режим</span><span class="sxs-lookup"><span data-stu-id="4f537-2806">Mode</span></span>|<span data-ttu-id="4f537-2807">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="4f537-2807">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="4f537-2808">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="4f537-2808">Number of the next record read or written</span></span>|  
|<span data-ttu-id="4f537-2809">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="4f537-2809">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="4f537-2810">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2810">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="4f537-2811">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-2811">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2812">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="4f537-2812">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="4f537-2813">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2813">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="4f537-2814">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2814">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="4f537-2815">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2815">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4f537-2816">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="4f537-2816">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="4f537-2817">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2817">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="4f537-2818">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2818">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4f537-2819">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="4f537-2819">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2820">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2820">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-2821">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2821">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-2822">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2822">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2823">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2823">Required.</span></span> <span data-ttu-id="4f537-2824">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2824">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="4f537-2825">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2825">Required.</span></span> <span data-ttu-id="4f537-2826">Число в диапазоне от 1 до 2 147 483 647 включительно, определяющее место следующей операции чтения/записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2826">Number in the range 1-2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="4f537-2827">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2827">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="4f537-2828">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2828">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="4f537-2829">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2829">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2830">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 - 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="4f537-2830">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 - 1), inclusive.</span></span>  
  
 <span data-ttu-id="4f537-2831">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2831">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="4f537-2832">Режим</span><span class="sxs-lookup"><span data-stu-id="4f537-2832">Mode</span></span>|<span data-ttu-id="4f537-2833">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="4f537-2833">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="4f537-2834">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="4f537-2834">Number of the next record read or written</span></span>|  
|<span data-ttu-id="4f537-2835">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="4f537-2835">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="4f537-2836">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2836">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="4f537-2837">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="4f537-2837">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2838">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="4f537-2838">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="4f537-2839">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2839">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="4f537-2840">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2840">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="4f537-2841">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2841">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4f537-2842">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="4f537-2842">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="4f537-2843">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2843">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="4f537-2844">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2844">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="4f537-2845">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="4f537-2845">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2846">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2846">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/reading-from-files.md"><span data-ttu-id="4f537-2847">Чтение из файлов в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2847">Reading from Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/writing-to-files.md"><span data-ttu-id="4f537-2848">Запись в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2848">Writing to Files in Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="4f537-2849">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2849">Required.</span></span> <span data-ttu-id="4f537-2850">Строковое выражение, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2850">A string expression that specifies a file name.</span></span> <span data-ttu-id="4f537-2851"><paramref name="PathName" /> может включать каталог или папку, а также диск.</span><span class="sxs-lookup"><span data-stu-id="4f537-2851"><paramref name="PathName" /> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="4f537-2852">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2852">Required.</span></span> <span data-ttu-id="4f537-2853">Константа или числовое выражение, сумма которого определяет атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2853">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="4f537-2854">Устанавливает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2854">Sets attribute information for a file.</span></span> <span data-ttu-id="4f537-2855">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2855">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="4f537-2856">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2856">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2857">Ошибка времени выполнения возникает при попытке установить атрибуты для открытого файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2857">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="4f537-2858">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="4f537-2858">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="4f537-2859">Значение</span><span class="sxs-lookup"><span data-stu-id="4f537-2859">Value</span></span>|<span data-ttu-id="4f537-2860">Константа</span><span class="sxs-lookup"><span data-stu-id="4f537-2860">Constant</span></span>|<span data-ttu-id="4f537-2861">Описание</span><span class="sxs-lookup"><span data-stu-id="4f537-2861">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="4f537-2862">Обычный (по умолчанию).</span><span class="sxs-lookup"><span data-stu-id="4f537-2862">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="4f537-2863">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="4f537-2863">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="4f537-2864">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="4f537-2864">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="4f537-2865">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2865">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="4f537-2866">Метка тома</span><span class="sxs-lookup"><span data-stu-id="4f537-2866">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="4f537-2867">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2867">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="4f537-2868">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="4f537-2868">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="4f537-2869">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="4f537-2869">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2870">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="4f537-2870">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="4f537-2871">Имена можно использовать в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="4f537-2871">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2872">В этом примере используется `SetAttr` функцию для задания атрибутов файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2872">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="4f537-2873">Недопустимый тип <paramref name="Attribute" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2873"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="4f537-2874">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2874">Required.</span></span> <span data-ttu-id="4f537-2875">Число пробелов, вставляемых перед отображением или печатью очередного выражения в списке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2875">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="4f537-2876">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2876">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="4f537-2877">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2877">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2878">Если `Count` меньше ширины строки вывода, следующая позиция печати непосредственно следует за количество напечатанных пробелов.</span><span class="sxs-lookup"><span data-stu-id="4f537-2878">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="4f537-2879">Если`Count` больше, чем выводимой строки `SPC` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="4f537-2879">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="4f537-2880">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="4f537-2880">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="4f537-2881">Например, если текущая позиция печати равна 24, выводимой строки — 80, а `SPC(90)`, печать начнется с позиции 34 (текущая позиция печати + остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="4f537-2881">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="4f537-2882">Если разница между текущей позицией печати и ширину строки вывода меньше, чем `Count` (или `Count` `Mod` *ширины*), `SPC` функция переходит в начало следующей строки и создает пробелы, равные `Count` -(*ширины* - *текущая_позиция_печати*).</span><span class="sxs-lookup"><span data-stu-id="4f537-2882">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` - (*width* - *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2883">Убедитесь, что столбцы таблицы достаточно широки разрешить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2883">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2884">В этом примере используется `SPC` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="4f537-2884">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="4f537-2885">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2885">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-2886">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2886">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="4f537-2887">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2887">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="4f537-2888">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2888">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2889">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="4f537-2889">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="4f537-2890">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="4f537-2890">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="4f537-2891">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="4f537-2891">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="4f537-2892">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="4f537-2892">Column Mod width</span></span>  
  
 <span data-ttu-id="4f537-2893">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="4f537-2893">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="4f537-2894">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-2894">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="4f537-2895">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2895">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="4f537-2896">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="4f537-2896">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="4f537-2897">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2897">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="4f537-2898">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2898">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="4f537-2899">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2899">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2900">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2900">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2901">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="4f537-2901">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="4f537-2902">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2902">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="4f537-2903">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2903">Optional.</span></span> <span data-ttu-id="4f537-2904">Номер столбца, в который помещается курсор перед отображением или печатью следующего выражения из списка.</span><span class="sxs-lookup"><span data-stu-id="4f537-2904">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="4f537-2905">Если этот параметр опущен, <see langword="TAB" /> перемещает положение курсора в начало следующей зоны печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-2905">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="4f537-2906">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2906">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="4f537-2907">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="4f537-2907">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2908">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="4f537-2908">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="4f537-2909">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="4f537-2909">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="4f537-2910">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="4f537-2910">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="4f537-2911">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="4f537-2911">Column Mod width</span></span>  
  
 <span data-ttu-id="4f537-2912">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="4f537-2912">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="4f537-2913">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-2913">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="4f537-2914">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2914">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="4f537-2915">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="4f537-2915">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="4f537-2916">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2916">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="4f537-2917">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2917">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="4f537-2918">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="4f537-2918">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="4f537-2919">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="4f537-2919">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2920">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="4f537-2920">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
        <related type="Article" href="~/docs/visual-basic/language-reference/operators/mod-operator.md"><span data-ttu-id="4f537-2921">Оператор Mod (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-2921">Mod Operator (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="4f537-2922">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2922">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2923">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2923">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2924">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2924">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2925">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2925">Required.</span></span> <span data-ttu-id="4f537-2926">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2926">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="4f537-2927">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2927">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2928">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2928">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2929">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2929">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2930">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2930">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4f537-2931">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="4f537-2931">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4f537-2932">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2932">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4f537-2933">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2933">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4f537-2934">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="4f537-2934">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4f537-2935">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2935">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2936">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2936">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4f537-2937">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2937">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2938">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2938">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2939">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2939">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2940">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2940">Required.</span></span> <span data-ttu-id="4f537-2941">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2941">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="4f537-2942">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2942">Optional.</span></span> <span data-ttu-id="4f537-2943">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="4f537-2943">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="4f537-2944">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2944">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2945">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2945">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2946">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2946">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2947">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2947">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4f537-2948">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="4f537-2948">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4f537-2949">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2949">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4f537-2950">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2950">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4f537-2951">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="4f537-2951">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4f537-2952">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2952">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2953">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2953">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4f537-2954">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2954">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2955">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2955">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2956">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2956">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2957">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2957">Required.</span></span> <span data-ttu-id="4f537-2958">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2958">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="4f537-2959">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2959">Optional.</span></span> <span data-ttu-id="4f537-2960">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f537-2960">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="4f537-2961">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2961">Optional.</span></span> <span data-ttu-id="4f537-2962">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="4f537-2962">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="4f537-2963">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="4f537-2963">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="4f537-2964">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2964">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="4f537-2965">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2965">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2966">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-2966">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="4f537-2967">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="4f537-2967">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="4f537-2968">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2968">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="4f537-2969">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2969">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="4f537-2970">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="4f537-2970">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="4f537-2971">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2971">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-2972">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="4f537-2972">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="4f537-2973">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2973">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-2974">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2974">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-2975">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-2975">File Access with Visual Basic</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-2976">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-2976">Required.</span></span> <span data-ttu-id="4f537-2977">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-2977">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4f537-2978">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-2978">Optional.</span></span> <span data-ttu-id="4f537-2979">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2979">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="4f537-2980">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2980">Writes data to a sequential file.</span></span> <span data-ttu-id="4f537-2981">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-2981">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-2982">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2982">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-2983">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-2983">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-2984">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-2984">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-2985">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2985">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="4f537-2986">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-2986">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="4f537-2987">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2987">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="4f537-2988">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="4f537-2988">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="4f537-2989">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-2989">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="4f537-2990">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="4f537-2990">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="4f537-2991">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="4f537-2991">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="4f537-2992">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-2992">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="4f537-2993">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2993">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="4f537-2994">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="4f537-2994">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="4f537-2995">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-2995">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="4f537-2996">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-2996">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4f537-2997">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-2997">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="4f537-2998">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="4f537-2998">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="4f537-2999">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-2999">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="4f537-3000">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-3000">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="4f537-3001">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="4f537-3001">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="4f537-3002">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="4f537-3002">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="4f537-3003">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="4f537-3003">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="4f537-3004">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-3004">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-3005">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-3005">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-3006">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3006">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="4f537-3007">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-3007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-3008">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-3008">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-3009">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-3009">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-3010">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-3010">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="4f537-3011">Обязательный.</span><span class="sxs-lookup"><span data-stu-id="4f537-3011">Required.</span></span> <span data-ttu-id="4f537-3012">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="4f537-3012">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="4f537-3013">Необязательный параметр.</span><span class="sxs-lookup"><span data-stu-id="4f537-3013">Optional.</span></span> <span data-ttu-id="4f537-3014">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3014">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="4f537-3015">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3015">Writes data to a sequential file.</span></span> <span data-ttu-id="4f537-3016">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="4f537-3016">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="4f537-3017">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-3017">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="4f537-3018">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="4f537-3018">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="4f537-3019">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="4f537-3019">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="4f537-3020">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3020">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="4f537-3021">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="4f537-3021">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="4f537-3022">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3022">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="4f537-3023">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="4f537-3023">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="4f537-3024">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="4f537-3024">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="4f537-3025">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="4f537-3025">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="4f537-3026">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="4f537-3026">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="4f537-3027">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="4f537-3027">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="4f537-3028">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-3028">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="4f537-3029">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="4f537-3029">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="4f537-3030">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3030">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="4f537-3031">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="4f537-3031">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="4f537-3032">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="4f537-3032">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="4f537-3033">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="4f537-3033">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="4f537-3034">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="4f537-3034">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="4f537-3035">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="4f537-3035">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="4f537-3036">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="4f537-3036">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="4f537-3037">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="4f537-3037">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="4f537-3038">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="4f537-3038">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="4f537-3039">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="4f537-3039">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="4f537-3040">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="4f537-3040">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="4f537-3041">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="4f537-3041">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md"><span data-ttu-id="4f537-3042">Доступ к файлам с помощью Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-3042">File Access with Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files.md"><span data-ttu-id="4f537-3043">Практическое руководство. Запись текста в файлы в Visual Basic</span><span class="sxs-lookup"><span data-stu-id="4f537-3043">How to: Write Text to Files in Visual Basic</span></span></related>
        <related type="Article" href="~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md"><span data-ttu-id="4f537-3044">Как выполнить  Запись текста в файл с помощью Streamwriter (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="4f537-3044">How to: Write Text to a File with a Streamwriter (Visual Basic)</span></span></related>
      </Docs>
    </Member>
  </Members>
</Type>