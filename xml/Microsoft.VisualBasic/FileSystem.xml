<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="76423e19c418e3145c1946201eeb07bad53c0200" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39908798" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <TypeSignature Language="F#" Value="type FileSystem = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="7cbb3-101">В модуле <see langword="FileSystem" /> содержатся процедуры, используемые для выполнения операций с файлами, папками или каталогами и системой.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7cbb3-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span>
      </span>
      <span data-ttu-id="7cbb3-102">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие в операциях файлового ввода-вывода по сравнению с модулем <see langword="FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7cbb3-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span>
      </span>
      <span data-ttu-id="7cbb3-103">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="7cbb3-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-104">Этот модуль поддерживает ключевые слова языка Visual Basic и элементы библиотеки времени выполнения, с доступом к файлам и папкам.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-105">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member ChDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="7cbb3-106">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-106">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-107">Выражение <see langword="String" />, определяющее, какая папка или каталог становятся новым каталогом или папкой по умолчанию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span>
          </span>
          <span data-ttu-id="7cbb3-108">Параметр <c>Path</c> может содержать метку диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-108">
              <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="7cbb3-109">Если диск не указан, функция <see langword="ChDir" /> меняет каталог или папку по умолчанию на текущем диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-110">Изменяет текущую папку или каталог.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-110">Changes the current directory or folder.</span>
          </span>
          <span data-ttu-id="7cbb3-111">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие операций файлового ввода-вывода по сравнению с функциями <see langword="ChDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-112">Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-113">`ChDir` Функция меняет каталог по умолчанию, но не диск по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="7cbb3-114">Например, если по умолчанию это диск C, следующая инструкция изменяет каталог по умолчанию на диске D, но C остается диском по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="7cbb3-115">Может быть сделан относительным изменения каталога является путем ввода двух точек, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-116">`ChDir` Функция требует разрешение неуправляемого кода, что может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="7cbb3-117">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-118">В этом примере используется `ChDir` функции для изменения текущего каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-119">Параметр <paramref name="Path" /> пуст.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-119">
              <paramref name="Path" /> is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-120">Указан несуществующий диск или диск недоступен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-120">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-121">Изменяет текущий диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-121">Changes the current drive.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : char -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="7cbb3-122">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-122">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-123">Строковое выражение, задающее существующий диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-123">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="7cbb3-124">Если указать пустую строку (""), текущий диск не изменится.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-124">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="7cbb3-125">Если аргумент <c>Drive</c> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-126">Изменяет текущий диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-126">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-127">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="7cbb3-128">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-129">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="7cbb3-130">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-131">Указан несуществующий диск или диск недоступен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-131">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberSignature Language="F#" Value="static member ChDrive : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.ChDrive Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="7cbb3-132">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-132">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-133">Строковое выражение, задающее существующий диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-133">String expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="7cbb3-134">Если указать пустую строку (""), текущий диск не изменится.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-134">If you supply a zero-length string (""), the current drive does not change.</span>
          </span>
          <span data-ttu-id="7cbb3-135">Если аргумент <c>Drive</c> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-136">Изменяет текущий диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-136">Changes the current drive.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-137">`ChDrive` Функция требует разрешение неуправляемого кода, которое может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="7cbb3-138">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-139">В этом примере используется `ChDrive` функции, чтобы изменить текущий диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="7cbb3-140">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-141">Указан несуществующий диск или диск недоступен.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-141">Invalid drive is specified, or drive is unavailable.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-142">Возвращает строку, представляющую текущий путь.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-142">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="7cbb3-143">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="7cbb3-144">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberSignature Language="F#" Value="static member CurDir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-145">Возвращает строку, представляющую текущий путь.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-145">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="7cbb3-146">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="7cbb3-147">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-148">Строка, представляющая текущий путь.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-148">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7cbb3-149">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberSignature Language="F#" Value="static member CurDir : char -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.CurDir Drive" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive">
          <span data-ttu-id="7cbb3-150">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-150">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-151">Выражение типа <see langword="Char" />, задающее существующий диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-151">
              <see langword="Char" /> expression that specifies an existing drive.</span>
          </span>
          <span data-ttu-id="7cbb3-152">Если диск не указан или параметр <c>Drive</c> является пустой строкой (""), функция <see langword="CurDir" /> возвращает путь для текущего диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-153">Возвращает строку, представляющую текущий путь.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-153">Returns a string representing the current path.</span>
          </span>
          <span data-ttu-id="7cbb3-154">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span>
          </span>
          <span data-ttu-id="7cbb3-155">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-156">Строка, представляющая текущий путь.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-156">A string representing the current path.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7cbb3-157">В этом примере используется `CurDir` функция возвращает текущий путь.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-158">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="7cbb3-159">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-160">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberSignature Language="F#" Value="static member Dir : unit -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-161">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="7cbb3-162">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-163">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-164">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-165">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="7cbb3-166">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="7cbb3-167">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="7cbb3-168">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-169">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="7cbb3-170">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="7cbb3-171">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="7cbb3-172">Значение</span><span class="sxs-lookup"><span data-stu-id="7cbb3-172">Value</span></span>|<span data-ttu-id="7cbb3-173">Константа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-173">Constant</span></span>|<span data-ttu-id="7cbb3-174">Описание</span><span class="sxs-lookup"><span data-stu-id="7cbb3-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="7cbb3-175">Значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-175">Default.</span></span> <span data-ttu-id="7cbb3-176">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="7cbb3-177">Указывает файлы, доступные только для чтения, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="7cbb3-178">Задает скрытые файлы, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="7cbb3-179">Указывает, системные файлы и файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="7cbb3-180">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="7cbb3-181">Указывает каталоги или папки, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="7cbb3-182">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="7cbb3-183">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-184">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-185">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string Pathname, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Dir(string Pathname, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (Pathname As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (Pathname, Attributes)" FrameworkAlternate="netframework-2.0" />
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="F#" Value="static member Dir : string * Microsoft.VisualBasic.FileAttribute -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.Dir (PathName, Attributes)" FrameworkAlternate="netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Pathname" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="PathName" Type="System.String" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" Index="1" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="7cbb3-186">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-186">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-187">Выражение типа <see langword="String" />, задающее имя файла, имя каталога или папки, либо метку тома диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-187">
              <see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span>
          </span>
          <span data-ttu-id="7cbb3-188">Если параметр <c>PathName</c> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span>
          </span>
        </param>
        <param name="Pathname">To be added.</param>
        <param name="Attributes">
          <span data-ttu-id="7cbb3-189">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-189">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-190">Перечисление или числовое выражение, значение которого задает атрибуты файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-190">Enumeration or numeric expression whose value specifies file attributes.</span>
          </span>
          <span data-ttu-id="7cbb3-191">Если этот параметр опущен, функция <see langword="Dir" /> возвращает файлы, соответствующие параметру <c>PathName</c>, но не имеющие атрибутов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-192">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
          <span data-ttu-id="7cbb3-193">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-194">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-195">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-196">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="7cbb3-197">`VbVolume` Возвращает метку тома для диска, а не имя файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="7cbb3-198">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="7cbb3-199">Для получения следующего элемента, может выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-200">Для корректной, `Dir` функции требуется <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="7cbb3-201">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="7cbb3-202">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="7cbb3-203">Значение</span><span class="sxs-lookup"><span data-stu-id="7cbb3-203">Value</span></span>|<span data-ttu-id="7cbb3-204">Константа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-204">Constant</span></span>|<span data-ttu-id="7cbb3-205">Описание</span><span class="sxs-lookup"><span data-stu-id="7cbb3-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="7cbb3-206">Значение по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-206">Default.</span></span> <span data-ttu-id="7cbb3-207">Указывает файлы, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="7cbb3-208">Указывает файлы только для чтения, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="7cbb3-209">Задает скрытые файлы, в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="7cbb3-210">Определяет системные файлы, кроме файлов, не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="7cbb3-211">Указывает метку тома. Если любой другой атрибут указан, `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="7cbb3-212">Указывает каталоги или папки в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="7cbb3-213">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="7cbb3-214">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-215">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте кода вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-216">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member EOF : int -&gt; bool" Usage="Microsoft.VisualBasic.FileSystem.EOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-217">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-217">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-218">Значение <see langword="Integer" />, содержащее любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-218">An <see langword="Integer" /> that contains any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-219">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-220">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-221">Используйте `EOF` во избежание ошибки, возникшей при попытке получить данные за пределами файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="7cbb3-222">`EOF` Возвращает `False` пока не будет достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="7cbb3-223">В файлах, открытых для `Random` или `Binary` доступ, `EOF` возвращает `False` до последнего выполненного `FileGet` функции не удалось прочитать запись целиком.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="7cbb3-224">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `Input` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="7cbb3-225">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с `Input`, или использовать `Get` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="7cbb3-226">В файлах, открытых для `Output`, `EOF` всегда возвращает `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-227">В этом примере используется `EOF` функции, чтобы определить конец файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="7cbb3-228">В этом примере предполагается, что `Testfile` — текстовый файл, который содержит несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-229">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-229">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member FileAttr : int -&gt; Microsoft.VisualBasic.OpenMode" Usage="Microsoft.VisualBasic.FileSystem.FileAttr FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-230">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-230">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-231">
            <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-231">
              <see langword="Integer" />.</span>
          </span>
          <span data-ttu-id="7cbb3-232">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-232">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-233">Возвращает перечисление, представляющее режим файла для файлов, открытых функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-234">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="FileAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-235">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-236">Следующие значения перечисления определяют режим доступа к файлу:</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-236">The following enumeration values indicate the file access mode:</span>
          </span>
          <span data-ttu-id="7cbb3-237">
            <list type="table">
              <item>
                <term> Значение </term>
                <description> Режим </description>
              </item>
              <item>
                <term> 1 </term>
                <description>
                  <see langword="OpenMode.Input" />
                </description>
              </item>
              <item>
                <term> 2 </term>
                <description>
                  <see langword="OpenMode.Output" />
                </description>
              </item>
              <item>
                <term> 4 </term>
                <description>
                  <see langword="OpenMode.Random" />
                </description>
              </item>
              <item>
                <term> 8 </term>
                <description>
                  <see langword="OpenMode.Append" />
                </description>
              </item>
              <item>
                <term> 32 </term>
                <description>
                  <see langword="OpenMode.Binary" />
                </description>
              </item>
            </list>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-237">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Mode  </description>
                </item>
                <item>
                  <term> 1  </term>
                  <description>
                    <see langword="OpenMode.Input" />
                  </description>
                </item>
                <item>
                  <term> 2  </term>
                  <description>
                    <see langword="OpenMode.Output" />
                  </description>
                </item>
                <item>
                  <term> 4  </term>
                  <description>
                    <see langword="OpenMode.Random" />
                  </description>
                </item>
                <item>
                  <term> 8  </term>
                  <description>
                    <see langword="OpenMode.Append" />
                  </description>
                </item>
                <item>
                  <term> 32  </term>
                  <description>
                    <see langword="OpenMode.Binary" />
                  </description>
                </item>
              </list>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-238">Эта функция возвращает перечисление, представляющее режим файла для файлов, открытых `FileOpen` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-238">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-239">В этом примере используется `FileAttr` функция, возвращающая файловый режим открытого файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-239">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberSignature Language="F#" Value="static member FileClose : int[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileClose FileNumbers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers">
          <span data-ttu-id="7cbb3-240">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-240">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-241">Массив параметров из 0 или нескольких каналов, которые должны быть закрыты.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-241">Parameter array of 0 or more channels to be closed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-242">Завершает операции ввода-вывода с файлом, открытым с помощью функции <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-242">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-243">Возможность <see langword="My" /> предоставляет лучшие показатели производительности и быстродействии в операциях файлового ввода-вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-243">
              <see langword="My" /> gives you better productivity and performance in file I/O operations.</span>
          </span>
          <span data-ttu-id="7cbb3-244">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-244">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-245">`FileClose` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-245">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-246">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-246">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-247">Дополнительные сведения см. в разделе [как: чтение текста из файлов с помощью StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[как: запись текста в файлы с помощью StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), и [Пошаговое руководство: управление файлами и каталогами в Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-247">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="7cbb3-248">Если опустить `FileNumbers`, все активные файлы, открываемые `FileOpen` функция закрываются.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-248">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="7cbb3-249">При закрытии файлов, открытых для `Output` или `Append`, последнее содержимое буфера выходных данных записывается в буфер операционной системы для этого файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-249">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="7cbb3-250">Все буферное пространство, связанное с закрытого файл освобождается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-250">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="7cbb3-251">Когда `FileClose` функция выполняется, а связь файла с его файла заканчивается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-251">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-252">В этом примере используется `FileClose` функцию, чтобы закрыть файл открыт для `Input`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-252">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-253">
            <paramref name="FileNumber" /> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-253">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberSignature Language="F#" Value="static member FileCopy : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileCopy (Source, Destination)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source">
          <span data-ttu-id="7cbb3-254">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-254">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-255">Выражение <see langword="String" />, задающее имя копируемого файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-255">
              <see langword="String" /> expression that specifies the name of the file to be copied.</span>
          </span>
          <span data-ttu-id="7cbb3-256">Параметр <c>Source</c> может содержать имя каталога или папки, а также имя диска, где находится исходный файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-256">
              <c>Source</c> may include the directory or folder, and drive, of the source file.</span>
          </span>
        </param>
        <param name="Destination">
          <span data-ttu-id="7cbb3-257">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-257">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-258">Выражение <see langword="String" />, определяющее имя файла назначения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-258">
              <see langword="String" /> expression that specifies the destination file name.</span>
          </span>
          <span data-ttu-id="7cbb3-259">Параметр <c>Destination</c> может содержать имя каталога или папки, а также имя диска, где находится файл назначения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-259">
              <c>Destination</c> may include the directory or folder, and drive, of the destination file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-260">Копирует файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-260">Copies a file.</span>
          </span>
          <span data-ttu-id="7cbb3-261">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="FileCopy" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-261">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span>
          </span>
          <span data-ttu-id="7cbb3-262">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-262">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-263">Если вы попытаетесь использовать `FileCopy` работать на открытый файл, возникает ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-263">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="7cbb3-264">`FileCopy` требует полного доверия для работы на локальном диске.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-264">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-265">В этом примере используется `FileCopy` функции для копирования одного файла в другой.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-265">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="7cbb3-266">Для целей этого примера, предположим, что `SrcFile` — это файл, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-266">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-267">Параметр <paramref name="Source" /> или <paramref name="Destination" /> недопустим или не указан.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-267">
              <paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-268">Этот файл уже открыт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-268">File is already open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-269">Файл не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-269">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileDateTime : string -&gt; DateTime" Usage="Microsoft.VisualBasic.FileSystem.FileDateTime PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="7cbb3-270">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-270">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-271">Выражение типа <see langword="String" />, определяющее имя файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-271">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="7cbb3-272">Параметр <c>PathName</c> может включать каталог или папку, а также имя диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-272">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-273">Возвращает значение типа <see langword="Date" />, которое указывает дату и время последней операции записи в файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-273">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span>
          </span>
          <span data-ttu-id="7cbb3-274">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileDateTime" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-274">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span>
          </span>
          <span data-ttu-id="7cbb3-275">Дополнительные сведения см. <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-275">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-276">Значение типа <see langword="Date" />, которое указывает дату и время создания или последнего изменения файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-276">
              <see langword="Date" /> value that indicates the date and time a file was created or last modified.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7cbb3-277">В этом примере используется `FileDateTime` создания или последнего изменения функции для определения даты и времени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-277">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="7cbb3-278">Формат даты и времени зависит от параметров языкового стандарта системы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-278">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-279">Параметр <paramref name="PathName" /> недопустим или содержит подстановочный знак.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-279">
              <paramref name="PathName" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-280">Указанный файл не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-280">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-281">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-281">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-282">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-282">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-283">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-283">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-284">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-284">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-285">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-285">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-286">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-286">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-287">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-287">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-288">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-288">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-289">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-289">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-290">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-290">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-291">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-291">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-292">Дополнительные сведения см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-292">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-293">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-293">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-294">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-294">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-295">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-295">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-296">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-296">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-297">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-297">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-298">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-298">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-299">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-299">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-300">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-300">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-301">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-301">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-302">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-302">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-303">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-303">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-304">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-304">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-305">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-305">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-306">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-306">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-307">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-307">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-308">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-308">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-309">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-309">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-310">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-310">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-311">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-311">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-312">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-312">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-313">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-313">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-314">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-314">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-315">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-315">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-316">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-316">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-317">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-317">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-318">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-318">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-319">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-319">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-320">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-320">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-321">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-321">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-322">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-322">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-323">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-323">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-324">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-324">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-325">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-325">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-326">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-326">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-327">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-327">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-328">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-328">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-329">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-329">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-330">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-330">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-331">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-331">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-332">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-332">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-333">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-333">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-334">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-334">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-335">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-335">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-336">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-336">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-337">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-337">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-338">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-338">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-339">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-339">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-340">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-340">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-341">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-341">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-342">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-342">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-343">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-343">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-344">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-344">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-345">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-345">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-346">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-346">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-347">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-347">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-348">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-348">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-349">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-349">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-350">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-350">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-351">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-351">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-352">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-352">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-353">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-353">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-354">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-354">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-355">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-355">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-356">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-356">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-357">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-357">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-358">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-358">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-359">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-359">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-360">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-360">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-361">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-361">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-362">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-362">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-363">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-363">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-364">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-364">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-365">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-365">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-366">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-366">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-367">Если дескриптор не используется.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-367">If the descriptor is not used.</span></span> <span data-ttu-id="7cbb3-368">Размер и границы массива, передан в `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-368">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-369">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-369">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-370">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-370">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-371">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-371">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-372">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-372">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-373">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-373">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-374">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-374">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-375">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-375">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-376">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-376">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-377">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-377">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-378">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-378">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-379">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-379">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-380">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-380">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-381">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-381">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-382">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-382">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-383">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-383">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-384">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-384">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-385">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-385">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-386">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-386">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-387">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-387">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-388">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-388">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-389">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-389">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-390">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-390">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-391">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-391">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-392">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-392">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-393">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-393">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-394">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-394">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-395">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-395">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-396">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-396">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-397">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-397">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-398">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-398">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-399">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-399">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-400">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-400">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-401">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-401">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-402">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-402">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-403">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-403">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-404">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-404">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-405">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-405">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-406">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-406">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-407">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-407">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-408">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-408">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-409">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-409">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-410">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-410">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-411">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-411">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-412">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-412">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-413">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-413">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-414">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-414">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-415">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-415">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-416">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-416">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-417">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-417">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-418">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-418">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-419">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-419">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-420">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-420">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-421">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-421">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-422">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-422">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-423">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-423">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-424">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-424">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-425">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-425">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-426">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-426">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-427">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-427">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-428">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-428">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-429">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-429">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-430">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-430">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-431">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-431">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-432">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-432">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-433">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-433">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-434">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-434">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-435">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-435">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-436">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-436">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-437">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-437">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-438">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-438">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-439">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-439">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-440">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-440">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-441">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-441">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-442">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-442">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-443">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-443">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-444">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-444">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-445">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-445">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-446">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-446">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-447">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-447">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-448">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-448">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-449">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-449">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-450">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-450">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-451">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-451">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-452">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-452">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-453">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-453">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-454">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-454">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-455">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-455">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-456">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-456">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-457">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-457">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-458">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-458">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-459">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-459">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-460">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-460">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-461">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-461">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-462">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-462">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-463">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-463">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-464">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-464">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-465">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-465">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-466">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-466">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-467">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции`FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-467">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-468">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-468">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-469">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-469">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-470">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-470">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-471">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-471">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-472">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-472">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-473">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-473">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-474">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-474">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-475">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-475">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-476">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-476">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-477">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-477">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-478">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-478">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-479">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-479">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-480">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-480">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-481">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-481">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-482">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-482">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-483">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-483">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-484">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-484">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-485">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-485">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-486">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-486">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-487">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-487">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-488">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-488">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-489">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-489">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-490">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-490">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-491">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-491">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-492">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-492">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-493">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-493">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-494">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-494">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-495">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-495">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-496">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-496">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-497">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-497">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-498">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-498">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-499">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-499">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-500">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-500">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-501">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-501">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-502">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-502">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-503">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-503">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-504">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-504">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-505">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-505">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-506">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-506">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-507">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-507">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-508">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-508">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-509">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-509">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-510">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-510">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-511">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-511">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-512">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-512">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-513">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-513">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-514">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-514">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-515">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-515">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-516">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-516">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-517">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-517">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-518">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-518">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-519">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-519">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-520">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-520">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-521">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-521">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-522">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-522">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-523">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-523">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-524">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-524">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-525">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-525">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-526">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-526">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-527">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-527">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-528">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-528">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-529">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-529">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-530">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-530">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-531">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-531">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-532">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-532">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-533">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-533">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-534">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-534">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-535">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-535">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-536">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-536">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-537">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-537">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-538">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-538">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-539">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-539">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-540">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-540">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-541">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-541">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-542">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-542">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-543">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-543">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-544">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-544">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-545">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-545">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-546">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-546">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-547">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-547">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-548">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-548">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-549">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-549">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-550">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-550">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-551">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-551">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-552">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-552">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-553">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-553">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-554">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-554">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-555">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-555">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-556">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-556">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-557">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-557">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-558">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-558">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-559">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-559">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-560">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-560">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-561">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-561">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-562">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-562">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-563">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-563">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-564">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-564">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-565">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-565">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-566">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-566">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-567">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-567">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-568">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-568">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-569">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-569">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-570">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-570">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-571">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-571">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-572">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-572">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-573">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-573">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-574">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-574">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-575">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-575">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-576">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-576">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-577">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-577">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-578">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-578">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-579">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-579">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-580">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-580">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-581">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-581">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-582">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-582">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-583">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-583">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-584">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-584">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-585">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-585">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-586">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-586">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-587">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-587">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-588">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-588">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-589">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-589">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-590">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-590">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-591">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-591">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-592">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-592">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-593">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-593">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-594">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-594">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-595">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-595">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-596">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-596">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-597">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-597">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-598">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-598">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-599">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-599">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-600">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-600">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-601">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-601">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-602">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-602">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-603">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-603">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-604">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-604">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-605">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-605">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-606">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-606">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-607">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-607">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-608">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-608">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-609">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-609">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-610">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-610">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-611">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-611">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-612">Чтение из файла с помощью`FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-612">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-613">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-613">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-614">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-614">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-615">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-615">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-616">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-616">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-617">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-617">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-618">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-618">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-619">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-619">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-620">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-620">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-621">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-621">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-622">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-622">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-623">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-623">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-624">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-624">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-625">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-625">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-626">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-626">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-627">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-627">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-628">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-628">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-629">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-629">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-630">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-630">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-631">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-631">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-632">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-632">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-633">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-633">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-634">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-634">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-635">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-635">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-636">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-636">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-637">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-637">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-638">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-638">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-639">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-639">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-640">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-640">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-641">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-641">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-642">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-642">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-643">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-643">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-644">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-644">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-645">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-645">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-646">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-646">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-647">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-647">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-648">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-648">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-649">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-649">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-650">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-650">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-651">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-651">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-652">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-652">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-653">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-653">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-654">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-654">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-655">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-655">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-656">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-656">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-657">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-657">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-658">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-658">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-659">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-659">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-660">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-660">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-661">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-661">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-662">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-662">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-663">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-663">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-664">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-664">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-665">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-665">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-666">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-666">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-667">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-667">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-668">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-668">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-669">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-669">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-670">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-670">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-671">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-671">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-672">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-672">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-673">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-673">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-674">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-674">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-675">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-675">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-676">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-676">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-677">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-677">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-678">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-678">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-679">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-679">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-680">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-680">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-681">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-681">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-682">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-682">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-683">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-683">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-684">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-684">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-685">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-685">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-686">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-686">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-687">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-687">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-688">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-688">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-689">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-689">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-690">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-690">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-691">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-691">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-692">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-692">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-693">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-693">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-694">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-694">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-695">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-695">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-696">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-696">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-697">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-697">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-698">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-698">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-699">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-699">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-700">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-700">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-701">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-701">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-702">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-702">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-703">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-703">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-704">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-704">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-705">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-705">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-706">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-706">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-707">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-707">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-708">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-708">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-709">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-709">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-710">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-710">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-711">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-711">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-712">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-712">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-713">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-713">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-714">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-714">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-715">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-715">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-716">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-716">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-717">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-717">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-718">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-718">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-719">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-719">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-720">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-720">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-721">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-721">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-722">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-722">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-723">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-723">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-724">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-724">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-725">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-725">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-726">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-726">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-727">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-727">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-728">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-728">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-729">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-729">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-730">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-730">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-731">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-731">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-732">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-732">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-733">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-733">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-734">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-734">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-735">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-735">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-736">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-736">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-737">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-737">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-738">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-738">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-739">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-739">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-740">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-740">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-741">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-741">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-742">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-742">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-743">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-743">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-744">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-744">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-745">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-745">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-746">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-746">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-747">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-747">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-748">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-748">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-749">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-749">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-750">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-750">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-751">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-751">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-752">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-752">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-753">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-753">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-754">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-754">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-755">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-755">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-756">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-756">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-757">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-757">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-758">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-758">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-759">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-759">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-760">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-760">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-761">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-761">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-762">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-762">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-763">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-763">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-764">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-764">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-765">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-765">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-766">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-766">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-767">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-767">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-768">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-768">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-769">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-769">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-770">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-770">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-771">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-771">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-772">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-772">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-773">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-773">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-774">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-774">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-775">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-775">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-776">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-776">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-777">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-777">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-778">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-778">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-779">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-779">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-780">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-780">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-781">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-781">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-782">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-782">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-783">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-783">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-784">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-784">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-785">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-785">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-786">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-786">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-787">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-787">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-788">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-788">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-789">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-789">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-790">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-790">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-791">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-791">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-792">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-792">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-793">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-793">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-794">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-794">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-795">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-795">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-796">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-796">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-797">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-797">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-798">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-798">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-799">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-799">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-800">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-800">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-801">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-801">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-802">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-802">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-803">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-803">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-804">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-804">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-805">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-805">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-806">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-806">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-807">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-807">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-808">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-808">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-809">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-809">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-810">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-810">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-811">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-811">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-812">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-812">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-813">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-813">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-814">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-814">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-815">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-815">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-816">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-816">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-817">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-817">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-818">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-818">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-819">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-819">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-820">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-820">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-821">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-821">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-822">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-822">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-823">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-823">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-824">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-824">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-825">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-825">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-826">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-826">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-827">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-827">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-828">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-828">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-829">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-829">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-830">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-830">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-831">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-831">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-832">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-832">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-833">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-833">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-834">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-834">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-835">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-835">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-836">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-836">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-837">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-837">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-838">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-838">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-839">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-839">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-840">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-840">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-841">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-841">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-842">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-842">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-843">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-843">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-844">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-844">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-845">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-845">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-846">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-846">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-847">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-847">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-848">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-848">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-849">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-849">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-850">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-850">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-851">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-852">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-852">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-853">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-854">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-855">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-855">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-856">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-856">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-857">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-857">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-858">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-858">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-859">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-859">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-860">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-860">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-861">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-861">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-862">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-862">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-863">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-863">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-864">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-864">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-865">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-865">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-866">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-866">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-867">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-867">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-868">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-868">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-869">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-869">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-870">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-870">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-871">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-871">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-872">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-872">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-873">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-873">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-874">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-874">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-875">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-875">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-876">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-876">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-877">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-877">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-878">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-878">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-879">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-880">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-881">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-882">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-882">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-883">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-883">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-884">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-884">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-885">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-885">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-886">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-886">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-887">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-887">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-888">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-888">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-889">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-889">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-890">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-890">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-891">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-891">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-892">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-892">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-893">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-893">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-894">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-894">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-895">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-895">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="7cbb3-896">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-896">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-897">Используется только при записи строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="7cbb3-898">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-898">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="7cbb3-899">Значение по умолчанию: <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-900">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-900">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-901">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-902">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-903">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-903">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-904">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-904">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-905">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-906">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-906">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-907">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-907">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-908">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-908">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-909">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-909">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-910">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-910">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-911">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-911">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-912">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-912">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-913">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-913">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-914">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-914">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-915">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-915">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-916">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-916">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-917">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-917">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-918">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-918">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-919">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-919">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-920">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-920">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-921">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-921">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-922">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-922">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-923">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-923">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-924">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-924">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-925">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-925">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-926">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-926">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-927">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-927">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-928">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-928">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-929">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-929">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-930">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-930">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-931">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-932">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-932">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-933">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-933">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-934">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-935">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-935">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-936">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-937">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-937">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-938">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-938">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-939">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-939">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-940">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-940">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-941">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-941">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-942">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-942">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-943">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-943">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-944">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-944">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-945">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-945">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-946">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-946">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-947">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-947">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-948">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-948">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FileGet : int *  * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGet (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-949">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-949">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-950">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-950">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-951">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-951">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-952">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-952">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-953">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-953">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-954">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-954">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="7cbb3-955">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-955">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-956">Применяется только при записи массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-956">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="7cbb3-957">Указывает, нужно ли обрабатывать массив как динамический, и обязательно ли записывать дескриптор массива, описывающий его длину и границы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-957">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="7cbb3-958">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-958">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-959">Используется только при записи строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-959">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="7cbb3-960">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-960">Specifies whether to write a two-byte descriptor for the string that describes the length.</span>
          </span>
          <span data-ttu-id="7cbb3-961">Значение по умолчанию: <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-961">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-962">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-962">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-963">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGet" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-963">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span>
          </span>
          <span data-ttu-id="7cbb3-964">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-964">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-965">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-965">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-966">Данные, считанные с `FileGet` , обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-966">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="7cbb3-967">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-967">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-968">Если опустить `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функция (или на которые указывает последний `Seek` функции) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-968">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-969">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-969">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-970">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-970">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-971">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-971">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-972">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-972">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-973">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGet` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-973">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-974">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-974">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-975">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-975">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-976">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, который содержит длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-976">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-977">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-977">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-978">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины; При записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-978">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-979">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-979">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-980">Если переменная является массивом, можно выбрать, следует ли считывать в дескрипторе, размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-980">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="7cbb3-981">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-981">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-982">При чтении массива, у вас есть в соответствии с принципами написания массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-982">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="7cbb3-983">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-983">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="7cbb3-984">Если дескриптор не используется, размер и границы массива, передаваемого `FileGet` определения того, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-984">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="7cbb3-985">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-985">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-986">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-986">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-987">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-988">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-988">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="7cbb3-989">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-989">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="7cbb3-990">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-990">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="7cbb3-991">200 байт для данных: (5 * 10 * 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-991">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-992">Если переменная считывается в объект другого типа переменной (не строка переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-992">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="7cbb3-993">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-993">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-994">`FileGet` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-994">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-995">На диске, динамический массив в определяемый пользователем тип (с `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-995">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-996">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно сумме всех байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-996">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="7cbb3-997">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-997">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-998">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-998">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-999">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-999">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1000">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1000">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1001">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1001">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1002">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1002">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1003">`FileGet` Считывает все переменные с диска последовательно; то есть без Величина заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1003">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1004">Для любого массива, кроме массива в виде структуры `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1004">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="7cbb3-1005">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1005">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="7cbb3-1006">`FileGet` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1006">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1007">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1007">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="7cbb3-1008">Чтение из файла с помощью `FileGet` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1008">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1009">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1009">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1010">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1010">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FileGetObject : int *  * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileGetObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1011">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1011">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1012">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1012">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1013">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1013">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1014">Допустимое имя переменной, в которую считываются данные.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1014">Valid variable name into which data is read.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1015">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1015">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1016">Номер записи (файлы в режиме произвольного доступа - <see langword="Random" />) или номер байта (файлы в бинарном режиме - <see langword="Binary" />), с которого начинается чтение.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1016">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1017">Читает данные из открытого файла на диске в переменную.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1017">Reads data from an open disk file into a variable.</span>
          </span>
          <span data-ttu-id="7cbb3-1018">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileGetObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1019">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1020">`FileGetObject` Функции используется вместо `FileGet` во избежание неоднозначности во время компиляции, если тип `Object` возвращается вместо другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1020">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="7cbb3-1021">Если вы собираетесь записать `Variant` типа, `FileGetObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1021">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="7cbb3-1022">Если вы сомневаетесь, если вы используете объект для второго параметра, всегда рекомендуется использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1022">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="7cbb3-1023">`FileGetObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1023">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1024">Данные, считанные с `FileGetObject` записываются с `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1024">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="7cbb3-1025">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1025">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1026">Если опустить `RecordNumber`, `FileGetObject` считывает записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или на которые указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1026">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1027">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1027">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1028">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1028">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1029">Если длина данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FileGetObject` считывает следующие записи границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1029">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1030">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1030">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1031">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется иметь совпадает с длиной данных длиной записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1031">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="7cbb3-1032">Если переменная представляет собой строку, по умолчанию `FileGetObject` считывает двухбайтовый дескриптор, содержащий длину строки и затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1032">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1033">Таким образом, запись длину, заданную `RecordLength` предложении `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1033">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1034">Visual Basic 6.0 и более ранние версии поддерживают строки фиксированной длины и при записи в файл, дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1034">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="7cbb3-1035">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1035">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1036">Если переменная, считываемых в массив, а затем записей длину, заданную `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1036">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1037">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1037">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1038">Его длина равно 2, а также 8 умножается на количество измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1038">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="7cbb3-1039">Например, следующее объявление массива требуется 218 байтов при записи на диск:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1039">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="7cbb3-1040">218 байт распределяются следующим образом: 18 байт для дескриптора (2 + 8 \* 2) и 100 байт для данных (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1040">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="7cbb3-1041">`FileGetObject` считывает элементы структуры так, как если бы каждый при чтении по отдельности, за исключением того, что есть без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1041">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1042">На диске, динамический массив в определяемый пользователем тип (с `FilePutObject`) начинается дескриптора, длина которого равна 2 плюс 8 раз размерность: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1042">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="7cbb3-1043">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов, включая массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1043">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="7cbb3-1044"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Класс может быть применен к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1044">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1045">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1045">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1046">Для открытия файлов в `Binary` режим, все `Random` применяются правила, со следующими исключениями:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1046">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="7cbb3-1047">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1047">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1048">`FileGetObject` Считывает все переменные с диска непрерывно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1048">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1049">Для любого массива, кроме массива в виде структуры `FileGetObject` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1049">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="7cbb3-1050">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1050">No descriptor is read.</span></span>  
  
 <span data-ttu-id="7cbb3-1051">`FileGetObject` считывает строки переменной длины, которые не являются частью структуры ожидается дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1051">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1052">Число считанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1052">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-1053">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1053">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-1054">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1054">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1055">В следующем примере выполняется запись в файл теста и затем получает его.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1055">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member FileLen : string -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.FileLen PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="7cbb3-1056">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1056">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1057">Выражение типа <see langword="String" />, определяющее файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1057">
              <see langword="String" /> expression that specifies a file.</span>
          </span>
          <span data-ttu-id="7cbb3-1058">Параметр <c>PathName</c> может включать каталог или папку, а также имя диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1058">
              <c>PathName</c> may include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1059">Возвращает значение типа <see langword="Long" />, которое указывает длину файла в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1059">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
          <span data-ttu-id="7cbb3-1060">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileLen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1060">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1061">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1061">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-1062">Значение типа <see langword="Long" />, которое указывает длину файла в байтах.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1062">
              <see langword="Long" /> value that specifies the length of a file in bytes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1063">Если указанный файл открыт, когда `FileLen` вызывается функция, возвращаемое значение представляет размер файла на момент его открытия.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1063">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-1064">Чтобы получить текущую длину открытого файла, используйте `LOF` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1064">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1065">В этом примере используется `FileLen` функция возвращает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1065">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="7cbb3-1066">Для целей этого примера, предположим, что `TestFile` — это файл, который содержит некоторые данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1066">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-1067">Файл не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1067">File does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberSignature Language="F#" Value="static member FileOpen : int * string * Microsoft.VisualBasic.OpenMode * Microsoft.VisualBasic.OpenAccess * Microsoft.VisualBasic.OpenShare * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileOpen (FileNumber, FileName, Mode, Access, Share, RecordLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1068">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1068">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1069">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1069">Any valid file number.</span>
          </span>
          <span data-ttu-id="7cbb3-1070">Для получения следующего свободного номера файла следует использовать функцию <see langword="FreeFile" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1070">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span>
          </span>
        </param>
        <param name="FileName">
          <span data-ttu-id="7cbb3-1071">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1071">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1072">Выражение типа <see langword="String" />, которое указывает имя файла. Может включать имя каталога или папки, а также имя диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1072">
              <see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Mode">
          <span data-ttu-id="7cbb3-1073">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1073">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1074">Перечисление, определяющее режим файла: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> или <see langword="Random" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1074">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1075">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1075">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span>
          </span>
        </param>
        <param name="Access">
          <span data-ttu-id="7cbb3-1076">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1076">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1077">Перечисление, определяющие операции, разрешенные для работы с открытым файлом: <see langword="Read" />, <see langword="Write" /> или <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1077">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1078">По умолчанию — <see langword="ReadWrite" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1078">Defaults to <see langword="ReadWrite" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1079">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1079">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span>
          </span>
        </param>
        <param name="Share">
          <span data-ttu-id="7cbb3-1080">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1080">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1081">Перечисление операций, не разрешенных при работе с файлом, открытым другим процессом: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> и <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1081">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1082">По умолчанию используется значение <see langword="Lock Read Write" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1082">Defaults to <see langword="Lock Read Write" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1083">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1083">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span>
          </span>
        </param>
        <param name="RecordLength">
          <span data-ttu-id="7cbb3-1084">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1084">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1085">Число, не превышающее 32 767 (байт).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1085">Number less than or equal to 32,767 (bytes).</span>
          </span>
          <span data-ttu-id="7cbb3-1086">Для файлов, открытых с произвольным доступом, это значение является длиной записи.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1086">For files opened for random access, this value is the record length.</span>
          </span>
          <span data-ttu-id="7cbb3-1087">Для файлов с последовательным доступом — это число знаков в буфере.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1087">For sequential files, this value is the number of characters buffered.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1088">Открывает файл для ввода или вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1088">Opens a file for input or output.</span>
          </span>
          <span data-ttu-id="7cbb3-1089">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1089">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1090">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1090">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1091">`FileOpen` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1091">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-1092">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1092">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-1093">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1093">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-1094">Перед выполнением любой операции ввода-вывода на нем необходимо открыть файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1094">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="7cbb3-1095">`FileOpen` выделяет буфер для ввода-вывода в файл и определяет режим доступа для использования с буфером.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1095">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-1096">При записи в файл приложения может потребоваться создать файл, если файл, к которому он пытается получить запись не существует.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1096">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="7cbb3-1097">Чтобы сделать это, ему разрешения для каталога, в котором должен быть создан файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1097">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="7cbb3-1098">Тем не менее если файл, заданный параметром `FileName` существует, приложению `Write` разрешение только на сам файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1098">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="7cbb3-1099">Везде, где возможно, в целях повышения безопасности, создать файл во время развертывания и предоставить `Write` разрешение на этот файл только, а не для всего каталога.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1099">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="7cbb3-1100">В целях повышения безопасности, записывайте данные в каталоги пользователей, а не в корневом каталоге или каталоге Program Files.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1100">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="7cbb3-1101">Канал, чтобы открыть можно найти с помощью `FreeFile()` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1101">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-1102">`FileOpen` Функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления, который может повлиять на выполнение в ситуациях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1102">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="7cbb3-1103">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1103">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1104">В этом примере показаны различные способы `FileOpen` функцию входные и выходные данные в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1104">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="7cbb3-1105">Следующий код открывает файл `TestFile` в `Input` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1105">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="7cbb3-1106">Этот пример открывает файл в `Binary` режиме для записи только операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1106">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="7cbb3-1107">В следующем примере открывается файл в `Random` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1107">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="7cbb3-1108">Файл содержит записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1108">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="7cbb3-1109">Данный пример кода открывает файл в `Output` режиме; любой процесс может прочитать или записать в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1109">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="7cbb3-1110">Данный пример кода открывает файл в `Binary` режиме для чтения; другие процессы не удается прочитать файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1110">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1111">Отрицательная длина записи (не равная –1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1111">Record length is negative (and not equal to -1).</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1112">Файл <paramref name="FileName" /> уже открыт, или <paramref name="FileName" /> является недопустимым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1112">
              <paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-1113">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1113">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1114">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1114">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1115">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1115">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * bool * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1116">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1116">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1117">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1117">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1118">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1118">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1119">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1119">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1120">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1120">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1121">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1121">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1122">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1122">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1123">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1123">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1124">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1124">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1125">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1125">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1126">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1126">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1127">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1127">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1128">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1128">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1129">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1129">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1130">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1130">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1131">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1131">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1132">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1132">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1133">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1133">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1134">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1134">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1135">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1135">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1136">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1136">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1137">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1137">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1138">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1138">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1139">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1139">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1140">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1140">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1141">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1141">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1142">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1142">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1143">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1143">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1144">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1144">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1145">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1145">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1146">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1146">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1147">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1147">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1148">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1148">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1149">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1149">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1150">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1150">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1151">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1151">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1152">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1152">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1153">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1153">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1154">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1154">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1155">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1155">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1156">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1156">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1157">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1157">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1158">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1158">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1159">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1159">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1160">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1160">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1161">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1161">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1162">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1162">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1163">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1163">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1164">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1164">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1165">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1165">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1166">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1166">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1167">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1167">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1168">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1168">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1169">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1169">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1170">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1170">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1171">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1171">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1172">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1172">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1173">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1173">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1174">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1174">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * byte * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1175">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1175">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1176">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1176">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1177">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1177">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1178">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1178">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1179">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1179">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1180">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1180">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1181">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1181">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1182">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1182">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1183">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1183">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1184">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1184">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1185">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1185">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1186">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1186">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1187">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1187">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1188">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1188">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1189">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1189">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1190">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1190">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1191">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1191">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1192">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1192">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1193">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1193">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1194">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1194">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1195">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1195">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1196">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1196">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1197">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1197">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1198">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1198">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1199">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1199">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1200">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1200">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1201">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1201">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1202">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1202">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1203">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1203">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1204">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1204">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1205">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1205">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1206">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1206">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1207">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1207">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1208">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1208">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1209">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1209">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1210">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1210">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1211">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1211">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1212">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1212">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1213">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1213">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1214">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1214">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1215">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1215">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1216">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1216">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1217">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1217">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1218">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1218">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1219">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1219">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1220">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1220">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1221">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1221">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1222">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1222">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1223">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1223">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1224">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1224">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1225">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1225">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1226">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1226">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1227">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1227">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1228">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1228">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1229">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1229">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1230">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1230">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1231">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1231">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1232">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1232">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1233">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1233">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * char * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1234">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1234">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1235">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1235">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1236">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1236">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1237">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1237">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1238">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1238">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1239">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1239">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1240">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1240">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1241">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1241">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1242">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1242">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1243">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1243">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1244">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1244">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1245">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1245">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1246">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1246">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1247">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1247">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1248">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1248">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1249">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1249">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1250">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1250">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1251">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1251">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1252">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1252">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1253">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1253">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1254">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1254">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1255">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1255">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1256">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1256">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1257">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1257">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1258">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1258">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1259">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1259">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1260">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1260">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1261">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1261">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1262">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1262">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1263">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1263">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1264">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1264">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1265">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1265">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1266">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1266">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1267">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1267">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1268">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1268">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1269">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1269">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1270">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1270">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1271">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1271">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1272">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1272">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1273">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1273">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1274">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1274">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1275">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1275">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1276">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1276">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1277">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1277">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1278">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1278">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1279">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1279">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1280">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1280">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1281">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1281">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1282">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1282">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1283">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1283">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1284">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1284">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1285">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1285">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1286">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1286">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1287">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1287">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1288">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1288">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1289">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1289">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1290">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1290">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1291">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1291">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1292">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1292">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * DateTime * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1293">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1293">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1294">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1294">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1295">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1295">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1296">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1296">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1297">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1297">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1298">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1298">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1299">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1299">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1300">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1300">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1301">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1301">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1302">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1302">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1303">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1303">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1304">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1304">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1305">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1305">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1306">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1306">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1307">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1307">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1308">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1308">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1309">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1309">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1310">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1310">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1311">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1311">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1312">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1312">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1313">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1313">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1314">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1314">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1315">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1315">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1316">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1316">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1317">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1317">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1318">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1318">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1319">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1319">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1320">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1320">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1321">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1322">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1322">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1323">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1323">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1324">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1324">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1325">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1325">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1326">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1326">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1327">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1327">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1328">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1328">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1329">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1329">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1330">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1331">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1331">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1332">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1332">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1333">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1333">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1334">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1334">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1335">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1335">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1336">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1336">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1337">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1337">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1338">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1338">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1339">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1339">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1340">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1340">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1341">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1341">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1342">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1342">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1343">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1343">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1344">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1344">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1345">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1345">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1346">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1346">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1347">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1347">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1348">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1348">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1349">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1349">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1350">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1350">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1351">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1351">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * decimal * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1352">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1352">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1353">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1353">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1354">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1354">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1355">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1355">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1356">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1356">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1357">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1357">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1358">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1358">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1359">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1359">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1360">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1360">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1361">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1361">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1362">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1362">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1363">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1363">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1364">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1364">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1365">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1365">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1366">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1366">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1367">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1367">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1368">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1368">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1369">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1369">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1370">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1370">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1371">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1371">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1372">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1372">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1373">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1373">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1374">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1374">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1375">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1375">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1376">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1376">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1377">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1377">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1378">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1378">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1379">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1379">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1380">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1380">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1381">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1381">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1382">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1382">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1383">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1383">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1384">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1384">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1385">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1385">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1386">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1386">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1387">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1387">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1388">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1388">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1389">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1389">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1390">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1390">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1391">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1391">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1392">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1392">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1393">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1393">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1394">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1394">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1395">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1395">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1396">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1396">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1397">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1397">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1398">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1398">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1399">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1399">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1400">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1400">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1401">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1401">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1402">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1402">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1403">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1403">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1404">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1404">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1405">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1405">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1406">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1406">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1407">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1407">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1408">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1408">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1409">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1409">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1410">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1410">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * double * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1411">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1411">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1412">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1412">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1413">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1413">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1414">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1414">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1415">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1415">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1416">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1416">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1417">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1417">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1418">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1418">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1419">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1419">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1420">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1420">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1421">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1421">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1422">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1422">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1423">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1423">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1424">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1424">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1425">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1425">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1426">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1426">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1427">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1427">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1428">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1428">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1429">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1429">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1430">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1430">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1431">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1431">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1432">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1432">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1433">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1433">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1434">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1434">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1435">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1435">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1436">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1436">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1437">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1437">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1438">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1438">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1439">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1439">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1440">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1440">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1441">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1441">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1442">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1442">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1443">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1443">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1444">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1444">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1445">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1445">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1446">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1446">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1447">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1447">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1448">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1448">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1449">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1449">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1450">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1450">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1451">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1451">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1452">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1452">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1453">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1453">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1454">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1454">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1455">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1455">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1456">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1456">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1457">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1457">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1458">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1458">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1459">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1459">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1460">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1460">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1461">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1461">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1462">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1462">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1463">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1463">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1464">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1464">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1465">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1465">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1466">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1466">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1467">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1467">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1468">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1468">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1469">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1469">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int16 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1470">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1470">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1471">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1471">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1472">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1472">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1473">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1473">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1474">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1474">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1475">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1475">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1476">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1476">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1477">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1477">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1478">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1478">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1479">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1479">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1480">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1480">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1481">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1481">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1482">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1482">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1483">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1483">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1484">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1484">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1485">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1485">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1486">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1486">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1487">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1487">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1488">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1488">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1489">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1489">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1490">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1490">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1491">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1491">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1492">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1492">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1493">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1493">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1494">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1494">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1495">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1495">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1496">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1496">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1497">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор`VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1497">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1498">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1498">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1499">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1499">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1500">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1500">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1501">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1501">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1502">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1502">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1503">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1503">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1504">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1504">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1505">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1505">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1506">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1506">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1507">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1507">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1508">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1508">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1509">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1509">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1510">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1510">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1511">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1511">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1512">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1512">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1513">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1513">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1514">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1514">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1515">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1515">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1516">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1516">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1517">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1517">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1518">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1518">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1519">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1519">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1520">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1520">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1521">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1521">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1522">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1522">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1523">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1523">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1524">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1524">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1525">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1525">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1526">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1526">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1527">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1527">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1528">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1528">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1529">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1529">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1530">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1530">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1531">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1531">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1532">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1532">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1533">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1533">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1534">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1534">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1535">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1535">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1536">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1536">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1537">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1537">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1538">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1538">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1539">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1539">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1540">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1540">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1541">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1541">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1542">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1542">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1543">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1543">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1544">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1544">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1545">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1545">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1546">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1546">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1547">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1547">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1548">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1548">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1549">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1549">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1550">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1550">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1551">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1551">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1552">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1552">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1553">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1553">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1554">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1554">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1555">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1555">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1556">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1556">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1557">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1557">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1558">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1558">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1559">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1559">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1560">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1560">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1561">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1561">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1562">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1562">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1563">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1563">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1564">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1564">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1565">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1565">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1566">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1566">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1567">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1567">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1568">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1568">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1569">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1569">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1570">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1570">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1571">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1571">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1572">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1572">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1573">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1573">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1574">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1574">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1575">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1575">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1576">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1576">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1577">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1577">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1578">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1578">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1579">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1579">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1580">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1580">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1581">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1581">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1582">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1582">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1583">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1583">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1584">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1584">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1585">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1585">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1586">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1586">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1587">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1587">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1588">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1588">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1589">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1589">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1590">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1590">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1591">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1591">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1592">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1592">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1593">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1593">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1594">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1594">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1595">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1595">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1596">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1596">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1597">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1597">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1598">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1598">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1599">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1599">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1600">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1600">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1601">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1601">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1602">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1602">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1603">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1603">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1604">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1604">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1605">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1605">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1606">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1606">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1607">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1607">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1608">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1608">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1609">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1609">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1610">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1610">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1611">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1611">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1612">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1612">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1613">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1613">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1614">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1614">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1615">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1615">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1616">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1616">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1617">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1617">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1618">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1618">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1619">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1619">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1620">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1620">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1621">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1621">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1622">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1622">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1623">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1623">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1624">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1624">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1625">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1625">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1626">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1626">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1627">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1627">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1628">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1628">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1629">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1629">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1630">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1630">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1631">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1631">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1632">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1632">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1633">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1633">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1634">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1634">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1635">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1635">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1636">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1636">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1637">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1637">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1638">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1638">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1639">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1639">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1640">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1640">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1641">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1641">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1642">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1642">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1643">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1643">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1644">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1644">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1645">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1645">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1646">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1646">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * single * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1647">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1647">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1648">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1648">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1649">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1649">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1650">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1650">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1651">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1651">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1652">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1652">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1653">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1653">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1654">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1655">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1656">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1656">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1657">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1657">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1658">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1658">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1659">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1659">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1660">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1660">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1661">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1661">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1662">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1662">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1663">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1663">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1664">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1664">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1665">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1665">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1666">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1666">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1667">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1667">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1668">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1668">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1669">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1669">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1670">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1670">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1671">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1671">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1672">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1672">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1673">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1673">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1674">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1674">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1675">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1675">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1676">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1676">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1677">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1677">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1678">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1678">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1679">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1679">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1680">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1680">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1681">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1681">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1682">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1682">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1683">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1683">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1684">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1684">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1685">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1685">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1686">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1686">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1687">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1687">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1688">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1688">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1689">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1689">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1690">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1690">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1691">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1691">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1692">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1692">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1693">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1693">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1694">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1694">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1695">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1695">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1696">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1696">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1697">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1697">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1698">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1698">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1699">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1699">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1700">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1700">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1701">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1701">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1702">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1702">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1703">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1703">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1704">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1704">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1705">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1705">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * ValueType * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1706">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1706">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1707">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1707">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1708">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1708">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1709">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1709">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1710">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1710">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1711">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1711">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1712">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1712">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1713">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1713">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1714">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1714">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1715">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1715">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1716">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1716">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1717">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1717">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1718">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1718">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1719">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1719">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1720">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1720">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1721">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1721">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1722">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1722">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1723">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1723">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1724">Если длина записываемых данных меньше, чем длина, указанная в`RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1724">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1725">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1725">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1726">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1726">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1727">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1727">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1728">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1728">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1729">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1729">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1730">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1730">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1731">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1731">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1732">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1732">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1733">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1733">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1734">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1734">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1735">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1735">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1736">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1736">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1737">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1737">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1738">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1738">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1739">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1739">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1740">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1740">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1741">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1741">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1742">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1742">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1743">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1743">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1744">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1744">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1745">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1745">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1746">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1746">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1747">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1747">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1748">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1748">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1749">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1749">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1750">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1750">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1751">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1751">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1752">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1752">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1753">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1753">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1754">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1754">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1755">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1755">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1756">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1756">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1757">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1757">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1758">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1758">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1759">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1759">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1760">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1760">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1761">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1761">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1762">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1762">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1763">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1763">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1764">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1764">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberSignature Language="F#" Value="static member FilePut : obj * obj * obj -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1765">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1765">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1766">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1766">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1767">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1767">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1768">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1768">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1769">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1769">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1770">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1770">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1771">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1771">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1772">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1772">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1773">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1773">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1774">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1774">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1775">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1775">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1776">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1776">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1777">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1777">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1778">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1778">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1779">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1779">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1780">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1780">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1781">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1781">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1782">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1782">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1783">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1783">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1784">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1784">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1785">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1785">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1786">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1786">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1787">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1787">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1788">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1788">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1789">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1789">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1790">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1790">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1791">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1791">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1792">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1792">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1793">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1793">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1794">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1794">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1795">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1795">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1796">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1796">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1797">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1797">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1798">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1798">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1799">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1799">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1800">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1800">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1801">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1801">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1802">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1802">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1803">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1803">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1804">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1804">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1805">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1805">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1806">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1806">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1807">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1807">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1808">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1808">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1809">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1809">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1810">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1810">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1811">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1811">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1812">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1812">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1813">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1813">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1814">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1814">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1815">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1815">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1816">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1816">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1817">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1817">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1818">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1818">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1819">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1819">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1820">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1820">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1821">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1821">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1822">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1822">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1823">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * string * int64 * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1824">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1824">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1825">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1825">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1826">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1826">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1827">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1827">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1828">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1828">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1829">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1829">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="7cbb3-1830">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1830">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1831">Используется только при записи строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1831">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="7cbb3-1832">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1832">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="7cbb3-1833">Значение по умолчанию: <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1833">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1834">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1834">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1835">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1835">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1836">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1836">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1837">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1837">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1838">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1838">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1839">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1839">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1840">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1840">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1841">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1841">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1842">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1842">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1843">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1843">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1844">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1844">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1845">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1845">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1846">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1846">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1847">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1847">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1848">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1848">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1849">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1849">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1850">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1850">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1851">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1851">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1852">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1852">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1853">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1853">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1854">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1854">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1855">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1855">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1856">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1856">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1857">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1857">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1858">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1858">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1859">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1859">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1860">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1860">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1861">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1861">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1862">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1862">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1863">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1863">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1864">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1864">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1865">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1865">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1866">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1866">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1867">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1867">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1868">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1868">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1869">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1869">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1870">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1870">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1871">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1871">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1872">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1872">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1873">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1873">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1874">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1874">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1875">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1875">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1876">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1876">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1877">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1877">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1878">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1878">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1879">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1879">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1880">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1880">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1881">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1881">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1882">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1882">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1883">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1883">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1884">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1884">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1885">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1885">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1886">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1886">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberSignature Language="F#" Value="static member FilePut : int * Array * int64 * bool * bool -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePut (FileNumber, Value, RecordNumber, ArrayIsDynamic, StringIsFixedLength)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1887">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1887">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1888">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1888">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1889">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1889">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1890">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1890">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1891">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1891">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1892">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1892">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <param name="ArrayIsDynamic">
          <span data-ttu-id="7cbb3-1893">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1893">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1894">Применяется только при записи массива.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1894">Applies only when writing an array.</span>
          </span>
          <span data-ttu-id="7cbb3-1895">Указывает, нужно ли обрабатывать массив как динамический, и записывать ли дескриптор массива для строки, определяющий ее длину.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1895">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span>
          </span>
        </param>
        <param name="StringIsFixedLength">
          <span data-ttu-id="7cbb3-1896">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1896">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1897">Используется только при записи строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1897">Applies only when writing a string.</span>
          </span>
          <span data-ttu-id="7cbb3-1898">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1898">Specifies whether to write a two-byte string length descriptor for the string to the file.</span>
          </span>
          <span data-ttu-id="7cbb3-1899">Значение по умолчанию: <see langword="False" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1899">The default is <see langword="False" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1900">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1900">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1901">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePut" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1901">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1902">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1902">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1903">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1903">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1904">Данные, записанные функцией `FilePut`, обычно считываются из файла с помощью функции `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1904">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="7cbb3-1905">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1905">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1906">Если опустить `RecordNumber`, далее соответствующей записи байтов после последнего `FileGet` или `FilePut` функцию или на которые указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1906">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="7cbb3-1907">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1907">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1908">`FilePut` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1908">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1909">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, что необходимо сделать то же самое с `FileGet`, и вам нужно убедиться, что строка инициализируется длина ожидается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1909">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1910">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1910">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1911">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1911">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1912">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1912">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1913">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1913">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1914">Так как объем данных заполнения не может быть определен с достаточной точностью, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1914">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1915">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1915">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1916">Если записываемая переменная является строкой, `FilePut` записывает двухбайтовый дескриптор, который содержит длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1916">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="7cbb3-1917">Таким образом, запись длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1917">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="7cbb3-1918">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1918">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1919">Например, при написании объект, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1919">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1920">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1920">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1921">Если записываемая переменная — это объект, который содержит строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1921">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1922">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1922">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1923">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1923">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1924">Если записываемая переменная является массивом, необходимо выбрать, следует ли записать дескриптор размер и размерность массива.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1924">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="7cbb3-1925">Visual Basic 6.0 и более ранних версий записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1925">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="7cbb3-1926">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1926">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="7cbb3-1927">Чтобы записать дескриптор, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1927">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="7cbb3-1928">При записи массива, имеется в соответствии с принципами, которые будут считываться массива; Если он будет считываться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1928">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="7cbb3-1929">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1930">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="7cbb3-1931">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1931">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1932">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="7cbb3-1933">В случае любого другого типа переменной (не строка переменной длины или объект), переменная записывается `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1933">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="7cbb3-1934">Длина записи, указанная с `RecordLength` предложение в `FileOpen` функция должна быть больше или равно длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1934">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1935">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, кроме того, что заполнение между элементами.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1935">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="7cbb3-1936">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1936">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="7cbb3-1937">Строка, полей, имеющих большее число байтов, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1937">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1938">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1938">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1939">Для открытия файлов в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1939">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="7cbb3-1940">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режиме:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1940">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="7cbb3-1941">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1941">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1942">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1942">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="7cbb3-1943">Для любого массива, кроме массива в виде структуры `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1943">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="7cbb3-1944">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1944">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-1945">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длины размером 2 байта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1945">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="7cbb3-1946">Число записанных байтов равно количеству символов в строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1946">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="7cbb3-1947">Например следующие инструкции написать 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1947">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="7cbb3-1948">Запись в файл с помощью `FilePut` функции требуется `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1948">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1949">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1949">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="7cbb3-1950">Пять записей структуры `Person` записываются в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1950">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-1951">
            <paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1951">
              <paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-1952">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1952">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberSignature Language="F#" Value="static member FilePutObject : int * obj * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FilePutObject (FileNumber, Value, RecordNumber)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1953">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1953">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1954">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1954">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-1955">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1955">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1956">Допустимое имя переменной, содержащей данные для записи на диск.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1956">Valid variable name that contains data written to disk.</span>
          </span>
        </param>
        <param name="RecordNumber">
          <span data-ttu-id="7cbb3-1957">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1957">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-1958">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1958">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1959">Записывает значения переменных в файл на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1959">Writes data from a variable to a disk file.</span>
          </span>
          <span data-ttu-id="7cbb3-1960">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FilePutObject" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1960">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span>
          </span>
          <span data-ttu-id="7cbb3-1961">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1961">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-1962">`FilePutObject` Функции используется вместо `FilePut` во избежание неоднозначности во время компиляции, если тип `Object` передается вместо другого типа, например `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1962">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="7cbb3-1963">`FilePutObject` Записывает и читает дескрипторы, описывающие объект.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1963">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="7cbb3-1964">Если вы собираетесь записать `Variant` типа, `FilePutObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1964">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="7cbb3-1965">Если вы сомневаетесь, если вы используете объект для второго параметра, мы рекомендуем всегда использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1965">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="7cbb3-1966">`FilePutObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1966">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-1967">Данные, записанные функцией `FilePutObject`, обычно считываются из файла с помощью функции `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1967">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="7cbb3-1968">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1968">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="7cbb3-1969">Если опустить `RecordNumber`, `FilePutObject` записывает Далее записи или единственного байта после последнего `FileGetObject` или `FilePutObject` функция (или записи или единственного байта, на которые указывают последнего `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1969">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="7cbb3-1970">`StringIsFixedLength` Аргумент контролирует, представляет ли функция строки как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1970">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="7cbb3-1971">`FilePutObject` записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1971">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="7cbb3-1972">При использовании `StringIsFixedLength`  =  `True` с `FilePutObject`, что необходимо сделать то же самое с `FileGetObject`, а также необходимо убедиться в том, что строка инициализируется длина ожидалось.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1972">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="7cbb3-1973">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1973">Random Mode</span></span>  
 <span data-ttu-id="7cbb3-1974">Для открытия файлов в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1974">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="7cbb3-1975">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции `FilePutObject` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1975">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="7cbb3-1976">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1976">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="7cbb3-1977">Поскольку невозможно точно определить объем данных, заполнение, рекомендуется обычно длина записи совпадает с длиной записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1977">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="7cbb3-1978">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложении `FileOpen` функции, создается исключение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1978">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="7cbb3-1979">Если записываемая переменная является объектом, содержащим числовой тип, `FilePutObject` записывает два байта, идентифицирующие `VarType` объекта, а затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1979">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="7cbb3-1980">Например, при написании объект, содержащий целое число, `FilePutObject` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1980">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="7cbb3-1981">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1981">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="7cbb3-1982">Если записываемая переменная — это объект, который содержит строку, `FilePutObject` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающее длину строки, а затем данные строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1982">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="7cbb3-1983">Длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1983">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="7cbb3-1984">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметра и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1984">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="7cbb3-1985">Если записываемая переменная является массивом, а затем записей длину, заданную `RecordLength` предложение в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1985">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="7cbb3-1986">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1986">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="7cbb3-1987">Его длина равно 2, а также 8 умножается на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1987">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="7cbb3-1988">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1988">Binary Mode</span></span>  
 <span data-ttu-id="7cbb3-1989">Для открытия файлов в `Binary` режим, все `Random` применяются правила режиме, за исключением:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1989">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="7cbb3-1990">`RecordLength` Предложение в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1990">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="7cbb3-1991">`FilePutObject` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1991">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-1992">В этом примере используется `FilePutObject` функцию для записи строки в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-1992">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberSignature Language="F#" Value="static member FileWidth : int * int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.FileWidth (FileNumber, RecordWidth)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-1993">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1993">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1994">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1994">Any valid file number.</span>
          </span>
        </param>
        <param name="RecordWidth">
          <span data-ttu-id="7cbb3-1995">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1995">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-1996">Числовое выражение в диапазоне от 0 до 255 включительно, которое показывает, сколько знаков появится в строке перед началом новой строки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1996">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span>
          </span>
          <span data-ttu-id="7cbb3-1997">Если параметр <c>RecordWidth</c> равен 0, ограничения на длину строки не устанавливаются.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1997">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span>
          </span>
          <span data-ttu-id="7cbb3-1998">Значение по умолчанию для параметра <c>RecordWidth</c> равно 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1998">The default value for <c>RecordWidth</c> is 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-1999">Присваивает ширину строки вывода в файле, открытом функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-1999">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="7cbb3-2000">В этом примере используется `FileWidth` функцию для задания ширины строки вывода для файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2000">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2001">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2001">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberSignature Language="F#" Value="static member FreeFile : unit -&gt; int" Usage="Microsoft.VisualBasic.FileSystem.FreeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2002">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2002">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2003">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2003">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2004">Используйте `FreeFile` для номера файла, который уже не используется.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2004">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2005">В этом примере используется `FreeFile` функцию для возврата следующего свободного номера файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2005">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="7cbb3-2006">Для вывода в цикле открывается пять файлов, и некоторые примеры данных записывается для каждого.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2006">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2007">Используется больше 255 файлов.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2007">More than 255 files are in use.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member GetAttr : string -&gt; Microsoft.VisualBasic.FileAttribute" Usage="Microsoft.VisualBasic.FileSystem.GetAttr PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="7cbb3-2008">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2008">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2009">Выражение типа <see langword="String" />, определяющее имя файла, каталога или папки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2009">
              <see langword="String" /> expression that specifies a file, directory, or folder name.</span>
          </span>
          <span data-ttu-id="7cbb3-2010">Параметр <c>PathName</c> может содержать имя каталога или папки и имя диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2010">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2011">Возвращает значение <see langword="FileAttribute" />, представляющее атрибуты файла, каталога или папки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2011">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span>
          </span>
          <span data-ttu-id="7cbb3-2012">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="FileAttribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2012">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2013">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2013">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2014">Значение, возвращаемое функцией <see langword="GetAttr" />, является суммой следующих значений перечисления:</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2014">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span>
          </span>
          <span data-ttu-id="7cbb3-2015">
            <list type="table">
              <item>
                <term> Значение </term>
                <description> Константа </description>
                <description> Описание </description>
              </item>
              <item>
                <term>
                  <see langword="Normal" />
                </term>
                <description>
                  <see langword="vbNormal" />
                </description>
                <description> Обычный.  </description>
              </item>
              <item>
                <term>
                  <see langword="ReadOnly" />
                </term>
                <description>
                  <see langword="vbReadOnly" />
                </description>
                <description> Только для чтения.  </description>
              </item>
              <item>
                <term>
                  <see langword="Hidden" />
                </term>
                <description>
                  <see langword="vbHidden" />
                </description>
                <description> Скрытый.  </description>
              </item>
              <item>
                <term>
                  <see langword="System" />
                </term>
                <description>
                  <see langword="vbSystem" />
                </description>
                <description> Системный файл.  </description>
              </item>
              <item>
                <term>
                  <see langword="Directory" />
                </term>
                <description>
                  <see langword="vbDirectory" />
                </description>
                <description> Каталог или папка.  </description>
              </item>
              <item>
                <term>
                  <see langword="Archive" />
                </term>
                <description>
                  <see langword="vbArchive" />
                </description>
                <description> Файл был изменен с момента создания последней резервной копии.  </description>
              </item>
              <item>
                <term>
                  <see langword="Alias" />
                </term>
                <description>
                  <see langword="vbAlias" />
                </description>
                <description> У файла другое имя.  </description>
              </item>
            </list>
            <block subset="none" type="note">
              <para> Эти перечисления определены в языке Visual Basic. Имена могут использоваться в любом месте вашего кода вместо фактических значений. </para>
            </block>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2015">
              <list type="table">
                <item>
                  <term> Value  </term>
                  <description> Constant  </description>
                  <description> Description  </description>
                </item>
                <item>
                  <term>
                    <see langword="Normal" />
                  </term>
                  <description>
                    <see langword="vbNormal" />
                  </description>
                  <description> Normal.  </description>
                </item>
                <item>
                  <term>
                    <see langword="ReadOnly" />
                  </term>
                  <description>
                    <see langword="vbReadOnly" />
                  </description>
                  <description> Read-only.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Hidden" />
                  </term>
                  <description>
                    <see langword="vbHidden" />
                  </description>
                  <description> Hidden.  </description>
                </item>
                <item>
                  <term>
                    <see langword="System" />
                  </term>
                  <description>
                    <see langword="vbSystem" />
                  </description>
                  <description> System file.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Directory" />
                  </term>
                  <description>
                    <see langword="vbDirectory" />
                  </description>
                  <description> Directory or folder.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Archive" />
                  </term>
                  <description>
                    <see langword="vbArchive" />
                  </description>
                  <description> File has changed since last backup.  </description>
                </item>
                <item>
                  <term>
                    <see langword="Alias" />
                  </term>
                  <description>
                    <see langword="vbAlias" />
                  </description>
                  <description> File has a different name.  </description>
                </item>
              </list>
              <block subset="none" type="note">
                <para> These enumerations are specified by the Visual Basic language. The names can be used anywhere in your code in place of the actual values.  </para>
              </block>
            </span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2016">Чтобы определить, какие атрибуты имеют значения, используйте `And` оператор для выполнения побитовое сравнение значения, возвращенного `GetAttr` функции и значения атрибута файла необходимо.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2016">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="7cbb3-2017">Если результат не равен нулю, этот атрибут имеет значение для указанного файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2017">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="7cbb3-2018">Например, возвращаемое значение из следующих `And` выражение является нуль, если `Archive` атрибут не задан:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2018">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="7cbb3-2019">Ненулевое значение возвращается в том случае, если `Archive` атрибут имеет значение.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2019">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2020">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2020">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2021">Параметр <paramref name="Pathname" /> недопустим или содержит подстановочный знак.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2021">
              <paramref name="Pathname" /> is invalid or contains wildcards.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-2022">Указанный файл не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2022">Target file does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2023">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2023">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2024">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2024">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2025">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2025">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2026">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2026">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2027">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2027">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2028">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2028">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2029">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2029">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2030">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2030">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2031">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2031">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2032">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2032">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2033">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2033">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2034">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2034">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2035">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2035">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2036">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2036">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2037">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2037">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2038">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2038">Data</span></span>|<span data-ttu-id="7cbb3-2039">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2039">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2040">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2040">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2041">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2041">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2042">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2042">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2043">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2043">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2044">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2044">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2045">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2045">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2046">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2046">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2047">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2047">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2048">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2048">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2049">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2049">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2050">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2050">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2051">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2051">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2052">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2052">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2053">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2053">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2054">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2054">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2055">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2055">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2056">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2056">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2057">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2057">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2058">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2058">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2059">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2059">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2060">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2060">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2061">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2061">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2062">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2062">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2063">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2063">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2064">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2064">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2065">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2065">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2066">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2066">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2067">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2067">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2068">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2068">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2069">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2069">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2070">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2070">Data</span></span>|<span data-ttu-id="7cbb3-2071">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2071">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2072">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2072">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2073">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2073">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2074">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2074">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2075">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2075">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2076">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2076">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2077">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2077">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2078">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2078">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2079">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2079">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2080">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2080">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2081">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2081">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2082">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2082">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2083">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2083">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2084">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2084">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2085">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2085">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2086">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2086">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2087">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2087">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2088">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2088">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2089">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2089">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2090">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2090">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2091">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2091">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2092">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2092">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2093">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2093">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2094">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2094">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2095">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2095">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2096">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2096">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2097">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2097">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2098">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2098">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2099">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2099">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2100">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2100">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2101">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2101">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2102">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2102">Data</span></span>|<span data-ttu-id="7cbb3-2103">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2103">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2104">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2104">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2105">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2105">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2106">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2106">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2107">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2107">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2108">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2108">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2109">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2109">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2110">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2110">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2111">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2111">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2112">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2112">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2113">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2113">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2114">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2114">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2115">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2115">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2116">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2116">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2117">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2117">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2118">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2118">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2119">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2119">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2120">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2120">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2121">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2121">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2122">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2122">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2123">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2123">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2124">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2124">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2125">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2125">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2126">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2126">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2127">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2127">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2128">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2128">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2129">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2129">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2130">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2130">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2131">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2131">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2132">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2132">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2133">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2133">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2134">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2134">Data</span></span>|<span data-ttu-id="7cbb3-2135">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2135">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2136">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2136">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2137">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2137">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2138">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2138">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2139">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2139">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2140">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2140">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2141">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2141">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2142">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2142">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2143">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2143">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2144">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2144">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2145">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2145">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2146">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2146">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2147">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2147">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2148">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2148">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2149">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2149">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2150">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2150">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2151">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2151">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2152">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2152">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2153">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2153">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2154">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2154">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2155">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2155">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2156">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2156">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2157">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2157">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2158">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2158">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2159">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2159">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2160">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2160">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2161">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2161">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2162">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2162">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2163">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2163">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2164">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2164">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2165">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2165">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2166">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2166">Data</span></span>|<span data-ttu-id="7cbb3-2167">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2167">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2168">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2168">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2169">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2169">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2170">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2170">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2171">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2171">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2172">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2172">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2173">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2173">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2174">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2174">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2175">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2175">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2176">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2176">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2177">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2177">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2178">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2178">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2179">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2179">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2180">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2180">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2181">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2181">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2182">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2182">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2183">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2183">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2184">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2184">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2185">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2185">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2186">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2186">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2187">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2187">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2188">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2188">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2189">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2189">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2190">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2190">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2191">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2191">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2192">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2192">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2193">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2193">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2194">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2194">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2195">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2195">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2196">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2196">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2197">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2197">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2198">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2198">Data</span></span>|<span data-ttu-id="7cbb3-2199">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2199">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2200">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2200">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2201">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2201">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2202">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2202">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2203">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2203">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2204">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2204">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2205">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2205">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2206">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2206">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2207">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2207">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2208">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2208">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2209">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2209">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2210">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2210">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2211">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2211">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2212">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2212">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2213">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2213">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2214">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2214">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2215">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2215">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2216">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2216">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2217">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2217">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2218">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2218">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2219">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2219">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2220">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2220">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2221">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2221">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2222">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2222">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2223">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2223">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2224">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2224">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2225">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2225">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2226">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2226">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2227">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2227">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2228">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2228">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2229">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2229">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2230">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2230">Data</span></span>|<span data-ttu-id="7cbb3-2231">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2231">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2232">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2232">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2233">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2233">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2234">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2234">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2235">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2235">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2236">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2236">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2237">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2237">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2238">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2238">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2239">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2239">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2240">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2240">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2241">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2241">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2242">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2242">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2243">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2243">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2244">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2244">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2245">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2245">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2246">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2246">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2247">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2247">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2248">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2248">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2249">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2249">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2250">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2250">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2251">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2251">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2252">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2252">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2253">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2253">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2254">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2254">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2255">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2255">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2256">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2256">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2257">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2257">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2258">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2258">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2259">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2259">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2260">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2260">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2261">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2261">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2262">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2262">Data</span></span>|<span data-ttu-id="7cbb3-2263">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2263">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2264">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2264">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2265">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2265">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2266">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2266">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2267">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2267">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2268">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2268">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2269">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2269">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2270">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2270">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2271">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2271">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2272">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2272">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2273">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2273">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2274">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2274">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2275">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2275">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2276">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2276">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2277">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2277">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2278">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2278">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2279">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2279">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2280">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2280">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2281">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2281">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2282">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2282">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2283">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2283">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2284">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2284">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2285">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2285">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2286">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2286">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2287">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2287">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2288">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2288">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2289">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2289">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2290">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2290">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2291">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2291">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2292">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2292">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2293">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2293">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2294">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2294">Data</span></span>|<span data-ttu-id="7cbb3-2295">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2295">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2296">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2296">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2297">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2297">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2298">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2298">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2299">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2299">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2300">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2300">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2301">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2301">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2302">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2302">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2303">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2303">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2304">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2304">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2305">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2305">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2306">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2306">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2307">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2307">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2308">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2308">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2309">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2309">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2310">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2310">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2311">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2311">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2312">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2312">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2313">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2313">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2314">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2314">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2315">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2315">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2316">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2316">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2317">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2317">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2318">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2318">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2319">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2319">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2320">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2320">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2321">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2321">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2322">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2322">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2323">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2323">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2324">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2324">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2325">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2325">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2326">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2326">Data</span></span>|<span data-ttu-id="7cbb3-2327">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2327">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2328">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2328">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2329">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2329">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2330">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2330">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2331">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2331">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2332">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2332">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2333">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2333">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2334">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2334">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2335">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2335">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2336">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2336">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2337">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2337">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2338">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2338">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2339">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2339">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2340">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2340">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2341">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2341">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2342">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2342">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2343">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2343">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2344">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2344">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2345">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2345">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2346">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2346">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2347">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2347">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2348">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2348">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2349">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2349">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2350">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2350">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2351">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2351">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2352">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2352">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2353">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2353">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2354">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2354">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2355">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2355">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2356">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2356">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2357">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2357">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2358">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2358">Data</span></span>|<span data-ttu-id="7cbb3-2359">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2359">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2360">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2360">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2361">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2361">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2362">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2362">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2363">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2363">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2364">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2364">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2365">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2365">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2366">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2366">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2367">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2367">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2368">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2368">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2369">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2369">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2370">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2370">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2371">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2371">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2372">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2372">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2373">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2373">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2374">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2374">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2375">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2375">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberSignature Language="F#" Value="static member Input : int *  -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Input (FileNumber, Value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2376">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2376">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2377">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2377">Any valid file number.</span>
          </span>
        </param>
        <param name="Value">
          <span data-ttu-id="7cbb3-2378">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2378">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2379">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2379">Variable that is assigned the values read from the file—cannot be an array or object variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2380">Читает данные из открытого последовательного файла и присваивает данные переменным.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2380">Reads data from an open sequential file and assigns the data to variables.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2381">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2381">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2382">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2382">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2383">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2383">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2384">Данные, считанные с `Input` , обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2384">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="7cbb3-2385">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2385">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2386">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2386">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2387">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2387">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2388">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2388">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="7cbb3-2389">В следующей таблице показано, как обрабатывается других входных данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2389">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="7cbb3-2390">Данные</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2390">Data</span></span>|<span data-ttu-id="7cbb3-2391">Значение, присваиваемое переменной</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2391">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="7cbb3-2392">Разделив их запятой или пустую строку</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2392">Delimiting comma or blank line</span></span>|<span data-ttu-id="7cbb3-2393">Empty</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2393">Empty</span></span>|  
|<span data-ttu-id="7cbb3-2394">NULL #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2394">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="7cbb3-2395">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2395">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="7cbb3-2396">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2396">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="7cbb3-2397">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2397">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="7cbb3-2398">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2398">#ERROR `errornumber`#</span></span>|<span data-ttu-id="7cbb3-2399">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2399">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="7cbb3-2400">Если достигнут конец файла при вводе элемента данных, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2400">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2401">`Input` Функция не локализован.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2401">The `Input` function is not localized.</span></span> <span data-ttu-id="7cbb3-2402">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая обрабатывается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2402">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2403">Чтение из файла с помощью `Input` функции требуется `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2403">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2404">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2404">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2405">В этом примере используется `Input` функция для считывания данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2405">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="7cbb3-2406">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанных с помощью `Write` функции, каждая строка содержит строку в кавычках, а также числа, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2406">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2407">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2407">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberSignature Language="F#" Value="static member InputString : int * int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.InputString (FileNumber, CharCount)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2408">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2408">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2409">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2409">Any valid file number.</span>
          </span>
        </param>
        <param name="CharCount">
          <span data-ttu-id="7cbb3-2410">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2410">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2411">Любое допустимое числовое выражение, указывающее число знаков, которые надо прочитать.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2411">Any valid numeric expression specifying the number of characters to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2412">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2412">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="7cbb3-2413">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2413">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2414">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2414">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2415">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2415">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span>
          </span>
          <span data-ttu-id="7cbb3-2416">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="InputString" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2416">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2417">`InputString` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2417">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2418">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2418">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2419">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2419">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2420">Данные, считанные с `InputString` функции, обычно записываются в файл с помощью `Print` или `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2420">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="7cbb3-2421">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2421">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="7cbb3-2422">В отличие от `Input` функции `InputString` функция возвращает все символы, которые считывает.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2422">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="7cbb3-2423">Сюда входят запятые, символы возврата каретки, перевода строки, кавычки и пробелы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2423">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="7cbb3-2424">В файлах, открытых для `Binary` получить доступ к, попытка прочитать файл с помощью `InputString` функционировать до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2424">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="7cbb3-2425">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с помощью `InputString`, или использовать `FileGet` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2425">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2426">При считывании из файла решения по обеспечению безопасности содержимое файла, в зависимости от расширения имени файла не следует.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2426">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2427">Например файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2427">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2428">В этом примере используется `InputString` функции считывают один символ за раз из файла и распечатать его, чтобы `Output` окна.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2428">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="7cbb3-2429">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2429">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2430">
            <paramref name="FileNumber" /> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2430">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-2431">
            <paramref name="CharCount" />&lt; 0 или &gt; 214.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2431">
              <paramref name="CharCount" /> &lt; 0 or &gt; 214.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberSignature Language="F#" Value="static member Kill : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Kill PathName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="7cbb3-2432">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2432">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2433">Выражение типа <see langword="String" />, определяющее один или несколько файлов, которые должны быть удалены.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2433">
              <see langword="String" /> expression that specifies one or more file names to be deleted.</span>
          </span>
          <span data-ttu-id="7cbb3-2434">Параметр <c>PathName</c> может содержать имя каталога или папки и имя диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2434">
              <c>PathName</c> can include the directory or folder, and the drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2435">Удаляет файлы с диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2435">Deletes files from a disk.</span>
          </span>
          <span data-ttu-id="7cbb3-2436">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="Kill" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2436">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2437">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2437">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2438">`Kill` поддерживает использование нескольких знаков (`*`) и одиночные (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2438">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="7cbb3-2439">**Примечание по безопасности** для выполнения, `Kill` функции требуется `Read` и `PathDiscovery` флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены для исполняемого кода.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2439">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="7cbb3-2440">Дополнительные сведения см. в разделе <xref:System.Security.SecurityException> [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2440">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2441">В этом примере используется `Kill` функции, чтобы удалить файл с диска.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2441">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2442">Удаляемые файлы открыты.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2442">Target file(s) open.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-2443">Удаляемые файлы не найдены.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2443">Target file(s) not found.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7cbb3-2444">В разрешении отказано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2444">Permission denied.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LineInput : int -&gt; string" Usage="Microsoft.VisualBasic.FileSystem.LineInput FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2445">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2445">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2446">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2446">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2447">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2447">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2448">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2448">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2449">`LineInput` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2449">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2450">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2450">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2451">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2451">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2452">Данные, считанные с `LineInput` , обычно записываются в файл с помощью `Print`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2452">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2453">При чтении из файлов, нельзя судить о содержимом файла, в зависимости от расширения имени файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2453">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="7cbb3-2454">К примеру файл с именем Form1.vb может не быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2454">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="7cbb3-2455">`LineInput` Функция считывает из файла одного символа во время, пока встретится символ возврата каретки (`Chr(13)`) или каретки и перевода строки веб-канал (`Chr(13) + Chr(10)`) последовательности.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2455">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="7cbb3-2456">Веб-канала последовательностей каретки и перевода строки, добавляемой в конце символьной строки, вместо пропускаются.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2456">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2457">Чтение из файла с помощью `LineInput` функции требуется `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2457">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2458">В этом примере используется `LineInput` функция для чтения строки из последовательного файла и присвоить его переменной.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2458">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="7cbb3-2459">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2459">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException">
          <span data-ttu-id="7cbb3-2460">Достигнут конец файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2460">End of file reached.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2461">
            <paramref name="FileNumber" /> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2461">
              <paramref name="FileNumber" /> does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Loc : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Loc FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2462">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2462">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2463">Любой допустимый номер файла типа <see langword="Integer" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2463">Any valid <see langword="Integer" /> file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2464">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию для ввода-вывода в открытом файле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2464">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2465">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию для ввода-вывода в открытом файле.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2465">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2466">`Loc` Функция отсчитываются от нуля, использовании ее для получения первого байта в файле возвратит значение 0.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2466">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="7cbb3-2467">`Loc` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2467">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2468">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2468">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2469">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2469">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2470">Ниже описаны возвращаемое значение для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2470">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="7cbb3-2471">Режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2471">Mode</span></span>|<span data-ttu-id="7cbb3-2472">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2472">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="7cbb3-2473">Номер последней записи, чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2473">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="7cbb3-2474">Текущая позиция байта в файле, деленная на 128.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2474">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="7cbb3-2475">Тем не менее, возвращаются сведения по `Loc` для последовательных файлов не используется и не требуется.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2475">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="7cbb3-2476">Позиция последнего байта чтения или записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2476">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2477">В этом примере используется `Loc` функция, возвращающая текущую позицию чтения/записи в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2477">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="7cbb3-2478">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк данных выборки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2478">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2479">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2479">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2480">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2480">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2481">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2481">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2482">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2482">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Lock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2483">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2483">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2484">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2484">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2485">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2485">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2486">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2486">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2487">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2487">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2488">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2488">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="7cbb3-2489">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2489">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="7cbb3-2490">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2490">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="7cbb3-2491">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2491">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="7cbb3-2492">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2492">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="7cbb3-2493">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2493">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2494">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2494">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="7cbb3-2495">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2495">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2496">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2496">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2497">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2497">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2498">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2498">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="7cbb3-2499">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2499">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2500">Номер единственной записи или единственного байта для блокировки или разблокировки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2500">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2501">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2501">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2502">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2502">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2503">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2503">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2504">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2504">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="7cbb3-2505">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2505">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="7cbb3-2506">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2506">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="7cbb3-2507">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2507">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="7cbb3-2508">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2508">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="7cbb3-2509">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2509">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2510">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2510">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="7cbb3-2511">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2511">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2512">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2512">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Lock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Lock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2513">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2513">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2514">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2514">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="7cbb3-2515">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2515">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2516">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2516">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="7cbb3-2517">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2517">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2518">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2518">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2519">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2519">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2520">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2520">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2521">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2521">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2522">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2522">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="7cbb3-2523">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2523">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="7cbb3-2524">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2524">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="7cbb3-2525">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2525">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="7cbb3-2526">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2526">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="7cbb3-2527">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2527">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2528">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2528">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="7cbb3-2529">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2529">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2530">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2530">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member LOF : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.LOF FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2531">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2531">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2532">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2532">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2533">Возвращает значение типа <see langword="Long" />, представляющее размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2533">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2534">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2534">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2535">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2535">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2536">Возвращает значение типа <see langword="Long" />, представляющее размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2536">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2537">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="LOF" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2538">Используйте `FileLen` функции для получения длины файла, не являющийся открытым.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2538">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2539">В этом примере используется `LOF` функцию, чтобы определить размер открытого файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2539">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="7cbb3-2540">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий данные образца.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2540">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2541">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2541">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member MkDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.MkDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="7cbb3-2542">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2542">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2543">Выражение типа <see langword="String" />, задающее создаваемый каталог.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2543">
              <see langword="String" /> expression that identifies the directory to be created.</span>
          </span>
          <span data-ttu-id="7cbb3-2544">Параметр <c>Path</c> может содержать метку диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2544">The <c>Path</c> may include the drive.</span>
          </span>
          <span data-ttu-id="7cbb3-2545">Если диск не указан, <see langword="MkDir" /> создает каталог на текущем диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2545">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2546">Создайте новый каталог.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2546">Creates a new directory.</span>
          </span>
          <span data-ttu-id="7cbb3-2547">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="MkDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2547">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2548">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2548">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2549">Эта функция создает новый каталог.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2549">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2550">В этом примере используется `MkDir` функции для создания каталога.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2550">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="7cbb3-2551">Если диск не указан, новый каталог создается на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2551">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-2552">
            <paramref name="Path" /> не указан или пуст.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2552">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="7cbb3-2553">В разрешении отказано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2553">Permission denied.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2554">Каталог уже существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2554">Directory already exists.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Print : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Print (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2555">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2555">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2556">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2556">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="7cbb3-2557">Необязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2557">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2558">Ни одного или несколько разделенных запятыми выражений для записи в файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2558">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="7cbb3-2559">Параметры аргумента <c>Output</c>:</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2559">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="7cbb3-2560">
            <see langword="T:System.IO.IOException" />: недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2560">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="7cbb3-2561">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2561">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2562">Записывает в последовательный файл данные, отформатированные для отображения на экране.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2562">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2563">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2563">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2564">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2564">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2565">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2565">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2566">`Print` не включает символ перевода строки в конце строки; Тем не менее `PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2566">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="7cbb3-2567">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2567">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="7cbb3-2568">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2568">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="7cbb3-2569">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2569">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="7cbb3-2570">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2570">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="7cbb3-2571">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2571">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="7cbb3-2572">Дата данные записываются в файл с помощью стандартных краткий формат, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2572">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="7cbb3-2573">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2573">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="7cbb3-2574">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2574">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="7cbb3-2575">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2575">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="7cbb3-2576">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2576">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="7cbb3-2577">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2577">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="7cbb3-2578">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2578">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="7cbb3-2579">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2579">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="7cbb3-2580">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2580">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2581">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2581">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2582">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2582">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member PrintLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.PrintLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2583">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2583">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2584">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2584">Any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="7cbb3-2585">Необязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2585">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2586">Ни одного или несколько разделенных запятыми выражений для записи в файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2586">Zero or more comma-delimited expressions to write to a file.</span>
          </span>
          <span data-ttu-id="7cbb3-2587">Параметры аргумента <c>Output</c>:</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2587">The <c>Output</c> argument settings are:</span>
          </span>
          <span data-ttu-id="7cbb3-2588">
            <see langword="T:System.IO.IOException" />: недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2588">
              <see langword="T:System.IO.IOException" />: File mode is invalid.</span>
          </span>
          <span data-ttu-id="7cbb3-2589">
            <see langword="T:System.IO.IOException" />: <c>FileNumber</c> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2589">
              <see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2590">Записывает в последовательный файл данные, отформатированные для отображения на экране.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2590">Writes display-formatted data to a sequential file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2591">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2591">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2592">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2592">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2593">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2593">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2594">`Print` не включает символ перевода строки в конце строки; Тем не менее`PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2594">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="7cbb3-2595">Данные, записанные с помощью `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2595">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="7cbb3-2596">Если опустить `Output` для `PrintLine`, пустая строка выводится в файл; для `Print`, ничего не выводится.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2596">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="7cbb3-2597">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятые и `TAB` может привести к несогласованным результатам.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2597">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="7cbb3-2598">Для `Boolean` данных, либо `True` или `False` печати.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2598">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="7cbb3-2599">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2599">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="7cbb3-2600">Дата данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2600">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="7cbb3-2601">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2601">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="7cbb3-2602">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2602">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="7cbb3-2603">Тем не менее если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2603">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="7cbb3-2604">Для `Error` данные, выходные данные отображаются как `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2604">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="7cbb3-2605">`Error` Ключевое слово не переводится языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2605">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="7cbb3-2606">Все данные, записываемые в файл с помощью `Print` соответствуют региональным международным стандартам; то есть данные правильно отформатирован с помощью соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2606">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="7cbb3-2607">Если пользователь хочет выходные данные для использования в нескольких языковых стандартов, `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2607">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="7cbb3-2608">Запись в файл с помощью `Print` или `PrintLine` функции требуется `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2608">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2609">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2609">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2610">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2610">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberSignature Language="F#" Value="static member Rename : string * string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Rename (OldPath, NewPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath">
          <span data-ttu-id="7cbb3-2611">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2611">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2612">Выражение типа <see langword="String" />, указывающее имя и местонахождение существующего файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2612">
              <see langword="String" /> expression that specifies the existing file name and location.</span>
          </span>
          <span data-ttu-id="7cbb3-2613">Параметр <c>OldPath</c> может содержать имя каталога и метку диска для файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2613">
              <c>OldPath</c> may include the directory, and drive, of the file.</span>
          </span>
        </param>
        <param name="NewPath">
          <span data-ttu-id="7cbb3-2614">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2614">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2615">Выражение типа <see langword="String" />, указывающее новое имя и местонахождение файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2615">
              <see langword="String" /> expression that specifies the new file name and location.</span>
          </span>
          <span data-ttu-id="7cbb3-2616">Параметр <c>NewPath</c> может содержать имя каталога и метку диска для нового местонахождения файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2616">
              <c>NewPath</c> may include directory and drive of the destination location.</span>
          </span>
          <span data-ttu-id="7cbb3-2617">Имя файла, заданного параметром <c>NewPath</c>, не может быть именем существующего файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2617">The file name specified by <c>NewPath</c> cannot already exist.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2618">Переименовывает файл или каталог на диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2618">Renames a disk file or directory.</span>
          </span>
          <span data-ttu-id="7cbb3-2619">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="Rename" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2619">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2620">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2620">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2621">`Rename` Функция переименовывает файл и перемещает ее в другой каталог, если это необходимо.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2621">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="7cbb3-2622">`Rename` Функции можно переместить файл на дисках, но его можно только переименовать существующий каталог, если оба `NewPath` и `OldPath` расположены на одном диске.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2622">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="7cbb3-2623">`Rename` не удается создать новый файл или каталог.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2623">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="7cbb3-2624">С помощью `Rename` функции к открытому файлу выводит сообщение об ошибке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2624">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="7cbb3-2625">Необходимо закрыть файл перед его переименованием.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2625">You must close an open file before renaming it.</span></span> <span data-ttu-id="7cbb3-2626">`Rename` аргументы не могут содержать знак (\*) и подстановочные знаки одного знака (?).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2626">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="7cbb3-2627">При использовании `Rename` чтобы скопировать файл из незащищенное место в защищенном месте, в файле сохраняются менее ограниченные права.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2627">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="7cbb3-2628">Проверьте, чтобы убедиться в том, что вы не представляете возможную угрозу безопасности.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2628">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2629">В этом примере используется `Rename` функции, чтобы переименовать файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2629">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="7cbb3-2630">Для целей этого примера предполагается, что каталоги, которые указаны в уже существуют.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2630">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-2631">Недопустимый путь.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2631">Path is invalid.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-2632">Файл <paramref name="OldPath" /> не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2632">
              <paramref name="OldPath" /> file does not exist.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2633">Нельзя переименовать с указанием другого диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2633">Cannot rename to different device.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberSignature Language="F#" Value="static member Reset : unit -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2634">Закрывает все файлы на диске, открытые функцией <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2634">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2635">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="Reset" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2635">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2636">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2636">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2637">`Reset` Функция закрывает все активные файлы, открываемые `FileOpen` функцию и делает то же самое `FileClose()` без параметров.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2637">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2638">В этом примере используется `Reset` функцию, чтобы закрыть все открытые файлы и записи на диск содержимое всех буферов файлов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2638">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="7cbb3-2639">Обратите внимание на использование `Object` переменной `FileNumber` как строка и номером.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2639">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberSignature Language="F#" Value="static member RmDir : string -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.RmDir Path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path">
          <span data-ttu-id="7cbb3-2640">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2640">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2641">Выражение типа <see langword="String" />, определяющее удаляемый каталог или папку.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2641">
              <see langword="String" /> expression that identifies the directory or folder to be removed.</span>
          </span>
          <span data-ttu-id="7cbb3-2642">Параметр <c>Path</c> может содержать метку диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2642">
              <c>Path</c> can include the drive.</span>
          </span>
          <span data-ttu-id="7cbb3-2643">Если диск не указан, <see langword="RmDir" /> удаляет каталог на текущем диске.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2643">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2644">Удаляет существующий каталог.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2644">Removes an existing directory.</span>
          </span>
          <span data-ttu-id="7cbb3-2645">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="RmDir" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2645">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2646">Дополнительные сведения см. в разделе <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2646">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2647">Произошла ошибка при попытке использовать `RmDir` на каталог, содержащий файлы.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2647">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="7cbb3-2648">Используйте `Kill` функции, чтобы удалить все файлы, прежде чем пытаться удалить каталог.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2648">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2649">В этом примере используется `RmDir` функцию для удаления существующего каталога.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2649">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-2650">
            <paramref name="Path" /> не указан или пуст.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2650">
              <paramref name="Path" /> is not specified or is empty.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2651">Удаляемый каталог содержит файлы.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2651">Target directory contains files.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="7cbb3-2652">Каталог не существует.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2652">Directory does not exist.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2653">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2653">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2654">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2654">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2655">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2655">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Seek : int -&gt; int64" Usage="Microsoft.VisualBasic.FileSystem.Seek FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2656">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2656">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2657">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2657">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2658">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2658">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2659">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2659">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2660">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2660">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2661">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2661">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2662">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 – 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2662">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="7cbb3-2663">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2663">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="7cbb3-2664">Режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2664">Mode</span></span>|<span data-ttu-id="7cbb3-2665">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2665">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="7cbb3-2666">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2666">Number of the next record read or written</span></span>|  
|<span data-ttu-id="7cbb3-2667">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2667">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="7cbb3-2668">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2668">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="7cbb3-2669">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2669">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2670">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2670">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="7cbb3-2671">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2671">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="7cbb3-2672">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2672">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="7cbb3-2673">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2673">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="7cbb3-2674">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2674">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="7cbb3-2675">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2675">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="7cbb3-2676">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2676">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="7cbb3-2677">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2677">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2678">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2678">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberSignature Language="F#" Value="static member Seek : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Seek (FileNumber, Position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2679">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2679">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2680">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2680">An <see langword="Integer" /> that contains a valid file number.</span>
          </span>
        </param>
        <param name="Position">
          <span data-ttu-id="7cbb3-2681">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2681">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2682">Число в диапазоне от 1 до 2 147 483 647 включительно, определяющее место следующей операции ввода-вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2682">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2683">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2683">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2684">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="Seek" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2684">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2685">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2685">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2686">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 – 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2686">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="7cbb3-2687">Ниже описаны возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2687">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="7cbb3-2688">Режим</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2688">Mode</span></span>|<span data-ttu-id="7cbb3-2689">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2689">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="7cbb3-2690">Номер следующей записи, чтения или записи</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2690">Number of the next record read or written</span></span>|  
|<span data-ttu-id="7cbb3-2691">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2691">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="7cbb3-2692">Позиция байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2692">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="7cbb3-2693">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2693">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2694">В этом примере используется `Seek` функция, возвращающая текущую позицию в файле.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2694">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="7cbb3-2695">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2695">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="7cbb3-2696">Для открытия файлов в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2696">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="7cbb3-2697">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2697">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="7cbb3-2698">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2698">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="7cbb3-2699">В этом примере используется `Seek` функции для установки позиции следующего чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2699">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="7cbb3-2700">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой возникает при следующей операции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2700">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="7cbb3-2701">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2701">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2702">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2702">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberSignature Language="F#" Value="static member SetAttr : string * Microsoft.VisualBasic.FileAttribute -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.SetAttr (PathName, Attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName">
          <span data-ttu-id="7cbb3-2703">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2703">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2704">Выражение типа <see langword="String" />, определяющее имя файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2704">
              <see langword="String" /> expression that specifies a file name.</span>
          </span>
          <span data-ttu-id="7cbb3-2705">Параметр <c>PathName</c> может содержать имя каталога или папки, а также имя диска.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2705">
              <c>PathName</c> can include directory or folder, and drive.</span>
          </span>
        </param>
        <param name="Attributes">
          <span data-ttu-id="7cbb3-2706">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2706">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2707">Константа или числовое выражение, сумма которого определяет атрибуты файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2707">Constant or numeric expression, whose sum specifies file attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2708">Устанавливает атрибуты файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2708">Sets attribute information for a file.</span>
          </span>
          <span data-ttu-id="7cbb3-2709">Функция <see langword="My" /> предоставляет лучшие показатели производительности и быстродействия в операциях файлового ввода-вывода, чем функция <see langword="SetAttr" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2709">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2710">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2710">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2711">Ошибка времени выполнения возникает при попытке установить атрибуты для открытого файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2711">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="7cbb3-2712">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2712">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="7cbb3-2713">Значение</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2713">Value</span></span>|<span data-ttu-id="7cbb3-2714">Константа</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2714">Constant</span></span>|<span data-ttu-id="7cbb3-2715">Описание</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2715">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="7cbb3-2716">Обычный (по умолчанию).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2716">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="7cbb3-2717">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2717">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="7cbb3-2718">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2718">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="7cbb3-2719">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2719">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="7cbb3-2720">Метка тома</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2720">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="7cbb3-2721">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2721">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="7cbb3-2722">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2722">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="7cbb3-2723">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2723">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2724">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2724">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="7cbb3-2725">Имена можно использовать в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2725">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2726">В этом примере используется `SetAttr` функцию для задания атрибутов файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2726">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="7cbb3-2727">Недопустимый тип <paramref name="Attribute" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2727">
              <paramref name="Attribute" /> type is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberSignature Language="F#" Value="static member SPC : int16 -&gt; Microsoft.VisualBasic.SpcInfo" Usage="Microsoft.VisualBasic.FileSystem.SPC Count" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count">
          <span data-ttu-id="7cbb3-2728">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2728">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2729">Число пробелов, вставляемых перед отображением или печатью очередного выражения в списке.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2729">The number of spaces to insert before displaying or printing the next expression in a list.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2730">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2730">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2731">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2731">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2732">Если `Count` меньше ширины строки вывода, следующая позиция печати непосредственно следует за количество напечатанных пробелов.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2732">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="7cbb3-2733">Если`Count` больше, чем выводимой строки `SPC` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2733">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="7cbb3-2734">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2734">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="7cbb3-2735">Например, если текущая позиция печати равна 24, выводимой строки — 80, а `SPC(90)`, печать начнется с позиции 34 (текущая позиция печати + остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2735">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="7cbb3-2736">Если разница между текущей позицией печати и ширину строки вывода меньше, чем `Count` (или `Count` `Mod` *ширины*), `SPC` функция переходит в начало следующей строки и создает пробелы, равные `Count` — (*ширины* — *текущая_позиция_печати*).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2736">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2737">Убедитесь, что столбцы таблицы достаточно широки разрешить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2737">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2738">В этом примере используется `SPC` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2738">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2739">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2739">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberSignature Language="F#" Value="static member TAB : unit -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2740">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2740">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2741">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2741">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2742">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2742">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="7cbb3-2743">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2743">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="7cbb3-2744">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2744">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="7cbb3-2745">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2745">Column Mod width</span></span>  
  
 <span data-ttu-id="7cbb3-2746">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2746">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="7cbb3-2747">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2747">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="7cbb3-2748">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2748">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="7cbb3-2749">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2749">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="7cbb3-2750">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2750">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="7cbb3-2751">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2751">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="7cbb3-2752">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2752">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2753">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2753">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2754">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2754">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberSignature Language="F#" Value="static member TAB : int16 -&gt; Microsoft.VisualBasic.TabInfo" Usage="Microsoft.VisualBasic.FileSystem.TAB Column" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column">
          <span data-ttu-id="7cbb3-2755">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2755">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2756">Номер столбца, в который помещается курсор перед отображением или печатью следующего выражения из списка.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2756">The column number moved to before displaying or printing the next expression in a list.</span>
          </span>
          <span data-ttu-id="7cbb3-2757">Если этот параметр опущен, <see langword="TAB" /> перемещает положение курсора в начало следующей зоны печати.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2757">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2758">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="7cbb3-2759">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2759">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2760">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равным значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2760">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="7cbb3-2761">Если `Column` меньше 1, `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2761">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="7cbb3-2762">Если `Column` больше, чем выводимой строки `TAB` вычисляет следующую позицию печати с помощью формулы:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2762">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="7cbb3-2763">Mod ширина столбца</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2763">Column Mod width</span></span>  
  
 <span data-ttu-id="7cbb3-2764">Например если *ширины* 80 и указать `TAB(90)`, печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2764">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="7cbb3-2765">Если `Column` меньше, чем текущая позиция печати, печать начинается на следующей строке в позиции вычисляемой печати.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2765">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="7cbb3-2766">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2766">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="7cbb3-2767">Самая левая позиция печати строки вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2767">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="7cbb3-2768">При использовании `Print` или `PrintLine` функции для печати в файлы, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2768">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="7cbb3-2769">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2769">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="7cbb3-2770">Он не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2770">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7cbb3-2771">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2771">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2772">В этом примере используется `TAB` функции для установки позиции вывода в файле и в **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2772">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="7cbb3-2773">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2773">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2774">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2774">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2775">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2775">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberSignature Language="F#" Value="static member Unlock : int -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock FileNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2776">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2776">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2777">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2777">Any valid file number.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2778">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2778">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2779">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2779">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2780">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2780">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2781">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2781">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="7cbb3-2782">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2782">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="7cbb3-2783">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2783">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="7cbb3-2784">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2784">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="7cbb3-2785">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2785">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="7cbb3-2786">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2786">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2787">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2787">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="7cbb3-2788">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2788">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2789">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2789">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, Record)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2790">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2790">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2791">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2791">Any valid file number.</span>
          </span>
        </param>
        <param name="Record">
          <span data-ttu-id="7cbb3-2792">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2792">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2793">Номер единственной записи или единственного байта для блокировки или разблокировки.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2793">Number of the only record or byte to lock or unlock</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2794">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2794">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2795">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2795">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2796">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2796">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2797">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2797">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="7cbb3-2798">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2798">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="7cbb3-2799">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2799">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="7cbb3-2800">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2800">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="7cbb3-2801">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2801">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="7cbb3-2802">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2802">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2803">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2803">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="7cbb3-2804">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2804">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2805">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2805">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="F#" Value="static member Unlock : int * int64 * int64 -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Unlock (FileNumber, FromRecord, ToRecord)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2806">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2806">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2807">Любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2807">Any valid file number.</span>
          </span>
        </param>
        <param name="FromRecord">
          <span data-ttu-id="7cbb3-2808">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2808">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2809">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2809">Number of the first record or byte to lock or unlock.</span>
          </span>
        </param>
        <param name="ToRecord">
          <span data-ttu-id="7cbb3-2810">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2810">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2811">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2811">Number of the last record or byte to lock or unlock.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2812">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2812">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span>
          </span>
          <span data-ttu-id="7cbb3-2813">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2813">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span>
          </span>
          <span data-ttu-id="7cbb3-2814">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2814">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2815">`Lock` И `Unlock` функции используются в средах, где несколько процессов может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2815">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="7cbb3-2816">`Lock` и `Unlock` функций всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2816">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="7cbb3-2817">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2817">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="7cbb3-2818">Если `Record`, или `FromRecord` и `ToRecord` являются не указан, будет иметь блокировку для всего файла.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2818">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="7cbb3-2819">Если `Record` отдельно указано одну запись будет заблокирована или разблокирована.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2819">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="7cbb3-2820">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` влияют на весь файл, независимо от того, диапазон, указанный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2820">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2821">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2821">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="7cbb3-2822">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2822">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2823">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2823">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member Write : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.Write (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2824">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2824">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2825">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2825">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="7cbb3-2826">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2826">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2827">Одно или несколько разделенных запятыми выражений для записи в файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2827">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2828">Записывает данные в последовательный файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2828">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="7cbb3-2829">Данные, записанные функцией <see langword="Write" />, обычно считываются из файла с помощью функции <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2829">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2830">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2830">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2831">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2831">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2832">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2832">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2833">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2833">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="7cbb3-2834">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2834">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="7cbb3-2835">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2835">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="7cbb3-2836">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2836">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="7cbb3-2837">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2837">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="7cbb3-2838">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2838">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="7cbb3-2839">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2839">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="7cbb3-2840">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2840">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="7cbb3-2841">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2841">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="7cbb3-2842">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2842">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="7cbb3-2843">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2843">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="7cbb3-2844">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2844">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="7cbb3-2845">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2845">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-2846">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2846">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="7cbb3-2847">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2847">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="7cbb3-2848">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2848">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="7cbb3-2849">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2849">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="7cbb3-2850">Например:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2850">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="7cbb3-2851">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2851">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="7cbb3-2852">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2852">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2853">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2853">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2854">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2854">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="7cbb3-2855">Недопустимый режим файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2855">File mode is invalid.</span>
          </span>
        </exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberSignature Language="F#" Value="static member WriteLine : int * obj[] -&gt; unit" Usage="Microsoft.VisualBasic.FileSystem.WriteLine (FileNumber, Output)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber">
          <span data-ttu-id="7cbb3-2856">Обязательный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2856">Required.</span>
          </span>
          <span data-ttu-id="7cbb3-2857">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2857">An <see langword="Integer" /> expression that contains any valid file number.</span>
          </span>
        </param>
        <param name="Output">
          <span data-ttu-id="7cbb3-2858">Необязательный параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2858">Optional.</span>
          </span>
          <span data-ttu-id="7cbb3-2859">Одно или несколько разделенных запятыми выражений для записи в файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2859">One or more comma-delimited expressions to write to a file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="7cbb3-2860">Записывает данные в последовательный файл.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2860">Writes data to a sequential file.</span>
          </span>
          <span data-ttu-id="7cbb3-2861">Данные, записанные функцией <see langword="Write" />, обычно считываются из файла с помощью функции <see langword="Input" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="7cbb3-2861">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7cbb3-2862">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2862">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="7cbb3-2863">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объект обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2863">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="7cbb3-2864">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2864">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="7cbb3-2865">Если опустить `Output`, пустая строка выводится в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2865">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="7cbb3-2866">Несколько выражений могут быть разделены запятыми.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2866">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="7cbb3-2867">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и кавычки вокруг строки, так как они записаны в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2867">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="7cbb3-2868">Необходимо поместить явные разделители в списке.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2868">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="7cbb3-2869">Когда `Write` используется для записи данных в файл, только числовые `Boolean`, даты, значения null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2869">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="7cbb3-2870">Следующие универсальные предположения соблюдать, данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2870">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="7cbb3-2871">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2871">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="7cbb3-2872">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` печати.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2872">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="7cbb3-2873">`True` И `False` ключевые слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2873">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="7cbb3-2874">Дата записывается в файл, используя универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2874">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="7cbb3-2875">Когда дата или время отсутствует или ноль, только часть условии записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2875">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="7cbb3-2876">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2876">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="7cbb3-2877">Тем не менее для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2877">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="7cbb3-2878">Для `Error` данные, выходные данные отображаются как `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2878">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="7cbb3-2879">`Error` Ключевого слова не преобразуются, вне зависимости от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2879">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="7cbb3-2880">`WriteLine` Вставляет символ новой строки (то есть перевода каретки и перевода строки, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` к файлу.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2880">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="7cbb3-2881">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2881">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="7cbb3-2882">Например:</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2882">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="7cbb3-2883">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2883">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="7cbb3-2884">Запись в файл с помощью `Write` или `WriteLine` функции требуется `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2884">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="7cbb3-2885">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2885">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7cbb3-2886">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="7cbb3-2886">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>