<Type Name="FileSystem" FullName="Microsoft.VisualBasic.FileSystem">
  <TypeSignature Language="C#" Value="public sealed class FileSystem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FileSystem extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.FileSystem" />
  <TypeSignature Language="VB.NET" Value="Public Module FileSystem" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileSystem sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="c583d-101">В модуле <see langword="FileSystem" /> содержатся процедуры, используемые для выполнения операций с файлами, папками или каталогами и системой.</span><span class="sxs-lookup"><span data-stu-id="c583d-101">The <see langword="FileSystem" /> module contains the procedures that are used to perform file, directory or folder, and system operations.</span></span> <span data-ttu-id="c583d-102">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие в операциях файлового ввода-вывода по сравнению с модулем <see langword="FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-102">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than using the <see langword="FileSystem" /> module.</span></span> <span data-ttu-id="c583d-103">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-103">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-104">Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения, доступ к файлам и папкам.</span><span class="sxs-lookup"><span data-stu-id="c583d-104">This module supports the Visual Basic language keywords and run-time library members that access files and folders.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-105">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла и папки или каталога.</span><span class="sxs-lookup"><span data-stu-id="c583d-105">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ChDir">
      <MemberSignature Language="C#" Value="public static void ChDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="c583d-106">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-106">Required.</span></span> <span data-ttu-id="c583d-107">Выражение <see langword="String" />, определяющее, какая папка или каталог становятся новым каталогом или папкой по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c583d-107">A <see langword="String" /> expression that identifies which directory or folder becomes the new default directory or folder.</span></span> <span data-ttu-id="c583d-108">Параметр <c>Path</c> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-108"><c>Path</c> may include the drive.</span></span> <span data-ttu-id="c583d-109">Если диск не указан, функция <see langword="ChDir" /> меняет каталог или папку по умолчанию на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-109">If no drive is specified, <see langword="ChDir" /> changes the default directory or folder on the current drive.</span></span></param>
        <summary><span data-ttu-id="c583d-110">Изменяет текущую папку или каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-110">Changes the current directory or folder.</span></span> <span data-ttu-id="c583d-111">Возможность <see langword="My" /> обеспечивает улучшенные производительность и быстродействие операций файлового ввода-вывода по сравнению с функциями <see langword="ChDir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-111">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than the <see langword="ChDir" /> function.</span></span> <span data-ttu-id="c583d-112">Для получения дополнительной информации см. <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-112">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-113">`ChDir` Функция меняет каталог по умолчанию, но не диск по умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c583d-113">The `ChDir` function changes the default directory, but not the default drive.</span></span> <span data-ttu-id="c583d-114">Например, если диск по умолчанию — C, следующая инструкция изменяет каталог по умолчанию на диске D, но C остается диска по умолчанию:</span><span class="sxs-lookup"><span data-stu-id="c583d-114">For example, if the default drive is C, the following statement changes the default directory on drive D, but C remains the default drive:</span></span>  
  
 [!code-vb[VbVbalrCatRef#39](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#39)]  
  
 <span data-ttu-id="c583d-115">Можно внести относительные изменения каталога является путем ввода двух точек, следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-115">You can make relative directory changes is by typing two periods, as follows:</span></span>  
  
 [!code-vb[VbVbalrCatRef#40](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#40)]  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-116">`ChDir` Функция требует разрешение неуправляемого кода, что может повлиять на его выполнение в случаях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c583d-116">The `ChDir` function requires unmanaged code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c583d-117">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и.</span><span class="sxs-lookup"><span data-stu-id="c583d-117">For more information, see <xref:System.Security.Permissions.SecurityPermission> and .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-118">В этом примере используется `ChDir` функции для изменения текущей папки или каталога.</span><span class="sxs-lookup"><span data-stu-id="c583d-118">This example uses the `ChDir` function to change the current directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#41](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#41)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-119">Параметр <paramref name="Path" /> пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-119"><paramref name="Path" /> is empty.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-120">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="c583d-120">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ChDrive">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-121">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-121">Changes the current drive.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="c583d-122">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-122">Required.</span></span> <span data-ttu-id="c583d-123">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-123">String expression that specifies an existing drive.</span></span> <span data-ttu-id="c583d-124">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="c583d-124">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="c583d-125">Если аргумент <c>Drive</c> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="c583d-125">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="c583d-126">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-126">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-127">`ChDrive` Функция требует разрешение неуправляемого кода, что может повлиять на его выполнение в случаях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c583d-127">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c583d-128">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c583d-128">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-129">В этом примере используется `ChDrive` функции для изменения текущего диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-129">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="c583d-130">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-130">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-131">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="c583d-131">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="ChDrive">
      <MemberSignature Language="C#" Value="public static void ChDrive (string Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static void ChDrive(string Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.ChDrive(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ChDrive (Drive As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChDrive(System::String ^ Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="c583d-132">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-132">Required.</span></span> <span data-ttu-id="c583d-133">Строковое выражение, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-133">String expression that specifies an existing drive.</span></span> <span data-ttu-id="c583d-134">Если указать пустую строку (""), текущий диск не изменится.</span><span class="sxs-lookup"><span data-stu-id="c583d-134">If you supply a zero-length string (""), the current drive does not change.</span></span> <span data-ttu-id="c583d-135">Если аргумент <c>Drive</c> содержит строку из нескольких знаков, функция <see langword="ChDrive" /> использует только первую букву.</span><span class="sxs-lookup"><span data-stu-id="c583d-135">If the <c>Drive</c> argument is a multiple-character string, <see langword="ChDrive" /> uses only the first letter.</span></span></param>
        <summary><span data-ttu-id="c583d-136">Изменяет текущий диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-136">Changes the current drive.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-137">`ChDrive` Функция требует разрешение неуправляемого кода, что может повлиять на его выполнение в случаях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c583d-137">The `ChDrive` function requires unmanaged-code permission, which may affect its execution in partial-trust situations.</span></span> <span data-ttu-id="c583d-138">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.SecurityPermission> и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c583d-138">For more information, see <xref:System.Security.Permissions.SecurityPermission> and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-139">В этом примере используется `ChDrive` функции для изменения текущего диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-139">This example uses the `ChDrive` function to change the current drive.</span></span> <span data-ttu-id="c583d-140">Функция создает исключение, если диск не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-140">The function throws an exception if the drive does not exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-141">Указан несуществующий диск или диск недоступен.</span><span class="sxs-lookup"><span data-stu-id="c583d-141">Invalid drive is specified, or drive is unavailable.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Dir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CurDir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-142">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c583d-142">Returns a string representing the current path.</span></span> <span data-ttu-id="c583d-143">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-143">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="c583d-144">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-144">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c583d-145">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c583d-145">Returns a string representing the current path.</span></span> <span data-ttu-id="c583d-146">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-146">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="c583d-147">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-147">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="c583d-148">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c583d-148">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c583d-149">В этом примере используется `CurDir` функцию для получения текущего пути.</span><span class="sxs-lookup"><span data-stu-id="c583d-149">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="CurDir">
      <MemberSignature Language="C#" Value="public static string CurDir (char Drive);" />
      <MemberSignature Language="ILAsm" Value=".method public static string CurDir(char Drive) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.CurDir(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function CurDir (Drive As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ CurDir(char Drive);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Drive" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Drive"><span data-ttu-id="c583d-150">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-150">Optional.</span></span> <span data-ttu-id="c583d-151">Выражение типа <see langword="Char" />, задающее существующий диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-151"><see langword="Char" /> expression that specifies an existing drive.</span></span> <span data-ttu-id="c583d-152">Если диск не указан или параметр <c>Drive</c> является пустой строкой (""), функция <see langword="CurDir" /> возвращает путь для текущего диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-152">If no drive is specified, or if <c>Drive</c> is a zero-length string (""), <see langword="CurDir" /> returns the path for the current drive.</span></span></param>
        <summary><span data-ttu-id="c583d-153">Возвращает строку, представляющую текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c583d-153">Returns a string representing the current path.</span></span> <span data-ttu-id="c583d-154">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="CurDir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-154">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="CurDir" />.</span></span> <span data-ttu-id="c583d-155">Дополнительные сведения см. в разделе <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-155">For more information, see <see cref="P:Microsoft.VisualBasic.FileIO.FileSystem.CurrentDirectory" />.</span></span></summary>
        <returns><span data-ttu-id="c583d-156">Строка, представляющая текущий путь.</span><span class="sxs-lookup"><span data-stu-id="c583d-156">A string representing the current path.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c583d-157">В этом примере используется `CurDir` функцию для получения текущего пути.</span><span class="sxs-lookup"><span data-stu-id="c583d-157">This example uses the `CurDir` function to return the current path.</span></span>  
  
 [!code-vb[VbVbalrCatRef#65](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#65)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dir">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-158">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-158">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="c583d-159">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-159">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="c583d-160">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-160">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir ();" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Dir();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c583d-161">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-161">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="c583d-162">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-162">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="c583d-163">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-163">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="c583d-164">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-164">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-165">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одного знака (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="c583d-165">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c583d-166">`VbVolume` Возвращает метку тома диска вместо определенное имя файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-166">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="c583d-167">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-167">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="c583d-168">Для получения следующего элемента, можно выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="c583d-168">To retrieve the next item, you can make subsequent calls to the `Dir` function without parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-169">Для корректного, `Dir` функция требует <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены в исполняемый код.</span><span class="sxs-lookup"><span data-stu-id="c583d-169">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c583d-170">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c583d-170">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="c583d-171">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-171">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c583d-172">Значение</span><span class="sxs-lookup"><span data-stu-id="c583d-172">Value</span></span>|<span data-ttu-id="c583d-173">Константа</span><span class="sxs-lookup"><span data-stu-id="c583d-173">Constant</span></span>|<span data-ttu-id="c583d-174">Описание:</span><span class="sxs-lookup"><span data-stu-id="c583d-174">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="c583d-175">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c583d-175">Default.</span></span> <span data-ttu-id="c583d-176">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-176">Specifies files without attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c583d-177">Указывает файлы, доступные только для чтения, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-177">Specifies read-only files, and also files without attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c583d-178">Задает скрытые файлы, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-178">Specifies hidden files, and also files without attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c583d-179">Указывает, системные файлы и файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-179">Specifies system files, and also files without attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c583d-180">Определяет метку тома. Если указано другого атрибута `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-180">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c583d-181">Указывает каталоги или папки, а также файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-181">Specifies directories or folders, and also files without attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c583d-182">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c583d-182">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c583d-183">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c583d-183">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c583d-184">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="c583d-184">These enumerations are specified by the Visual Basic language and can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-185">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="c583d-185">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Dir">
      <MemberSignature Language="C#" Value="public static string Dir (string PathName, Microsoft.VisualBasic.FileAttribute Attributes = Microsoft.VisualBasic.FileAttribute.Normal);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Dir(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Dir(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Function Dir (PathName As String, Optional Attributes As FileAttribute = Microsoft.VisualBasic.FileAttribute.Normal) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c583d-186">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-186">Optional.</span></span> <span data-ttu-id="c583d-187">Выражение типа <see langword="String" />, задающее имя файла, имя каталога или папки, либо метку тома диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-187"><see langword="String" /> expression that specifies a file name, directory or folder name, or drive volume label.</span></span> <span data-ttu-id="c583d-188">Если параметр <c>PathName</c> не обнаруживается, возвращается строка нулевой длины (<see langword="&quot;&quot;" />).</span><span class="sxs-lookup"><span data-stu-id="c583d-188">A zero-length string (<see langword="&quot;&quot;" />) is returned if <c>PathName</c> is not found.</span></span></param>
        <param name="Attributes"><span data-ttu-id="c583d-189">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-189">Optional.</span></span> <span data-ttu-id="c583d-190">Перечисление или числовое выражение, значение которого задает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-190">Enumeration or numeric expression whose value specifies file attributes.</span></span> <span data-ttu-id="c583d-191">Если этот параметр опущен, функция <see langword="Dir" /> возвращает файлы, соответствующие параметру <c>PathName</c>, но не имеющие атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-191">If omitted, <see langword="Dir" /> returns files that match <c>PathName</c> but have no attributes.</span></span></param>
        <summary><span data-ttu-id="c583d-192">Возвращает строку, представляющую имя файла, каталога или папки, соответствующую указанному шаблону, атрибуту файла или метке тома диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-192">Returns a string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span> <span data-ttu-id="c583d-193">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="Dir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-193">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="Dir" /> function.</span></span> <span data-ttu-id="c583d-194">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-194">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetDirectoryInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="c583d-195">Строка, представляющая имя файла, каталога или папки, соответствующее указанному шаблону, атрибуту файла или метке тома на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-195">A string representing the name of a file, directory, or folder that matches a specified pattern or file attribute, or the volume label of a drive.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-196">`Dir` Функция поддерживает использование нескольких знаков (`*`) и одного знака (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="c583d-196">The `Dir` function supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c583d-197">`VbVolume` Возвращает метку тома диска вместо определенное имя файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-197">`VbVolume` returns the volume label for the drive instead of a specific file name.</span></span>  
  
 <span data-ttu-id="c583d-198">Необходимо указать `PathName` при первом вызове `Dir` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-198">You must supply a `PathName` the first time that you call the `Dir` function.</span></span> <span data-ttu-id="c583d-199">Для получения следующего элемента, можно выполнять последующие вызовы `Dir` функции без параметров.</span><span class="sxs-lookup"><span data-stu-id="c583d-199">To retrieve the next item, you can make subsequent calls to the `Dir` function with no parameters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-200">Для корректного, `Dir` функция требует <xref:System.Security.Permissions.FileIOPermissionAccess.Read> и <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены в исполняемый код.</span><span class="sxs-lookup"><span data-stu-id="c583d-200">To run correctly, the `Dir` function requires the <xref:System.Security.Permissions.FileIOPermissionAccess.Read> and <xref:System.Security.Permissions.FileIOPermissionAccess.PathDiscovery> flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c583d-201">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, и [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span><span class="sxs-lookup"><span data-stu-id="c583d-201">For more information, see <xref:System.Security.Permissions.FileIOPermission>, <xref:System.Security.SecurityException>, and [Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675).</span></span>  
  
 <span data-ttu-id="c583d-202">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-202">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c583d-203">Значение</span><span class="sxs-lookup"><span data-stu-id="c583d-203">Value</span></span>|<span data-ttu-id="c583d-204">Константа</span><span class="sxs-lookup"><span data-stu-id="c583d-204">Constant</span></span>|<span data-ttu-id="c583d-205">Описание:</span><span class="sxs-lookup"><span data-stu-id="c583d-205">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbnormal`|<span data-ttu-id="c583d-206">По умолчанию.</span><span class="sxs-lookup"><span data-stu-id="c583d-206">Default.</span></span> <span data-ttu-id="c583d-207">Указывает файлы без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-207">Specifies files that have no attributes.</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c583d-208">Определяет файлы только для чтения в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-208">Specifies read-only files, in addition to files that have no attributes.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c583d-209">Задает скрытые файлы, кроме файлов без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-209">Specifies hidden files, in addition to files that have no attributes.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c583d-210">Определяет системные файлы, кроме файлов без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-210">Specifies system files, in addition to files that have no attributes.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c583d-211">Определяет метку тома. Если указано другого атрибута `vbVolume` учитывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-211">Specifies volume label; if any other attribute is specified, `vbVolume` is ignored.</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c583d-212">Указывает каталоги или папки в дополнение к файлам без атрибутов.</span><span class="sxs-lookup"><span data-stu-id="c583d-212">Specifies directories or folders, in addition to files that have no attributes.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c583d-213">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c583d-213">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c583d-214">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c583d-214">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c583d-215">Эти перечисления указаны в языке Visual Basic и может использоваться в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="c583d-215">These enumerations are specified by the Visual Basic language and can be used anywhere in your code in place of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-216">В этом примере используется `Dir` функция для проверки существования определенных файлов и каталогов.</span><span class="sxs-lookup"><span data-stu-id="c583d-216">This example uses the `Dir` function to check if certain files and directories exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.ChDrive" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public static bool EOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static bool EOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function EOF (FileNumber As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool EOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-217">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-217">Required.</span></span> <span data-ttu-id="c583d-218">Значение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-218">An <see langword="Integer" /> that contains any valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-219">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="c583d-219">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></summary>
        <returns><span data-ttu-id="c583d-220">Возвращает логическое значение <see langword="True" /> при достижении конца файла, открытого в режиме <see langword="Random" /> или в режиме последовательного ввода (<see langword="Input" />).</span><span class="sxs-lookup"><span data-stu-id="c583d-220">Returns a Boolean value <see langword="True" /> when the end of a file opened for <see langword="Random" /> or sequential <see langword="Input" /> has been reached.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-221">Используйте `EOF` Чтобы избежать ошибки, возникающей при попытке прочитать данные за пределами файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-221">Use `EOF` to avoid the error generated by attempting to get input past the end of a file.</span></span>  
  
 <span data-ttu-id="c583d-222">`EOF` Возврата функцией `False` достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-222">The `EOF` function returns `False` until the end of the file has been reached.</span></span> <span data-ttu-id="c583d-223">В файлах, открытых для `Random` или `Binary` доступ, `EOF` возвращает `False` до последнего выполнения `FileGet` функции не удалось прочитать запись целиком.</span><span class="sxs-lookup"><span data-stu-id="c583d-223">With files opened for `Random` or `Binary` access, `EOF` returns `False` until the last executed `FileGet` function is unable to read a whole record.</span></span>  
  
 <span data-ttu-id="c583d-224">В файлах, открытых для `Binary` доступа, попытка прочитать файл с помощью `Input` функции до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="c583d-224">With files opened for `Binary` access, an attempt to read through the file using the `Input` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="c583d-225">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с `Input`, или используйте `Get` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-225">Use the `LOF` and `Loc` functions instead of `EOF` when reading binary files with `Input`, or use `Get` when using the `EOF` function.</span></span> <span data-ttu-id="c583d-226">В файлах, открытых для `Output`, `EOF` всегда возвращает `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-226">With files opened for `Output`, `EOF` always returns `True`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-227">В этом примере используется `EOF` функцию для определения конца файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-227">This example uses the `EOF` function to detect the end of a file.</span></span> <span data-ttu-id="c583d-228">В этом примере предполагается, что `Testfile` — это текстовый файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c583d-228">This example assumes that `Testfile` is a text file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#62](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#62)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-229">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-229">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.OpenMode FileAttr (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.OpenMode FileAttr(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileAttr (FileNumber As Integer) As OpenMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::OpenMode FileAttr(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.OpenMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-230">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-230">Required.</span></span> <span data-ttu-id="c583d-231"><see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-231"><see langword="Integer" />.</span></span> <span data-ttu-id="c583d-232">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-232">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-233">Возвращает перечисление, представляющее режим файла для файлов, открытых функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-233">Returns an enumeration representing the file mode for files opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-234">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> обеспечивает большие показатели производительности и быстродействия операций файлового ввода-вывода, чем функция <see langword="FileAttr" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-234">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than the <see langword="FileAttr" /> function.</span></span> <span data-ttu-id="c583d-235">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-235">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /> for more information.</span></span></summary>
        <returns><span data-ttu-id="c583d-236">Следующие значения перечисления определяют режим доступа к файлу:</span><span class="sxs-lookup"><span data-stu-id="c583d-236">The following enumeration values indicate the file access mode:</span></span>  
  
 <span data-ttu-id="c583d-237"><list type="table"><item><term> Значение</span><span class="sxs-lookup"><span data-stu-id="c583d-237"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="c583d-238"></term><description> Режим</span><span class="sxs-lookup"><span data-stu-id="c583d-238"></term><description> Mode</span></span>  
  
 <span data-ttu-id="c583d-239"></description></item><item><term> 1</span><span class="sxs-lookup"><span data-stu-id="c583d-239"></description></item><item><term> 1</span></span>  
  
 <span data-ttu-id="c583d-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span><span class="sxs-lookup"><span data-stu-id="c583d-240"></term><description><see langword="OpenMode.Input" /></description></item><item><term> 2</span></span>  
  
 <span data-ttu-id="c583d-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span><span class="sxs-lookup"><span data-stu-id="c583d-241"></term><description><see langword="OpenMode.Output" /></description></item><item><term> 4</span></span>  
  
 <span data-ttu-id="c583d-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span><span class="sxs-lookup"><span data-stu-id="c583d-242"></term><description><see langword="OpenMode.Random" /></description></item><item><term> 8</span></span>  
  
 <span data-ttu-id="c583d-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span><span class="sxs-lookup"><span data-stu-id="c583d-243"></term><description><see langword="OpenMode.Append" /></description></item><item><term> 32</span></span>  
  
 </term><description><see langword="OpenMode.Binary" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-244">Эта функция возвращает перечисление, представляющее режим файла для файлов, открытых с использованием `FileOpen` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-244">This function returns an enumeration representing the file mode for files opened using the `FileOpen` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-245">В этом примере используется `FileAttr` функция, возвращающая файловый режим открытого файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-245">This example uses the `FileAttr` function to return the file mode of an open file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#46](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#46)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FileClose">
      <MemberSignature Language="C#" Value="public static void FileClose (params int[] FileNumbers);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileClose(int32[] FileNumbers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileClose (ParamArray FileNumbers As Integer())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileClose(... cli::array &lt;int&gt; ^ FileNumbers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumbers" Type="System.Int32[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumbers"><span data-ttu-id="c583d-246">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-246">Optional.</span></span> <span data-ttu-id="c583d-247">Массив параметров из 0 или нескольких каналов, которые должны быть закрыты.</span><span class="sxs-lookup"><span data-stu-id="c583d-247">Parameter array of 0 or more channels to be closed.</span></span></param>
        <summary><span data-ttu-id="c583d-248">Завершает операции ввода-вывода с файлом, открытым с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-248">Concludes input/output (I/O) to a file opened using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-249">Возможность <see langword="My" /> предоставляет лучшие показатели производительности и быстродействии в операциях файлового ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-249"><see langword="My" /> gives you better productivity and performance in file I/O operations.</span></span> <span data-ttu-id="c583d-250">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-250">See <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-251">`FileClose` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-251">The `FileClose` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-252">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-252">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-253">Дополнительные сведения см. в разделе [как: чтение текста из файлов с помощью StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[как: запись текста в файлы с помощью StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), и [Пошаговое руководство: управление файлы и каталоги Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-253">For more information, see [How to: Read Text from Files with a StreamReader](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-read-text-from-files-with-a-streamreader.md),[How to: Write Text to Files with a StreamWriter](~/docs/visual-basic/developing-apps/programming/drives-directories-files/how-to-write-text-to-files-with-a-streamwriter.md), and [Walkthrough: Manipulating Files and Directories in Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/walkthrough-manipulating-files-and-directories.md).</span></span>  
  
 <span data-ttu-id="c583d-254">Если не указан `FileNumbers`, открываемые всех активных файлах `FileOpen` функция закрываются.</span><span class="sxs-lookup"><span data-stu-id="c583d-254">If you omit `FileNumbers`, all active files opened by the `FileOpen` function are closed.</span></span>  
  
 <span data-ttu-id="c583d-255">При закрытии файлов, открытых для `Output` или `Append`, последнее содержимое буфера вывода записывается в буфер операционной системы для этого файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-255">When you close files that were opened for `Output` or `Append`, the final buffer of output is written to the operating system buffer for that file.</span></span> <span data-ttu-id="c583d-256">Все буферное пространство, связанное с закрытого файла освобождается.</span><span class="sxs-lookup"><span data-stu-id="c583d-256">All buffer space associated with the closed file is released.</span></span>  
  
 <span data-ttu-id="c583d-257">Если `FileClose` функция выполняется, а связь файла с его файл заканчивается.</span><span class="sxs-lookup"><span data-stu-id="c583d-257">When the `FileClose` function is executed, the association of a file with its file number ends.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-258">В этом примере используется `FileClose` функцию, чтобы закрыть файл открыт для `Input`.</span><span class="sxs-lookup"><span data-stu-id="c583d-258">This example uses the `FileClose` function to close a file opened for `Input`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#69](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c583d-259"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-259"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Reset" />
      </Docs>
    </Member>
    <Member MemberName="FileCopy">
      <MemberSignature Language="C#" Value="public static void FileCopy (string Source, string Destination);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileCopy(string Source, string Destination) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileCopy(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileCopy (Source As String, Destination As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileCopy(System::String ^ Source, System::String ^ Destination);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Destination" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Source"><span data-ttu-id="c583d-260">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-260">Required.</span></span> <span data-ttu-id="c583d-261">Выражение <see langword="String" />, задающее имя копируемого файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-261"><see langword="String" /> expression that specifies the name of the file to be copied.</span></span> <span data-ttu-id="c583d-262">Параметр <c>Source</c> может содержать имя каталога или папки, а также имя диска, где находится исходный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-262"><c>Source</c> may include the directory or folder, and drive, of the source file.</span></span></param>
        <param name="Destination"><span data-ttu-id="c583d-263">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-263">Required.</span></span> <span data-ttu-id="c583d-264">Выражение <see langword="String" />, определяющее имя файла назначения.</span><span class="sxs-lookup"><span data-stu-id="c583d-264"><see langword="String" /> expression that specifies the destination file name.</span></span> <span data-ttu-id="c583d-265">Параметр <c>Destination</c> может содержать имя каталога или папки, а также имя диска, где находится файл назначения.</span><span class="sxs-lookup"><span data-stu-id="c583d-265"><c>Destination</c> may include the directory or folder, and drive, of the destination file.</span></span></param>
        <summary><span data-ttu-id="c583d-266">Копирует файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-266">Copies a file.</span></span> <span data-ttu-id="c583d-267">Объект <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> предоставляет большую производительность и быстродействие в операциях файлового ввода-вывода по сравнению с функцией <see langword="FileCopy" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-267">The <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> gives you better productivity and performance in file I/O operations than <see langword="FileCopy" />.</span></span> <span data-ttu-id="c583d-268">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-268">See <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CopyFile(System.String,System.String)" /> for more information.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-269">При попытке использовать `FileCopy` работать в открытом файле, происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-269">If you try to use the `FileCopy` function on a currently open file, an error occurs.</span></span>  
  
 <span data-ttu-id="c583d-270">`FileCopy` требуется полное доверие для работы на локальном диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-270">`FileCopy` requires full trust to work on the local drive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-271">В этом примере используется `FileCopy` функции для копирования одного файла в другой.</span><span class="sxs-lookup"><span data-stu-id="c583d-271">This example uses the `FileCopy` function to copy one file to another.</span></span> <span data-ttu-id="c583d-272">Для этого примера, предположим, что `SrcFile` — это файл, содержащий данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-272">For purposes of this example, assume that `SrcFile` is a file that contains data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-273">Параметр <paramref name="Source" /> или <paramref name="Destination" /> недопустим или не указан.</span><span class="sxs-lookup"><span data-stu-id="c583d-273"><paramref name="Source" /> or <paramref name="Destination" /> is invalid or not specified.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-274">Этот файл уже открыт.</span><span class="sxs-lookup"><span data-stu-id="c583d-274">File is already open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-275">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-275">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileDateTime">
      <MemberSignature Language="C#" Value="public static DateTime FileDateTime (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype System.DateTime FileDateTime(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileDateTime (PathName As String) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime FileDateTime(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c583d-276">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-276">Required.</span></span> <span data-ttu-id="c583d-277">Выражение типа <see langword="String" />, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-277"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="c583d-278">Параметр <c>PathName</c> может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-278"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c583d-279">Возвращает значение типа <see langword="Date" />, которое указывает дату и время последней операции записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-279">Returns a <see langword="Date" /> value that indicates the date and time a file was written to.</span></span> <span data-ttu-id="c583d-280">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileDateTime" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-280">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileDateTime" />.</span></span> <span data-ttu-id="c583d-281">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-281">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" /></span></span></summary>
        <returns>
          <span data-ttu-id="c583d-282">Значение типа <see langword="Date" />, которое указывает дату и время создания или последнего изменения файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-282"><see langword="Date" /> value that indicates the date and time a file was created or last modified.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c583d-283">В этом примере используется `FileDateTime` функции для определения даты и времени файла или его последнего изменения.</span><span class="sxs-lookup"><span data-stu-id="c583d-283">This example uses the `FileDateTime` function to determine the date and time a file was created or last modified.</span></span> <span data-ttu-id="c583d-284">Формат даты и времени, отображаемого зависит от региональных параметров системы.</span><span class="sxs-lookup"><span data-stu-id="c583d-284">The format of the date and time displayed is based on the locale settings of the system.</span></span>  
  
 [!code-vb[VbVbalrCatRef#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-285">Параметр <paramref name="PathName" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="c583d-285"><paramref name="PathName" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-286">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-286">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FileGet">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-287">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-287">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-288">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-288">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-289">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-289">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, bool&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Boolean@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-290">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-290">Required.</span></span> <span data-ttu-id="c583d-291">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-291">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-292">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-292">Required.</span></span> <span data-ttu-id="c583d-293">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-293">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-294">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-294">Optional.</span></span> <span data-ttu-id="c583d-295">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-295">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-296">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-296">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-297">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-297">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-298">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-298">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /></span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-299">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-299">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-300">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-300">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-301">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-301">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-302">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-302">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-303">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-303">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-304">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-304">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-305">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-305">Random Mode</span></span>  
 <span data-ttu-id="c583d-306">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-306">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-307">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-307">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-308">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-308">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-309">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-309">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-310">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-310">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-311">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-311">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-312">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-312">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-313">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-313">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-314">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-314">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-315">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-315">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-316">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-316">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-317">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-317">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-318">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-318">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-319">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-319">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-320">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-320">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-321">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-321">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-322">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-322">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-323">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-323">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-324">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-324">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-325">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-325">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-326">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-326">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-327">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-327">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-328">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-328">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-329">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-329">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-330">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-330">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-331">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-331">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-332">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-332">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-333">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-333">Binary Mode</span></span>  
 <span data-ttu-id="c583d-334">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-334">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-335">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-335">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-336">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-336">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-337">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-337">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-338">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-338">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-339">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-339">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-340">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-340">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-341">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-341">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-342">Чтение из файла с помощью`FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-342">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-343"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-343"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-344">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-344">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, unsigned int8&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Byte@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-345">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-345">Required.</span></span> <span data-ttu-id="c583d-346">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-346">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-347">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-347">Required.</span></span> <span data-ttu-id="c583d-348">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-348">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-349">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-349">Optional.</span></span> <span data-ttu-id="c583d-350">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-350">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-351">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-351">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-352">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-352">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-353">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-353">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-354">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-354">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-355">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-355">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-356">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-356">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-357">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-357">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-358">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-358">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-359">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-359">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-360">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-360">Random Mode</span></span>  
 <span data-ttu-id="c583d-361">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-361">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-362">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-362">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-363">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-363">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-364">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-364">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-365">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-365">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-366">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-366">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-367">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-367">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-368">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-368">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-369">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-369">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-370">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-370">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-371">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-371">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-372">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-372">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-373">Если дескриптор не используется.</span><span class="sxs-lookup"><span data-stu-id="c583d-373">If the descriptor is not used.</span></span> <span data-ttu-id="c583d-374">А затем размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-374">Then the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-375">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-375">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-376">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-376">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-377">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-377">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-378">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-378">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-379">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-379">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-380">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-380">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-381">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-381">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-382">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-382">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-383">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-383">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-384">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-384">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-385">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-385">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-386">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-386">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-387">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-387">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-388">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-388">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-389">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-389">Binary Mode</span></span>  
 <span data-ttu-id="c583d-390">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-390">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-391">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-391">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-392">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-392">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-393">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-393">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-394">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-394">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-395">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-395">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-396">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-396">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-397">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-397">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-398">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-398">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-399"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-399"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-400">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-400">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, char&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Char@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-401">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-401">Required.</span></span> <span data-ttu-id="c583d-402">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-402">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-403">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-403">Required.</span></span> <span data-ttu-id="c583d-404">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-404">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-405">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-405">Optional.</span></span> <span data-ttu-id="c583d-406">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-406">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-407">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-407">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-408">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-408">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-409">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-409">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-410">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-410">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-411">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-411">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-412">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-412">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-413">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-413">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-414">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-414">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-415">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-415">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-416">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-416">Random Mode</span></span>  
 <span data-ttu-id="c583d-417">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-417">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-418">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-418">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-419">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-419">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-420">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-420">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-421">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-421">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-422">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-422">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-423">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-423">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-424">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-424">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-425">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-425">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-426">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-426">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-427">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-427">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-428">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-428">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-429">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-429">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-430">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-430">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-431">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-431">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-432">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-432">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-433">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-433">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-434">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-434">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-435">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-435">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-436">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-436">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-437">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-437">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-438">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-438">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-439">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-439">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-440">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-440">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-441">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-441">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-442">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-442">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-443">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-443">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-444">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-444">Binary Mode</span></span>  
 <span data-ttu-id="c583d-445">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-445">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-446">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-446">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-447">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-447">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-448">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-448">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-449">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-449">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-450">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-450">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-451">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-451">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-452">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-452">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-453">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-453">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-454"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-454"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-455">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-455">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.DateTime&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.DateTime@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-456">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-456">Required.</span></span> <span data-ttu-id="c583d-457">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-457">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-458">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-458">Required.</span></span> <span data-ttu-id="c583d-459">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-459">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-460">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-460">Optional.</span></span> <span data-ttu-id="c583d-461">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-461">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-462">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-462">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-463">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-463">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-464">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-464">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-465">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-465">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-466">Данные, считанные с `FileGet` , обычно записываются в файл с `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-466">Data read with `FileGet` is usually written to a file with `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-467">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-467">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-468">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-468">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-469">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-469">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-470">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-470">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-471">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-471">Random Mode</span></span>  
 <span data-ttu-id="c583d-472">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-472">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-473">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции`FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-473">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function,`FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-474">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-474">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-475">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-475">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-476">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-476">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-477">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-477">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-478">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-478">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-479">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-479">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-480">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-480">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-481">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-481">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-482">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-482">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-483">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-483">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-484">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-484">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-485">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-485">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-486">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-486">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-487">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-487">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-488">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-488">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-489">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-489">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-490">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-490">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-491">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-491">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-492">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-492">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-493">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-493">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-494">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-494">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-495">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-495">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-496">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-496">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-497">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-497">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-498">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-498">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-499">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-499">Binary Mode</span></span>  
 <span data-ttu-id="c583d-500">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-500">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-501">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-501">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-502">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-502">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-503">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-503">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-504">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-504">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-505">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-505">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-506">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-506">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-507">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-507">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-508">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-508">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-509"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-509"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-510">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-510">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, valuetype System.Decimal&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Decimal@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-511">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-511">Required.</span></span> <span data-ttu-id="c583d-512">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-512">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-513">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-513">Required.</span></span> <span data-ttu-id="c583d-514">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-514">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-515">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-515">Optional.</span></span> <span data-ttu-id="c583d-516">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-516">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-517">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-517">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-518">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-518">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-519">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-519">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-520">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-520">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-521">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-521">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-522">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-522">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-523">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-523">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-524">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-524">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-525">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-525">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-526">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-526">Random Mode</span></span>  
 <span data-ttu-id="c583d-527">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-527">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-528">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-528">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-529">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-529">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-530">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-530">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-531">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-531">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-532">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-532">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-533">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-533">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-534">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-534">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-535">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-535">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-536">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-536">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-537">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-537">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-538">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-538">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-539">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-539">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-540">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-540">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-541">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-541">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-542">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-542">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-543">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-543">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-544">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-544">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-545">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-545">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-546">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-546">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-547">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-547">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-548">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-548">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-549">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-549">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-550">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-550">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-551">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-551">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-552">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-552">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-553">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-553">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-554">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-554">Binary Mode</span></span>  
 <span data-ttu-id="c583d-555">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-555">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-556">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-556">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-557">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-557">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-558">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-558">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-559">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-559">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-560">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-560">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-561">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-561">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-562">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-562">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-563">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-563">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-564"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-564"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-565">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-565">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Double@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-566">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-566">Required.</span></span> <span data-ttu-id="c583d-567">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-567">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-568">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-568">Required.</span></span> <span data-ttu-id="c583d-569">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-569">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-570">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-570">Optional.</span></span> <span data-ttu-id="c583d-571">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-571">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-572">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-572">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-573">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-573">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-574">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-574">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-575">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-575">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-576">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-576">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-577">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-577">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-578">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-578">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-579">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-579">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-580">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-580">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-581">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-581">Random Mode</span></span>  
 <span data-ttu-id="c583d-582">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-582">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-583">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-583">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-584">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-584">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-585">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-585">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-586">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-586">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-587">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-587">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-588">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-588">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-589">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-589">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-590">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-590">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-591">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-591">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-592">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-592">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-593">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-593">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-594">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-594">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-595">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-595">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-596">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-596">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-597">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-597">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-598">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-598">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-599">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-599">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-600">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-600">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-601">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-601">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-602">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-602">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-603">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-603">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-604">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-604">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-605">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-605">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-606">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-606">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-607">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-607">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-608">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-608">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-609">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-609">Binary Mode</span></span>  
 <span data-ttu-id="c583d-610">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-610">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-611">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-611">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-612">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-612">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-613">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-613">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-614">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-614">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-615">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-615">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-616">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-616">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-617">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-617">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-618">Чтение из файла с помощью`FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-618">Reading from a file by using the`FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-619"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-619"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-620">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-620">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int16&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int16@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-621">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-621">Required.</span></span> <span data-ttu-id="c583d-622">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-622">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-623">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-623">Required.</span></span> <span data-ttu-id="c583d-624">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-624">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-625">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-625">Optional.</span></span> <span data-ttu-id="c583d-626">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-626">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-627">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-627">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-628">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-628">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-629">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-629">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-630">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-630">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-631">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-631">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-632">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-632">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-633">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-633">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-634">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-634">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-635">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-635">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-636">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-636">Random Mode</span></span>  
 <span data-ttu-id="c583d-637">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-637">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-638">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-638">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-639">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-639">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-640">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-640">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-641">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-641">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-642">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-642">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-643">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-643">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-644">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-644">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-645">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-645">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-646">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-646">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-647">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-647">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-648">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-648">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-649">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-649">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-650">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-650">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-651">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-651">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-652">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-652">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-653">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-653">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-654">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-654">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-655">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-655">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-656">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-656">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-657">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-657">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-658">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-658">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-659">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-659">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-660">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-660">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-661">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-661">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-662">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-662">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-663">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-663">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-664">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-664">Binary Mode</span></span>  
 <span data-ttu-id="c583d-665">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-665">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-666">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-666">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-667">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-667">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-668">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-668">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-669">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-669">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-670">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-670">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-671">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-671">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-672">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-672">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-673">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-673">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-674"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-674"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-675">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-675">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int32@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-676">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-676">Required.</span></span> <span data-ttu-id="c583d-677">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-677">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-678">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-678">Required.</span></span> <span data-ttu-id="c583d-679">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-679">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-680">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-680">Optional.</span></span> <span data-ttu-id="c583d-681">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-681">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-682">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-682">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-683">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-683">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-684">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-684">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-685">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-685">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-686">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-686">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-687">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-687">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-688">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-688">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-689">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-689">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-690">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-690">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-691">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-691">Random Mode</span></span>  
 <span data-ttu-id="c583d-692">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-692">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-693">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-693">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-694">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-694">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-695">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-695">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-696">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-696">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-697">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-697">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-698">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-698">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-699">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-699">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-700">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-700">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-701">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-701">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-702">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-702">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-703">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-703">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-704">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-704">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-705">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-705">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-706">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-706">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-707">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-707">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-708">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-708">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-709">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-709">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-710">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-710">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-711">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-711">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-712">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-712">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-713">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-713">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-714">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-714">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-715">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-715">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-716">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-716">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-717">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-717">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-718">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-718">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-719">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-719">Binary Mode</span></span>  
 <span data-ttu-id="c583d-720">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-720">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-721">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-721">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-722">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-722">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-723">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-723">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-724">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-724">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-725">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-725">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-726">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-726">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-727">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-727">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-728">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-728">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-729"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-729"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-730">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-730">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, int64&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Int64@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-731">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-731">Required.</span></span> <span data-ttu-id="c583d-732">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-732">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-733">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-733">Required.</span></span> <span data-ttu-id="c583d-734">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-734">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-735">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-735">Optional.</span></span> <span data-ttu-id="c583d-736">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-736">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-737">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-737">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-738">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-738">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-739">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-739">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-740">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-740">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-741">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-741">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-742">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-742">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-743">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-743">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-744">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-744">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-745">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-745">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-746">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-746">Random Mode</span></span>  
 <span data-ttu-id="c583d-747">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-747">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-748">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-748">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-749">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-749">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-750">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-750">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-751">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-751">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-752">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-752">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-753">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-753">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-754">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-754">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-755">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-755">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-756">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-756">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-757">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-757">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-758">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-758">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-759">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-759">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-760">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-760">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-761">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-761">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-762">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-762">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-763">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-763">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-764">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-764">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-765">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-765">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-766">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-766">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-767">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-767">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-768">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-768">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-769">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-769">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-770">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-770">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-771">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-771">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-772">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-772">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-773">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-773">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-774">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-774">Binary Mode</span></span>  
 <span data-ttu-id="c583d-775">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-775">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-776">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-776">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-777">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-777">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-778">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-778">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-779">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-779">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-780">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-780">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-781">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-781">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-782">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-782">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-783">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-783">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-784"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-784"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-785">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-785">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, float32&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Single@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-786">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-786">Required.</span></span> <span data-ttu-id="c583d-787">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-787">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-788">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-788">Required.</span></span> <span data-ttu-id="c583d-789">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-789">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-790">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-790">Optional.</span></span> <span data-ttu-id="c583d-791">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-791">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-792">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-792">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-793">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-793">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-794">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-794">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-795">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-795">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-796">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-796">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-797">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-797">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-798">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-798">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-799">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-799">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-800">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-800">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-801">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-801">Random Mode</span></span>  
 <span data-ttu-id="c583d-802">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-802">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-803">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-803">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-804">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-804">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-805">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-805">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-806">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-806">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-807">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-807">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-808">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-808">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-809">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-809">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-810">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-810">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-811">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-811">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-812">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-812">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-813">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-813">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-814">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-814">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-815">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-815">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-816">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-816">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-817">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-817">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-818">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-818">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-819">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-819">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-820">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-820">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-821">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-821">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-822">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-822">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-823">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-823">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-824">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-824">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-825">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-825">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-826">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-826">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-827">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-827">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-828">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-828">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-829">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-829">Binary Mode</span></span>  
 <span data-ttu-id="c583d-830">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-830">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-831">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-831">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-832">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-832">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-833">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-833">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-834">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-834">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-835">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-835">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-836">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-836">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-837">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-837">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-838">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-838">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-839"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-839"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-840">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.ValueType&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.ValueType@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-841">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-841">Required.</span></span> <span data-ttu-id="c583d-842">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-842">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-843">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-843">Required.</span></span> <span data-ttu-id="c583d-844">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-844">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-845">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-845">Optional.</span></span> <span data-ttu-id="c583d-846">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-846">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-847">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-847">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-848">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-848">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-849">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-849">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-850">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-850">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-851">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-851">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-852">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-852">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-853">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-853">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-854">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-854">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-855">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-855">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-856">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-856">Random Mode</span></span>  
 <span data-ttu-id="c583d-857">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-857">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-858">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-858">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-859">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-859">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-860">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-860">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-861">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-861">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-862">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-862">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-863">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-863">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-864">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-864">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-865">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-865">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-866">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-866">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-867">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-867">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-868">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-868">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-869">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-869">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-870">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-870">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-871">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-871">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-872">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-872">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-873">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-873">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-874">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-874">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-875">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-875">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-876">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-876">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-877">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-877">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-878">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-878">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-879">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-879">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-880">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-880">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-881">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-881">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-882">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-882">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-883">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-883">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-884">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-884">Binary Mode</span></span>  
 <span data-ttu-id="c583d-885">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-885">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-886">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-886">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-887">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-887">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-888">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-888">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-889">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-889">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-890">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-890">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-891">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-891">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-892">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-892">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-893">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-893">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-894"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-894"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-895">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-895">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, string&amp; Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.String@,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-896">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-896">Required.</span></span> <span data-ttu-id="c583d-897">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-897">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-898">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-898">Required.</span></span> <span data-ttu-id="c583d-899">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-899">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-900">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-900">Optional.</span></span> <span data-ttu-id="c583d-901">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-901">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c583d-902">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-902">Optional.</span></span> <span data-ttu-id="c583d-903">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-903">Applies only when writing a string.</span></span> <span data-ttu-id="c583d-904">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-904">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="c583d-905">Значение по умолчанию: <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c583d-906">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-906">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-907">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-908">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-909">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-909">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-910">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-910">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-911">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-912">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-912">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-913">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-913">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-914">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-914">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-915">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-915">Random Mode</span></span>  
 <span data-ttu-id="c583d-916">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-916">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-917">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-917">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-918">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-918">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-919">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-919">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-920">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-920">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-921">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-921">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-922">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-922">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-923">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-923">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-924">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-924">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-925">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-925">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-926">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-926">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-927">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-927">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-928">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-928">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-929">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-929">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-930">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-930">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-931">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-931">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-932">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-932">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-933">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-933">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-934">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-934">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-935">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-935">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-936">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-936">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-937">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-938">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-938">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-939">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-939">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-940">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-941">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-941">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-942">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-943">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-943">Binary Mode</span></span>  
 <span data-ttu-id="c583d-944">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-944">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-945">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-945">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-946">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-946">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-947">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-947">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-948">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-948">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-949">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-949">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-950">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-950">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-951">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-951">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-952">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-952">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-953"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-953"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-954">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-954">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGet">
      <MemberSignature Language="C#" Value="public static void FileGet (int FileNumber, ref Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGet(int32 FileNumber, class System.Array&amp; Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGet(System.Int32,System.Array@,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGet (FileNumber As Integer, ByRef Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-955">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-955">Required.</span></span> <span data-ttu-id="c583d-956">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-956">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-957">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-957">Required.</span></span> <span data-ttu-id="c583d-958">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-958">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-959">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-959">Optional.</span></span> <span data-ttu-id="c583d-960">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-960">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="c583d-961">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-961">Optional.</span></span> <span data-ttu-id="c583d-962">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-962">Applies only when writing an array.</span></span> <span data-ttu-id="c583d-963">Указывает, нужно ли обрабатывать массив как динамический, и обязательно ли записывать дескриптор массива, описывающий его длину и границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-963">Specifies whether the array is to be treated as dynamic and whether an array descriptor describing the size and bounds of the array is necessary.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c583d-964">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-964">Optional.</span></span> <span data-ttu-id="c583d-965">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-965">Applies only when writing a string.</span></span> <span data-ttu-id="c583d-966">Указывает, записывать ли двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-966">Specifies whether to write a two-byte descriptor for the string that describes the length.</span></span> <span data-ttu-id="c583d-967">Значение по умолчанию: <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-967">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c583d-968">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-968">Reads data from an open disk file into a variable.</span></span> <span data-ttu-id="c583d-969">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGet" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-969">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGet" />.</span></span> <span data-ttu-id="c583d-970">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-970">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-971">`FileGet` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-971">`FileGet` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-972">Данные, считанные с `FileGet` обычно записываются в файл с помощью `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-972">Data read with `FileGet` is usually written to a file by using `FilePut`.</span></span>  
  
 <span data-ttu-id="c583d-973">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-973">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-974">При отсутствии `RecordNumber`, следующей записи или после последнего байта `FileGet` или `FilePut` функции (или, на который указывает последний `Seek` функция) доступен для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-974">If you omit `RecordNumber`, the next record or byte following the last `FileGet` or `FilePut` function (or pointed to by the last `Seek` function) is read.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-975">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-975">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-976">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-976">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-977">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-977">Random Mode</span></span>  
 <span data-ttu-id="c583d-978">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-978">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-979">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGet` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-979">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGet` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-980">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-980">The space between the end of one record and the starting of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-981">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-981">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-982">По умолчанию, если переменная считывается в строку `FileGet` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-982">By default, if the variable being read into is a string, `FileGet` reads a two-byte descriptor that contains the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-983">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-983">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-984">Visual Basic 6.0 и более ранних версиях поддерживают строки фиксированной длины; При записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-984">Visual Basic 6.0 and earlier versions support fixed-length strings; when put to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-985">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-985">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-986">Если считываемая переменная является массивом, можно ли считать дескриптор с указанием размера и размерности массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-986">If the variable being read into is an array, you can choose whether to read a descriptor for the size and dimension of the array.</span></span> <span data-ttu-id="c583d-987">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-987">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-988">При чтении массива, необходимо соответствовать способу его записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-988">When reading the array, you have to match the way the array was written.</span></span> <span data-ttu-id="c583d-989">Если он был записан с дескриптором, необходимо прочитать дескриптор.</span><span class="sxs-lookup"><span data-stu-id="c583d-989">If it was written with the descriptor, you have to read the descriptor.</span></span> <span data-ttu-id="c583d-990">Если дескриптор не используется, размер и границы массива, переданные в `FileGet` определить, что для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-990">If the descriptor is not used, the size and bounds of the array passed into `FileGet` determine what to read.</span></span>  
  
     <span data-ttu-id="c583d-991">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-991">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-992">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-992">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-993">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-993">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-994">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-994">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#21)]  
  
     <span data-ttu-id="c583d-995">218 байт распределяются следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-995">The 218 bytes are distributed as follows:</span></span>  
  
    -   <span data-ttu-id="c583d-996">18 байт для дескриптора: (2 + 8 \* 2)</span><span class="sxs-lookup"><span data-stu-id="c583d-996">18 bytes for the descriptor: (2 + 8 \* 2)</span></span>  
  
    -   <span data-ttu-id="c583d-997">200 байт для данных: (10 * 5 * 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-997">200 bytes for the data: (5 * 10 * 4).</span></span>  
  
-   <span data-ttu-id="c583d-998">Если считываемая переменная является любого другого типа (не является строкой переменной длины или объект), `FileGet` считывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-998">If the variable being read into is any other type of variable (not a variable-length string or an object), `FileGet` reads only the variable data.</span></span> <span data-ttu-id="c583d-999">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-999">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-1000">`FileGet` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-1000">`FileGet` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-1001">На диске, динамического массива в определяемый пользователем тип (написанную `FilePut`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1001">On disk, a dynamic array in a user-defined type (written with `FilePut`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1002">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов.</span><span class="sxs-lookup"><span data-stu-id="c583d-1002">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements.</span></span> <span data-ttu-id="c583d-1003">Сюда входят все массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1003">This includes any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-1004">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1004">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of a string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1005">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1005">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1006">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1006">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1007">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1007">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1008">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1008">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1009">`FileGet` Считывает все переменные с диска последовательно; то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1009">`FileGet` reads all variables from disk contiguously; that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1010">Для любого массива, кроме массива в структуре `FileGet` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1010">For any array other than an array in a structure, `FileGet` reads only the data.</span></span> <span data-ttu-id="c583d-1011">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1011">No descriptor is read.</span></span>  
  
-   <span data-ttu-id="c583d-1012">`FileGet` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1012">`FileGet` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1013">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1013">The number of bytes read equals the number of characters already in the string.</span></span>  
  
    > [!IMPORTANT]
    >  <span data-ttu-id="c583d-1014">Чтение из файла с помощью `FileGet` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1014">Reading from a file by using the `FileGet` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1015"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1015"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1016">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1016">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="FileGetObject">
      <MemberSignature Language="C#" Value="public static void FileGetObject (int FileNumber, ref object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileGetObject(int32 FileNumber, object&amp; Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileGetObject (FileNumber As Integer, ByRef Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1017">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1017">Required.</span></span> <span data-ttu-id="c583d-1018">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1018">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1019">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1019">Required.</span></span> <span data-ttu-id="c583d-1020">Допустимое имя переменной, в которую считываются данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1020">Valid variable name into which data is read.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1021">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1021">Optional.</span></span> <span data-ttu-id="c583d-1022">Номер записи (файлы режима <see langword="Random" />) или номер байта (файлы режима <see langword="Binary" />), с которого начинается считывание.</span><span class="sxs-lookup"><span data-stu-id="c583d-1022">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which reading starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1023">Считывает данные из файла открытия диска в переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1023">Reads data from an open disk file into a variable.</span></span>  <span data-ttu-id="c583d-1024">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileGetObject" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1024">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileGetObject" />.</span></span> <span data-ttu-id="c583d-1025">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1025">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1026">`FileGetObject` Функция используется вместо `FileGet` во избежание неоднозначности во время компиляции, если тип `Object` возвращается вместо другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1026">The `FileGetObject` function is used instead of `FileGet` to avoid ambiguities at compile time if type `Object` is returned instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="c583d-1027">Если требуется записать `Variant` типа `FileGetObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="c583d-1027">If you intend to write out the `Variant` type, `FileGetObject` is required.</span></span> <span data-ttu-id="c583d-1028">Если вы сомневаетесь, при использовании объекта для второго параметра, всегда рекомендуется использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1028">When in doubt, if you are using an object for the second parameter, it is always suggested that you use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c583d-1029">`FileGetObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1029">`FileGetObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1030">Данные, считанные с `FileGetObject` , обычно записываются с `FilePutObject`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1030">Data read with `FileGetObject` is usually written with `FilePutObject`.</span></span>  
  
 <span data-ttu-id="c583d-1031">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1031">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1032">Если не указан `RecordNumber`, `FileGetObject` считывает запись или байт после последнего `FileGetObject` или `FilePutObject` функции (или, на который указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="c583d-1032">If you omit `RecordNumber`, `FileGetObject` reads the record or byte after the last `FileGetObject` or `FilePutObject` function (or pointed to by the last `Seek` function).</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1033">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1033">Random Mode</span></span>  
 <span data-ttu-id="c583d-1034">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1034">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1035">Если длина считываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FileGetObject` считывает последующие записи по границам записей.</span><span class="sxs-lookup"><span data-stu-id="c583d-1035">If the length of the data being read is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FileGetObject` reads subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1036">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1036">The space between the end of one record and the beginning of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1037">Поскольку объем данных заполнения не может точно определить, рекомендуется длина записи соответствует длине считываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1037">Because the amount of padding data cannot be precisely determined, it is a good idea to have the record length match the length of the data being read.</span></span>  
  
-   <span data-ttu-id="c583d-1038">Если считываемая переменная представляет собой строку, по умолчанию `FileGetObject` считывает двухбайтовый дескриптор, содержащий длину строки, а затем считывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1038">If the variable being read into is a string, by default `FileGetObject` reads a two-byte descriptor containing the string length and then reads the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1039">Таким образом, длина записи, заданная параметром `RecordLength` предложения `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1039">Therefore, the record length specified by the `RecordLength` clause of the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1040">Visual Basic 6.0 и более ранних версий поддерживают строки фиксированной длины и при записи в файл дескриптор длины не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1040">Visual Basic 6.0 and earlier versions support fixed-length strings and when read to a file, the length descriptor is not written.</span></span> <span data-ttu-id="c583d-1041">Если вы хотите прочитать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1041">If you want to read a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1042">Если считываемая переменная является массивом, то длина записи, указанная с `RecordLength` параметр в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1042">If the variable being read into is an array, then the record length specified by the `RecordLength` parameter in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1043">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1043">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1044">Его длина равна 2 плюс 8 раз размерность: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="c583d-1044">Its length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span>  
  
     <span data-ttu-id="c583d-1045">Например, следующее объявление массива требуется 218 байтов при записи на диск:</span><span class="sxs-lookup"><span data-stu-id="c583d-1045">For example, the following array declaration requires 218 bytes when the array is written to disk:</span></span>  
  
     [!code-vb[VbVbalrCatRef#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#27)]  
  
     <span data-ttu-id="c583d-1046">218 байт распределяются следующим образом: 18 байт для дескриптора (2 + 8 \* 2) и 100 байтов для данных (5 \* 10 \* 4).</span><span class="sxs-lookup"><span data-stu-id="c583d-1046">The 218 bytes are distributed as follows: 18 bytes for the descriptor (2 + 8 \* 2), and 100 bytes for the data (5 \* 10 \* 4).</span></span>  
  
-   <span data-ttu-id="c583d-1047">`FileGetObject` считывает элементы структуры, как если бы чтения каждого по отдельности, за исключением того, без заполнения между элементами.</span><span class="sxs-lookup"><span data-stu-id="c583d-1047">`FileGetObject` reads elements of structures as if each were being read individually, except that there is no padding between elements.</span></span> <span data-ttu-id="c583d-1048">На диске, динамического массива в определяемый пользователем тип (написанную `FilePutObject`) начинается дескриптора, длина которого равна 2 плюс 8, умноженное на количество измерений: 2 + 8 \* NumberOfDimensions.</span><span class="sxs-lookup"><span data-stu-id="c583d-1048">On disk, a dynamic array in a user-defined type (written with `FilePutObject`) is prefixed by a descriptor whose length equals 2 plus 8 times the number of dimensions: 2 + 8 \* NumberOfDimensions.</span></span> <span data-ttu-id="c583d-1049">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для чтения отдельных элементов, включая массивы и их дескрипторы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1049">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to read the individual elements, including any arrays and their descriptors.</span></span> <span data-ttu-id="c583d-1050"><xref:Microsoft.VisualBasic.VBFixedStringAttribute> Класс может быть применен к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1050">The <xref:Microsoft.VisualBasic.VBFixedStringAttribute> class can be applied to string fields in the structures to indicate the size of string when written to disk.</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1051">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1051">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1052">Для файлов, открытых в `Binary` режиме, все `Random` применяются правила, со следующими исключениями:</span><span class="sxs-lookup"><span data-stu-id="c583d-1052">For files opened in `Binary` mode, all of the `Random` rules apply, with these exceptions:</span></span>  
  
-   <span data-ttu-id="c583d-1053">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1053">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1054">`FileGetObject` Считывает все переменные с диска подряд, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1054">`FileGetObject` reads all variables from disk contiguously, that is, with no padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1055">Для любого массива, кроме массива в структуре `FileGetObject` считывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1055">For any array other than an array in a structure, `FileGetObject` reads only the data.</span></span> <span data-ttu-id="c583d-1056">Дескриптор не читается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1056">No descriptor is read.</span></span>  
  
 <span data-ttu-id="c583d-1057">`FileGetObject` считывает строки переменной длины, которые не являются частью структуры, предполагая дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1057">`FileGetObject` reads variable-length strings that are not elements of structures without expecting the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1058">Число считанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1058">The number of bytes read equals the number of characters already in the string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-1059">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1059">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-1060">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-1060">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1061">В следующем примере выполняется запись в файл теста и затем извлекается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1061">The following example reads a record into a test file and then retrieves it.</span></span>  
  
 [!code-vb[VbVbalrCatRef#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
      </Docs>
    </Member>
    <Member MemberName="FileLen">
      <MemberSignature Language="C#" Value="public static long FileLen (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 FileLen(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FileLen (PathName As String) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long FileLen(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c583d-1062">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1062">Required.</span></span> <span data-ttu-id="c583d-1063">Выражение <see langword="String" />, которое определяет файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1063"><see langword="String" /> expression that specifies a file.</span></span> <span data-ttu-id="c583d-1064">Параметр <c>PathName</c> может включать каталог или папку, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-1064"><c>PathName</c> may include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c583d-1065">Возвращает значение <see langword="Long" />, которое указывает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="c583d-1065">Returns a <see langword="Long" /> value that specifies the length of a file in bytes.</span></span> <span data-ttu-id="c583d-1066">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileLen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1066">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileLen" />.</span></span> <span data-ttu-id="c583d-1067">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1067">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.GetFileInfo(System.String)" />.</span></span></summary>
        <returns>
          <span data-ttu-id="c583d-1068">Значение <see langword="Long" />, которое указывает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="c583d-1068"><see langword="Long" /> value that specifies the length of a file in bytes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1069">Если указанный файл открыт, когда `FileLen` вызывается функция, возвращаемое значение представляет размер файла на момент его открытия.</span><span class="sxs-lookup"><span data-stu-id="c583d-1069">If the specified file is open when the `FileLen` function is called, the value returned represents the size of the file at the time it was opened.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-1070">Для получения текущей длины открытого файла используйте `LOF` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-1070">To obtain the current length of an open file, use the `LOF` function.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1071">В этом примере используется `FileLen` функция возвращает длину файла в байтах.</span><span class="sxs-lookup"><span data-stu-id="c583d-1071">This example uses the `FileLen` function to return the length of a file in bytes.</span></span> <span data-ttu-id="c583d-1072">Для этого примера, предположим, что `TestFile` — это файл, который содержит некоторые данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1072">For purposes of this example, assume that `TestFile` is a file that contains some data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-1073">Файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-1073">File does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileDateTime(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="FileOpen">
      <MemberSignature Language="C#" Value="public static void FileOpen (int FileNumber, string FileName, Microsoft.VisualBasic.OpenMode Mode, Microsoft.VisualBasic.OpenAccess Access = Microsoft.VisualBasic.OpenAccess.Default, Microsoft.VisualBasic.OpenShare Share = Microsoft.VisualBasic.OpenShare.Default, int RecordLength = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileOpen(int32 FileNumber, string FileName, valuetype Microsoft.VisualBasic.OpenMode Mode, valuetype Microsoft.VisualBasic.OpenAccess Access, valuetype Microsoft.VisualBasic.OpenShare Share, int32 RecordLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileOpen (FileNumber As Integer, FileName As String, Mode As OpenMode, Optional Access As OpenAccess = Microsoft.VisualBasic.OpenAccess.Default, Optional Share As OpenShare = Microsoft.VisualBasic.OpenShare.Default, Optional RecordLength As Integer = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FileName" Type="System.String" />
        <Parameter Name="Mode" Type="Microsoft.VisualBasic.OpenMode" />
        <Parameter Name="Access" Type="Microsoft.VisualBasic.OpenAccess" />
        <Parameter Name="Share" Type="Microsoft.VisualBasic.OpenShare" />
        <Parameter Name="RecordLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1074">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1074">Required.</span></span> <span data-ttu-id="c583d-1075">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1075">Any valid file number.</span></span> <span data-ttu-id="c583d-1076">Для получения следующего свободного номера файла следует использовать функцию <see langword="FreeFile" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1076">Use the <see langword="FreeFile" /> function to obtain the next available file number.</span></span></param>
        <param name="FileName"><span data-ttu-id="c583d-1077">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1077">Required.</span></span> <span data-ttu-id="c583d-1078">Выражение типа <see langword="String" />, которое указывает имя файла. Может включать имя каталога или папки, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-1078"><see langword="String" /> expression that specifies a file name—may include directory or folder, and drive.</span></span></param>
        <param name="Mode"><span data-ttu-id="c583d-1079">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1079">Required.</span></span> <span data-ttu-id="c583d-1080">Перечисление, определяющее режим файла: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" /> или <see langword="Random" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1080">Enumeration specifying the file mode: <see langword="Append" />, <see langword="Binary" />, <see langword="Input" />, <see langword="Output" />, or <see langword="Random" />.</span></span> <span data-ttu-id="c583d-1081">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.OpenMode" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1081">For more information, see <see cref="T:Microsoft.VisualBasic.OpenMode" /> .</span></span></param>
        <param name="Access"><span data-ttu-id="c583d-1082">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1082">Optional.</span></span> <span data-ttu-id="c583d-1083">Перечисление, определяющие операции, разрешенные для работы с открытым файлом: <see langword="Read" />, <see langword="Write" /> или <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1083">Enumeration specifying the operations permitted on the open file: <see langword="Read" />, <see langword="Write" />, or <see langword="ReadWrite" />.</span></span> <span data-ttu-id="c583d-1084">По умолчанию — <see langword="ReadWrite" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1084">Defaults to <see langword="ReadWrite" />.</span></span> <span data-ttu-id="c583d-1085">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.OpenAccess" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1085">For more information, see <see cref="T:Microsoft.VisualBasic.OpenAccess" /> .</span></span></param>
        <param name="Share"><span data-ttu-id="c583d-1086">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1086">Optional.</span></span> <span data-ttu-id="c583d-1087">Перечисление операций, не разрешенных при работе с файлом, открытым другим процессом: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" /> и <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1087">Enumeration specifying the operations not permitted on the open file by other processes: <see langword="Shared" />, <see langword="Lock Read" />, <see langword="Lock Write" />, and <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="c583d-1088">По умолчанию — <see langword="Lock Read Write" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1088">Defaults to <see langword="Lock Read Write" />.</span></span> <span data-ttu-id="c583d-1089">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.OpenShare" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1089">For more information, see <see cref="T:Microsoft.VisualBasic.OpenShare" /> .</span></span></param>
        <param name="RecordLength"><span data-ttu-id="c583d-1090">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1090">Optional.</span></span> <span data-ttu-id="c583d-1091">Число, не превышающее 32 767 (байт).</span><span class="sxs-lookup"><span data-stu-id="c583d-1091">Number less than or equal to 32,767 (bytes).</span></span> <span data-ttu-id="c583d-1092">Для файлов, открытых с произвольным доступом, это значение является длиной записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-1092">For files opened for random access, this value is the record length.</span></span> <span data-ttu-id="c583d-1093">Для файлов с последовательным доступом — это число знаков в буфере.</span><span class="sxs-lookup"><span data-stu-id="c583d-1093">For sequential files, this value is the number of characters buffered.</span></span></param>
        <summary><span data-ttu-id="c583d-1094">Открывает файл для ввода или вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-1094">Opens a file for input or output.</span></span> <span data-ttu-id="c583d-1095">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1095">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileOpen" />.</span></span> <span data-ttu-id="c583d-1096">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1096">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1097">`FileOpen` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-1097">The `FileOpen` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-1098">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-1098">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-1099">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-1099">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-1100">Перед выполнением любой операции ввода-вывода на нем необходимо открыть файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1100">You must open a file before any I/O operation can be performed on it.</span></span> <span data-ttu-id="c583d-1101">`FileOpen` выделяет буфер для ввода-вывода в файл и определяет режим доступа, используемый с буфером.</span><span class="sxs-lookup"><span data-stu-id="c583d-1101">`FileOpen` allocates a buffer for I/O to the file and determines the mode of access to use with the buffer.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-1102">При записи в файл приложения может потребоваться создать файл, если файл, к которому он пытается записать не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-1102">When writing to a file, an application may have to create a file, if the file to which it is trying to write does not exist.</span></span> <span data-ttu-id="c583d-1103">Для этого ему разрешения для каталога, в которой создан файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1103">To do so, it needs permission for the directory in which the file is to be created.</span></span> <span data-ttu-id="c583d-1104">Тем не менее если файл, указанный параметром `FileName` существует, приложение должно `Write` разрешение только на сам файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1104">However, if the file specified by `FileName` does exist, the application needs `Write` permission only to the file itself.</span></span> <span data-ttu-id="c583d-1105">Везде, где возможно, в целях повышения безопасности, создайте файл во время развертывания и предоставления `Write` разрешений к этому файлу только, а не для всего каталога.</span><span class="sxs-lookup"><span data-stu-id="c583d-1105">Wherever possible, to help improve security, create the file during deployment and grant `Write` permission to that file only, instead of to the whole directory.</span></span> <span data-ttu-id="c583d-1106">В целях повышения безопасности, записывают данные в каталоги пользователей, а не в корневой каталог или каталог Program Files.</span><span class="sxs-lookup"><span data-stu-id="c583d-1106">To help improve security, write data to user directories instead of to the root directory or the Program Files directory.</span></span>  
  
 <span data-ttu-id="c583d-1107">Для открытия канала можно найти с помощью `FreeFile()` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-1107">The channel to open can be found by using the `FreeFile()` function.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-1108">`FileOpen` Функция требует `Read` доступ из `FileIOPermissionAccess` перечисления, который может повлиять на выполнение в случаях частичного доверия.</span><span class="sxs-lookup"><span data-stu-id="c583d-1108">The `FileOpen` function requires `Read` access from the `FileIOPermissionAccess` enumeration, which may affect its execution in partial trust situations.</span></span> <span data-ttu-id="c583d-1109">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1109">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1110">В этом примере показаны различные способы `FileOpen` функцией для включения ввод и вывод в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1110">This example illustrates various uses of the `FileOpen` function to enable input and output to a file.</span></span>  
  
 <span data-ttu-id="c583d-1111">Следующий код открывает файл `TestFile` в `Input` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-1111">The following code opens the file `TestFile` in `Input` mode.</span></span>  
  
 [!code-vb[VbVbalrCatRef#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#5)]  
  
 <span data-ttu-id="c583d-1112">В этом примере открывается файл в `Binary` режиме для записи только операции.</span><span class="sxs-lookup"><span data-stu-id="c583d-1112">This example opens the file in `Binary` mode for writing operations only.</span></span>  
  
 [!code-vb[VbVbalrCatRef#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#6)]  
  
 <span data-ttu-id="c583d-1113">В следующем примере открывается файл в `Random` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-1113">The following example opens the file in `Random` mode.</span></span> <span data-ttu-id="c583d-1114">Файл содержит записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1114">The file contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#7)]  
  
 <span data-ttu-id="c583d-1115">В следующем примере открывается файл в `Output` режиме; любой процесс может прочитать или записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1115">This code example opens the file in `Output` mode; any process can read or write to file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#8)]  
  
 <span data-ttu-id="c583d-1116">В следующем примере открывается файл в `Binary` режиме для чтения; другие процессы не удалось прочитать файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1116">This code example opens the file in `Binary` mode for reading; other processes cannot read file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c583d-1117">Отрицательная длина записи (не равная –1).</span><span class="sxs-lookup"><span data-stu-id="c583d-1117">Record length is negative (and not equal to -1).</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c583d-1118">Файл <paramref name="FileName" /> уже открыт, или <paramref name="FileName" /> является недопустимым.</span><span class="sxs-lookup"><span data-stu-id="c583d-1118"><paramref name="FileName" /> is already open, or <paramref name="FileName" /> is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FilePut">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-1119">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1119">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1120">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1120">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1121">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1121">F For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, bool Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, bool Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Boolean,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Boolean, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1122">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1122">Required.</span></span> <span data-ttu-id="c583d-1123">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1123">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1124">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1124">Required.</span></span> <span data-ttu-id="c583d-1125">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1125">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1126">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1126">Optional.</span></span> <span data-ttu-id="c583d-1127">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1127">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1128">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1128">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1129">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1129">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1130">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1130">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1131">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1131">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1132">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1132">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1133">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1133">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1134">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1134">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1135">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1135">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1136">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1136">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1137">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1137">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1138">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1138">Random Mode</span></span>  
 <span data-ttu-id="c583d-1139">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1139">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1140">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1140">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1141">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1141">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1142">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1142">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1143">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1143">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1144">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1144">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1145">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1145">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1146">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1146">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1147">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1147">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1148">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1148">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1149">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1149">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1150">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1150">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1151">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1151">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1152">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1152">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1153">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1153">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1154">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1154">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1155">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1155">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1156">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1156">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1157">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1157">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1158">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1158">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1159">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1159">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1160">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1160">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1161">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1161">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1162">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1162">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1163">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1163">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1164">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1164">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1165">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1165">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1166">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1166">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1167">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1167">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1168">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1168">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1169">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1169">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1170">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1170">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1171">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1171">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1172">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1172">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1173">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1173">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1174">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1174">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1175">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1175">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1176">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1176">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1177">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1177">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1178">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1178">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1179"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1179"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1180">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1180">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, byte Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, unsigned int8 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Byte,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Byte, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1181">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1181">Required.</span></span> <span data-ttu-id="c583d-1182">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1182">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1183">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1183">Required.</span></span> <span data-ttu-id="c583d-1184">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1184">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1185">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1185">Optional.</span></span> <span data-ttu-id="c583d-1186">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1186">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1187">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1187">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1188">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1188">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1189">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1189">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1190">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1190">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1191">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1191">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1192">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1192">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1193">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1193">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1194">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1194">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1195">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1195">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1196">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1196">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1197">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1197">Random Mode</span></span>  
 <span data-ttu-id="c583d-1198">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1198">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1199">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1199">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1200">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1200">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1201">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1201">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1202">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1202">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1203">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1203">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1204">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1204">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1205">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1205">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1206">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1206">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1207">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1207">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1208">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1208">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1209">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1209">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1210">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1210">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1211">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1211">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1212">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1212">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1213">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1213">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1214">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1214">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1215">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1215">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1216">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1216">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1217">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1217">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1218">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1218">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1219">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1219">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1220">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1220">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1221">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1221">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1222">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1222">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1223">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1223">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1224">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1224">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1225">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1225">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1226">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1226">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1227">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1227">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1228">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1228">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1229">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1229">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1230">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1230">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1231">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1231">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1232">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1232">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1233">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1233">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1234">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1234">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1235">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1235">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1236">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1236">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1237">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1237">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1238"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1238"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1239">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1239">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, char Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, char Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Char,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Char, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1240">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1240">Required.</span></span> <span data-ttu-id="c583d-1241">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1241">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1242">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1242">Required.</span></span> <span data-ttu-id="c583d-1243">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1243">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1244">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1244">Optional.</span></span> <span data-ttu-id="c583d-1245">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1245">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1246">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1246">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1247">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1247">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1248">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1248">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1249">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1249">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1250">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1250">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1251">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1251">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1252">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1252">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1253">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1253">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1254">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1254">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1255">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1255">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1256">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1256">Random Mode</span></span>  
 <span data-ttu-id="c583d-1257">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1257">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1258">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1258">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1259">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1259">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1260">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1260">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1261">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1261">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1262">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1262">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1263">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1263">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1264">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1264">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1265">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1265">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1266">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1266">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1267">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1267">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1268">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1268">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1269">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1269">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1270">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1270">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1271">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1271">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1272">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1272">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1273">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1273">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1274">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1274">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1275">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1275">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1276">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1276">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1277">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1277">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1278">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1278">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1279">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1279">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1280">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1280">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1281">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1281">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1282">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1282">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1283">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1283">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1284">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1284">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1285">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1285">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1286">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1286">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1287">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1287">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1288">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1288">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1289">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1289">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1290">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1290">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1291">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1291">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1292">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1292">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1293">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1293">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1294">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1294">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1295">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1295">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1296">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1296">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1297"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1297"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1298">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1298">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, DateTime Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.DateTime Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.DateTime,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As DateTime, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1299">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1299">Required.</span></span> <span data-ttu-id="c583d-1300">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1300">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1301">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1301">Required.</span></span> <span data-ttu-id="c583d-1302">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1302">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1303">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1303">Optional.</span></span> <span data-ttu-id="c583d-1304">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1304">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1305">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1305">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1306">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1306">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1307">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1307">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1308">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1308">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1309">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1309">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1310">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1310">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1311">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1311">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1312">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1312">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1313">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1313">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1314">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1314">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1315">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1315">Random Mode</span></span>  
 <span data-ttu-id="c583d-1316">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1316">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1317">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1317">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1318">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1318">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1319">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1319">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1320">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1320">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1321">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1321">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1322">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1322">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1323">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1323">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1324">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1324">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1325">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1325">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1326">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1326">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1327">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1327">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1328">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1328">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1329">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1329">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1330">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1330">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1331">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1331">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1332">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1332">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1333">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1333">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1334">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1334">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1335">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1335">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1336">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1336">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1337">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1337">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1338">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1338">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1339">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1339">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1340">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1340">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1341">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1341">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1342">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1342">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1343">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1343">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1344">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1344">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1345">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1345">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1346">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1346">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1347">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1347">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1348">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1348">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1349">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1349">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1350">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1350">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1351">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1351">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1352">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1352">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1353">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1353">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1354">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1354">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1355">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1355">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1356"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1356"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1357">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1357">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, decimal Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, valuetype System.Decimal Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Decimal,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Decimal, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1358">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1358">Required.</span></span> <span data-ttu-id="c583d-1359">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1359">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1360">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1360">Required.</span></span> <span data-ttu-id="c583d-1361">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1361">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1362">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1362">Optional.</span></span> <span data-ttu-id="c583d-1363">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1363">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1364">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1364">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1365">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1365">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1366">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1366">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1367">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1367">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1368">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1368">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1369">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1369">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1370">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1370">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1371">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1371">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1372">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1372">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1373">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1373">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1374">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1374">Random Mode</span></span>  
 <span data-ttu-id="c583d-1375">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1375">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1376">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1376">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1377">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1377">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1378">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1378">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1379">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1379">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1380">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1380">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1381">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1381">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1382">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1382">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1383">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1383">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1384">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1384">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1385">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1385">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1386">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1386">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1387">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1387">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1388">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1388">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1389">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1389">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1390">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1390">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1391">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1391">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1392">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1392">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1393">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1393">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1394">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1394">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1395">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1395">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1396">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1396">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1397">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1397">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1398">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1398">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1399">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1399">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1400">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1400">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1401">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1401">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1402">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1402">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1403">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1403">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1404">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1404">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1405">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1405">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1406">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1406">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1407">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1407">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1408">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1408">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1409">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1409">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1410">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1410">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1411">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1411">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1412">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1412">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1413">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1413">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1414">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1414">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1415"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1415"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1416">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1416">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, double Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Double,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Double, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1417">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1417">Required.</span></span> <span data-ttu-id="c583d-1418">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1418">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1419">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1419">Required.</span></span> <span data-ttu-id="c583d-1420">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1420">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1421">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1421">Optional.</span></span> <span data-ttu-id="c583d-1422">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1422">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1423">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1423">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1424">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1424">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1425">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1425">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1426">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1426">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1427">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1427">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1428">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1428">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1429">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1429">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1430">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1430">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1431">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1431">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1432">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1432">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1433">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1433">Random Mode</span></span>  
 <span data-ttu-id="c583d-1434">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1434">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1435">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1435">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1436">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1436">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1437">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1437">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1438">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1438">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1439">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1439">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1440">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1440">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1441">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1441">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1442">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1442">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1443">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1443">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1444">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1444">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1445">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1445">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1446">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1446">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1447">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1447">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1448">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1448">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1449">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1449">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1450">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1450">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1451">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1451">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1452">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1452">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1453">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1453">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1454">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1454">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1455">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1455">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1456">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1456">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1457">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1457">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1458">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1458">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1459">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1459">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1460">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1460">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1461">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1461">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1462">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1462">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1463">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1463">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1464">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1464">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1465">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1465">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1466">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1466">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1467">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1467">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1468">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1468">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1469">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1469">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1470">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1470">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1471">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1471">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1472">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1472">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1473">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1473">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1474"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1474"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1475">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1475">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, short Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int16 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int16,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Short, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1476">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1476">Required.</span></span> <span data-ttu-id="c583d-1477">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1477">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1478">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1478">Required.</span></span> <span data-ttu-id="c583d-1479">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1479">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1480">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1480">Optional.</span></span> <span data-ttu-id="c583d-1481">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1481">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1482">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1482">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1483">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1483">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1484">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1484">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1485">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1485">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1486">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1486">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1487">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1487">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1488">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1488">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1489">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1489">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1490">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1490">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1491">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1491">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1492">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1492">Random Mode</span></span>  
 <span data-ttu-id="c583d-1493">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1493">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1494">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1494">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1495">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1495">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1496">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1496">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1497">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1497">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1498">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1498">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1499">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1499">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1500">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1500">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1501">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1501">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1502">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1502">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1503">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор`VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1503">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the`VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1504">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1504">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1505">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1505">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1506">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1506">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1507">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1507">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1508">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1508">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1509">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1509">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1510">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1510">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1511">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1511">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1512">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1512">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1513">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1513">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1514">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1514">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1515">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1515">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1516">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1516">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1517">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1517">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1518">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1518">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1519">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1519">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1520">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1520">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1521">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1521">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1522">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1522">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1523">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1523">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1524">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1524">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1525">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1525">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1526">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1526">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1527">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1527">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1528">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1528">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1529">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1529">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1530">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1530">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1531">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1531">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1532">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1532">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1533"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1533"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1534">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1534">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, int Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Integer, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1535">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1535">Required.</span></span> <span data-ttu-id="c583d-1536">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1536">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1537">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1537">Required.</span></span> <span data-ttu-id="c583d-1538">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1538">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1539">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1539">Optional.</span></span> <span data-ttu-id="c583d-1540">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1540">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1541">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1541">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1542">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1542">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1543">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1543">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1544">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1544">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1545">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1545">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1546">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1546">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1547">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1547">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1548">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1548">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1549">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1549">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1550">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1550">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1551">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1551">Random Mode</span></span>  
 <span data-ttu-id="c583d-1552">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1552">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1553">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1553">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1554">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1554">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1555">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1555">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1556">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1556">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1557">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1557">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1558">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1558">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1559">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1559">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1560">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1560">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1561">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1561">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1562">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1562">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1563">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1563">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1564">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1564">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1565">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1565">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1566">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1566">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1567">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1567">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1568">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1568">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1569">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1569">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1570">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1570">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1571">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1571">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1572">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1572">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1573">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1573">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1574">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1574">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1575">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1575">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1576">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1576">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1577">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1577">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1578">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1578">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1579">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1579">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1580">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1580">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1581">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1581">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1582">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1582">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1583">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1583">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1584">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1584">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1585">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1585">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1586">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1586">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1587">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1587">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1588">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1588">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1589">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1589">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1590">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1590">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1591">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1591">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1592"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1592"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1593">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1593">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, long Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, int64 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Long, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1594">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1594">Required.</span></span> <span data-ttu-id="c583d-1595">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1595">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1596">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1596">Required.</span></span> <span data-ttu-id="c583d-1597">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1597">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1598">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1598">Optional.</span></span> <span data-ttu-id="c583d-1599">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1599">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1600">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1600">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1601">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1601">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1602">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1602">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1603">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1603">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1604">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1604">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1605">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1605">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1606">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1606">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1607">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1607">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1608">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1608">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1609">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1609">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1610">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1610">Random Mode</span></span>  
 <span data-ttu-id="c583d-1611">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1611">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1612">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1612">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1613">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1613">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1614">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1614">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1615">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1615">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1616">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1616">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1617">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1617">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1618">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1618">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1619">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1619">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1620">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1620">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1621">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1621">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1622">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1622">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1623">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1623">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1624">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1624">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1625">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1625">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1626">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1626">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1627">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1627">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1628">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1628">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1629">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1629">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1630">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1630">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1631">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1631">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1632">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1632">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1633">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1633">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1634">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1634">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1635">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1635">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1636">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1636">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1637">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1637">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1638">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1638">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1639">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1639">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1640">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1640">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1641">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1641">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1642">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1642">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1643">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1643">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1644">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1644">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1645">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1645">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1646">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1646">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1647">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1647">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1648">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1648">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1649">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1649">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1650">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1650">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1651"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1651"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1652">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1652">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, float Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, float32 Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Single,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Single, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1653">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1653">Required.</span></span> <span data-ttu-id="c583d-1654">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1654">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1655">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1655">Required.</span></span> <span data-ttu-id="c583d-1656">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1656">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1657">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1657">Optional.</span></span> <span data-ttu-id="c583d-1658">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1658">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1659">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1659">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1660">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1660">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1661">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1661">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1662">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1662">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1663">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1663">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1664">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1664">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1665">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1665">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1666">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1666">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1667">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1667">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1668">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1668">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1669">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1669">Random Mode</span></span>  
 <span data-ttu-id="c583d-1670">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1670">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1671">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1671">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1672">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1672">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1673">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1673">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1674">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1674">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1675">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1675">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1676">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1676">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1677">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1677">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1678">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1678">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1679">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1679">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1680">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1680">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1681">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1681">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1682">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1682">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1683">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1683">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1684">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1684">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1685">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1685">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1686">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1686">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1687">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1687">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1688">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1688">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1689">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1689">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1690">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1690">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1691">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1691">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1692">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1692">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1693">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1693">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1694">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1694">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1695">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1695">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1696">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1696">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1697">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1697">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1698">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1698">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1699">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1699">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1700">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1700">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1701">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1701">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1702">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1702">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1703">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1703">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1704">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1704">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1705">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1705">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1706">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1706">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1707">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1707">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1708">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1708">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1709">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1709">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1710"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1710"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1711">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1711">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, ValueType Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.ValueType Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.ValueType,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As ValueType, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.ValueType" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1712">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1712">Required.</span></span> <span data-ttu-id="c583d-1713">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1713">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1714">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1714">Required.</span></span> <span data-ttu-id="c583d-1715">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1715">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1716">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1716">Optional.</span></span> <span data-ttu-id="c583d-1717">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1717">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1718">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1718">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1719">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1719">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1720">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1720">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1721">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1721">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1722">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1722">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1723">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1723">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1724">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1724">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1725">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1725">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1726">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1726">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1727">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1727">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1728">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1728">Random Mode</span></span>  
 <span data-ttu-id="c583d-1729">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1729">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1730">Если длина записываемых данных меньше, чем длина, указанная в`RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1730">If the length of the data being written is less than the length specified in the`RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1731">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1731">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1732">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1732">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1733">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1733">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1734">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1734">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1735">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1735">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1736">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1736">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1737">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1737">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1738">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1738">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1739">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1739">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1740">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1740">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1741">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1741">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1742">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1742">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1743">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1743">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1744">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1744">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1745">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1745">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1746">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1746">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1747">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1747">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1748">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1748">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1749">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1749">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1750">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1750">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1751">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1751">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1752">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1752">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1753">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1753">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1754">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1754">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1755">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1755">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1756">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1756">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1757">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1757">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1758">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1758">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1759">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1759">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1760">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1760">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1761">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1761">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1762">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1762">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1763">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1763">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1764">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1764">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1765">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1765">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1766">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1766">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1767">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1767">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1768">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1768">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1769"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1769"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1770">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1770">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (object FileNumber, object Value, object RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(object FileNumber, object Value, object RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Object,System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Object, Value As Object, Optional RecordNumber As Object = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This member has been deprecated. Please use FilePutObject to write Object types, or coerce FileNumber and RecordNumber to Integer for writing non-Object types. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Object" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1771">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1771">Required.</span></span> <span data-ttu-id="c583d-1772">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1772">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1773">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1773">Required.</span></span> <span data-ttu-id="c583d-1774">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1774">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1775">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1775">Optional.</span></span> <span data-ttu-id="c583d-1776">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1776">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1777">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1777">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1778">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1778">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1779">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1779">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1780">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1780">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1781">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1781">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1782">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1782">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1783">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1783">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1784">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1784">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1785">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1785">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1786">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1786">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1787">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1787">Random Mode</span></span>  
 <span data-ttu-id="c583d-1788">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1788">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1789">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1789">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1790">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1790">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1791">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1791">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1792">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1792">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1793">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1793">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1794">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1794">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1795">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1795">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1796">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1796">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1797">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1797">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1798">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1798">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1799">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1799">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1800">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1800">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1801">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1801">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1802">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1802">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1803">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1803">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1804">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1804">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1805">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1805">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1806">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1806">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1807">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1807">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1808">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1808">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1809">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1809">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1810">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1810">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1811">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1811">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1812">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1812">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1813">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1813">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1814">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1814">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1815">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1815">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1816">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1816">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1817">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1817">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1818">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1818">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1819">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1819">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1820">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1820">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1821">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1821">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1822">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1822">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1823">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1823">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1824">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1824">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1825">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1825">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1826">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1826">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1827">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1827">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1828"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1828"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1829">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1829">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, string Value, long RecordNumber = -1, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, string Value, int64 RecordNumber, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.String,System.Int64,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As String, Optional RecordNumber As Long = -1, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1830">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1830">Required.</span></span> <span data-ttu-id="c583d-1831">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1831">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1832">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1832">Required.</span></span> <span data-ttu-id="c583d-1833">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1833">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1834">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1834">Optional.</span></span> <span data-ttu-id="c583d-1835">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1835">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c583d-1836">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1836">Optional.</span></span> <span data-ttu-id="c583d-1837">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1837">Applies only when writing a string.</span></span> <span data-ttu-id="c583d-1838">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1838">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="c583d-1839">Значение по умолчанию: <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1839">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c583d-1840">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1840">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1841">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1841">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1842">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1842">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />..</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1843">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1843">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1844">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1844">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1845">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1845">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1846">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1846">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1847">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1847">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1848">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1848">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1849">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1849">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1850">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1850">Random Mode</span></span>  
 <span data-ttu-id="c583d-1851">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1851">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1852">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1852">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1853">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1853">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1854">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1854">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1855">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1855">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1856">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1856">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1857">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1857">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1858">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1858">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1859">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1859">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1860">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1860">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1861">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1861">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1862">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1862">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1863">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1863">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1864">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1864">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1865">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1865">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1866">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1866">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1867">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1867">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1868">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1868">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1869">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1869">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1870">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1870">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1871">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1871">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1872">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1872">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1873">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1873">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1874">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1874">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1875">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1875">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1876">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1876">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1877">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1877">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1878">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1878">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1879">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1879">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1880">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1880">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1881">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1881">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1882">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1882">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1883">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1883">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1884">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1884">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1885">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1885">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1886">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1886">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1887">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1887">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1888">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1888">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1889">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1889">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1890">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1890">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1891"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1891"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1892">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1892">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePut">
      <MemberSignature Language="C#" Value="public static void FilePut (int FileNumber, Array Value, long RecordNumber = -1, bool ArrayIsDynamic = false, bool StringIsFixedLength = false);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePut(int32 FileNumber, class System.Array Value, int64 RecordNumber, bool ArrayIsDynamic, bool StringIsFixedLength) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePut(System.Int32,System.Array,System.Int64,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePut (FileNumber As Integer, Value As Array, Optional RecordNumber As Long = -1, Optional ArrayIsDynamic As Boolean = false, Optional StringIsFixedLength As Boolean = false)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Array" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
        <Parameter Name="ArrayIsDynamic" Type="System.Boolean" />
        <Parameter Name="StringIsFixedLength" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1893">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1893">Required.</span></span> <span data-ttu-id="c583d-1894">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1894">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1895">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1895">Required.</span></span> <span data-ttu-id="c583d-1896">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1896">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1897">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1897">Optional.</span></span> <span data-ttu-id="c583d-1898">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1898">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <param name="ArrayIsDynamic"><span data-ttu-id="c583d-1899">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1899">Optional.</span></span> <span data-ttu-id="c583d-1900">Применяется только при записи массива.</span><span class="sxs-lookup"><span data-stu-id="c583d-1900">Applies only when writing an array.</span></span> <span data-ttu-id="c583d-1901">Указывает, нужно ли обрабатывать массив как динамический, и записывать ли дескриптор массива для строки, определяющий ее длину.</span><span class="sxs-lookup"><span data-stu-id="c583d-1901">Specifies whether the array is to be treated as dynamic, and whether to write an array descriptor for the string that describes the length.</span></span></param>
        <param name="StringIsFixedLength"><span data-ttu-id="c583d-1902">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1902">Optional.</span></span> <span data-ttu-id="c583d-1903">Используется только при записи строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1903">Applies only when writing a string.</span></span> <span data-ttu-id="c583d-1904">Указывает, записывать ли в файл двухбайтовый дескриптор длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1904">Specifies whether to write a two-byte string length descriptor for the string to the file.</span></span> <span data-ttu-id="c583d-1905">Значение по умолчанию: <see langword="False" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1905">The default is <see langword="False" />.</span></span></param>
        <summary><span data-ttu-id="c583d-1906">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1906">Writes data from a variable to a disk file.</span></span> <span data-ttu-id="c583d-1907">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePut" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1907">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePut" />.</span></span> <span data-ttu-id="c583d-1908">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1908">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1909">`FilePut` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1909">`FilePut` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1910">Данные, записанные с использованием `FilePut`, обычно считываются с помощью `FileGet`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1910">Data written with `FilePut` is usually read from a file by using `FileGet`.</span></span>  
  
 <span data-ttu-id="c583d-1911">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1911">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1912">Если не указан `RecordNumber`, далее запись или байт после последнего `FileGet` или `FilePut` функцию или на который указывает последний `Seek` написана функция.</span><span class="sxs-lookup"><span data-stu-id="c583d-1912">If you omit `RecordNumber`, the next record or byte after the last `FileGet` or `FilePut` function or pointed to by the last `Seek` function is written.</span></span>  
  
 <span data-ttu-id="c583d-1913">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1913">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1914">`FilePut` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1914">`FilePut` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1915">Если вы используете `StringIsFixedLength`  =  `True` с `FilePut`, вы должны делать то же самое с `FileGet`, и убедитесь, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1915">If you use `StringIsFixedLength` = `True` with `FilePut`, you have to do the same with `FileGet`, and you have to make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1916">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1916">Random Mode</span></span>  
 <span data-ttu-id="c583d-1917">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1917">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1918">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePut` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1918">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePut` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1919">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1919">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1920">Поскольку нельзя определить объем данных заполнения с достаточной точностью, обычно является хорошим длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1920">Because the amount of padding data cannot be determined with any certainty, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1921">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, будет создано исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1921">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception will be thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1922">Если строка, записываемая переменная `FilePut` записывает двухбайтовый дескриптор, содержащий длину строки, а затем записывает данные, хранящиеся в переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1922">If the variable being written is a string, `FilePut` writes a two-byte descriptor that contains the string length, and then writes the data that goes into the variable.</span></span> <span data-ttu-id="c583d-1923">Таким образом, длина записи, заданная параметром `RecordLength` предложения в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1923">Therefore, the record length specified by the `RecordLength` clause in the `FileOpen` function must be at least two bytes greater than the actual length of the string.</span></span>  
  
-   <span data-ttu-id="c583d-1924">Если записываемая переменная является объектом, содержащим числовой тип, `FilePut` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1924">If the variable being written is an object that contains a numeric type, `FilePut` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1925">Например, при записи объекта, содержащий целое число, `FilePut` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1925">For example, when writing an object that contains an integer, `FilePut` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1926">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1926">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1927">Если записываемая переменная является объектом, содержащим строку, `FilePut` записывает двухбайтовый дескриптор `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1927">If the variable being written is an object that contains a string, `FilePut` writes a two byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1928">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1928">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1929">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1929">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1930">Если записываемая переменная является массивом, имеется выбор записывать дескриптор с указанием размера и размерности массива или нет.</span><span class="sxs-lookup"><span data-stu-id="c583d-1930">If the variable being written is an array, you have a choice as to whether or not to write a descriptor for the size and dimensions of the array.</span></span> <span data-ttu-id="c583d-1931">Visual Basic 6.0 и более ранних версиях записывает дескриптор файла для динамического массива, но не для массива фиксированного размера.</span><span class="sxs-lookup"><span data-stu-id="c583d-1931">Visual Basic 6.0 and earlier versions write the file descriptor for a dynamic array but not for a fixed-size array.</span></span> <span data-ttu-id="c583d-1932">Visual Basic 2005 по умолчанию дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1932">Visual Basic 2005 defaults to not writing the descriptor.</span></span> <span data-ttu-id="c583d-1933">Чтобы записать дескриптора, задайте `ArrayIsDynamic` параметр `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1933">To write the descriptor, set the `ArrayIsDynamic` parameter to `True`.</span></span> <span data-ttu-id="c583d-1934">При записи массива, вы должны соответствовать способу, который будет считываться массива; Если массив будет читаться с дескриптором, необходимо написать дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1934">When writing the array, you have to match the way the array will be read; if it will be read with the descriptor, you have to write the descriptor.</span></span> <span data-ttu-id="c583d-1935">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1935">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1936">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1936">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span> <span data-ttu-id="c583d-1937">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1937">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1938">Например, следующее объявление массива требуется 218 байтов при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1938">For example, the following array declaration requires 218 bytes when the array is written to disk.</span></span>  
  
     [!code-vb[VbVbalrCatRef#43](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#43)]  
  
-   <span data-ttu-id="c583d-1939">В случае любого другого типа (не является строкой переменной длины или объект), записываемая переменная `FilePut` записывает только данные переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1939">If the variable being written is any other type of variable (not a variable-length string or an object), `FilePut` writes only the variable data.</span></span> <span data-ttu-id="c583d-1940">Длина записи, указанная по `RecordLength` предложения в `FileOpen` функция должна быть больше или равна длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1940">The record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the length of the data being written.</span></span>  
  
-   <span data-ttu-id="c583d-1941">`FilePut` Записывает элементы структуры, как если бы каждый были по отдельности, тем исключением, что между элементами не пишутся.</span><span class="sxs-lookup"><span data-stu-id="c583d-1941">`FilePut` writes elements of structures as if each were written individually, except there is no padding between elements.</span></span> <span data-ttu-id="c583d-1942">`VBFixedString` Атрибут может применяться к строковым полям в структурах, чтобы указать размер строки при записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1942">The `VBFixedString` attribute can be applied to string fields in the structures to indicate the size of the string when written to disk.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="c583d-1943">Строка поля, содержащие больше байт, чем указано в параметре `VBFixedString` атрибут усекаются при записи на диск,</span><span class="sxs-lookup"><span data-stu-id="c583d-1943">String fields that have more bytes than specified by the `VBFixedString` attribute are truncated when written to disk,</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1944">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1944">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1945">Для файлов, открытых в `Binary` режиме, большую часть `Random` применяются правила режиме, за некоторыми исключениями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1945">For files opened in `Binary` mode, most of the `Random` mode rules apply, with some exceptions.</span></span> <span data-ttu-id="c583d-1946">Следующие правила для файлов, открытых в `Binary` режиме отличаются от правил для `Random` режим:</span><span class="sxs-lookup"><span data-stu-id="c583d-1946">The following rules for files opened in `Binary` mode differ from the rules for `Random` mode:</span></span>  
  
-   <span data-ttu-id="c583d-1947">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1947">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1948">`FilePut` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1948">`FilePut` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
-   <span data-ttu-id="c583d-1949">Для любого массива, кроме массива в структуре `FilePut` записывает только данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1949">For any array other than an array in a structure, `FilePut` writes only the data.</span></span> <span data-ttu-id="c583d-1950">Дескриптор не записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-1950">No descriptor is written.</span></span>  
  
-   <span data-ttu-id="c583d-1951">`FilePut` Записывает строки переменной длины, которые не являются частью структуры дескриптор длиной 2 байта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1951">`FilePut` writes variable-length strings that are not elements of structures without the two-byte length descriptor.</span></span> <span data-ttu-id="c583d-1952">Число записанных байтов равно количеству знаков в строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-1952">The number of bytes written equals the number of characters in the string.</span></span> <span data-ttu-id="c583d-1953">Например следующие инструкции записывают 11 байтов в файл номер 1:</span><span class="sxs-lookup"><span data-stu-id="c583d-1953">For example, the following statements write 11 bytes to file number 1:</span></span>  
  
     [!code-vb[VbVbalrCatRef#44](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#44)]  
  
-   <span data-ttu-id="c583d-1954">Запись в файл с помощью `FilePut` функция требует `Write` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-1954">Writing to a file by using the `FilePut` function requires `Write` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1955">В этом примере используется `FilePut` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1955">This example uses the `FilePut` function to write data to a file.</span></span> <span data-ttu-id="c583d-1956">Пять записей структуры `Person` записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1956">Five records of the structure `Person` are written to the file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#42](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-1957"><paramref name="RecordNumber" /> &lt; 1 и не равно –1.</span><span class="sxs-lookup"><span data-stu-id="c583d-1957"><paramref name="RecordNumber" /> &lt; 1 and not equal to -1.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-1958">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1958">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileGetObject(System.Int32,System.Object@,System.Int64)" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FilePutObject">
      <MemberSignature Language="C#" Value="public static void FilePutObject (int FileNumber, object Value, long RecordNumber = -1);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FilePutObject(int32 FileNumber, object Value, int64 RecordNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FilePutObject(System.Int32,System.Object,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FilePutObject (FileNumber As Integer, Value As Object, Optional RecordNumber As Long = -1)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object" />
        <Parameter Name="RecordNumber" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1959">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1959">Required.</span></span> <span data-ttu-id="c583d-1960">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1960">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-1961">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1961">Required.</span></span> <span data-ttu-id="c583d-1962">Допустимое имя переменной, содержащей данные для записи на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-1962">Valid variable name that contains data written to disk.</span></span></param>
        <param name="RecordNumber"><span data-ttu-id="c583d-1963">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-1963">Optional.</span></span> <span data-ttu-id="c583d-1964">Номер записи (файлы, открытые в режиме <see langword="Random" />) или номер байта (файлы, открытые в режиме <see langword="Binary" />), с которого начинается запись.</span><span class="sxs-lookup"><span data-stu-id="c583d-1964">Record number (<see langword="Random" /> mode files) or byte number (<see langword="Binary" /> mode files) at which writing starts.</span></span></param>
        <summary><span data-ttu-id="c583d-1965">Записывает значения переменных в файл на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-1965">Writes data from a variable to a disk file.</span></span>  <span data-ttu-id="c583d-1966">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FilePutObject" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1966">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FilePutObject" />.</span></span> <span data-ttu-id="c583d-1967">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-1967">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-1968">`FilePutObject` Функция используется вместо `FilePut` во избежание неоднозначности во время компиляции, если тип `Object` вместо передается другого типа, таких как `Integer`, `Long`, `Short`, и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1968">The `FilePutObject` function is used instead of `FilePut` to avoid ambiguities at compile time if type `Object` is passed instead of another type, such as `Integer`, `Long`, `Short`, and so forth.</span></span>  
  
 <span data-ttu-id="c583d-1969">`FilePutObject` Записывает и читает дескрипторы, которые описывают объект.</span><span class="sxs-lookup"><span data-stu-id="c583d-1969">`FilePutObject` writes and reads descriptors that describe the object.</span></span> <span data-ttu-id="c583d-1970">Если требуется записать `Variant` типа `FilePutObject` является обязательным.</span><span class="sxs-lookup"><span data-stu-id="c583d-1970">If you intend to write out the `Variant` type, `FilePutObject` is required.</span></span> <span data-ttu-id="c583d-1971">Если вы сомневаетесь, при использовании объекта для второго параметра, рекомендуется всегда использовать `FilePutObject` и `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1971">When in doubt, if you are using an object for the second parameter, we recommend that you always use `FilePutObject` and `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c583d-1972">`FilePutObject` допустимо только в `Random` и `Binary` режим.</span><span class="sxs-lookup"><span data-stu-id="c583d-1972">`FilePutObject` is valid only in `Random` and `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-1973">Данные, записанные с использованием `FilePutObject`, обычно считываются с помощью `FileGetObject`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1973">Data written with `FilePutObject` is usually read from a file by using `FileGetObject`.</span></span>  
  
 <span data-ttu-id="c583d-1974">Первая запись или байт в файле находится в позиции 1, вторая запись или байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-1974">The first record or byte in a file is at position 1, the second record or byte is at position 2, and so on.</span></span> <span data-ttu-id="c583d-1975">Если не указан `RecordNumber`, `FilePutObject` записывает Далее запись или байт после последнего `FileGetObject` или `FilePutObject` функции (или запись или байт, на который указывает последний `Seek` функции).</span><span class="sxs-lookup"><span data-stu-id="c583d-1975">If you omit `RecordNumber`, `FilePutObject` writes the next record or byte after the last `FileGetObject` or `FilePutObject` function (or the record or byte pointed to by the last `Seek` function).</span></span>  
  
 <span data-ttu-id="c583d-1976">`StringIsFixedLength` Аргумент управляет ли функция интерпретировать строку как фиксированной или переменной длины.</span><span class="sxs-lookup"><span data-stu-id="c583d-1976">The `StringIsFixedLength` argument controls whether the function interprets strings as variable or fixed length.</span></span> <span data-ttu-id="c583d-1977">`FilePutObject` не записывает дескриптор длины, если аргумент является `True`.</span><span class="sxs-lookup"><span data-stu-id="c583d-1977">`FilePutObject` does not write the length descriptor when the argument is `True`.</span></span> <span data-ttu-id="c583d-1978">Если вы используете `StringIsFixedLength`  =  `True` с `FilePutObject`, вы должны делать то же самое с `FileGetObject`, и Кроме того, необходимо убедиться, что строка инициализируется до длины ожидаемого.</span><span class="sxs-lookup"><span data-stu-id="c583d-1978">If you use `StringIsFixedLength` = `True` with `FilePutObject`, you have to do the same with `FileGetObject`, and you must also make sure that the string is initialized to the length expected.</span></span>  
  
## <a name="random-mode"></a><span data-ttu-id="c583d-1979">Режим произвольного доступа</span><span class="sxs-lookup"><span data-stu-id="c583d-1979">Random Mode</span></span>  
 <span data-ttu-id="c583d-1980">Для файлов, открытых в `Random` режиме, применяются следующие правила:</span><span class="sxs-lookup"><span data-stu-id="c583d-1980">For files opened in `Random` mode, the following rules apply:</span></span>  
  
-   <span data-ttu-id="c583d-1981">Если длина записываемых данных меньше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции `FilePutObject` последующих записей границы.</span><span class="sxs-lookup"><span data-stu-id="c583d-1981">If the length of the data being written is less than the length specified in the `RecordLength` clause of the `FileOpen` function, `FilePutObject` writes subsequent records on record-length boundaries.</span></span> <span data-ttu-id="c583d-1982">Расстояние между концом одной записи и началом следующей записи заполняется существующим содержимым буфера файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-1982">The space between the end of one record and the start of the next record is padded with the existing contents of the file buffer.</span></span> <span data-ttu-id="c583d-1983">Поскольку объем данных заполнения не может точно определить, рекомендуется обычно длина записи соответствует длине записываемых данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-1983">Because the amount of padding data cannot be precisely determined, it is generally a good idea to have the record length match the length of the data being written.</span></span> <span data-ttu-id="c583d-1984">Если длина записываемых данных больше, чем длина, указанная в `RecordLength` предложения `FileOpen` функции, вызывается исключение.</span><span class="sxs-lookup"><span data-stu-id="c583d-1984">If the length of the data being written is greater than the length specified in the `RecordLength` clause of the `FileOpen` function, an exception is thrown.</span></span>  
  
-   <span data-ttu-id="c583d-1985">Если записываемая переменная является объектом, содержащим числовой тип, `FilePutObject` записывает два байта, идентифицирующие `VarType` объекта и затем записывает переменную.</span><span class="sxs-lookup"><span data-stu-id="c583d-1985">If the variable being written is an object that contains a numeric type, `FilePutObject` writes two bytes identifying the `VarType` of the object and then writes the variable.</span></span> <span data-ttu-id="c583d-1986">Например, при записи объекта, содержащий целое число, `FilePutObject` записывает шесть байтов: два байта, идентифицирующие объект как `VarType(3)` (`Integer`) и четыре байта, содержащие данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1986">For example, when writing an object that contains an integer, `FilePutObject` writes six bytes: two bytes that identify the object as `VarType(3)` (`Integer`) and four bytes that contain the data.</span></span> <span data-ttu-id="c583d-1987">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере на два байта больше, чем фактическое число байтов, необходимое для хранения переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-1987">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least two bytes greater than the actual number of bytes required to store the variable.</span></span>  
  
-   <span data-ttu-id="c583d-1988">Если записываемая переменная является объектом, содержащим строку, `FilePutObject` записывает двухбайтовый `VarType(8)` объекта, двухбайтовый дескриптор, указывающий длину строки, а затем сами данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-1988">If the variable being written is an object that contains a string, `FilePutObject` writes a two-byte descriptor identifying the `VarType(8)` of the object, a two-byte descriptor indicating the length of the string, and then writes the string data.</span></span> <span data-ttu-id="c583d-1989">Длина записи, указанная по `RecordLength` параметр в `FileOpen` функция должна быть по крайней мере четыре байта больше, чем фактическая длина строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1989">The record length specified by the `RecordLength` parameter in the `FileOpen` function must be at least four bytes greater than the actual length of the string.</span></span> <span data-ttu-id="c583d-1990">Если вы хотите записать строку без дескриптора, следует передать `True` для `StringIsFixedLength` параметр и считываются должна быть правильной длины строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-1990">If you want to put a string without the descriptor, you should pass `True` to the `StringIsFixedLength` parameter, and the string you read into should be the correct length.</span></span>  
  
-   <span data-ttu-id="c583d-1991">Если записываемая переменная является массивом, то длина записи, указанная с `RecordLength` предложения в `FileOpen` функция должна быть больше или равно количеству байтов, необходимых для записи данных массива и его дескриптора.</span><span class="sxs-lookup"><span data-stu-id="c583d-1991">If the variable being written is an array, then the record length specified by the `RecordLength` clause in the `FileOpen` function must be greater than or equal to the sum of all the bytes required to write the array data and the array descriptor.</span></span> <span data-ttu-id="c583d-1992">Дескриптор указывает ранг массива, размер и нижнюю границу для каждого ранга.</span><span class="sxs-lookup"><span data-stu-id="c583d-1992">The descriptor specifies the rank of the array, the size, and the lower bounds for each rank.</span></span> <span data-ttu-id="c583d-1993">Его длина равна 2 плюс 8 раз размерность: (2 + 8 \* NumberOfDimensions).</span><span class="sxs-lookup"><span data-stu-id="c583d-1993">Its length equals 2 plus 8 times the number of dimensions: (2 + 8 \* NumberOfDimensions).</span></span>  
  
## <a name="binary-mode"></a><span data-ttu-id="c583d-1994">Двоичный режим</span><span class="sxs-lookup"><span data-stu-id="c583d-1994">Binary Mode</span></span>  
 <span data-ttu-id="c583d-1995">Для файлов, открытых в `Binary` режиме все `Random` применяются правила режиме, за исключением:</span><span class="sxs-lookup"><span data-stu-id="c583d-1995">For files opened in `Binary` mode, all the `Random` mode rules apply, except:</span></span>  
  
-   <span data-ttu-id="c583d-1996">`RecordLength` Предложения в `FileOpen` функция не имеет эффекта.</span><span class="sxs-lookup"><span data-stu-id="c583d-1996">The `RecordLength` clause in the `FileOpen` function has no effect.</span></span> <span data-ttu-id="c583d-1997">`FilePutObject` Записывает все переменные на диск последовательно, то есть без заполнения между записями.</span><span class="sxs-lookup"><span data-stu-id="c583d-1997">`FilePutObject` writes all variables to disk contiguously, that is, without padding between records.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-1998">В этом примере используется `FilePutObject` функции для записи строки в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-1998">This example uses the `FilePutObject` function to write a string to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#54](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="FileWidth">
      <MemberSignature Language="C#" Value="public static void FileWidth (int FileNumber, int RecordWidth);" />
      <MemberSignature Language="ILAsm" Value=".method public static void FileWidth(int32 FileNumber, int32 RecordWidth) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub FileWidth (FileNumber As Integer, RecordWidth As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void FileWidth(int FileNumber, int RecordWidth);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="RecordWidth" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-1999">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-1999">Required.</span></span> <span data-ttu-id="c583d-2000">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2000">Any valid file number.</span></span></param>
        <param name="RecordWidth"><span data-ttu-id="c583d-2001">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2001">Required.</span></span> <span data-ttu-id="c583d-2002">Числовое выражение в диапазоне от 0 до 255 включительно, которое показывает, сколько знаков появится в строке перед началом новой строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2002">Numeric expression in the range 0–255, inclusive, which indicates how many characters appear on a line before a new line is started.</span></span> <span data-ttu-id="c583d-2003">Если параметр <c>RecordWidth</c> равен 0, ограничения на длину строки не устанавливаются.</span><span class="sxs-lookup"><span data-stu-id="c583d-2003">If <c>RecordWidth</c> equals 0, there is no limit to the length of a line.</span></span> <span data-ttu-id="c583d-2004">Значение по умолчанию для параметра <c>RecordWidth</c> равно 0.</span><span class="sxs-lookup"><span data-stu-id="c583d-2004">The default value for <c>RecordWidth</c> is 0.</span></span></param>
        <summary><span data-ttu-id="c583d-2005">Присваивает ширину строки вывода в файле, открытом функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2005">Assigns an output line width to a file opened by using the <see langword="FileOpen" /> function.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c583d-2006">В этом примере используется `FileWidth` функцию для задания ширины строки вывода для файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2006">This example uses the `FileWidth` function to set the output line width for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2007">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2007">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="FreeFile">
      <MemberSignature Language="C#" Value="public static int FreeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 FreeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.FreeFile" />
      <MemberSignature Language="VB.NET" Value="Public Function FreeFile () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int FreeFile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c583d-2008">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2008">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></summary>
        <returns><span data-ttu-id="c583d-2009">Возвращает значение типа <see langword="Integer" />, представляющее следующий номер файла, доступный для использования функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2009">Returns an <see langword="Integer" /> value that represents the next file number available for use by the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2010">Используйте `FreeFile` для номера файла, который уже не используется.</span><span class="sxs-lookup"><span data-stu-id="c583d-2010">Use `FreeFile` to supply a file number that is not already being used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2011">В этом примере используется `FreeFile` функция, возвращающая номер следующего файла доступны.</span><span class="sxs-lookup"><span data-stu-id="c583d-2011">This example uses the `FreeFile` function to return the next available file number.</span></span> <span data-ttu-id="c583d-2012">Для вывода в цикле открывается пять файлов и образцами данных записывается для каждого.</span><span class="sxs-lookup"><span data-stu-id="c583d-2012">Five files are opened for output within the loop, and some sample data is written to each.</span></span>  
  
 [!code-vb[VbVbalrCatRef#55](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#55)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2013">Используется больше 255 файлов.</span><span class="sxs-lookup"><span data-stu-id="c583d-2013">More than 255 files are in use.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="GetAttr">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.FileAttribute GetAttr (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.FileAttribute GetAttr(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAttr (PathName As String) As FileAttribute" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::FileAttribute GetAttr(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.FileAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c583d-2014">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2014">Required.</span></span> <span data-ttu-id="c583d-2015">Выражение типа <see langword="String" />, определяющее имя файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2015"><see langword="String" /> expression that specifies a file, directory, or folder name.</span></span> <span data-ttu-id="c583d-2016">Параметр <c>PathName</c> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2016"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c583d-2017">Возвращает значение <see langword="FileAttribute" />, представляющее атрибуты файла, каталога или папки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2017">Returns a <see langword="FileAttribute" /> value that represents the attributes of a file, directory, or folder.</span></span> <span data-ttu-id="c583d-2018">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="FileAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2018">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="FileAttribute" />.</span></span> <span data-ttu-id="c583d-2019">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2019">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c583d-2020">Значение, возвращаемое функцией <see langword="GetAttr" />, является суммой следующих значений перечисления:</span><span class="sxs-lookup"><span data-stu-id="c583d-2020">The value returned by <see langword="GetAttr" /> is the sum of the following enumeration values:</span></span>  
  
 <span data-ttu-id="c583d-2021"><list type="table"><item><term> Значение</span><span class="sxs-lookup"><span data-stu-id="c583d-2021"><list type="table"><item><term> Value</span></span>  
  
 <span data-ttu-id="c583d-2022"></term><description> Константа</span><span class="sxs-lookup"><span data-stu-id="c583d-2022"></term><description> Constant</span></span>  
  
 <span data-ttu-id="c583d-2023"></description><description> Описание</span><span class="sxs-lookup"><span data-stu-id="c583d-2023"></description><description> Description</span></span>  
  
 <span data-ttu-id="c583d-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Нормальный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2024"></description></item><item><term><see langword="Normal" /></term><description><see langword="vbNormal" /></description><description> Normal.</span></span>  
  
 <span data-ttu-id="c583d-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-2025"></description></item><item><term><see langword="ReadOnly" /></term><description><see langword="vbReadOnly" /></description><description> Read-only.</span></span>  
  
 <span data-ttu-id="c583d-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Скрытый.</span><span class="sxs-lookup"><span data-stu-id="c583d-2026"></description></item><item><term><see langword="Hidden" /></term><description><see langword="vbHidden" /></description><description> Hidden.</span></span>  
  
 <span data-ttu-id="c583d-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> Системный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2027"></description></item><item><term><see langword="System" /></term><description><see langword="vbSystem" /></description><description> System file.</span></span>  
  
 <span data-ttu-id="c583d-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2028"></description></item><item><term><see langword="Directory" /></term><description><see langword="vbDirectory" /></description><description> Directory or folder.</span></span>  
  
 <span data-ttu-id="c583d-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c583d-2029"></description></item><item><term><see langword="Archive" /></term><description><see langword="vbArchive" /></description><description> File has changed since last backup.</span></span>  
  
 <span data-ttu-id="c583d-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c583d-2030"></description></item><item><term><see langword="Alias" /></term><description><see langword="vbAlias" /></description><description> File has a different name.</span></span>  
  
 </description></item></list><block subset="none" type="note"><para>  
 <span data-ttu-id="c583d-2031">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-2031">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="c583d-2032">Эти имена можно использовать в любом месте кода вместо самих значений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2032">The names can be used anywhere in your code in place of the actual values.</span></span>  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2033">Чтобы определить, какие атрибуты установлены, используйте `And` оператор для выполнения побитового сравнения значения, возвращенного `GetAttr` функцией и значения атрибута файла необходимо.</span><span class="sxs-lookup"><span data-stu-id="c583d-2033">To determine which attributes are set, use the `And` operator to perform a bitwise comparison of the value returned by the `GetAttr` function and the value of the individual file attribute you want.</span></span> <span data-ttu-id="c583d-2034">Если результат не равен нулю, этот атрибут имеет значение для указанного файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2034">If the result is not zero, that attribute is set for the named file.</span></span> <span data-ttu-id="c583d-2035">Например, возвращаемое значение из следующих `And` выражение является нуль, если `Archive` не задан атрибут:</span><span class="sxs-lookup"><span data-stu-id="c583d-2035">For example, the return value of the following `And` expression is zero if the `Archive` attribute is not set:</span></span>  
  
```vb  
Result = GetAttr(FName) And vbArchive  
```  
  
 <span data-ttu-id="c583d-2036">Если возвращается ненулевое значение `Archive` атрибут имеет значение.</span><span class="sxs-lookup"><span data-stu-id="c583d-2036">A nonzero value is returned if the `Archive` attribute is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2037">В этом примере используется `GetAttr` функцию, чтобы определить атрибуты файла и папки или каталога.</span><span class="sxs-lookup"><span data-stu-id="c583d-2037">This example uses the `GetAttr` function to determine the attributes of a file and directory or folder.</span></span>  
  
 [!code-vb[VbVbalrCatRef#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c583d-2038">Параметр <paramref name="Pathname" /> недопустим или содержит подстановочный знак.</span><span class="sxs-lookup"><span data-stu-id="c583d-2038"><paramref name="Pathname" /> is invalid or contains wildcards.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-2039">Указанный файл не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2039">Target file does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Input">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-2040">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2040">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref bool Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, bool&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, bool % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2041">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2041">Required.</span></span> <span data-ttu-id="c583d-2042">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2042">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2043">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2043">Required.</span></span> <span data-ttu-id="c583d-2044">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2044">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2045">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2045">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2046">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2046">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2047">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2047">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2048">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2048">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2049">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2049">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2050">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2050">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2051">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2051">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2052">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2052">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2053">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2053">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2054">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2054">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2055">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2055">Data</span></span>|<span data-ttu-id="c583d-2056">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2056">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2057">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2057">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2058">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2058">Empty</span></span>|  
|<span data-ttu-id="c583d-2059">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2059">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2060">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2060">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2061">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2061">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2062">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2062">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2063">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2063">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2064">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2064">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2065">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2065">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2066">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2066">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2067">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2067">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2068">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2068">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2069">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2069">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2070">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2070">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2071">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2071">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2072">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2072">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref byte Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, unsigned int8&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Byte@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Byte % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Byte&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2073">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2073">Required.</span></span> <span data-ttu-id="c583d-2074">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2074">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2075">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2075">Required.</span></span> <span data-ttu-id="c583d-2076">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2076">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2077">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2077">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2078">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2078">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2079">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2079">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2080">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2080">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2081">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2081">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2082">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2082">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2083">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2083">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2084">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2084">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2085">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2085">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2086">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2086">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2087">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2087">Data</span></span>|<span data-ttu-id="c583d-2088">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2088">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2089">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2089">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2090">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2090">Empty</span></span>|  
|<span data-ttu-id="c583d-2091">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2091">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2092">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2092">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2093">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2093">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2094">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2094">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2095">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2095">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2096">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2096">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2097">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2097">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2098">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2098">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2099">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2099">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2100">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2100">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2101">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2101">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2102">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2102">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2103">В этом примере предполагается, что `TestFile` — это файл с несколькими строками данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2103">This example assumes that `TestFile` is a file that has some lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2104">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2104">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, char&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Char@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, char % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Char&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2105">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2105">Required.</span></span> <span data-ttu-id="c583d-2106">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2106">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2107">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2107">Required.</span></span> <span data-ttu-id="c583d-2108">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2108">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2109">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2109">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2110">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2110">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2111">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2111">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2112">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2112">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2113">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2113">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2114">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2114">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2115">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2115">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2116">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2116">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2117">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2117">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2118">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2118">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2119">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2119">Data</span></span>|<span data-ttu-id="c583d-2120">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2120">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2121">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2121">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2122">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2122">Empty</span></span>|  
|<span data-ttu-id="c583d-2123">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2123">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2124">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2124">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2125">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2125">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2126">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2126">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2127">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2127">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2128">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2128">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2129">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2129">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2130">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2130">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2131">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2131">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2132">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2132">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2133">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2133">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2134">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2134">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2135">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2135">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2136">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2136">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref DateTime Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.DateTime&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.DateTime@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, DateTime % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.DateTime&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2137">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2137">Required.</span></span> <span data-ttu-id="c583d-2138">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2138">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2139">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2139">Required.</span></span> <span data-ttu-id="c583d-2140">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2140">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2141">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2141">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2142">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2142">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2143">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2143">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2144">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2144">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2145">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2145">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2146">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2146">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2147">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2147">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2148">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2148">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2149">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2149">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2150">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2150">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2151">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2151">Data</span></span>|<span data-ttu-id="c583d-2152">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2152">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2153">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2153">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2154">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2154">Empty</span></span>|  
|<span data-ttu-id="c583d-2155">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2155">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2156">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2156">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2157">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2157">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2158">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2158">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2159">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2159">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2160">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2160">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2161">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2161">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2162">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2162">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2163">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2163">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2164">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2164">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2165">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2165">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2166">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2166">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2167">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2167">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2168">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2168">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref decimal Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, valuetype System.Decimal&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Decimal@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Decimal % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Decimal&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2169">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2169">Required.</span></span> <span data-ttu-id="c583d-2170">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2170">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2171">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2171">Required.</span></span> <span data-ttu-id="c583d-2172">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2172">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2173">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2173">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2174">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2174">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2175">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2175">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2176">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2176">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2177">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2177">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2178">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2178">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2179">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2179">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2180">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2180">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2181">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2181">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2182">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2182">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2183">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2183">Data</span></span>|<span data-ttu-id="c583d-2184">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2184">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2185">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2185">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2186">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2186">Empty</span></span>|  
|<span data-ttu-id="c583d-2187">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2187">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2188">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2188">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2189">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2189">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2190">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2190">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2191">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2191">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2192">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2192">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2193">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2193">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2194">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2194">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2195">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2195">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2196">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2196">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2197">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2197">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2198">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2198">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2199">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2199">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2200">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2200">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref double Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, double % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Double&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2201">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2201">Required.</span></span> <span data-ttu-id="c583d-2202">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2202">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2203">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2203">Required.</span></span> <span data-ttu-id="c583d-2204">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2204">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2205">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2205">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2206">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2206">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2207">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2207">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2208">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2208">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2209">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2209">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2210">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2210">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2211">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2211">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2212">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2212">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2213">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2213">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2214">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2214">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2215">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2215">Data</span></span>|<span data-ttu-id="c583d-2216">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2216">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2217">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2217">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2218">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2218">Empty</span></span>|  
|<span data-ttu-id="c583d-2219">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2219">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2220">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2220">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2221">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2221">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2222">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2222">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2223">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2223">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2224">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2224">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2225">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2225">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2226">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2226">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2227">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2227">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2228">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2228">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2229">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2229">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2230">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2230">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2231">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2231">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2232">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2232">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref short Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int16&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int16@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, short % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int16&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2233">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2233">Required.</span></span> <span data-ttu-id="c583d-2234">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2234">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2235">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2235">Required.</span></span> <span data-ttu-id="c583d-2236">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2236">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2237">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2237">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2238">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2238">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2239">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2239">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2240">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2240">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2241">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2241">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2242">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2242">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2243">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2243">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2244">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2244">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2245">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2245">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2246">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2246">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2247">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2247">Data</span></span>|<span data-ttu-id="c583d-2248">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2248">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2249">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2249">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2250">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2250">Empty</span></span>|  
|<span data-ttu-id="c583d-2251">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2251">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2252">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2252">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2253">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2253">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2254">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2254">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2255">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2255">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2256">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2256">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2257">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2257">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2258">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2258">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2259">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2259">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2260">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2260">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2261">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2261">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2262">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2262">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2263">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2263">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2264">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2264">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref int Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, int % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2265">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2265">Required.</span></span> <span data-ttu-id="c583d-2266">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2266">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2267">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2267">Required.</span></span> <span data-ttu-id="c583d-2268">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2268">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2269">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2269">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2270">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2270">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2271">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2271">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2272">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2272">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2273">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2273">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2274">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2274">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2275">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2275">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2276">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2276">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2277">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2277">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2278">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2278">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2279">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2279">Data</span></span>|<span data-ttu-id="c583d-2280">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2280">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2281">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2281">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2282">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2282">Empty</span></span>|  
|<span data-ttu-id="c583d-2283">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2283">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2284">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2284">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2285">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2285">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2286">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2286">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2287">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2287">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2288">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2288">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2289">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2289">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2290">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2290">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2291">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2291">For example, in the German version, if you input 3,14159, it returns only 3, since the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2292">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2292">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2293">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2293">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2294">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2294">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2295">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2295">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2296">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2296">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref long Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, int64&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Int64@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, long % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Int64&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2297">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2297">Required.</span></span> <span data-ttu-id="c583d-2298">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2298">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2299">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2299">Required.</span></span> <span data-ttu-id="c583d-2300">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2300">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2301">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2301">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2302">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2302">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2303">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2303">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2304">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2304">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2305">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2305">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2306">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2306">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2307">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2307">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2308">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2308">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2309">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2309">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2310">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2310">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2311">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2311">Data</span></span>|<span data-ttu-id="c583d-2312">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2312">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2313">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2313">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2314">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2314">Empty</span></span>|  
|<span data-ttu-id="c583d-2315">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2315">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2316">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2316">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2317">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2317">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2318">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2318">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2319">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2319">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2320">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2320">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2321">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2321">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2322">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2322">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2323">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2323">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2324">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2324">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2325">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2325">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2326">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2326">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2327">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2327">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2328">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2328">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref object Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, object&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Object@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::Object ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Object&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2329">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2329">Required.</span></span> <span data-ttu-id="c583d-2330">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2330">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2331">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2331">Required.</span></span> <span data-ttu-id="c583d-2332">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2332">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2333">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2333">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2334">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2334">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2335">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2335">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2336">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2336">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2337">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2337">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2338">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2338">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2339">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2339">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2340">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2340">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2341">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2341">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2342">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2342">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2343">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2343">Data</span></span>|<span data-ttu-id="c583d-2344">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2344">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2345">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2345">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2346">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2346">Empty</span></span>|  
|<span data-ttu-id="c583d-2347">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2347">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2348">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2348">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2349">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2349">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2350">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2350">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2351">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2351">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2352">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2352">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2353">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2353">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2354">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2354">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2355">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2355">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2356">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2356">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2357">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2357">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2358">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2358">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2359">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2359">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2360">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2360">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref float Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, float32&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.Single@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, float % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.Single&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2361">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2361">Required.</span></span> <span data-ttu-id="c583d-2362">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2362">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2363">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2363">Required.</span></span> <span data-ttu-id="c583d-2364">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2364">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2365">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2365">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2366">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2366">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2367">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2367">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2368">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2368">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2369">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2369">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2370">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2370">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2371">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2371">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2372">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2372">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2373">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2373">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2374">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2374">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2375">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2375">Data</span></span>|<span data-ttu-id="c583d-2376">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2376">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2377">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2377">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2378">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2378">Empty</span></span>|  
|<span data-ttu-id="c583d-2379">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2379">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2380">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2380">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2381">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2381">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2382">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2382">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2383">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2383">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2384">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2384">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2385">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2385">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2386">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2386">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2387">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2387">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2388">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2388">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2389">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2389">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2390">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2390">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2391">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2391">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2392">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2392">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Input">
      <MemberSignature Language="C#" Value="public static void Input (int FileNumber, ref string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Input(int32 FileNumber, string&amp; Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Input(System.Int32,System.String@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Input (FileNumber As Integer, ByRef Value As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Input(int FileNumber, System::String ^ % Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Value" Type="System.String&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2393">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2393">Required.</span></span> <span data-ttu-id="c583d-2394">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2394">Any valid file number.</span></span></param>
        <param name="Value"><span data-ttu-id="c583d-2395">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2395">Required.</span></span> <span data-ttu-id="c583d-2396">Переменная, которой присваиваются значения, прочитанные из файла. Не может быть массивом или переменной-объектом.</span><span class="sxs-lookup"><span data-stu-id="c583d-2396">Variable that is assigned the values read from the file—cannot be an array or object variable.</span></span></param>
        <summary><span data-ttu-id="c583d-2397">Читает данные из открытого последовательного файла и присваивает данные переменным.</span><span class="sxs-lookup"><span data-stu-id="c583d-2397">Reads data from an open sequential file and assigns the data to variables.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2398">`Input` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2398">The `Input` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2399">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2399">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2400">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2400">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2401">Данные, считанные с `Input` обычно записываются в файл с помощью `Write`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2401">Data read with `Input` is usually written to a file by using `Write`.</span></span> <span data-ttu-id="c583d-2402">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2402">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2403">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2403">When reading from files, do not make decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2404">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic 2005.</span><span class="sxs-lookup"><span data-stu-id="c583d-2404">For example, a file that is named Form1.vb may not be a Visual Basic 2005 source file.</span></span>  
  
 <span data-ttu-id="c583d-2405">При считывании стандартную строку или числовые данные присваиваются переменным без изменений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2405">When read, standard string or numeric data is assigned to variables without modification.</span></span> <span data-ttu-id="c583d-2406">В следующей таблице показано, каким образом обрабатываются другие входные данные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2406">The following table illustrates how other input data is treated.</span></span>  
  
|<span data-ttu-id="c583d-2407">Данные</span><span class="sxs-lookup"><span data-stu-id="c583d-2407">Data</span></span>|<span data-ttu-id="c583d-2408">Значение, присвоенное переменной</span><span class="sxs-lookup"><span data-stu-id="c583d-2408">Value assigned to variable</span></span>|  
|-|-|  
|<span data-ttu-id="c583d-2409">Разделяющая запятая или пустая строка</span><span class="sxs-lookup"><span data-stu-id="c583d-2409">Delimiting comma or blank line</span></span>|<span data-ttu-id="c583d-2410">Empty</span><span class="sxs-lookup"><span data-stu-id="c583d-2410">Empty</span></span>|  
|<span data-ttu-id="c583d-2411">NULL #</span><span class="sxs-lookup"><span data-stu-id="c583d-2411">#NULL#</span></span>|`DBNull`|  
|<span data-ttu-id="c583d-2412">TRUE # или FALSE #</span><span class="sxs-lookup"><span data-stu-id="c583d-2412">#TRUE# or #FALSE#</span></span>|<span data-ttu-id="c583d-2413">`True` или `False`</span><span class="sxs-lookup"><span data-stu-id="c583d-2413">`True` or `False`</span></span>|  
|#`yyyy-mm-dd hh:mm:ss`#|<span data-ttu-id="c583d-2414">Значение даты и времени, представленного выражением</span><span class="sxs-lookup"><span data-stu-id="c583d-2414">The date and/or time represented by the expression</span></span>|  
|<span data-ttu-id="c583d-2415">#ERROR `errornumber`#</span><span class="sxs-lookup"><span data-stu-id="c583d-2415">#ERROR `errornumber`#</span></span>|<span data-ttu-id="c583d-2416">`errornumber` (переменная является объектом, помеченным как ошибка)</span><span class="sxs-lookup"><span data-stu-id="c583d-2416">`errornumber` (variable is an object tagged as an error)</span></span>|  
  
 <span data-ttu-id="c583d-2417">Если при вводе элемента данных достигнут конец файла, ввод прекращается и происходит ошибка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2417">If you reach the end of the file while you are inputting a data item, the input is stopped and an error occurs.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2418">`Input` Функция не локализовано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2418">The `Input` function is not localized.</span></span> <span data-ttu-id="c583d-2419">Например в немецкой версии, если записано 3,14159, возвращается только 3, поскольку запятая рассматривается как разделитель переменных вместо как десятичный разделитель.</span><span class="sxs-lookup"><span data-stu-id="c583d-2419">For example, in the German version, if you input 3,14159, it returns only 3, because the comma is treated as a variable separator instead of as a decimal point.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2420">Чтение из файла с помощью `Input` функция требует `Read` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2420">Reading from a file by using the `Input` function requires `Read` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2421">Дополнительные сведения см. в разделе <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2421">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2422">В этом примере используется `Input` функция для чтения данных из файла в две переменные.</span><span class="sxs-lookup"><span data-stu-id="c583d-2422">This example uses the `Input` function to read data from a file into two variables.</span></span> <span data-ttu-id="c583d-2423">В этом примере предполагается, что `TestFile` — это файл, содержащий несколько строк данных, записанный с помощью `Write` функции, каждая строка содержит строку в кавычках и число, разделенные запятыми, например: («Hello», 234).</span><span class="sxs-lookup"><span data-stu-id="c583d-2423">This example assumes that `TestFile` is a file that has several lines of data written to it using the `Write` function, each line containing a string in quotations and a number separated by a comma, for example: ("Hello", 234).</span></span>  
  
 [!code-vb[VbVbalrCatRef#35](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2424">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2424">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="InputString">
      <MemberSignature Language="C#" Value="public static string InputString (int FileNumber, int CharCount);" />
      <MemberSignature Language="ILAsm" Value=".method public static string InputString(int32 FileNumber, int32 CharCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.InputString(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function InputString (FileNumber As Integer, CharCount As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ InputString(int FileNumber, int CharCount);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="CharCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2425">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2425">Required.</span></span> <span data-ttu-id="c583d-2426">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2426">Any valid file number.</span></span></param>
        <param name="CharCount"><span data-ttu-id="c583d-2427">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2427">Required.</span></span> <span data-ttu-id="c583d-2428">Любое допустимое числовое выражение, указывающее число знаков, которые надо прочитать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2428">Any valid numeric expression specifying the number of characters to read.</span></span></param>
        <summary><span data-ttu-id="c583d-2429">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2429">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="c583d-2430">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2430">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span> <span data-ttu-id="c583d-2431">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2431">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c583d-2432">Возвращает значение <see langword="String" />, содержащее знаки из файла, открытого в режиме <see langword="Input" /> или <see langword="Binary" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2432">Returns <see langword="String" /> value that contains characters from a file opened in <see langword="Input" /> or <see langword="Binary" /> mode.</span></span> <span data-ttu-id="c583d-2433">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="InputString" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2433">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="InputString" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2434">`InputString` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2434">The `InputString` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2435">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2435">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2436">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2436">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2437">Данные, считанные с `InputString` функции обычно записываются в файл с помощью `Print` или `FilePut`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2437">Data read with the `InputString` function is usually written to a file by using `Print` or `FilePut`.</span></span> <span data-ttu-id="c583d-2438">Эту функцию можно использовать только в файлах, открытых в `Input` или `Binary` режиме.</span><span class="sxs-lookup"><span data-stu-id="c583d-2438">Use this function only with files opened in `Input` or `Binary` mode.</span></span>  
  
 <span data-ttu-id="c583d-2439">В отличие от `Input` функции `InputString` функция возвращает все символы, он считывает.</span><span class="sxs-lookup"><span data-stu-id="c583d-2439">Unlike the `Input` function, the `InputString` function returns all the characters it reads.</span></span> <span data-ttu-id="c583d-2440">Сюда входят запятые, символы возврата каретки, перевода строки, кавычки и начальные пробелы.</span><span class="sxs-lookup"><span data-stu-id="c583d-2440">This includes commas, carriage returns, line feeds, quotation marks, and leading spaces.</span></span>  
  
 <span data-ttu-id="c583d-2441">В файлах, открытых для `Binary` доступа, попытка прочитать файл с помощью `InputString` функции до `EOF` возвращает `True` приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="c583d-2441">With files opened for `Binary` access, an attempt to read through the file by using the `InputString` function until `EOF` returns `True` generates an error.</span></span> <span data-ttu-id="c583d-2442">Используйте `LOF` и `Loc` функции вместо `EOF` при чтении двоичных файлов с помощью `InputString`, или используйте `FileGet` при использовании `EOF` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2442">Use the `LOF` and `Loc` functions instead of `EOF` when you read binary files by using `InputString`, or use `FileGet` when you use the `EOF` function.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2443">При чтении из файла не принятия решений по безопасности о содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2443">When reading from files, do not make security decisions about the contents of the file based on the file name extension.</span></span> <span data-ttu-id="c583d-2444">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-2444">For example, a file named Form1.vb may not be a Visual Basic source file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2445">В этом примере используется `InputString` функция для чтения символов из файла и вывода для `Output` окна.</span><span class="sxs-lookup"><span data-stu-id="c583d-2445">This example uses the `InputString` function to read one character at a time from a file and print it to the `Output` window.</span></span> <span data-ttu-id="c583d-2446">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк образцов данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-2446">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c583d-2447"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2447"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-2448"><paramref name="CharCount" />&lt; 0 или &gt; 214.</span><span class="sxs-lookup"><span data-stu-id="c583d-2448"><paramref name="CharCount" /> &lt; 0 or &gt; 214.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Kill">
      <MemberSignature Language="C#" Value="public static void Kill (string PathName);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Kill(string PathName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Kill (PathName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Kill(System::String ^ PathName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c583d-2449">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2449">Required.</span></span> <span data-ttu-id="c583d-2450">Выражение типа <see langword="String" />, определяющее один или несколько файлов, которые должны быть удалены.</span><span class="sxs-lookup"><span data-stu-id="c583d-2450"><see langword="String" /> expression that specifies one or more file names to be deleted.</span></span> <span data-ttu-id="c583d-2451">Параметр <c>PathName</c> может содержать имя каталога или папки и имя диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2451"><c>PathName</c> can include the directory or folder, and the drive.</span></span></param>
        <summary><span data-ttu-id="c583d-2452">Удаляет файлы с диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2452">Deletes files from a disk.</span></span> <span data-ttu-id="c583d-2453">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Kill" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2453">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Kill" />.</span></span> <span data-ttu-id="c583d-2454">Для получения дополнительной информации см. <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2454">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" /> .</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2455">`Kill` поддерживает использование нескольких знаков (`*`) и одного знака (`?`) можно указать несколько файлов.</span><span class="sxs-lookup"><span data-stu-id="c583d-2455">`Kill` supports the use of multiple-character (`*`) and single-character (`?`) wildcards to specify multiple files.</span></span>  
  
 <span data-ttu-id="c583d-2456">**Примечание по безопасности** для выполнения, `Kill` функция требует `Read` и `PathDiscovery` флаги из <xref:System.Security.Permissions.FileIOPermission> должны быть предоставлены в исполняемый код.</span><span class="sxs-lookup"><span data-stu-id="c583d-2456">**Security Note** In order to execute, the `Kill` function requires `Read` and `PathDiscovery` flags of <xref:System.Security.Permissions.FileIOPermission> to be granted to the executing code.</span></span> <span data-ttu-id="c583d-2457">Дополнительные сведения см. в разделе <xref:System.Security.SecurityException> [разрешений доступа к коду](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span><span class="sxs-lookup"><span data-stu-id="c583d-2457">For more information, see <xref:System.Security.SecurityException>[Code Access Permissions](http://msdn.microsoft.com/library/e5ae402f-6dda-4732-bbe8-77296630f675)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2458">В этом примере используется `Kill` функции, чтобы удалить файл с диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2458">This example uses the `Kill` function to delete a file from a disk.</span></span>  
  
 [!code-vb[VbVbalrCatRef#60](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2459">Удаляемые файлы открыты.</span><span class="sxs-lookup"><span data-stu-id="c583d-2459">Target file(s) open.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-2460">Удаляемые файлы не найдены.</span><span class="sxs-lookup"><span data-stu-id="c583d-2460">Target file(s) not found.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c583d-2461">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2461">Permission denied.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <Member MemberName="LineInput">
      <MemberSignature Language="C#" Value="public static string LineInput (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LineInput(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LineInput(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LineInput (FileNumber As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LineInput(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2462">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2462">Required.</span></span> <span data-ttu-id="c583d-2463">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2463">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-2464">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2464">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></summary>
        <returns><span data-ttu-id="c583d-2465">Читает одну строку из открытого последовательного файла и присваивает ее переменной типа <see langword="String" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2465">Reads a single line from an open sequential file and assigns it to a <see langword="String" /> variable.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2466">`LineInput` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2466">The `LineInput` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2467">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2467">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2468">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2468">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2469">Данные, считанные с `LineInput` обычно записываются в файл с помощью `Print`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2469">Data read with `LineInput` is usually written to a file by using `Print`.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2470">При чтении из файла нельзя судить о его содержимом по расширению имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2470">When reading from files, do not make decisions about the contents of a file based on the file name extension.</span></span> <span data-ttu-id="c583d-2471">Например файл с именем Form1.vb не может быть исходным файлом Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-2471">For example, a file that is named Form1.vb may not be a Visual Basic source file.</span></span>  
  
 <span data-ttu-id="c583d-2472">`LineInput` Функция считывает строку символов, один файл во время, пока встретится символ возврата каретки (`Chr(13)`) или каретки и перевода строки веб-канала (`Chr(13) + Chr(10)`) последовательности.</span><span class="sxs-lookup"><span data-stu-id="c583d-2472">The `LineInput` function reads from a file one character at a time until it encounters a carriage return (`Chr(13)`) or carriage return/line feed (`Chr(13) + Chr(10)`) sequence.</span></span> <span data-ttu-id="c583d-2473">Веб-канала последовательностей каретки и перевода строки, добавляются в строку символов, вместо пропускаются.</span><span class="sxs-lookup"><span data-stu-id="c583d-2473">Carriage return/line feed sequences are skipped instead of appended to the character string.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2474">Чтение из файла с помощью `LineInput` функция требует `Read` доступ из <xref:System.Security.Permissions.FileIOPermissionAccess> перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2474">Reading from a file by using the `LineInput` function requires `Read` access from the <xref:System.Security.Permissions.FileIOPermissionAccess> enumeration.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2475">В этом примере используется `LineInput` функция для чтения строки из последовательного файла и присвоить его переменной.</span><span class="sxs-lookup"><span data-stu-id="c583d-2475">This example uses the `LineInput` function to read a line from a sequential file and assign it to a variable.</span></span> <span data-ttu-id="c583d-2476">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий несколько строк образцов данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-2476">This example assumes that `TestFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.EndOfStreamException"><span data-ttu-id="c583d-2477">Достигнут конец файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2477">End of file reached.</span></span></exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="c583d-2478"><paramref name="FileNumber" /> — не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2478"><paramref name="FileNumber" /> does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
      </Docs>
    </Member>
    <Member MemberName="Loc">
      <MemberSignature Language="C#" Value="public static long Loc (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Loc(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Loc (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Loc(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2479">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2479">Required.</span></span> <span data-ttu-id="c583d-2480">Любой допустимый номер файла типа <see langword="Integer" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2480">Any valid <see langword="Integer" /> file number.</span></span></param>
        <summary><span data-ttu-id="c583d-2481">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию для ввода-вывода в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="c583d-2481">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></summary>
        <returns><span data-ttu-id="c583d-2482">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию для ввода-вывода в открытом файле.</span><span class="sxs-lookup"><span data-stu-id="c583d-2482">Returns a <see langword="Long" /> value that specifies the current read/write position in an open file.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2483">`Loc` Функции (с нуля); его использование для получения первого байта в файле возвратит 0.</span><span class="sxs-lookup"><span data-stu-id="c583d-2483">The `Loc` function is zero-based; using it to retrieve the first byte in a file will return 0.</span></span>  
  
 <span data-ttu-id="c583d-2484">`Loc` Функция предоставляется для обеспечения обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2484">The `Loc` function is provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2485">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2485">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2486">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2486">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2487">Ниже описаны возвращаемое значение для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2487">The following describes the return value for each file access mode:</span></span>  
  
|<span data-ttu-id="c583d-2488">Режим</span><span class="sxs-lookup"><span data-stu-id="c583d-2488">Mode</span></span>|<span data-ttu-id="c583d-2489">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="c583d-2489">Return value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c583d-2490">Номер последней записи, считывается или записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2490">Number of the last record read from or written to the file.</span></span>|  
|`Sequential`|<span data-ttu-id="c583d-2491">Текущая позиция байта в файле, деленная на 128.</span><span class="sxs-lookup"><span data-stu-id="c583d-2491">Current byte position in the file divided by 128.</span></span> <span data-ttu-id="c583d-2492">Тем не менее, возвращаются сведения по `Loc` для последовательных файлов не используется и не требуется.</span><span class="sxs-lookup"><span data-stu-id="c583d-2492">However, information returned by `Loc` for sequential files is neither used nor required.</span></span>|  
|`Binary`|<span data-ttu-id="c583d-2493">Позиция последнего байта чтения или записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-2493">Position of the last byte read or written.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2494">В этом примере используется `Loc` функция, возвращающая текущую позицию чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2494">This example uses the `Loc` function to return the current read/write position in an open file.</span></span> <span data-ttu-id="c583d-2495">В этом примере предполагается, что `MyFile` — это текстовый файл, содержащий несколько строк образцов данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-2495">This example assumes that `MyFile` is a text file that has several lines of sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2496">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2496">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Seek" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Lock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-2497">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2497">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2498">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2498">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2499">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2499">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2500">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2500">Required.</span></span> <span data-ttu-id="c583d-2501">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2501">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-2502">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2502">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2503">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2503">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2504">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2504">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2505">`Lock` И `Unlock` функции используются в средах, где нескольким процессам может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2505">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c583d-2506">`Lock` и `Unlock` функции всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c583d-2506">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c583d-2507">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2507">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c583d-2508">Если `Record`, или `FromRecord` и `ToRecord` , не указан, блокировка будет использован для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2508">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c583d-2509">Если `Record` отдельно указано будет заблокирована разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c583d-2509">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c583d-2510">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` распространяется на весь файл, независимо от того, диапазон, заданный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2510">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2511">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2511">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c583d-2512">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2512">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2513">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2513">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2514">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2514">Required.</span></span> <span data-ttu-id="c583d-2515">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2515">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="c583d-2516">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2516">Optional.</span></span> <span data-ttu-id="c583d-2517">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2517">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="c583d-2518">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2518">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2519">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2519">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2520">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2520">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2521">`Lock` И `Unlock` функции используются в средах, где нескольким процессам может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2521">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c583d-2522">`Lock` и `Unlock` функции всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c583d-2522">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c583d-2523">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2523">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c583d-2524">Если `Record`, или `FromRecord` и `ToRecord` , не указан, блокировка будет использован для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2524">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c583d-2525">Если `Record` отдельно указано будет заблокирована разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c583d-2525">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c583d-2526">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` распространяется на весь файл, независимо от того, диапазон, заданный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2526">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2527">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2527">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c583d-2528">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2528">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2529">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2529">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Lock">
      <MemberSignature Language="C#" Value="public static void Lock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Lock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Lock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Lock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Lock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2530">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2530">Required.</span></span> <span data-ttu-id="c583d-2531">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2531">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="c583d-2532">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2532">Optional.</span></span> <span data-ttu-id="c583d-2533">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="c583d-2533">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="c583d-2534">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2534">Optional.</span></span> <span data-ttu-id="c583d-2535">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="c583d-2535">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="c583d-2536">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2536">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2537">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2537">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2538">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2538">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2539">`Lock` И `Unlock` функции используются в средах, где нескольким процессам может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2539">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c583d-2540">`Lock` и `Unlock` функции всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c583d-2540">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c583d-2541">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2541">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c583d-2542">Если `Record`, или `FromRecord` и `ToRecord` , не указан, блокировка будет использован для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2542">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c583d-2543">Если `Record` отдельно указано будет заблокирована разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c583d-2543">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c583d-2544">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` распространяется на весь файл, независимо от того, диапазон, заданный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2544">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2545">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2545">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c583d-2546">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2546">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2547">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2547">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="LOF">
      <MemberSignature Language="C#" Value="public static long LOF (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 LOF(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.LOF(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LOF (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long LOF(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2548">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2548">Required.</span></span> <span data-ttu-id="c583d-2549">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2549">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-2550">Возвращает значение типа <see langword="Long" />, представляющее размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2550">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-2551">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2551">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span> <span data-ttu-id="c583d-2552">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2552">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c583d-2553">Возвращает значение типа <see langword="Long" />, представляющее размер (в байтах) файла, открытого функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2553">Returns a <see langword="Long" /> representing the size, in bytes, of a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-2554">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="LOF" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2554">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="LOF" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2555">Используйте `FileLen` функции для получения длины файла, который не был открыт.</span><span class="sxs-lookup"><span data-stu-id="c583d-2555">Use the `FileLen` function to obtain the length of a file that is not open.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2556">В этом примере используется `LOF` функцию для определения размера открытого файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2556">This example uses the `LOF` function to determine the size of an open file.</span></span> <span data-ttu-id="c583d-2557">В этом примере предполагается, что `TestFile` — это текстовый файл, содержащий данные образца.</span><span class="sxs-lookup"><span data-stu-id="c583d-2557">This example assumes that `TestFile` is a text file that contains sample data.</span></span>  
  
 [!code-vb[VbVbalrCatRef#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2558">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2558">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.EOF(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileLen(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="MkDir">
      <MemberSignature Language="C#" Value="public static void MkDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void MkDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MkDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void MkDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="c583d-2559">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2559">Required.</span></span> <span data-ttu-id="c583d-2560">Выражение типа <see langword="String" />, задающее создаваемый каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2560"><see langword="String" /> expression that identifies the directory to be created.</span></span> <span data-ttu-id="c583d-2561">Параметр <c>Path</c> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2561">The <c>Path</c> may include the drive.</span></span> <span data-ttu-id="c583d-2562">Если диск не указан, <see langword="MkDir" /> создает каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-2562">If no drive is specified, <see langword="MkDir" /> creates the new directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="c583d-2563">Создает каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2563">Creates a new directory.</span></span> <span data-ttu-id="c583d-2564">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="MkDir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2564">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="MkDir" />.</span></span> <span data-ttu-id="c583d-2565">Дополнительные сведения см. в разделе <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2565">For more information, see <see cref="M:Microsoft.VisualBasic.FileIO.FileSystem.CreateDirectory(System.String)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2566">Эта функция создает новый каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2566">This function creates a new directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2567">В этом примере используется `MkDir` функции для создания каталога.</span><span class="sxs-lookup"><span data-stu-id="c583d-2567">This example uses the `MkDir` function to create a directory.</span></span> <span data-ttu-id="c583d-2568">Если диск не указан, новый каталог создается на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-2568">If the drive is not specified, the new directory is created on the current drive.</span></span>  
  
 [!code-vb[VbVbalrCatRef#38](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-2569"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-2569"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.Security.SecurityException"><span data-ttu-id="c583d-2570">В разрешении отказано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2570">Permission denied.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2571">Каталог уже существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2571">Directory already exists.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Print(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Print (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2572">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2572">Required.</span></span> <span data-ttu-id="c583d-2573">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2573">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c583d-2574">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2574">Optional.</span></span> <span data-ttu-id="c583d-2575">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2575">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="c583d-2576">Параметры аргумента <c>Output</c>:</span><span class="sxs-lookup"><span data-stu-id="c583d-2576">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="c583d-2577"><see langword="T:System.IO.IOException" />: недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2577"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="c583d-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2578"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="c583d-2579">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2579">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2580">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2580">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2581">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2581">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2582">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2582">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2583">`Print` не включает символ перевода строки в конце строки; Однако `PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2583">`Print` does not include a line feed at the end of a line; however, `PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="c583d-2584">Данные, записанные с `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2584">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="c583d-2585">Если не указан `Output` для `PrintLine`, выводит пустую строку в файл; для `Print`, ничего не будет записано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2585">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="c583d-2586">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятых и `TAB` может привести к непредсказуемым результатам.</span><span class="sxs-lookup"><span data-stu-id="c583d-2586">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="c583d-2587">Для `Boolean` данных, либо `True` или `False` выводится на печать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2587">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="c583d-2588">`True` И `False` ключевые слова не преобразуются, независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2588">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="c583d-2589">Дата данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="c583d-2589">Date data is written to the file by using the standard short date format recognized by your system.</span></span> <span data-ttu-id="c583d-2590">Когда дата или время отсутствует или ноль, только часть предоставляемых записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2590">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="c583d-2591">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-2591">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c583d-2592">Однако если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2592">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="c583d-2593">Для `Error` данные, выходные данные отображаются в виде `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2593">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="c583d-2594">`Error` Ключевое слово не переводится независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2594">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="c583d-2595">Все данные, записанные в файл с помощью `Print` международный стандартам; т. е. данные правильно отформатированы с использованием соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c583d-2595">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="c583d-2596">Если пользователь хочет вывести данные для использования в нескольких языковых стандартов `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2596">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="c583d-2597">Запись в файл с помощью `Print` или `PrintLine` функции требует `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2597">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2598">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2598">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2599">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2599">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="PrintLine">
      <MemberSignature Language="C#" Value="public static void PrintLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void PrintLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrintLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void PrintLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2600">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2600">Required.</span></span> <span data-ttu-id="c583d-2601">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2601">Any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c583d-2602">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2602">Optional.</span></span> <span data-ttu-id="c583d-2603">Ноль или больше выражений с разделителями-запятыми для записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2603">Zero or more comma-delimited expressions to write to a file.</span></span>  
  
 <span data-ttu-id="c583d-2604">Параметры аргумента <c>Output</c>:</span><span class="sxs-lookup"><span data-stu-id="c583d-2604">The <c>Output</c> argument settings are:</span></span>  
  
 <span data-ttu-id="c583d-2605"><see langword="T:System.IO.IOException" />: недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2605"><see langword="T:System.IO.IOException" />: File mode is invalid.</span></span>  
  
 <span data-ttu-id="c583d-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2606"><see langword="T:System.IO.IOException" />: <c>FileNumber</c> does not exist.</span></span></param>
        <summary><span data-ttu-id="c583d-2607">Записывает отформатированные данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2607">Writes display-formatted data to a sequential file.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2608">`Print` И `PrintLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2608">The `Print` and `PrintLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2609">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2609">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2610">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2610">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2611">`Print` не включает символ перевода строки в конце строки; Однако`PrintLine` содержит символ перевода строки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2611">`Print` does not include a line feed at the end of a line; however,`PrintLine` does include a line feed.</span></span>  
  
 <span data-ttu-id="c583d-2612">Данные, записанные с `Print` обычно считываются из файла с помощью `LineInput` или `Input`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2612">Data written with `Print` is usually read from a file by using `LineInput` or `Input`.</span></span>  
  
 <span data-ttu-id="c583d-2613">Если не указан `Output` для `PrintLine`, выводит пустую строку в файл; для `Print`, ничего не будет записано.</span><span class="sxs-lookup"><span data-stu-id="c583d-2613">If you omit `Output` for `PrintLine`, a blank line is printed to the file; for `Print`, nothing is output.</span></span> <span data-ttu-id="c583d-2614">Несколько выражений, разделенных запятыми, будут выровнены по границам табуляции, но смешивание запятых и `TAB` может привести к непредсказуемым результатам.</span><span class="sxs-lookup"><span data-stu-id="c583d-2614">Multiple expressions separated with a comma will be aligned on tab boundaries, but mixing commas and `TAB` may cause inconsistent results.</span></span>  
  
 <span data-ttu-id="c583d-2615">Для `Boolean` данных, либо `True` или `False` выводится на печать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2615">For `Boolean` data, either `True` or `False` is printed.</span></span> <span data-ttu-id="c583d-2616">`True` И `False` ключевые слова не преобразуются, независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2616">The `True` and `False` keywords are not translated, regardless of the locale.</span></span>  
  
 <span data-ttu-id="c583d-2617">Даты данные записываются в файл с помощью стандартных короткого формата даты формата, распознаваемого системой.</span><span class="sxs-lookup"><span data-stu-id="c583d-2617">Date data is written to the file by using the standard short date format recognized by the system.</span></span> <span data-ttu-id="c583d-2618">Когда дата или время отсутствует или ноль, только часть предоставляемых записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2618">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
 <span data-ttu-id="c583d-2619">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-2619">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c583d-2620">Однако если `Output` данные списка `DBNull`, `Null` записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2620">However, if `Output` list data is `DBNull`, `Null` is written to the file.</span></span>  
  
 <span data-ttu-id="c583d-2621">Для `Error` данные, выходные данные отображаются в виде `Error errorcode`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2621">For `Error` data, the output appears as `Error errorcode`.</span></span> <span data-ttu-id="c583d-2622">`Error` Ключевое слово не переводится независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2622">The `Error` keyword is not translated regardless of the locale.</span></span>  
  
 <span data-ttu-id="c583d-2623">Все данные, записанные в файл с помощью `Print` международный стандартам; т. е. данные правильно отформатированы с использованием соответствующего десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c583d-2623">All data written to the file by using `Print` is internationally aware; that is, the data is correctly formatted using the appropriate decimal separator.</span></span> <span data-ttu-id="c583d-2624">Если пользователь хочет вывести данные для использования в нескольких языковых стандартов `Write` следует использовать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2624">If the user wishes to output data for use by multiple locales, `Write` should be used.</span></span>  
  
 <span data-ttu-id="c583d-2625">Запись в файл с помощью `Print` или `PrintLine` функции требует `Write` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2625">Writing to a file by using the `Print` or `PrintLine` functions requires `Write` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2626">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2626">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2627">В этом примере используется `Print` и `PrintLine` функции для записи данных в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2627">This example uses the `Print` and `PrintLine` functions to write data to a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#53](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#53)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="Rename">
      <MemberSignature Language="C#" Value="public static void Rename (string OldPath, string NewPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Rename(string OldPath, string NewPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Rename(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rename (OldPath As String, NewPath As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Rename(System::String ^ OldPath, System::String ^ NewPath);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="OldPath" Type="System.String" />
        <Parameter Name="NewPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="OldPath"><span data-ttu-id="c583d-2628">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2628">Required.</span></span> <span data-ttu-id="c583d-2629">Выражение типа <see langword="String" />, указывающее имя и местонахождение существующего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2629"><see langword="String" /> expression that specifies the existing file name and location.</span></span> <span data-ttu-id="c583d-2630">Параметр <c>OldPath</c> может содержать имя каталога и метку диска для файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2630"><c>OldPath</c> may include the directory, and drive, of the file.</span></span></param>
        <param name="NewPath"><span data-ttu-id="c583d-2631">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2631">Required.</span></span> <span data-ttu-id="c583d-2632">Выражение типа <see langword="String" />, указывающее новое имя и местонахождение файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2632"><see langword="String" /> expression that specifies the new file name and location.</span></span> <span data-ttu-id="c583d-2633">Параметр <c>NewPath</c> может содержать имя каталога и метку диска для нового местонахождения файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2633"><c>NewPath</c> may include directory and drive of the destination location.</span></span> <span data-ttu-id="c583d-2634">Имя файла, заданного параметром <c>NewPath</c>, не может быть именем существующего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2634">The file name specified by <c>NewPath</c> cannot already exist.</span></span></param>
        <summary><span data-ttu-id="c583d-2635">Переименовывает файл или каталог на диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-2635">Renames a disk file or directory.</span></span> <span data-ttu-id="c583d-2636">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Rename" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2636">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Rename" />.</span></span> <span data-ttu-id="c583d-2637">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2637">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2638">`Rename` Функция переименовывает файл и при необходимости перемещает его в другой каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2638">The`Rename` function renames a file and moves it to a different directory, if it is required.</span></span> <span data-ttu-id="c583d-2639">`Rename` Функции можно переместить файл на дисках, но его можно только переименовать существующий каталог, когда оба `NewPath` и `OldPath` находятся на том же диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-2639">The `Rename` function can move a file across drives, but it can only rename an existing directory when both `NewPath` and `OldPath` are located on the same drive.</span></span> <span data-ttu-id="c583d-2640">`Rename` не удается создать новый файл или каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2640">`Rename` cannot create a new file or directory.</span></span>  
  
 <span data-ttu-id="c583d-2641">С помощью `Rename` функции к открытому файлу приводит к ошибке.</span><span class="sxs-lookup"><span data-stu-id="c583d-2641">Using the `Rename` function on an open file produces an error.</span></span> <span data-ttu-id="c583d-2642">Необходимо закрыть открытый файл перед его переименованием.</span><span class="sxs-lookup"><span data-stu-id="c583d-2642">You must close an open file before renaming it.</span></span> <span data-ttu-id="c583d-2643">`Rename` аргументы не могут содержать нескольких знаков (\*) и одного знака (?) подстановочные знаки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2643">`Rename` arguments cannot include multiple-character (\*) and single-character (?) wildcards.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="c583d-2644">При использовании `Rename` для копирования файла из незащищенного расположения в защищенном месте, в файле сохраняются менее ограниченные права.</span><span class="sxs-lookup"><span data-stu-id="c583d-2644">When using `Rename` to copy a file from an unprotected location to a protected location, the file retains the less restricted rights.</span></span> <span data-ttu-id="c583d-2645">Проверьте, что не представляете возможную угрозу безопасности.</span><span class="sxs-lookup"><span data-stu-id="c583d-2645">Check to make sure that you are not introducing a possible security risk.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2646">В этом примере используется `Rename` функции для изменения имени файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2646">This example uses the `Rename` function to rename a file.</span></span> <span data-ttu-id="c583d-2647">В целях в этом примере предполагается, что каталоги, заданные уже существуют.</span><span class="sxs-lookup"><span data-stu-id="c583d-2647">For purposes of this example, assume that the directories that are specified already exist.</span></span>  
  
 [!code-vb[VbVbalrCatRef#30](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c583d-2648">Недопустимый путь.</span><span class="sxs-lookup"><span data-stu-id="c583d-2648">Path is invalid.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="c583d-2649">Файл <paramref name="OldPath" /> не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2649"><paramref name="OldPath" /> file does not exist.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2650">Нельзя переименовать с указанием другого диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2650">Cannot rename to different device.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public static void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public static void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c583d-2651">Закрывает все файлы на диске, открытые функцией <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2651">Closes all disk files opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-2652">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Reset" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2652">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Reset" />.</span></span> <span data-ttu-id="c583d-2653">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2653">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2654">`Reset` Функция закрывает все активные файлы, открытые `FileOpen` функцией и имеет ту же функцию, что `FileClose()` без параметров.</span><span class="sxs-lookup"><span data-stu-id="c583d-2654">The `Reset` function closes all active files opened by the `FileOpen` function and has the same function as `FileClose()` without any parameters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2655">В этом примере используется `Reset` функции, чтобы закрыть все открытые файлы и записывают содержимое всех буферов файлов на диск.</span><span class="sxs-lookup"><span data-stu-id="c583d-2655">This example uses the `Reset` function to close all open files and write the contents of all file buffers to disk.</span></span> <span data-ttu-id="c583d-2656">Обратите внимание на использование `Object` переменной `FileNumber` как строки и номером.</span><span class="sxs-lookup"><span data-stu-id="c583d-2656">Note the use of the `Object` variable `FileNumber` as both a string and a number.</span></span>  
  
 [!code-vb[VbVbalrCatRef#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileClose(System.Int32[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RmDir">
      <MemberSignature Language="C#" Value="public static void RmDir (string Path);" />
      <MemberSignature Language="ILAsm" Value=".method public static void RmDir(string Path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.RmDir(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RmDir (Path As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RmDir(System::String ^ Path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Path"><span data-ttu-id="c583d-2657">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2657">Required.</span></span> <span data-ttu-id="c583d-2658">Выражение типа <see langword="String" />, определяющее удаляемый каталог или папку.</span><span class="sxs-lookup"><span data-stu-id="c583d-2658"><see langword="String" /> expression that identifies the directory or folder to be removed.</span></span> <span data-ttu-id="c583d-2659">Параметр <c>Path</c> может содержать метку диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2659"><c>Path</c> can include the drive.</span></span> <span data-ttu-id="c583d-2660">Если диск не указан, <see langword="RmDir" /> удаляет каталог на текущем диске.</span><span class="sxs-lookup"><span data-stu-id="c583d-2660">If no drive is specified, <see langword="RmDir" /> removes the directory on the current drive.</span></span></param>
        <summary><span data-ttu-id="c583d-2661">Удаляет существующий каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2661">Removes an existing directory.</span></span> <span data-ttu-id="c583d-2662">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="RmDir" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2662">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="RmDir" />.</span></span> <span data-ttu-id="c583d-2663">Дополнительные сведения см. в разделе <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2663">For more information, see <see cref="Overload:Microsoft.VisualBasic.FileIO.FileSystem.DeleteDirectory" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2664">Произошла ошибка при попытке использовать `RmDir` на каталог, содержащий файлы.</span><span class="sxs-lookup"><span data-stu-id="c583d-2664">An error occurs if you try to use `RmDir` on a directory that contains files.</span></span> <span data-ttu-id="c583d-2665">Используйте `Kill` функции, чтобы удалить все файлы, прежде чем пытаться удалить каталог.</span><span class="sxs-lookup"><span data-stu-id="c583d-2665">Use the `Kill` function to delete all files before you try to remove a directory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2666">В этом примере используется `RmDir` функцию для удаления существующего каталога.</span><span class="sxs-lookup"><span data-stu-id="c583d-2666">This example uses the `RmDir` function to remove an existing directory.</span></span>  
  
 [!code-vb[VbVbalrCatRef#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-2667"><paramref name="Path" /> не указан или пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-2667"><paramref name="Path" /> is not specified or is empty.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2668">Удаляемый каталог содержит файлы.</span><span class="sxs-lookup"><span data-stu-id="c583d-2668">Target directory contains files.</span></span></exception>
        <exception cref="T:System.IO.FileNotFoundException"><span data-ttu-id="c583d-2669">Каталог не существует.</span><span class="sxs-lookup"><span data-stu-id="c583d-2669">Directory does not exist.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.ChDir(System.String)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.CurDir" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Kill(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.MkDir(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.IO.IOException" />
        <altmember cref="T:System.IO.FileNotFoundException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Seek">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-2670">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2670">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-2671">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2671">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="c583d-2672">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2672">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static long Seek (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static int64 Seek(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Seek (FileNumber As Integer) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long Seek(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2673">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2673">Required.</span></span> <span data-ttu-id="c583d-2674">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2674">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-2675">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2675">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-2676">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2676">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="c583d-2677">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2677">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <returns><span data-ttu-id="c583d-2678">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2678">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2679">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 – 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2679">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="c583d-2680">Ниже описываются возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2680">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="c583d-2681">Режим</span><span class="sxs-lookup"><span data-stu-id="c583d-2681">Mode</span></span>|<span data-ttu-id="c583d-2682">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="c583d-2682">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c583d-2683">Номер следующей записи, чтение и запись</span><span class="sxs-lookup"><span data-stu-id="c583d-2683">Number of the next record read or written</span></span>|  
|<span data-ttu-id="c583d-2684">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="c583d-2684">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="c583d-2685">Позиция байта, с которой происходит следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2685">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="c583d-2686">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-2686">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2687">В этом примере используется `Seek` функция, возвращающая текущее положение в файле.</span><span class="sxs-lookup"><span data-stu-id="c583d-2687">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="c583d-2688">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2688">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="c583d-2689">Для файлов, открытых в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-2689">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="c583d-2690">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой следующей операции ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2690">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c583d-2691">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c583d-2691">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="c583d-2692">В этом примере используется `Seek` функции, чтобы установить позицию для следующей операции чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2692">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="c583d-2693">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой следующей операции ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2693">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c583d-2694">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c583d-2694">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2695">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2695">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public static void Seek (int FileNumber, long Position);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Seek(int32 FileNumber, int64 Position) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Seek(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Seek (FileNumber As Integer, Position As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Seek(int FileNumber, long Position);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2696">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2696">Required.</span></span> <span data-ttu-id="c583d-2697">Значение <see langword="Integer" />, содержащее допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2697">An <see langword="Integer" /> that contains a valid file number.</span></span></param>
        <param name="Position"><span data-ttu-id="c583d-2698">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2698">Required.</span></span> <span data-ttu-id="c583d-2699">Число в диапазоне от 1 до 2 147 483 647 включительно, определяющее место следующей операции ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2699">Number in the range 1–2,147,483,647, inclusive, that indicates where the next read/write operation should occur.</span></span></param>
        <summary><span data-ttu-id="c583d-2700">Возвращает значение типа <see langword="Long" />, указывающее текущую позицию ввода-вывода в файле, открытом функцией <see langword="FileOpen" />, или устанавливает позицию для следующей операции ввода-вывода в файле, открытом с помощью функции <see langword="FileOpen" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2700">Returns a <see langword="Long" /> specifying the current read/write position in a file opened by using the <see langword="FileOpen" /> function, or sets the position for the next read/write operation in a file opened by using the <see langword="FileOpen" /> function.</span></span> <span data-ttu-id="c583d-2701">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="Seek" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2701">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Seek" />.</span></span> <span data-ttu-id="c583d-2702">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2702">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2703">`Seek` Возвращает значение от 1 до 2 147 483 647 (эквивалентно 2 ^ 31 – 1) включительно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2703">`Seek` returns a value between 1 and 2,147,483,647 (equivalent to 2^31 – 1), inclusive.</span></span>  
  
 <span data-ttu-id="c583d-2704">Ниже описываются возвращаемые значения для каждого режима доступа к файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2704">The following describes the return values for each file access mode:</span></span>  
  
|<span data-ttu-id="c583d-2705">Режим</span><span class="sxs-lookup"><span data-stu-id="c583d-2705">Mode</span></span>|<span data-ttu-id="c583d-2706">Возвращаемое значение</span><span class="sxs-lookup"><span data-stu-id="c583d-2706">Return Value</span></span>|  
|-|-|  
|`Random`|<span data-ttu-id="c583d-2707">Номер следующей записи, чтение и запись</span><span class="sxs-lookup"><span data-stu-id="c583d-2707">Number of the next record read or written</span></span>|  
|<span data-ttu-id="c583d-2708">`Binary`, `Input`, `Output`, `Append`</span><span class="sxs-lookup"><span data-stu-id="c583d-2708">`Binary`, `Input`, `Output`, `Append`</span></span>|<span data-ttu-id="c583d-2709">Позиция байта, с которой происходит следующей операции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2709">Byte position at which the next operation occurs.</span></span> <span data-ttu-id="c583d-2710">Первый байт в файле находится в позиции 1, второй байт в позиции 2 и т. д.</span><span class="sxs-lookup"><span data-stu-id="c583d-2710">The first byte in a file is at position 1, the second byte is at position 2, and so on.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2711">В этом примере используется `Seek` функция, возвращающая текущее положение в файле.</span><span class="sxs-lookup"><span data-stu-id="c583d-2711">This example uses the `Seek` function to return the current file position.</span></span> <span data-ttu-id="c583d-2712">В этом примере предполагается `TestFile` — это файл, содержащий записи структуры `Record`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2712">The example assumes `TestFile` is a file that contains records of the structure `Record`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#47](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#47)]  
  
 <span data-ttu-id="c583d-2713">Для файлов, открытых в `Random` режиме `Seek` возвращает номер следующей записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-2713">For files opened in `Random` mode, `Seek` returns the number of next record.</span></span>  
  
 [!code-vb[VbVbalrCatRef#48](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#48)]  
  
 <span data-ttu-id="c583d-2714">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` возвращает позицию байта, в которой следующей операции ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2714">For files opened in modes other than `Random` mode, `Seek` returns the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c583d-2715">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c583d-2715">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#49](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#49)]  
  
 <span data-ttu-id="c583d-2716">В этом примере используется `Seek` функции, чтобы установить позицию для следующей операции чтения или записи в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2716">This example uses the `Seek` function to set the position for the next read or write in a file.</span></span>  
  
 <span data-ttu-id="c583d-2717">Для файлов, открытых в режимах, отличных от `Random` режиме `Seek` устанавливает позицию байта, в которой следующей операции ввода-вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2717">For files opened in modes other than `Random` mode, `Seek` sets the byte position at which the next operation occurs.</span></span> <span data-ttu-id="c583d-2718">Предположим, `TestFile` — это файл, содержащий несколько строк текста.</span><span class="sxs-lookup"><span data-stu-id="c583d-2718">Assume `TestFile` is a file that contains several lines of text.</span></span>  
  
 [!code-vb[VbVbalrCatRef#52](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2719">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2719">File mode is invalid.</span></span></exception>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FileGet" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Loc(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="SetAttr">
      <MemberSignature Language="C#" Value="public static void SetAttr (string PathName, Microsoft.VisualBasic.FileAttribute Attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static void SetAttr(string PathName, valuetype Microsoft.VisualBasic.FileAttribute Attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SetAttr(System.String,Microsoft.VisualBasic.FileAttribute)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAttr (PathName As String, Attributes As FileAttribute)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetAttr(System::String ^ PathName, Microsoft::VisualBasic::FileAttribute Attributes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="PathName" Type="System.String" />
        <Parameter Name="Attributes" Type="Microsoft.VisualBasic.FileAttribute" />
      </Parameters>
      <Docs>
        <param name="PathName"><span data-ttu-id="c583d-2720">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2720">Required.</span></span> <span data-ttu-id="c583d-2721">Выражение типа <see langword="String" />, определяющее имя файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2721"><see langword="String" /> expression that specifies a file name.</span></span> <span data-ttu-id="c583d-2722">Параметр <c>PathName</c> может содержать имя каталога или папки, а также имя диска.</span><span class="sxs-lookup"><span data-stu-id="c583d-2722"><c>PathName</c> can include directory or folder, and drive.</span></span></param>
        <param name="Attributes"><span data-ttu-id="c583d-2723">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2723">Required.</span></span> <span data-ttu-id="c583d-2724">Константа или числовое выражение, сумма которого определяет атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2724">Constant or numeric expression, whose sum specifies file attributes.</span></span></param>
        <summary><span data-ttu-id="c583d-2725">Устанавливает атрибуты файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2725">Sets attribute information for a file.</span></span> <span data-ttu-id="c583d-2726">Функция <see langword="My" /> обеспечивает более высокие показатели производительности и быстродействия в операциях файлового ввода-вывода в сравнении с <see langword="SetAttr" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2726">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="SetAttr" />.</span></span> <span data-ttu-id="c583d-2727">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2727">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2728">Ошибка во время выполнения происходит при попытке установить атрибуты для открытого файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2728">A run-time error occurs if you try to set the attributes of an open file.</span></span>  
  
 <span data-ttu-id="c583d-2729">`Attributes` Используются значения перечисления аргументов следующим образом:</span><span class="sxs-lookup"><span data-stu-id="c583d-2729">The `Attributes` argument enumeration values are as follows:</span></span>  
  
|<span data-ttu-id="c583d-2730">Значение</span><span class="sxs-lookup"><span data-stu-id="c583d-2730">Value</span></span>|<span data-ttu-id="c583d-2731">Константа</span><span class="sxs-lookup"><span data-stu-id="c583d-2731">Constant</span></span>|<span data-ttu-id="c583d-2732">Описание:</span><span class="sxs-lookup"><span data-stu-id="c583d-2732">Description</span></span>|  
|-|-|-|  
|`Normal`|`vbNormal`|<span data-ttu-id="c583d-2733">Обычный (по умолчанию).</span><span class="sxs-lookup"><span data-stu-id="c583d-2733">Normal (default).</span></span>|  
|`ReadOnly`|`vbReadOnly`|<span data-ttu-id="c583d-2734">Только для чтения.</span><span class="sxs-lookup"><span data-stu-id="c583d-2734">Read-only.</span></span>|  
|`Hidden`|`vbHidden`|<span data-ttu-id="c583d-2735">Скрытый.</span><span class="sxs-lookup"><span data-stu-id="c583d-2735">Hidden.</span></span>|  
|`System`|`vbSystem`|<span data-ttu-id="c583d-2736">Системный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2736">System file.</span></span>|  
|`Volume`|`vbVolume`|<span data-ttu-id="c583d-2737">Метка тома</span><span class="sxs-lookup"><span data-stu-id="c583d-2737">Volume label</span></span>|  
|`Directory`|`vbDirectory`|<span data-ttu-id="c583d-2738">Каталог или папка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2738">Directory or folder.</span></span>|  
|`Archive`|`vbArchive`|<span data-ttu-id="c583d-2739">Файл был изменен с момента создания последней резервной копии.</span><span class="sxs-lookup"><span data-stu-id="c583d-2739">File has changed since last backup.</span></span>|  
|`Alias`|`vbAlias`|<span data-ttu-id="c583d-2740">У файла другое имя.</span><span class="sxs-lookup"><span data-stu-id="c583d-2740">File has a different name.</span></span>|  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2741">Эти перечисления определены в языке Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="c583d-2741">These enumerations are specified by the Visual Basic language.</span></span> <span data-ttu-id="c583d-2742">Имена можно использовать в любом месте в коде вместо фактических значений.</span><span class="sxs-lookup"><span data-stu-id="c583d-2742">The names can be used anywhere in your code instead of the actual values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2743">В этом примере используется `SetAttr` функцию для задания атрибутов файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2743">This example uses the `SetAttr` function to set attributes for a file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="c583d-2744">Недопустимый тип <paramref name="Attribute" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2744"><paramref name="Attribute" /> type is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileAttr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.GetAttr(System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:Microsoft.VisualBasic.FileAttribute" />
        <altmember cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />
      </Docs>
    </Member>
    <Member MemberName="SPC">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.SpcInfo SPC (short Count);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.SpcInfo SPC(int16 Count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function SPC (Count As Short) As SpcInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::SpcInfo SPC(short Count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.SpcInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Count" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Count"><span data-ttu-id="c583d-2745">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2745">Required.</span></span> <span data-ttu-id="c583d-2746">Число пробелов, вставляемых перед отображением или печатью очередного выражения в списке.</span><span class="sxs-lookup"><span data-stu-id="c583d-2746">The number of spaces to insert before displaying or printing the next expression in a list.</span></span></param>
        <summary><span data-ttu-id="c583d-2747">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2747">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></summary>
        <returns><span data-ttu-id="c583d-2748">Используется с функцией <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2748">Used with the <see langword="Print" /> or <see langword="PrintLine" /> function to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2749">Если `Count` меньше ширины строки вывода, следующая позиция печати непосредственно следует за количество напечатанных пробелов.</span><span class="sxs-lookup"><span data-stu-id="c583d-2749">If `Count` is less than the output line width, the next print position immediately follows the number of spaces printed.</span></span> <span data-ttu-id="c583d-2750">Если`Count` больше, чем длина выводимой строки `SPC` вычисляет следующую позицию печати по формуле:</span><span class="sxs-lookup"><span data-stu-id="c583d-2750">If`Count` is greater than the output line width, `SPC` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c583d-2751">`currentprintposition`(+(`Count``Mod``width`))</span><span class="sxs-lookup"><span data-stu-id="c583d-2751">`currentprintposition`(+(`Count``Mod``width`))</span></span>  
  
 <span data-ttu-id="c583d-2752">Например, если текущая позиция печати равна 24, ширина строки вывода равна 80, и `SPC(90)`, следующая печать начнется с позиции 34 (текущая позиция печати + остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="c583d-2752">For example, if the current print position is 24, the output line width is 80, and you specify `SPC(90)`, the next print will start at position 34 (current print position + the remainder of 90/80).</span></span> <span data-ttu-id="c583d-2753">Если разница между текущей позицией печати и шириной строки вывода меньше, чем `Count` (или `Count` `Mod` *ширина*), `SPC` функция переходит на начало следующей строки и создает пробелы, равные `Count` — (*ширина* — *текущая_позиция_печати*).</span><span class="sxs-lookup"><span data-stu-id="c583d-2753">If the difference between the current print position and the output line width is less than `Count` (or `Count` `Mod` *width*), the `SPC` function skips to the start of the next line and generates spaces equal to `Count` – (*width* – *currentprintposition*).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2754">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-2754">Make sure your tabular columns are wide enough to allow for wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2755">В этом примере используется `SPC` позиции вывода в файл в функции **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="c583d-2755">This example uses the `SPC` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#16](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#16)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.TAB" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="TAB">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-2756">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2756">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB ();" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB () As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="c583d-2757">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2757">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="c583d-2758">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2758">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2759">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равно значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="c583d-2759">If the current print position on the current line is larger than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="c583d-2760">Если `Column` меньше 1 `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="c583d-2760">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="c583d-2761">Если `Column` больше, чем длина выводимой строки `TAB` вычисляет следующую позицию печати по формуле:</span><span class="sxs-lookup"><span data-stu-id="c583d-2761">If `Column` is larger than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c583d-2762">Mod ширины столбца</span><span class="sxs-lookup"><span data-stu-id="c583d-2762">Column Mod width</span></span>  
  
 <span data-ttu-id="c583d-2763">Например если *ширина* равна 80 и задано `TAB(90)`, следующая печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="c583d-2763">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="c583d-2764">Если `Column` меньше, чем текущая позиция печати, печать начинается со следующей строки в рассчитанной позиции печати.</span><span class="sxs-lookup"><span data-stu-id="c583d-2764">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="c583d-2765">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-2765">If the calculated print position is larger than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="c583d-2766">Крайняя левая позиция печати в строке вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="c583d-2766">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="c583d-2767">При использовании `Print` или `PrintLine` функции для печати файлов, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2767">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="c583d-2768">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2768">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="c583d-2769">Не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2769">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2770">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-2770">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2771">В этом примере используется `TAB` позиции вывода в файл в функции **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="c583d-2771">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="TAB">
      <MemberSignature Language="C#" Value="public static Microsoft.VisualBasic.TabInfo TAB (short Column);" />
      <MemberSignature Language="ILAsm" Value=".method public static valuetype Microsoft.VisualBasic.TabInfo TAB(int16 Column) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.TAB(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function TAB (Column As Short) As TabInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Microsoft::VisualBasic::TabInfo TAB(short Column);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.VisualBasic.TabInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Column" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Column"><span data-ttu-id="c583d-2772">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2772">Optional.</span></span> <span data-ttu-id="c583d-2773">Номер столбца, в который помещается курсор перед отображением или печатью следующего выражения из списка.</span><span class="sxs-lookup"><span data-stu-id="c583d-2773">The column number moved to before displaying or printing the next expression in a list.</span></span> <span data-ttu-id="c583d-2774">Если этот параметр опущен, <see langword="TAB" /> перемещает положение курсора в начало следующей зоны печати.</span><span class="sxs-lookup"><span data-stu-id="c583d-2774">If omitted, <see langword="TAB" /> moves the insertion point to the start of the next print zone.</span></span></param>
        <summary><span data-ttu-id="c583d-2775">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2775">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></summary>
        <returns><span data-ttu-id="c583d-2776">Используется с функциями <see langword="Print" /> или <see langword="PrintLine" /> для установки позиции вывода.</span><span class="sxs-lookup"><span data-stu-id="c583d-2776">Used with the <see langword="Print" /> or <see langword="PrintLine" /> functions to position output.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2777">Если текущая позиция печати в текущей строке больше, чем `Column`, `TAB` пропускает равно значению столбца `Column` на следующую строку.</span><span class="sxs-lookup"><span data-stu-id="c583d-2777">If the current print position on the current line is greater than `Column`, `TAB` skips to the column value equal to `Column` on the next output line.</span></span> <span data-ttu-id="c583d-2778">Если `Column` меньше 1 `TAB` перемещает позицию печати в столбец 1.</span><span class="sxs-lookup"><span data-stu-id="c583d-2778">If `Column` is less than 1, `TAB` moves the print position to column 1.</span></span> <span data-ttu-id="c583d-2779">Если `Column` больше, чем длина выводимой строки `TAB` вычисляет следующую позицию печати по формуле:</span><span class="sxs-lookup"><span data-stu-id="c583d-2779">If `Column` is greater than the output line width, `TAB` calculates the next print position using the formula:</span></span>  
  
 <span data-ttu-id="c583d-2780">Mod ширины столбца</span><span class="sxs-lookup"><span data-stu-id="c583d-2780">Column Mod width</span></span>  
  
 <span data-ttu-id="c583d-2781">Например если *ширина* равна 80 и задано `TAB(90)`, следующая печать начнется со столбца 10 (остаток от 90/80).</span><span class="sxs-lookup"><span data-stu-id="c583d-2781">For example, if *width* is 80 and you specify `TAB(90)`, the next print will start at column 10 (the remainder of 90/80).</span></span> <span data-ttu-id="c583d-2782">Если `Column` меньше, чем текущая позиция печати, печать начинается со следующей строки в рассчитанной позиции печати.</span><span class="sxs-lookup"><span data-stu-id="c583d-2782">If `Column` is less than the current print position, printing starts on the next line at the calculated print position.</span></span> <span data-ttu-id="c583d-2783">Если рассчитанная позиция печати больше, чем текущая позиция печати, печать начинается в рассчитанной позиции печати в той же строке.</span><span class="sxs-lookup"><span data-stu-id="c583d-2783">If the calculated print position is greater than the current print position, printing starts at the calculated print position on the same line.</span></span>  
  
 <span data-ttu-id="c583d-2784">Крайняя левая позиция печати в строке вывода всегда равно 1.</span><span class="sxs-lookup"><span data-stu-id="c583d-2784">The leftmost print position on an output line is always 1.</span></span> <span data-ttu-id="c583d-2785">При использовании `Print` или `PrintLine` функции для печати файлов, позиция равна ширине выходного файла, который можно задать с помощью `FileWidth` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2785">When you use the `Print` or `PrintLine` functions to print to files, the rightmost print position is the current width of the output file, which you can set using the `FileWidth` function.</span></span>  
  
 <span data-ttu-id="c583d-2786">`TAB` Функция также может использоваться с `WriteLine` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2786">The `TAB` function can also be used with the `WriteLine` function.</span></span> <span data-ttu-id="c583d-2787">Не может использоваться с <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> или <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2787">It cannot be used with <xref:System.Diagnostics.Debug.WriteLine%2A?displayProperty=nameWithType> or <xref:System.Console.WriteLine%2A?displayProperty=nameWithType>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c583d-2788">Убедитесь, что столбцы таблицы достаточно широки вместить длинные записи.</span><span class="sxs-lookup"><span data-stu-id="c583d-2788">Make sure your tabular columns are wide enough to contain wide letters.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2789">В этом примере используется `TAB` позиции вывода в файл в функции **вывода** окна.</span><span class="sxs-lookup"><span data-stu-id="c583d-2789">This example uses the `TAB` function to position output in a file and in the **Output** window.</span></span>  
  
 [!code-vb[VbVbalrCatRef#37](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileWidth(System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Unlock">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c583d-2790">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2790">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2791">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2791">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2792">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2792">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2793">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2793">Required.</span></span> <span data-ttu-id="c583d-2794">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2794">Any valid file number.</span></span></param>
        <summary><span data-ttu-id="c583d-2795">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2795">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2796">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2796">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2797">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2797">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2798">`Lock` И `Unlock` функции используются в средах, где нескольким процессам может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2798">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c583d-2799">`Lock` и `Unlock` функции всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c583d-2799">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c583d-2800">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2800">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c583d-2801">Если `Record`, или `FromRecord` и `ToRecord` , не указан, блокировка будет использован для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2801">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c583d-2802">Если `Record` отдельно указано будет заблокирована разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c583d-2802">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c583d-2803">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` распространяется на весь файл, независимо от того, диапазон, заданный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2803">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2804">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2804">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c583d-2805">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2805">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2806">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2806">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long Record);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 Record) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, Record As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long Record);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Record" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2807">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2807">Required.</span></span> <span data-ttu-id="c583d-2808">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2808">Any valid file number.</span></span></param>
        <param name="Record"><span data-ttu-id="c583d-2809">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2809">Optional.</span></span> <span data-ttu-id="c583d-2810">Номер единственной записи или единственного байта для блокировки или разблокировки.</span><span class="sxs-lookup"><span data-stu-id="c583d-2810">Number of the only record or byte to lock or unlock</span></span></param>
        <summary><span data-ttu-id="c583d-2811">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2811">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2812">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2812">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2813">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2813">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2814">`Lock` И `Unlock` функции используются в средах, где нескольким процессам может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2814">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c583d-2815">`Lock` и `Unlock` функции всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c583d-2815">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c583d-2816">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2816">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c583d-2817">Если `Record`, или `FromRecord` и `ToRecord` , не указан, блокировка будет использован для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2817">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c583d-2818">Если `Record` отдельно указано будет заблокирована разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c583d-2818">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c583d-2819">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` распространяется на весь файл, независимо от того, диапазон, заданный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2819">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2820">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2820">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c583d-2821">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2821">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2822">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2822">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Unlock">
      <MemberSignature Language="C#" Value="public static void Unlock (int FileNumber, long FromRecord, long ToRecord);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Unlock(int32 FileNumber, int64 FromRecord, int64 ToRecord) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Unlock(System.Int32,System.Int64,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Unlock (FileNumber As Integer, FromRecord As Long, ToRecord As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unlock(int FileNumber, long FromRecord, long ToRecord);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="FromRecord" Type="System.Int64" />
        <Parameter Name="ToRecord" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2823">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2823">Required.</span></span> <span data-ttu-id="c583d-2824">Любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2824">Any valid file number.</span></span></param>
        <param name="FromRecord"><span data-ttu-id="c583d-2825">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2825">Optional.</span></span> <span data-ttu-id="c583d-2826">Номер первой записи или первого байта, начиная с которого файл открывается или закрывается для доступа.</span><span class="sxs-lookup"><span data-stu-id="c583d-2826">Number of the first record or byte to lock or unlock.</span></span></param>
        <param name="ToRecord"><span data-ttu-id="c583d-2827">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2827">Optional.</span></span> <span data-ttu-id="c583d-2828">Номер последней записи или последнего байта, которыми заканчивается часть файла, открытая или закрытая для доступа.</span><span class="sxs-lookup"><span data-stu-id="c583d-2828">Number of the last record or byte to lock or unlock.</span></span></param>
        <summary><span data-ttu-id="c583d-2829">Управляет доступом других процессов ко всему файлу, открытому с помощью функции <see langword="Open" />, или к его части.</span><span class="sxs-lookup"><span data-stu-id="c583d-2829">Controls access by other processes to all or part of a file opened by using the <see langword="Open" /> function.</span></span> <span data-ttu-id="c583d-2830">Средства из пространства имен <see langword="My" /> обеспечивают большую производительность и быстродействие операций файлового ввода-вывода, чем методы <see langword="Lock" /> и <see langword="Unlock" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2830">The <see langword="My" /> feature gives you better productivity and performance in file I/O operations than <see langword="Lock" /> and <see langword="Unlock" />.</span></span> <span data-ttu-id="c583d-2831">Дополнительные сведения см. в разделе <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2831">For more information, see <see cref="T:Microsoft.VisualBasic.FileIO.FileSystem" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2832">`Lock` И `Unlock` функции используются в средах, где нескольким процессам может понадобиться доступ к тому же файлу.</span><span class="sxs-lookup"><span data-stu-id="c583d-2832">The `Lock` and `Unlock` functions are used in environments where several processes might need access to the same file.</span></span>  
  
 <span data-ttu-id="c583d-2833">`Lock` и `Unlock` функции всегда используются в парах.</span><span class="sxs-lookup"><span data-stu-id="c583d-2833">`Lock` and `Unlock` functions are always used in pairs.</span></span> <span data-ttu-id="c583d-2834">Аргументы для `Lock` и `Unlock` должны быть одинаковыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2834">The arguments to `Lock` and `Unlock` must be identical.</span></span>  
  
 <span data-ttu-id="c583d-2835">Если `Record`, или `FromRecord` и `ToRecord` , не указан, блокировка будет использован для всего файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2835">If `Record`, or `FromRecord` and `ToRecord` are not supplied, the lock will be for the whole file.</span></span> <span data-ttu-id="c583d-2836">Если `Record` отдельно указано будет заблокирована разблокирована.</span><span class="sxs-lookup"><span data-stu-id="c583d-2836">If `Record` alone is specified the single record will be locked/unlocked.</span></span>  
  
 <span data-ttu-id="c583d-2837">Если файл открыт для последовательного ввода или вывода, `Lock` и `Unlock` распространяется на весь файл, независимо от того, диапазон, заданный `FromRecord` и`ToRecord`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2837">If the file has been opened for sequential input or output, `Lock` and `Unlock` affect the whole file, regardless of the range specified by `FromRecord` and`ToRecord`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2838">В этом примере показано использование `Lock` и `Unlock` функции.</span><span class="sxs-lookup"><span data-stu-id="c583d-2838">This example illustrates the use of the `Lock` and `Unlock` functions.</span></span> <span data-ttu-id="c583d-2839">В этом примере предполагается, что `People.txt` — это файл, содержащий записи структуры `Person`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2839">This example assumes that `People.txt` is a file that contains records of the structure `Person`.</span></span>  
  
 [!code-vb[VbVbalrCatRef#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#13)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2840">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2840">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="T:System.IO.IOException" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void Write(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2841">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2841">Required.</span></span> <span data-ttu-id="c583d-2842">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2842">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c583d-2843">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2843">Optional.</span></span> <span data-ttu-id="c583d-2844">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2844">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="c583d-2845">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2845">Writes data to a sequential file.</span></span> <span data-ttu-id="c583d-2846">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2846">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2847">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2847">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2848">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2848">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2849">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2849">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2850">Если не указан `Output`, выводит пустую строку в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2850">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="c583d-2851">Несколько выражений могут разделяться запятыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2851">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="c583d-2852">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и заключается в кавычки строки, записываемые в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2852">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="c583d-2853">Не нужно вставлять в список явные ограничители.</span><span class="sxs-lookup"><span data-stu-id="c583d-2853">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="c583d-2854">Когда `Write` используется для записи данных в файл только числовые `Boolean`, даты, null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-2854">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="c583d-2855">Следующие универсальные предположения а затем данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="c583d-2855">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="c583d-2856">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c583d-2856">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="c583d-2857">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` выводится на печать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2857">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="c583d-2858">`True` И `False` ключевые слова не преобразуются, независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2858">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="c583d-2859">Дата записывается в файл с помощью универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="c583d-2859">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="c583d-2860">Когда дата или время отсутствует или ноль, только часть предоставляемых записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2860">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="c583d-2861">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-2861">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c583d-2862">Однако для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-2862">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="c583d-2863">Для `Error` данные, выходные данные отображаются в виде `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2863">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="c583d-2864">`Error` Ключевого слова не преобразуются, независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2864">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="c583d-2865">`WriteLine` Вставляет символ новой строки (то есть, возврат каретки и строки веб-канал, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2865">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="c583d-2866">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="c583d-2866">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="c583d-2867">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="c583d-2867">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="c583d-2868">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2868">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="c583d-2869">Запись в файл с помощью `Write` или `WriteLine` функции требует `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2869">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2870">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2870">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2871">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2871">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="c583d-2872">Недопустимый режим файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2872">File mode is invalid.</span></span></exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (int FileNumber, params object[] Output);" />
      <MemberSignature Language="ILAsm" Value=".method public static void WriteLine(int32 FileNumber, object[] Output) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.FileSystem.WriteLine(System.Int32,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteLine (FileNumber As Integer, ParamArray Output As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(int FileNumber, ... cli::array &lt;System::Object ^&gt; ^ Output);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="FileNumber" Type="System.Int32" />
        <Parameter Name="Output" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="FileNumber"><span data-ttu-id="c583d-2873">Обязательно.</span><span class="sxs-lookup"><span data-stu-id="c583d-2873">Required.</span></span> <span data-ttu-id="c583d-2874">Выражение <see langword="Integer" />, содержащее любой допустимый номер файла.</span><span class="sxs-lookup"><span data-stu-id="c583d-2874">An <see langword="Integer" /> expression that contains any valid file number.</span></span></param>
        <param name="Output"><span data-ttu-id="c583d-2875">Необязательный.</span><span class="sxs-lookup"><span data-stu-id="c583d-2875">Optional.</span></span> <span data-ttu-id="c583d-2876">Одно или несколько выражений с разделителями-запятыми, которые нужно записать в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2876">One or more comma-delimited expressions to write to a file.</span></span></param>
        <summary><span data-ttu-id="c583d-2877">Записывает данные в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2877">Writes data to a sequential file.</span></span> <span data-ttu-id="c583d-2878">Данные, записанные с использованием <see langword="Write" />, обычно считываются с помощью <see langword="Input" />.</span><span class="sxs-lookup"><span data-stu-id="c583d-2878">Data written with <see langword="Write" /> is usually read from a file by using <see langword="Input" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c583d-2879">`Write` И `WriteLine` функции предоставляются для обратной совместимости и может повлиять на производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2879">The `Write` and `WriteLine` functions are provided for backward compatibility and may affect performance.</span></span> <span data-ttu-id="c583d-2880">Для приложений, отличных от прежних версий `My.Computer.FileSystem` объекта обеспечивает более высокую производительность.</span><span class="sxs-lookup"><span data-stu-id="c583d-2880">For non-legacy applications, the `My.Computer.FileSystem` object provides better performance.</span></span> <span data-ttu-id="c583d-2881">Дополнительные сведения см. в разделе [доступ к файлам с помощью Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span><span class="sxs-lookup"><span data-stu-id="c583d-2881">For more information, see [File Access with Visual Basic](~/docs/visual-basic/developing-apps/programming/drives-directories-files/file-access.md).</span></span>  
  
 <span data-ttu-id="c583d-2882">Если не указан `Output`, выводит пустую строку в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2882">If you omit `Output`, a blank line is printed to the file.</span></span> <span data-ttu-id="c583d-2883">Несколько выражений могут разделяться запятыми.</span><span class="sxs-lookup"><span data-stu-id="c583d-2883">Multiple expressions can be separated with a comma.</span></span>  
  
 <span data-ttu-id="c583d-2884">В отличие от `Print` функции `Write` функция вставляет запятые между элементами и заключается в кавычки строки, записываемые в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2884">Unlike the `Print` function, the `Write` function inserts commas between items and quotation marks around strings as they are written to the file.</span></span> <span data-ttu-id="c583d-2885">Не нужно вставлять в список явные ограничители.</span><span class="sxs-lookup"><span data-stu-id="c583d-2885">You do not have to put explicit delimiters in the list.</span></span> <span data-ttu-id="c583d-2886">Когда `Write` используется для записи данных в файл только числовые `Boolean`, даты, null, и `Error` поддерживаются форматы данных.</span><span class="sxs-lookup"><span data-stu-id="c583d-2886">When `Write` is used to write data to a file, only numeric, `Boolean`, date, null, and `Error` data formats are supported.</span></span> <span data-ttu-id="c583d-2887">Следующие универсальные предположения а затем данные всегда могут быть прочитаны и правильно интерпретированы с помощью `Input`, независимо от языкового стандарта:</span><span class="sxs-lookup"><span data-stu-id="c583d-2887">The following universal assumptions are followed so the data can always be read and correctly interpreted using `Input`, regardless of locale:</span></span>  
  
-   <span data-ttu-id="c583d-2888">Числовые данные всегда записываются с использованием точки в качестве десятичного разделителя.</span><span class="sxs-lookup"><span data-stu-id="c583d-2888">Numeric data is always written using the period as the decimal separator.</span></span>  
  
-   <span data-ttu-id="c583d-2889">Для `Boolean` данных, либо `#TRUE#` или `#FALSE#` выводится на печать.</span><span class="sxs-lookup"><span data-stu-id="c583d-2889">For `Boolean` data, either `#TRUE#` or `#FALSE#` is printed.</span></span> <span data-ttu-id="c583d-2890">`True` И `False` ключевые слова не преобразуются, независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2890">The `True` and `False` keywords are not translated, regardless of locale.</span></span>  
  
-   <span data-ttu-id="c583d-2891">Дата записывается в файл с помощью универсальный формат даты.</span><span class="sxs-lookup"><span data-stu-id="c583d-2891">Date data is written to the file using the universal date format.</span></span> <span data-ttu-id="c583d-2892">Когда дата или время отсутствует или ноль, только часть предоставляемых записывается в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2892">When either the date or the time component is missing or zero, only the part provided is written to the file.</span></span>  
  
-   <span data-ttu-id="c583d-2893">Ничего не записывается в файл, если `Output` данных пуст.</span><span class="sxs-lookup"><span data-stu-id="c583d-2893">Nothing is written to the file if `Output` data is empty.</span></span> <span data-ttu-id="c583d-2894">Однако для пустых данных `#NULL#` записывается.</span><span class="sxs-lookup"><span data-stu-id="c583d-2894">However, for null data, `#NULL#` is written.</span></span>  
  
-   <span data-ttu-id="c583d-2895">Для `Error` данные, выходные данные отображаются в виде `#ERROR errorcode#`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2895">For `Error` data, the output appears as `#ERROR errorcode#`.</span></span> <span data-ttu-id="c583d-2896">`Error` Ключевого слова не преобразуются, независимо от языкового стандарта.</span><span class="sxs-lookup"><span data-stu-id="c583d-2896">The `Error` keyword is not translated, regardless of locale.</span></span>  
  
 <span data-ttu-id="c583d-2897">`WriteLine` Вставляет символ новой строки (то есть, возврат каретки и строки веб-канал, или `Chr(13) + Chr(10)`), после записи последнего символа `Output` в файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2897">`WriteLine` inserts a newline character (that is, a carriage return/line feed, or `Chr(13) + Chr(10)`), after it has written the final character in `Output` to the file.</span></span>  
  
 <span data-ttu-id="c583d-2898">Можно вставить кавычки в строке с помощью двойных кавычек, или «».</span><span class="sxs-lookup"><span data-stu-id="c583d-2898">You can embed quotation marks in a string by using double quotation marks, or "".</span></span> <span data-ttu-id="c583d-2899">Например, примененная к объекту директива</span><span class="sxs-lookup"><span data-stu-id="c583d-2899">For example,</span></span>  
  
 [!code-vb[VbVbalrCatRef#63](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#63)]  
  
 <span data-ttu-id="c583d-2900">Возвращает строку со значением `Double quotation marks aren't "difficult" to handle`.</span><span class="sxs-lookup"><span data-stu-id="c583d-2900">returns a string with the value of `Double quotation marks aren't "difficult" to handle`.</span></span>  
  
 <span data-ttu-id="c583d-2901">Запись в файл с помощью `Write` или `WriteLine` функции требует `Append` доступ из `FileIOPermissionAccess` перечисления.</span><span class="sxs-lookup"><span data-stu-id="c583d-2901">Writing to a file by using the `Write` or `WriteLine` functions requires `Append` access from the `FileIOPermissionAccess` enumeration.</span></span> <span data-ttu-id="c583d-2902">Для получения дополнительной информации см. <xref:System.Security.Permissions.FileIOPermissionAccess>.</span><span class="sxs-lookup"><span data-stu-id="c583d-2902">For more information, see <xref:System.Security.Permissions.FileIOPermissionAccess> .</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c583d-2903">В этом примере используется `Write` функции для записи необработанных данных в последовательный файл.</span><span class="sxs-lookup"><span data-stu-id="c583d-2903">This example uses the `Write` function to write raw data to a sequential file.</span></span>  
  
 [!code-vb[VbVbalrCatRef#64](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrCatRef/VB/Class1.vb#64)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Write(System.Int32,System.Object[])" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.Input" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.FileOpen(System.Int32,System.String,Microsoft.VisualBasic.OpenMode,Microsoft.VisualBasic.OpenAccess,Microsoft.VisualBasic.OpenShare,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.Print(System.Int32,System.Object[])" />
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.PrintLine(System.Int32,System.Object[])" />
      </Docs>
    </Member>
  </Members>
</Type>