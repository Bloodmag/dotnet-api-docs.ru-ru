<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4686960282aaa5c88ca13b9310a5f0a2656ed483" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36658849" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Financial" /> содержатся процедуры, используемые для выполнения финансовых операций.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает члены библиотеки времени выполнения Visual Basic, которые выполняют финансовых расчетов, например амортизации, текущих и будущих значений, процентных ставок, ставок возврата и платежей.  
  
   
  
## Examples  
 В этом примере используется `Rate` функции для вычисления процентную ставку по кредиту, Получает общее число выплат (`TotPmts`), сумма платежа кредитов (`Payment`), текущее значение или участника, от порядка (`PVal`), будущее значение порядка (`FVal`), число, определяющее момент платежа — начало или конец периода оплаты (`PayType`) и приблизительное ожидаемой процентной ставки (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательно. Значение типа <see langword="Double" />, указывающее начальную стоимость актива.</param>
        <param name="Salvage">Обязательно. Значение типа <see langword="Double" />, задающее стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательно. Значение типа <see langword="Double" />, задающее срок эксплуатации актива.</param>
        <param name="Period">Обязательно. Значение типа <see langword="Double" />, задающее период расчета амортизации актива.</param>
        <param name="Factor">Необязательный. Значение типа <see langword="Double" />, задающее коэффициент уменьшения остатка. Если значение не указано, то предполагается 2 (метод двойного уменьшения остатка).</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее амортизацию актива за указанный период времени с помощью метода двойного уменьшения остатка или другого указанного метода.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее амортизацию актива за указанный период времени с помощью метода двойного уменьшения остатка или другого указанного метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод двойного уменьшения остатка вычисляет амортизацию, используя увеличенный коэффициент. Снижение стоимости максимальна в первый период и уменьшается в последующие.  
  
 `Life` И `Period` аргументы должны задаваться в одинаковых единицах измерения. Например если `Life` задается в месяцах, `Period` также должен быть задан в месяцах. Все аргументы должны быть положительными числами.  
  
 `DDB` Функция использует следующую формулу для вычисления амортизации в течение заданного периода:  
  
 Амортизации / период = ((Cost – Salvage) * коэффициент) / жизни  
  
   
  
## Examples  
 В этом примере используется `DDB` функция, возвращающая амортизацию ресурса за указанный период начальной стоимости (`InitCost`), стоимость в конце срока полезного использования актива (`SalvageVal`), полное время нормальной эксплуатации актива в годах (`LifeTime`) и период в годах, для которых производится вычисление амортизации (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0 или <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Значение типа <see langword="Double" />, определяющее процентную ставку за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательно. Значение типа <see langword="Double" />, задающее общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="Pmt">Обязательно. Значение типа <see langword="Double" />, определяющее платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Необязательный. Значение типа <see langword="Double" />, задающее приведенную (нынешнюю) стоимость, или общую сумму, равноценную на данный момент серии будущих выплат. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <see langword="DueDate.EndOfPeriod" />, если выплаты должны производиться в конце периода, либо <see langword="DueDate.BegOfPeriod" /> в случае оплаты в начале периода. Если этот аргумент опущен, используется <see langword="DueDate.EndOfPeriod" />.</param>
        <summary>Возвращает значение типа <see langword="Double" />, указывающее будущее значение аннуитета, рассчитываемого на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, указывающее будущее значение аннуитета, рассчитываемого на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов платежей, выраженных в одинаковых единицах измерения. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
   
  
## Examples  
 В этом примере используется `FV` курс функция, возвращающая будущее значение инвестиции в процентах, который начисляемые за период (`APR / 12`), общее число платежей (`TotPmts`), платеж (`Payment`), текущее значение инвестиций (`PVal`) и число, которое указывает, используется ли платеж в начале или в конце периода оплаты (`PayType`). Обратите внимание, что поскольку `Payment` представляет размер выплат, он является отрицательным числом.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Значение типа <see langword="Double" />, определяющее процентную ставку за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Per">Обязательно. Значение типа <see langword="Double" />, задающее расчетный период в диапазоне от 1 до <c>NPer</c>.</param>
        <param name="NPer">Обязательно. Значение типа <see langword="Double" />, задающее общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="PV">Обязательно. Значение типа <see langword="Double" />, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный. Значение типа <see langword="Double" />, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее процентный платеж аннуитета, рассчитываемому на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее процентный платеж аннуитета, рассчитываемому на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов платежей, выраженных в одинаковых единицах измерения. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
   
  
## Examples  
 В этом примере используется `IPmt` функции для вычисления оплаты занятого интерес при всех платежей имеют одинаковые значения. При этом задаются процентная ставка за период (`APR / 12`), расчетный период, для которого требуется по процентам (`Period`), общее число выплат (`TotPmts`), текущее значение или участника, от порядка (`PVal`), будущее значение порядка (`FVal`) и число, определяющее момент платежа — начало или конец периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;= 0 или <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Обязательно. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <param name="Guess">Необязательный. Объект, задающий значение, которое будет возвращено функцией <see langword="IRR" />. Если этот параметр опущен, используется значение <c>Guess</c>, равное 0,1 (10 процентам).</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Внутреннюю норму прибыли является процентную ставку, полученную от вложений, состоящий из выплат и поступлений, возникающие через регулярные интервалы.  
  
 `IRR` Функция использует порядок значений в массиве для интерпретации порядок выплат и поступлений. Убедитесь в том, что значения поступления платежей и в верной последовательности. Движение денежных средств за каждый период необязательно должно быть постоянным, как и для ежегодного платежа.  
  
 `IRR` вычисляется путем итерации. Начиная со значением `Guess`, `IRR` циклы вычисления, пока не получит результат с точностью 0,00001 процента. Если `IRR` не удается найти результат после 20 пытается подключиться, она завершается.  
  
   
  
## Examples  
 В этом примере `IRR` функция возвращает внутреннюю норму прибыли для ряда пять денежных потоков, содержащихся в массиве `Values()`. Первый элемент массива является отрицательной денежной операцией, представляющей собой затраты на бизнес. Оставшиеся четыре денежных потока представляют положительные денежные потоки для последующих четырех лет. `Guess` имеет предполагаемый внутреннюю норму прибыли.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимые значения аргументов массива, или <paramref name="Guess" /> &lt;= –1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Обязательно. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <param name="FinanceRate">Обязательно. Значение типа <see langword="Double" />, определяющее процентную ставку оплаты как стоимость финансирования.</param>
        <param name="ReinvestRate">Обязательно. Значение типа <see langword="Double" />, определяющее процентную ставку доходов от реинвестирования денежных средств.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Измененную внутреннюю норму прибыли при внутреннюю норму прибыли выплат и поступлений подсчитываются с разной интенсивностью. `MIRR` Функции учитывается как стоимость инвестиций (`FinanceRate`) и процентную ставку реинвестирования денежных средств (`ReinvestRate`).  
  
 `FinanceRate` И `ReinvestRatearguments` процентных соотношений, выраженное в виде десятичных значений. Например 12 процентов задаются как 0,12.  
  
 `MIRR` Функция использует порядок значений в массиве для интерпретации порядок выплат и поступлений. Убедитесь в том, что значения поступления платежей и в верной последовательности.  
  
   
  
## Examples  
 В этом примере используется `MIRR` функция возвращает измененную внутреннюю норму прибыли для ряда денежных потоков, содержащихся в массиве `Values()`. `LoanAPR` представляет интерес финансирования, а `InvAPR` представляет процентную ставку реинвестирования.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ранг <paramref name="ValueArray" /> не равен 1, <paramref name="FinanceRate" /> =-1, или <paramref name="ReinvestRate" /> =-1</exception>
        <exception cref="T:System.DivideByZeroException">Произошло деление на ноль.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Значение типа <see langword="Double" />, определяющее процентную ставку за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Pmt">Обязательно. Значение типа <see langword="Double" />, определяющее платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Обязательно. Значение типа <see langword="Double" />, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный. Значение типа <see langword="Double" />, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее число периодов выплат аннуитета, рассчитываемое на основе периодических фиксированных платежей и постоянной процентной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее число периодов выплат аннуитета, рассчитываемое на основе периодических фиксированных платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат за период времени. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
   
  
## Examples  
 В этом примере используется `NPer` функция, возвращающая число периодов, в течение которых должны быть сделаны платежи для погашения кредиту, значение которого содержится в `PVal`. При этом задаются процентная ставка за период (`APR / 12`), платеж (`Payment`), будущее значение порядка (`FVal`) и число, определяющее момент платежа — начало или конец периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Rate" /> = 0 и <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Представленное в виде десятичного числа значение типа <see langword="Double" />, задающее размер учетной ставки за период времени.</param>
        <param name="ValueArray">Обязательно. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее величину чистой приведенной стоимости инвестирования на основе ряда периодических денежных потоков (платежей и поступлений) и учетной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее величину чистой приведенной стоимости инвестирования на основе ряда периодических денежных потоков (платежей и поступлений) и учетной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чистую приведенную стоимость вложений — это текущее значение из серии будущих выплат и поступлений.  
  
 `NPV` Функция использует порядок значений в массиве для интерпретации порядок выплат и поступлений. Убедитесь в том, что значения поступления платежей и в верной последовательности.  
  
 `NPV` Инвестиции начинается за один период до даты первого значения денежных и оканчивается последней значение денежного потока в массиве.  
  
 Расчет чистой текущей стоимости основан на будущих денежных потоков. Если первый денежные потоки возникает в начале первого периода, первое значение необходимо добавить в значение, возвращаемое `NPV` и не должно включаться в значения денежных `ValueArray`.  
  
 `NPV` Функция подобна `PV` функции (текущее значение), за исключением того, что `PV` функция обеспечивает денежных потоков начать в конце или в начале периода. В отличие от переменной `NPV` значений денежных `PV` денежных потоков, которые должны быть постоянными на протяжении капиталовложения.  
  
   
  
## Examples  
 В этом примере используется `NPV` функция возвращает чистую приведенную стоимость для ряда денежных операций, содержащихся в массиве `values()`. Возвращаемое значение, хранящееся в `FixedRetRate`, представляющий основных внутреннюю норму прибыли.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="ValueArray" /> равно <see langword="Nothing" />, ранг <paramref name="ValueArray" /> &lt;&gt; 1, или <paramref name="Rate" /> = –1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Значение типа <see langword="Double" />, определяющий процентную ставку за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательно. Значение типа <see langword="Double" />, задающее общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 * 12 (или 48).</param>
        <param name="PV">Обязательно. Значение типа <see langword="Double" />, определяющее текущую стоимость (или общую сумму) платежей, которые должны быть уплачены в будущем. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный. Значение типа <see langword="Double" />, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее платеж по аннуитету на основе периодических фиксированных платежей и постоянной процентной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее платеж по аннуитету на основе периодических фиксированных платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат за период времени. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов платежей, выраженных в одинаковых единицах измерения. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
   
  
## Examples  
 В этом примере используется `Pmt` функция, возвращающая ежемесячного платежа по кредиту за определенный период. При этом задаются процентная ставка за период (`APR / 12`), общее число выплат (`TotPmts`), текущее значение или участника, от порядка (`PVal`), будущее значение порядка (`FVal`) и число, которое указывает ли Платежи осуществляются в начале или в конце периода оплаты `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Значение типа <see langword="Double" />, определяющий процентную ставку за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Per">Обязательно. Значение типа <see langword="Double" />, указывающее расчетный период в диапазоне от 1 до <c>NPer</c>.</param>
        <param name="NPer">Обязательно. Значение типа <see langword="Double" />, задающее общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="PV">Обязательно. Значение типа <see langword="Double" />, задающее текущее значение из серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный. Значение типа <see langword="Double" />, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее главный платеж аннуитета, рассчитываемому на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее главный платеж аннуитета, рассчитываемому на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат за период времени. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов платежей, выраженных в одинаковых единицах измерения. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
   
  
## Examples  
 В этом примере используется `PPmt` функция для вычисления оплаты за определенный период занятого основной при всех платежей имеют одинаковые значения. При этом задаются процентная ставка за период (`APR / 12`), расчетный период, для которого требуется основной части (`Period`), общее число выплат (`TotPmts`), текущее значение или участника, от порядка (`PVal`), будущее значение порядка (`FVal`) и число, определяющее момент платежа — начало или конец периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Per" /> &lt;=0 или <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательно. Значение типа <see langword="Double" />, определяющий процентную ставку за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательно. Значение типа <see langword="Double" />, задающее общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет количество периодов выплат будет равно 4 * 12 (или 48).</param>
        <param name="Pmt">Обязательно. Значение типа <see langword="Double" />, определяющее платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="FV">Необязательный. Значение типа <see langword="Double" />, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее текущее значение аннуитета на основе фиксированных периодических платежей и постоянной процентной ставки.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее текущее значение аннуитета на основе фиксированных периодических платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат за период времени. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов платежей, выраженных в одинаковых единицах измерения. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
   
  
## Examples  
 В этом примере `PV` функция возвращает текущее значение ежегодного платежа 1 000 000 долларов, который предоставит 50 000 долларов в год Далее 20 лет. Предоставленными являются ожидаемая годовую процентную ставку (`APR`), общее число платежей (`TotPmts`), размер каждого платежа (`YrIncome`), общее будущее значение инвестиции (`FVal`) и число, которое указывает ли каждого в начале или в конце периода оплаты выплаты (`PayType`). Обратите внимание, что `YrIncome` является отрицательным числом, так как он представляет выплаченные из платежа каждый год.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Обязательно. Значение типа <see langword="Double" />, задающее общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов оплаты будет равно 4 x 12 (или 48).</param>
        <param name="Pmt">Обязательно. Значение типа <see langword="Double" />, определяющее платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Обязательно. Значение типа <see langword="Double" />, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный. Значение типа <see langword="Double" />, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <param name="Guess">Необязательный. Значение типа <see langword="Double" />, задающее оцениваемое значение и возвращаемое функцией <see langword="Rate" />. Если этот параметр опущен, используется значение <c>Guess</c>, равное 0,1 (10 процентам).</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее процентную ставку за период для аннуитета.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее процентную ставку за период для аннуитета.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ежегодного платежа представляет собой серию фиксированных денежных выплат за период времени. Это может быть заем (например ипотеки) или инвестиций (например ежемесячный сберегательный план).  
  
 Все аргументы выплаченные (такие как вклады на сберегательный счет) представляются отрицательными числами; денежных средств, полученных (например дивидендов) будет представлен положительные числа.  
  
 `Rate` вычисляется путем итерации. Начиная со значением `Guess`, `Rate` циклы вычисления, пока не получит результат с точностью 0,00001 процента. Если `Rate` не удается найти результат после 20 пытается подключиться, она завершается. Если guess составляет 10 процентов и `Rate` завершается ошибкой, попробуйте другое значение для `Guess`.  
  
   
  
## Examples  
 В этом примере используется `Rate` функции для вычисления процентную ставку по кредиту Получает общее число выплат (`TotPmts`), сумма платежа кредитов (`Payment`), текущее значение или участника, от порядка (`PVal`), будущее значение порядка (`FVal`), число, определяющее момент платежа — начало или конец периода оплаты (`PayType`) и приблизительное ожидаемой процентной ставки (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательно. Значение типа <see langword="Double" />, указывающее начальную стоимость актива.</param>
        <param name="Salvage">Обязательно. Значение типа <see langword="Double" />, задающее стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательно. Значение типа <see langword="Double" />, задающее срок эксплуатации актива.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее равномерную амортизацию актива за один период времени.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее равномерную амортизацию актива за один период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Период амортизации должны задаваться в одну и ту же единицу как `Life` аргумент. Все аргументы должны быть положительными числами.  
  
   
  
## Examples  
 В этом примере используется `SLN` функция, возвращающая линейную амортизацию ресурса за один период времени; (`InitCost`), стоимость в конце срока полезного использования актива (`SalvageVal`) и всего жизненного цикла актива в годах (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательно. Значение типа <see langword="Double" />, указывающее начальную стоимость актива.</param>
        <param name="Salvage">Обязательно. Значение типа <see langword="Double" />, задающее стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательно. Значение типа <see langword="Double" />, задающее срок эксплуатации актива.</param>
        <param name="Period">Обязательно. Значение типа <see langword="Double" />, задающее период расчета амортизации актива.</param>
        <summary>Возвращает значение типа <see langword="Double" />, определяющее величину ускоренной амортизации актива за указанный период времени.</summary>
        <returns>Возвращает значение типа <see langword="Double" />, определяющее величину ускоренной амортизации актива за указанный период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life` И `Period` аргументы должны задаваться в одинаковых единицах измерения. Например если `Life` задается в месяцах, `Period` также должен быть задан в месяцах. Все аргументы должны быть положительными числами.  
  
   
  
## Examples  
 В этом примере используется `SYD` функция, возвращающая амортизацию ресурса за указанный период времени; (`InitCost`), стоимость в конце срока полезного использования актива (`SalvageVal`) и полное время нормальной эксплуатации актива в лет (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, или <paramref name="Period" /> &lt;= 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
  </Members>
</Type>