<Type Name="Strings" FullName="Microsoft.VisualBasic.Strings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6b720a5c53d27944cd3cd053d3b53983622209fc" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32090365" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Strings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Strings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Strings" />
  <TypeSignature Language="VB.NET" Value="Public Module Strings" />
  <TypeSignature Language="C++ CLI" Value="public ref class Strings sealed" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Strings" /> содержатся процедуры, используемые для выполнения операций над строками.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает ключевые слова языка Visual Basic и члены библиотеки времени выполнения, работы со строками.  
  
   
  
## Examples  
 В следующем примере показано, как для разбиения строки относительно пробелов.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Asc">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Asc (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Обязательно. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <c>String</c> — выражение типа <see langword="String" />, в качестве входного значения используется только первый символ строки. Если параметр <c>String</c> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовой*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовой кодировки (SBCS) и значения от -32768 до 32767 для двухбайтовой кодировки (DBCS) значения.  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версиях Visual Basic возвращает код для байта, вместо символа. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005 кодируются в Юникоде, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды соответствующий первую букву в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Asc">
      <MemberSignature Language="C#" Value="public static int Asc (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Asc(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Asc(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Asc(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Обязательно. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <c>String</c> — выражение типа <see langword="String" />, в качестве входного значения используется только первый символ строки. Если параметр <c>String</c> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовой*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовой кодировки (SBCS) и значения от -32768 до 32767 для двухбайтовой кодировки (DBCS) значения.  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версиях Visual Basic возвращает код для байта, вместо символа. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005 кодируются в Юникоде, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды соответствующий первую букву в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AscW">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (char String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(char String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function AscW (String As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(char String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="String">Обязательно. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <c>String</c> — выражение типа <see langword="String" />, в качестве входного значения используется только первый символ строки. Если параметр <c>String</c> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовой*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовой кодировки (SBCS) и значения от -32768 до 32767 для двухбайтовой кодировки (DBCS) значения.  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версиях Visual Basic возвращает код для байта, вместо символа. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005 кодируются в Юникоде, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды соответствующий первую букву в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="AscW">
      <MemberSignature Language="C#" Value="public static int AscW (string String);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 AscW(string String) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.AscW(System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int AscW(System::String ^ String);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="String">Обязательно. Любое допустимое значение <see langword="Char" /> или выражение <see langword="String" />. Если параметр <c>String</c> — выражение типа <see langword="String" />, в качестве входного значения используется только первый символ строки. Если параметр <c>String</c> равен <see langword="Nothing" /> или не содержит знаков, возникает ошибка <see cref="T:System.ArgumentException" />.</param>
        <summary>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</summary>
        <returns>Возвращает значение типа <see langword="Integer" />, представляющее код знака, соответствующий знаку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Asc` Возвращает *кодовой*, или код символа, для входного символа. Это может быть от 0 до 255 для однобайтовой кодировки (SBCS) и значения от -32768 до 32767 для двухбайтовой кодировки (DBCS) значения.  
  
 `AscW` Возвращает кодовую точку Юникода для входного символа. Это может быть от 0 до 65535. Возвращаемое значение не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока.  
  
> [!NOTE]
>  `AscB` Функция более ранних версиях Visual Basic возвращает код для байта, вместо символа. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005 кодируются в Юникоде, и `AscB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Asc` функция, возвращающая `Integer` символов коды соответствующий первую букву в каждой строке.  
  
 [!code-vb[VbVbalrFunctions#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrFunctions/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="N:System.Globalization" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="P:System.Globalization.TextInfo.ANSICodePage" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Chr">
      <MemberSignature Language="C#" Value="public static char Chr (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char Chr(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Chr (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char Chr(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Обязательно. Выражение <see langword="Integer" />, представляющее <c>кодовую точку</c> (код символа) для символа.</param>
        <summary>Возвращает знак, связанный с указанным кодом знака.</summary>
        <returns>Возвращает знак, связанный с указанным кодом знака.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асимметричный диапазон, принятых для `CharCode` компенсирует различия в хранении `Short` и `Integer`. Например,-29183 является `Short` , то 36353 `Integer`. Это также способствует совместимости с Visual Basic 6.0.  
  
 `Chr` использует <xref:System.Text.Encoding> класса в <xref:System.Text?displayProperty=nameWithType> пространства имен, чтобы определить, использует ли текущий поток набор однобайтовых символов (SBCS) или двухбайтовый символ набор (DBCS). Затем принимает `CharCode` как кода точки из соответствующего набора. Диапазон может быть от 0 до 255 для набора Однобайтовых символов и от -32768 до 65535 символов DBCS.  
  
 Возвращаемое значение зависит от кодовой страницы для текущего потока, который содержится в <xref:System.Globalization.TextInfo.ANSICodePage%2A> свойство <xref:System.Globalization.TextInfo> класса в <xref:System.Globalization> пространства имен. Вы можете получить <xref:System.Globalization.TextInfo.ANSICodePage%2A> , указав `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` принимает `CharCode` как Юникод кода точки. Диапазон не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока. Значения от -32768 до-1 интерпретируется как значения в диапазоне от + 32768 до + 65535.  
  
 Числа в диапазоне от 0 до 31 являются таким же, как стандартные непечатаемые коды ASCII. Например `Chr(10)` возвращает символом перевода строки.  
  
> [!NOTE]
>  `ChrB` В предыдущих версиях Visual Basic функция возвращает только один байт. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки в Visual Basic и .NET Framework хранятся в Юникоде и `ChrB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Chr` функция возвращает символ, соответствующий заданному коду символа.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; 0 или &gt; 255 для <see langword="Chr" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="ChrW">
      <MemberSignature Language="C#" Value="public static char ChrW (int CharCode);" />
      <MemberSignature Language="ILAsm" Value=".method public static char ChrW(int32 CharCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ChrW (CharCode As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char ChrW(int CharCode);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="CharCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="CharCode">Обязательно. Выражение <see langword="Integer" />, представляющее <c>кодовую точку</c> (код символа) для символа.</param>
        <summary>Возвращает знак, связанный с указанным кодом знака.</summary>
        <returns>Возвращает знак, связанный с указанным кодом знака.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асимметричный диапазон, принятых для `CharCode` компенсирует различия в хранении `Short` и `Integer`. Например,-29183 является `Short` , то 36353 `Integer`. Это также способствует совместимости с Visual Basic 6.0.  
  
 `Chr` использует <xref:System.Text.Encoding> класса в <xref:System.Text?displayProperty=nameWithType> пространства имен, чтобы определить, использует ли текущий поток набор однобайтовых символов (SBCS) или двухбайтовый символ набор (DBCS). Затем принимает `CharCode` как кода точки из соответствующего набора. Диапазон может быть от 0 до 255 для набора Однобайтовых символов и от -32768 до 65535 символов DBCS.  
  
 Возвращаемое значение зависит от кодовой страницы для текущего потока, который содержится в <xref:System.Globalization.TextInfo.ANSICodePage%2A> свойство <xref:System.Globalization.TextInfo> класса в <xref:System.Globalization> пространства имен. Вы можете получить <xref:System.Globalization.TextInfo.ANSICodePage%2A> , указав `System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`.  
  
 `ChrW` принимает `CharCode` как Юникод кода точки. Диапазон не зависит от языка и региональных параметров и параметров кодовой страницы для текущего потока. Значения от -32768 до-1 интерпретируется как значения в диапазоне от + 32768 до + 65535.  
  
 Числа в диапазоне от 0 до 31 являются таким же, как стандартные непечатаемые коды ASCII. Например `Chr(10)` возвращает символом перевода строки.  
  
> [!NOTE]
>  `ChrB` В предыдущих версиях Visual Basic функция возвращает только один байт. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки в Visual Basic и .NET Framework хранятся в Юникоде и `ChrB` больше не поддерживается.  
  
   
  
## Examples  
 В следующем примере используется `Chr` функция возвращает символ, соответствующий заданному коду символа.  
  
 [!code-vb[VbVbalrStrings#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="CharCode" /> &lt; –32768 или &gt; 65535 для <see langword="ChrW" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Asc" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.AscW" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Filter">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(object[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As Object(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.Object[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Обязательно. Одномерный массив строк, в котором необходимо выполнить поиск.</param>
        <param name="Match">Обязательно. Строка, которую требуется найти.</param>
        <param name="Include">Необязательный. Значение типа <see langword="Boolean" />, указывающее, какие подстроки требуется возвращать: содержащие или не содержащие строку <c>Match</c>. Если параметр <c>Include</c> равен <see langword="True" />, функция <see langword="Filter" /> возвращает подмножество строк массива, содержащих <c>Match</c> в виде подстроки. Если параметр <c>Include</c> равен <see langword="False" />, функция <see langword="Filter" /> возвращает подмножество строк массива, не содержащих <c>Match</c> в виде подстроки.</param>
        <param name="Compare">Необязательный. Числовое значение, указывающее вид выполняемого сравнения строк. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</summary>
        <returns>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если совпадений нет `Match` находится в `Source`, `Filter` функция возвращает пустой массив. Если возникает ошибка `Source` равно `Nothing` или не является одномерным массивом.  
  
 Массив, возвращаемый методом `Filter` функция содержит ровно столько элементов, которые могут содержать количество соответствующих элементов.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание:|  
|-|-|  
|Константа|Описание:|  
|`CompareMethod.Binary`|Выполняет двоичное сравнение|  
|`CompareMethod.Text`|Выполняет сравнение по тексту|  
  
   
  
## Examples  
 В этом примере показано использование функции `Filter` функции.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> является <see langword="Nothing" /> или не является одномерным массивом.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Filter(string[] Source, string Match, bool Include, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Filter (Source As String(), Match As String, Optional Include As Boolean = true, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String[]" />
        <Parameter Name="Match" Type="System.String" />
        <Parameter Name="Include" Type="System.Boolean" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Source">Обязательно. Одномерный массив строк, в котором необходимо выполнить поиск.</param>
        <param name="Match">Обязательно. Строка, которую требуется найти.</param>
        <param name="Include">Необязательный. Значение типа <see langword="Boolean" />, указывающее, какие подстроки требуется возвращать: содержащие или не содержащие строку <c>Match</c>. Если параметр <c>Include</c> равен <see langword="True" />, функция <see langword="Filter" /> возвращает подмножество строк массива, содержащих <c>Match</c> в виде подстроки. Если параметр <c>Include</c> равен <see langword="False" />, функция <see langword="Filter" /> возвращает подмножество строк массива, не содержащих <c>Match</c> в виде подстроки.</param>
        <param name="Compare">Необязательный. Числовое значение, указывающее вид выполняемого сравнения строк. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</summary>
        <returns>Возвращает массив (с индексацией от нуля), который содержит подмножество массива типа <see langword="String" />, выделяемое согласно указанным условиям фильтрации.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если совпадений нет `Match` находится в `Source`, `Filter` функция возвращает пустой массив. Если возникает ошибка `Source` равно `Nothing` или не является одномерным массивом.  
  
 Массив, возвращаемый методом `Filter` функция содержит ровно столько элементов, которые могут содержать количество соответствующих элементов.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание:|  
|-|-|  
|`CompareMethod.Binary`|Выполняет двоичное сравнение|  
|`CompareMethod.Text`|Выполняет сравнение по тексту|  
  
   
  
## Examples  
 В этом примере показано использование функции `Filter` функции.  
  
 [!code-vb[VbVbalrStrings#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Source" /> является <see langword="Nothing" /> или не является одномерным массивом.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public static string Format (object Expression, string Style = &quot;&quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Format(object Expression, string Style) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (Expression As Object, Optional Style As String = &quot;&quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="Style" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Любое допустимое выражение.</param>
        <param name="Style">Необязательный. Правильно именованное или определенное пользователем выражение формата <see langword="String" />.</param>
        <summary>Возвращает строку, отформатированную в соответствии с инструкциями, содержащимися в формате выражения <see langword="String" />.</summary>
        <returns>Возвращает строку, отформатированную в соответствии с инструкциями, содержащимися в формате выражения <see langword="String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.String.Format%2A?displayProperty=nameWithType> Метод также предоставляет аналогичные функциональные возможности.  
  
 При форматировании нелокализованной числовой строки числового формата, определяемых пользователем следует использовать, чтобы получить желаемый вид.  
  
 При попытке форматировать числа без указания `Style`, `Format` функция предоставляет функциональность, аналогичную `Str` работать, но с других странах. Однако положительные числа в формате строки, используя `Format` функция не включает начальный пробел для знака значения; их преобразовывать с помощью `Str` функция сохранить начальный пробел.  
  
## <a name="different-formats-for-different-numeric-values"></a>Различные форматы для различных числовых значений  
 Выражение пользовательского формата для чисел может содержать от одного до трех разделов, разделенных точкой с запятой. Если `Style` аргумент `Format` функция содержит один из стандартных числовых форматов, допускается только один раздел.  
  
|Если вы используете|Результат|  
|-|-|  
|Только одна секция|Выражение форматирования применяется ко всем значениям.|  
|Две секции|Первая секция применяется для положительных значений и нулей; второй применяется для отрицательных значений.|  
|Три секции|Первый раздел распространяется на положительные значения, второй применяется для отрицательных значений и третий относится к нули.|  
  
 Следующий пример состоит из двух разделов: первый определяет формат для положительных значений и нулей; Во втором разделе определяет формат отрицательных значений. Поскольку `Style` аргумент `Format` функция принимает строку, она заключена в кавычки.  
  
 [!code-vb[VbVbalrStrings#18](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#18)]  
  
 При включении запятой с между которыми ничего нет, пропущенный раздел выводится в формате положительного значения. Например, следующий формат отображает положительные и отрицательные значения форматируются в первом разделе и отображает `Zero` Если значение равно нулю.  
  
 [!code-vb[VbVbalrStrings#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#19)]  
  
## <a name="predefined-numeric-formats"></a>Предопределенные числовые форматы  
 В следующей таблице перечислены имена стандартных числовых форматов. Их можно использовать по имени как `Style` аргумент для `Format` функции:  
  
|Название формата|Описание:|  
|-|-|  
|`General Number`, `G`или `g`|Отображает число без разделителя групп разрядов.<br /><br /> Например `Format(&H3FA, "g")` возвращает `1018`.|  
|`Currency`, `C`или `c`|Отображает число с разделитель групп разрядов, если это применимо; Отображает две цифры справа от десятичного разделителя. Вывод основан на параметрах локали системы.<br /><br /> Например `Format(1234567, "c")` возвращает `$1,234,567.00`.|  
|`Fixed`, `F`или `f`|Отображает по крайней мере одной цифры слева и две цифры справа от десятичного разделителя.<br /><br /> Например `Format(1234567, "f")` возвращает `1234567.00`.|  
|`Standard`, `N`или `n`|Отображает число с разделитель групп разрядов, по крайней мере одной цифры слева и две цифры справа от десятичного разделителя.<br /><br /> Например `Format(1234567, "n")` возвращает `1,234,567.00`.|  
|`Percent`|Отображает число, умноженное на 100, со знаком процента (%), стоящим непосредственно справа, всегда отображает две цифры справа от десятичного разделителя.<br /><br /> Например `Format(0.4744, "Percent")` возвращает `47.44%`.|  
|`P`, или `p`|Отображает число с разделителем тысяч, умноженное на 100, со знаком процента (%), стоящим справа и отделенным от одного пробела, всегда отображает две цифры справа от десятичного разделителя.<br /><br /> Например `Format(0.80345, "p")` возвращает `80.35 %`.|  
|`Scientific`|Использует стандартное научное обозначение с двумя значащими разрядами.<br /><br /> Например `Format(1234567, "Scientific")` возвращает `1.23E+06`.|  
|`E`, или `e`|Использует стандартное научное обозначение с шестью значащими разрядами.<br /><br /> Например `Format(1234567, "e")` возвращает `1.234567e+006`.|  
|`D`, или `d`|Отображает число в виде строки, содержащей значение числа в формате десятичным (основание 10). Этот параметр поддерживается для целочисленных типов (`Byte`, `Short`, `Integer`, `Long`) только.<br /><br /> Например `Format(&H7F, "d")` возвращает `127`.|  
|`X`, или `x`|Отображает число в виде строки, содержащей значение числа в шестнадцатеричном формате (основание 16) формате. Этот параметр поддерживается для целочисленных типов (`Byte`, `Short`, `Integer`, `Long`) только.<br /><br /> Например `Format(127, "x")` возвращает `7f`.|  
|`Yes/No`|Отображает `No` Если число равно 0; в противном случае, `Yes`.<br /><br /> Например `Format(0, "Yes/No")` возвращает `No`.|  
|`True/False`|Отображает `False` Если число равно 0; в противном случае, `True`.<br /><br /> Например `Format(1, "True/False")` возвращает `True`.|  
|`On/Off`|Отображает `Off` Если число равно 0; в противном случае, `On`.<br /><br /> Например `Format(1, "On/Off")` возвращает `On`.|  
  
### <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Yes/No`, `True/False`, И `On/Off` форматы не поддерживаются.  
  
## <a name="user-defined-numeric-formats"></a>Пользовательские числовые форматы  
 В следующей таблице перечислены символы, которые можно использовать для создания пользовательских числовых форматов. Их можно использовать для построения `Style` аргумент для `Format` функции:  
  
|Знак|Описание:|  
|-|-|  
|Нет|Отображает число без форматирования.|  
|(`0`)|Заполнитель для цифр. Отображает цифру или ноль. Если выражение содержит цифру в позиции, где в строке формата стоит ноль, отобразите ее; в противном случае выводится ноль в этой позиции.<br /><br /> Если число имеет меньше разрядов, чем задано нулей (с обеих сторон от десятичного разделителя) в выражении форматирования, выводится с начальными либо конечными нулями. Если число имеет больше разрядов справа от десятичного разделителя, чем нулей справа от десятичного разделителя в выражении форматирования, округление до количества десятичных разрядов, сколько нулей. Если число имеет больше цифр слева от десятичного разделителя, чем нулей слева от десятичного разделителя в выражении форматирования, отображает дополнительные разряды выводятся без изменений.|  
|(`#`)|Заполнитель для цифр. Отображает цифру или ничего. Если выражение содержит цифру в позиции, где `#` в строке формата стоит знак отображается; в противном случае не отображает ничего в этой позиции.<br /><br /> Этот символ действует как `0` заполнитель для цифр, за исключением того, что начальные и конечные нули не отображаются, если число имеет меньше разрядов, чем число `#` с обеих сторон от десятичного разделителя в выражении форматирования.|  
|(`.`)|Заполнитель десятичного разделителя. Определяет, сколько разрядов отображается слева и справа от десятичного разделителя. Если выражение формата содержит только `#` символов слева от этого символа; числа меньше 1 начинаются с десятичного разделителя. Чтобы отображался начальный ноль в дробных числах, укажите ноль в качестве первого цифрового заполнителя слева от десятичного разделителя. В некоторых языковых стандартах в качестве десятичного разделителя используется запятая. Фактический символ, используется в качестве десятичного заполнителя в отформатированном значении, зависит от числового формата, распознаваемого системой. Таким образом вам следует использовать периода в качестве десятичного заполнителя в собственных форматах даже при работе в языковом стандарте, использующих запятую в качестве десятичного заполнителя. Отформатированная строка будет отображаться в формате для языкового стандарта.|  
|(`%`)|Заполнитель процента. Умножает выражение на 100. Символ процента (`%`) вставляется там, где он отображается в строке форматирования.|  
|(`,`)|Разделитель групп разрядов. Разделитель групп разрядов отделяет тысячи от сотен в числе с четырьмя или более разрядами слева от десятичного разделителя. Указанный стандартном использовании разделителя групп разрядов Если формат разделителя групп разрядов, заполнители цифр (`0` или `#`).<br /><br /> Разделитель непосредственно слева от десятичного разделителя (ли указан десятичное число) или крайним правым символов в строке, это означает «масштабирование числа путем деления его на 1 000, округления при необходимости.» Числа меньше 1 000, но больше или равно 500 отображаются как `1`, а числа меньше 500 отображаются как `0`. Два смежных разделителя групп разрядов в этой позиции масштабирования с коэффициентом 1 миллион и дополнительный фактор 1 000 за каждый дополнительный разделитель.<br /><br /> Несколько разделителей групп разрядов в любой позиции, кроме позиции непосредственно слева от десятичного разделителя или конечной позиции в строке, обрабатываются просто как разделители групп разрядов. В некоторых языковых стандартах в качестве разделителя тысяч используется период. Фактический символ, используется в качестве разделителя групп разрядов в отформатированном значении, зависит от числового формата, распознаваемого системой. Таким образом вам следует использовать запятую как разделитель групп разрядов в собственных форматах даже при работе в языковом стандарте, используется период в качестве разделителя тысяч. Отформатированная строка будет отображаться в формате для языкового стандарта.<br /><br /> Например рассмотрим следующие три строки форматирования:<br /><br /> -   `"#,0."`, который использует разделитель тысяч для форматирования числа 100 миллионов как строки «100,000,000».<br />-   `"#0,."`, которая использует деление на тысячу для форматирования числа 100 миллионов строки «100000».<br />-   `"#,0,."`, который использует разделитель тысяч и деление на тысячу для форматирования числа 100 миллионов как строки «100,000».|  
|(`:`)|Разделитель компонентов времени. В некоторых языковых стандартах разделителя времени могут использоваться другие символы. Разделитель компонентов времени разделяет часы, минуты и секунды при форматировании значений времени. Фактический символ, используемый в качестве разделителя времени в отформатированном значении, определяется параметрами системы.|  
|(`/`)|Разделитель компонентов даты. В некоторых языковых стандартах в качестве разделителя дат могут использоваться другие символы. Разделитель компонентов даты разделяет день, месяц и год при форматировании значений даты. Фактический символ, используемый в качестве разделителя дат в отформатированном значении, определяется параметрами системы.|  
|(`E-``E+``e-``e+`)|Экспоненциальный формат. Если выражение формата содержит минимум один цифровой заполнитель (`0` или `#`) слева от `E-`, `E+`, `e-`, или `e+`, число отображается в экспоненциальном формате и `E` или `e` вставляется между числом и его показатель степени. Количество заполнителей цифр слева определяет число цифр экспоненты определяется. Используйте `E-` или `e-` поместить знак «минус» экспонентой с отрицательным значением. Используйте `E+` или `e+` минус отрицательных показателей степени и знак плюс рядом с положительными. Необходимо также включить заполнители цифр справа от этого символа для правильного форматирования.|  
|`-` `+` `$` ( )|Буквенные символы. Эти символы выводятся так же, как в строке форматирования. Чтобы вывести символ, которого нет в списке, укажите перед ним обратную косую черту (`\`) либо заключите его в двойные кавычки (» «).|  
|(`\`)|Отображает следующий символ в строке формата. Чтобы вывести символ, который имеет особое значение в качестве буквенного символа, укажите перед ним обратную косую черту (`\`). Сама обратная косая черта не отображается. Использование обратной косой черты — аналогично заключению выводимого символа в двойные кавычки. Чтобы отобразить обратную косую черту, укажите две черты подряд (`\\`).<br /><br /> Примеры символов, которые нельзя отобразить как литералы являются символы форматирования даты и времени форматирование (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, и `:`), символы форматирования чисел (`#`, `0`, `%`, `E`, `e`, запятая и точка) и символы форматирования строк (`@`, `&`, `<`, `>`, и `!`).|  
|(`"``ABC``"`)|Вывод строки, заключенной в двойные кавычки (» «). Чтобы включить строку в аргумент стиля из кода, необходимо использовать `Chr(34)` для заключения текста (`34` — код символа кавычки ("«)).|  
  
### <a name="legacy-code-example"></a>Старый пример кода  
 Следующая таблица содержит некоторые образцы выражений форматирования для чисел. (Предполагается, что параметр языкового стандарта системы является английский (США)) Первый столбец содержит строки форматирования для `Style` аргумент `Format` функции; другие столбцы содержат выходные данные, полученные, если форматируемые данные имеют значение, заданное в заголовках столбцов.  
  
|Формат (`Style`)|«5» в формате|в формате «-5»|«0,5» в формате|  
|-|-|-|-|  
|`Zero-length string ("")`|`5`|`-5`|`0.5`|  
|`0`|`5`|`-5`|`1`|  
|`0.00`|`5.00`|`-5.00`|`0.50`|  
|`#,##0`|`5`|`-5`|`1`|  
|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  
|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  
|`0%`|`500%`|`-500%`|`50%`|  
|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  
|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  
|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  
  
## <a name="predefined-datetime-formats"></a>Форматы предопределенных даты и времени  
 Ниже приведены стандартные даты и имен форматов времени. Их можно использовать по имени в качестве аргумента стиля для `Format` функции:  
  
|Название формата|Описание:|  
|-|-|  
|`General Date`, или `G`|Отображает дату и время. Например, `3/12/2008 11:07:31 AM`. Отображение даты определяется текущее значение языка и региональных параметров приложения.|  
|`Long Date`, `Medium Date`или `D`|Отображает дату в соответствии с форматом даты текущих региональных параметров. Например, `Wednesday, March 12, 2008`.|  
|`Short Date`, или `d`|Отображает дату в формате короткой даты текущих региональных параметров. Например, `3/12/2008`.<br /><br /> `d` Символ отображает день в формате даты, определяемой пользователем.|  
|`Long Time`, `Medium Time`или `T`|Отображает время, используя текущую культуру длинный формат времени; обычно включает часы, минуты и секунды. Например, `11:07:31 AM`.|  
|`Short Time` или `t`|Отображает время, используя текущую культуру краткий формат времени. Например, `11:07 AM`.<br /><br /> `t` Символов отображает `AM` или `PM` значения для языков, использующих 12-часовом формате, в формате времени, определяемого пользователем.|  
|`f`|Отображение даты и краткого времени в соответствии с форматом в текущей культуре. Например, `Wednesday, March 12, 2008 11:07 AM`.|  
|`F`|Отображение даты и время в соответствии с форматом в текущей культуре. Например, `Wednesday, March 12, 2008 11:07:31 AM`.|  
|`g`|Отображает краткий формат даты и краткого времени в соответствии с форматом в текущей культуре. Например, `3/12/2008 11:07 AM`.|  
|`M`, `m`|Отображает месяц и день даты. Например, `March 12`.<br /><br /> `M` Символ отображает месяц в формате даты, определяемой пользователем. `m` Символ Отображает минуты в формате времени, определяемого пользователем.|  
|`R`, `r`|Форматирует дату в соответствии с <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> свойство. Например, `Wed, 12 Mar 2008 11:07:31 GMT`. Форматированные даты не изменяется значение даты и времени. Перед вызовом метода необходимо изменить значение даты и времени по Гринвичу `Format` функции.|  
|`s`|Форматирует дату и время в виде сортируемого индекса. Например, `2008-03-12T11:07:31`.<br /><br /> `s` Символ Отображает секунды в формате времени, определяемого пользователем.|  
|`u`|Форматирует дату и время в виде сортируемого индекса GMT. Например, `2008-03-12 11:07:31Z`.|  
|`U`|Форматирует дату и время с длинной даты и время в формате GMT. Например, `Wednesday, March 12, 2008 6:07:31 PM`.|  
|`Y`, `y`|Форматирует дату в виде года и месяца. Например, `March, 2008`.<br /><br /> `Y` И `y` символов отображают год в формате даты, определяемой пользователем.|  
  
 Дополнительные сведения о текущем языком и региональными параметрами информацию о разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
## <a name="user-defined-datetime-formats"></a>Форматы даты и времени, определяемые пользователем  
 Следующая таблица показывает символы, которые можно использовать для создания новых форматов даты и времени, определяемого пользователем. В отличие от более ранних версиях Visual Basic эти символы форматирования учитывается регистр.  
  
|Знак|Описание:|  
|-|-|  
|(`:`)|Разделитель компонентов времени. В некоторых языковых стандартах разделителя времени могут использоваться другие символы. Разделитель компонентов времени разделяет часы, минуты и секунды при форматировании значений времени. Фактический символ, используемый в качестве разделителя времени в отформатированном значении, определяется текущее значение языка и региональных параметров приложения.|  
|(`/`)|Разделитель компонентов даты. В некоторых языковых стандартах в качестве разделителя дат могут использоваться другие символы. Разделитель компонентов даты разделяет день, месяц и год при форматировании значений даты. Фактический символ, используемый в качестве разделителя дат в отформатированном значении, определяется текущего языка и региональных параметров приложения.|  
|(`%`)|Используется для указания, что следующий символ должен считываться как однобуквенный формат без учета замыкающих букв. Также используется для указания, что однобуквенный формат считывается как определяемый пользователем формат. См. ниже для получения дополнительной информации.|  
|`d`|Отображает день в виде числа без ведущих нулей (например, `1`). Используйте `%d` Если это только один символ в определяемых пользователем числовом формате.|  
|`dd`|Отображает день в виде числа с ведущими нулями (например, `01`).|  
|`ddd`|Выводит сокращенное название дня (например, `Sun`).|  
|`dddd`|Отображает день в виде полного имени (например, `Sunday`).|  
|`M`|Отображает месяц в виде числа без ведущих нулей (например, январь представляется `1`). Используйте `%M` Если это только один символ в определяемых пользователем числовом формате.|  
|`MM`|Отображает месяц в виде числа с ведущими нулями (например, `01/12/01`).|  
|`MMM`|Выводит сокращенное название месяца (например, `Jan`).|  
|`MMMM`|Отображает полное название месяца (например, `January`).|  
|`gg`|Отображает строку эры (например, `A.D.`).|  
|`h`|Выводит часы в виде числа без ведущих нулей в 12-часовом формате (например, `1:15:15 PM`). Используйте `%h` Если это только один символ в определяемых пользователем числовом формате.|  
|`hh`|Выводит часы в виде числа с ведущими нулями в 12-часовом формате (например, `01:15:15 PM`).|  
|`H`|Выводит часы в виде числа без ведущих нулей в 24-часовом формате (например, `1:15:15`). Используйте `%H` Если это только один символ в определяемых пользователем числовом формате.|  
|`HH`|Выводит часы в виде числа с ведущими нулями в 24-часовом формате (например, `01:15:15`).|  
|`m`|Выводит минуты в виде числа без ведущих нулей (например, `12:1:15`). Используйте `%m` Если это только один символ в определяемых пользователем числовом формате.|  
|`mm`|Выводит минуты в виде числа с ведущими нулями (например, `12:01:15`).|  
|`s`|Выводит второе в виде числа без ведущих нулей (например, `12:15:5`). Используйте `%s` Если это только один символ в определяемых пользователем числовом формате.|  
|`ss`|Выводит секунды в виде числа с ведущими нулями (например, `12:15:05`).|  
|`f`|Выводит доли секунды. Например `ff` будут отображены сотые доли секунды, а `ffff` отображает десятитысячные доли секунды. Можно использовать до семи `f` символов в определяемом пользователем формате. Используйте `%f` Если это только один символ в определяемых пользователем числовом формате.|  
|`t`|Используется 12-часовой формат времени и отображает `A` для любого часа до полудня Вывод заглавных букв `P` для времени от полудня до 23:59. Используйте `%t` Если это только один символ в определяемых пользователем числовом формате.|  
|`tt`|Для языков, использующих 12-часовом формате, Вывод заглавных букв `AM` при выводе времени до полудня; Вывод заглавных букв `PM` времени от полудня до 23:59.<br /><br /> Для языков, использующих 24-часовом формате не отображает ничего.|  
|`y`|Отображает номер года (0-9) без предшествующих нулей. Используйте `%y` Если это только один символ в определяемых пользователем числовом формате.|  
|`yy`|Отображает год в числовом формате из двух цифр с нулем в начале, если это применимо.|  
|`yyy`|Отображает год в числовом формате из четырех цифр.|  
|`yyyy`|Отображает год в числовом формате из четырех цифр.|  
|`z`|Выводит Сдвиг часового пояса без ведущих нулей (например, `-8`). Используйте `%z` Если это только один символ в определяемых пользователем числовом формате.|  
|`zz`|Выводит Сдвиг часового пояса с нулем в начале (например, `-08`)|  
|`zzz`|Отображает полный Сдвиг часового пояса (например, `-08:00`)|  
  
### <a name="legacy-code-example"></a>Старый пример кода  
 Ниже приведены примеры пользовательских форматов даты и времени для `December 7, 1958, 8:50 PM, 35 seconds`:  
  
|Формат|Отображение|  
|-|-|  
|`M/d/yy`|`12/7/58`|  
|`d-MMM`|`7-Dec`|  
|`d-MMMM-yy`|`7-December-58`|  
|`d MMMM`|`7 December`|  
|`MMMM yy`|`December 58`|  
|`hh:mm tt`|`08:50 PM`|  
|`h:mm:ss t`|`8:50:35 P`|  
|`H:mm`|`20:50`|  
|`H:mm:ss`|`20:50:35`|  
|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  
  
### <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 Минимальный квант времени для устройства определяется производителем устройства. Если квант времени для устройства достаточно грубым `f` символ формата возвращает 0 при запуске на этом устройстве.  
  
   
  
## Examples  
 В данном примере показаны различные способы использования функции `Format` для форматирования значений с применением как форматов `String`, так и определенных пользователем форматов. Фактическое отображение системой разделителя даты (`/`), разделителя времени (`:` и индикаторов AM/PM (`t` и `tt`) зависит от региональных параметров, применяемых кодом. При отображении времени и даты в среде разработки используется короткий формат времени и даты региональных установок кода.  
  
> [!NOTE]
>  Для языков, использующих 24-часовой формат, индикаторы AM/PM (`t` и `tt`) не отображаются.  
  
 [!code-vb[VbVbalrStrings#27](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#27)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.String.Format(System.String,System.Object)" />
        <altmember cref="M:Microsoft.VisualBasic.Conversion.Str(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FormatCurrency">
      <MemberSignature Language="C#" Value="public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatCurrency(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatCurrency (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный. Числовое значение, указывающее количество цифр, которые должны быть отображены справа от десятичного разделителя. По умолчанию используется значение –1, указывающее на необходимость использования региональных настроек компьютера.</param>
        <param name="IncludeLeadingDigit">Необязательный. Перечисление <see cref="T:Microsoft.VisualBasic.TriState" />, указывающее, следует ли отображать ноль в начале дробных значений. Значения см. в разделе "Примечания".</param>
        <param name="UseParensForNegativeNumbers">Необязательный. Перечисление <see cref="T:Microsoft.VisualBasic.TriState" />, указывающее, следует ли заключать отрицательные значения в скобки. Значения см. в разделе "Примечания".</param>
        <param name="GroupDigits">Необязательный. Перечисление <see cref="T:Microsoft.VisualBasic.TriState" />, указывающее, следует ли объединять разряды чисел в группы, используя разделитель групп, определенный в региональных параметрах компьютера. Значения см. в разделе "Примечания".</param>
        <summary>Возвращает выражение в формате денежной единицы с использованием символа денежной единицы, определенного в системной панели управления.</summary>
        <returns>Возвращает выражение в формате денежной единицы с использованием символа денежной единицы, определенного в системной панели управления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если один или несколько необязательных аргументов опущены, вместо них используются соответствующие значения региональных параметров компьютера.  
  
 Положение символа валюты относительно значения денежной суммы определяется региональными параметрами системы.  
  
> [!NOTE]
>  Сведения о всех настройках поступает из языкового стандарта приложения. По умолчанию, которые будут языковому стандарту, установленному на панели управления. Тем не менее, он может измениться программным способом с помощью .NET Framework, кроме нуля, которое берется из `Number` вкладки.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, И `GroupDigits` аргументы принимать следующие значения перечисления три состояния.  
  
|Значение|Описание:|  
|-|-|  
|`TriState.True`|Да|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Региональные настройки компьютера|  
  
   
  
## Examples  
 В следующем примере показано применение функции `FormatCurrency`.  
  
 [!code-vb[VbVbalrStrings#32](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#32)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Число цифр после десятичного разделителя превышает 99.</exception>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatDateTime">
      <MemberSignature Language="C#" Value="public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatDateTime(valuetype System.DateTime Expression, valuetype Microsoft.VisualBasic.DateFormat NamedFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatDateTime (Expression As DateTime, Optional NamedFormat As DateFormat = Microsoft.VisualBasic.DateFormat.GeneralDate) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
        <Parameter Name="NamedFormat" Type="Microsoft.VisualBasic.DateFormat" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Форматируемое выражение <see langword="Date" />.</param>
        <param name="NamedFormat">Необязательный. Числовое значение, указывающее используемый формат даты/времени. Если опущен, используется <see langword="DateFormat.GeneralDate" />.</param>
        <summary>Возвращает строковое выражение, представляющее значение даты и времени.</summary>
        <returns>Возвращает строковое выражение, представляющее значение даты и времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Date` Тип данных всегда содержит сведения о дате и времени. В целях преобразования типов Visual Basic рассматривает 1/1/1 (1 января 1 года) к нейтральным значением даты и 00:00:00 (полночь) будет нейтральным значением времени. При форматировании `Date` значение в виде строки даты и времени, `FormatDateTime` включает нейтральные значения в результирующую строку. Например, если преобразование #1/1/0001 9:30:00 # в строку, результат — «9:30:00 AM»; Дата отбрасывается. Тем не менее, сведения о дате по-прежнему присутствует в исходной коллекции `Date` значение и может быть восстановлен с помощью функции например `DatePart`.  
  
> [!NOTE]
>  Если передать `Expression` аргумента в качестве `String` литерал, `FormatDateTime` интерпретируется согласно <xref:System.Globalization.CultureInfo.CurrentCulture%2A> установки приложения. Тем не менее если передать его как `Date` литерал, используйте формат #mm/дд/гггг #, так как `FormatDateTime` всегда интерпретирует `Date` литерала культуре английского языка (США). Это необходимо, поскольку, если приложение разрабатывается и кодируется с использованием `Date` литералы из одного языка и региональных параметров, но выполняется на платформе с другим языком, `Date` разбор литералов может быть неверно.  
  
 `NamedFormat` Аргумент имеет следующие параметры.  
  
|Константа|Описание:|  
|-|-|  
|`DateFormat.GeneralDate`|Отобразить дату и время. Отображает часть даты в кратком формате. Если часть времени, отображается много времени. Если он имеется, отображаются обе части.|  
|`DateFormat.LongDate`|Отображает дату в формате даты, указанные в региональных параметров компьютера.|  
|`DateFormat.ShortDate`|Отображает дату в формате короткой даты, определяется в региональных настройках компьютера.|  
|`DateFormat.LongTime`|Отображает время в формате, который указан в региональных настройках компьютера.|  
|`DateFormat.ShortTime`|Отображает время в 24-часовом формате (чч: мм).|  
  
   
  
## Examples  
 В этом примере показано использование функции `FormatDateTime` функции.  
  
 [!code-vb[VbVbalrStrings#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="NamedFormat" /> недопустим.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="M:Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)" />
      </Docs>
    </Member>
    <Member MemberName="FormatNumber">
      <MemberSignature Language="C#" Value="public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatNumber(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatNumber (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный. Числовое значение, указывающее количество цифр, которые должны быть отображены справа от десятичного разделителя. По умолчанию принимается значение –1, что указывает на использование региональных параметров компьютера.</param>
        <param name="IncludeLeadingDigit">Необязательный. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, следует ли отображать 0 в начале дробных значений. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="UseParensForNegativeNumbers">Необязательный. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, следует ли заключать отрицательные значения в скобки. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="GroupDigits">Необязательный. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, группируются ли значения с использованием разделителя, указанного в настройках языкового стандарта. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает выражение в формате числа.</summary>
        <returns>Возвращает выражение в формате числа.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда один или несколько необязательных аргументов опущены значения задаются параметры языковых стандартов.  
  
> [!NOTE]
>  Сведения о всех настройках поступает из языкового стандарта приложения. По умолчанию, которые будут языковому стандарту, установленному на панели управления. Однако его можно изменить программным способом с помощью .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, И `GroupDigits` аргументы имеют следующие параметры.  
  
|Константа|Описание:|  
|-|-|  
|`TriState.True`|Да|  
|`TriState.False`|False|  
|`TriState.UseDefault`|Региональные настройки компьютера|  
  
   
  
## Examples  
 В этом примере демонстрируется `FormatNumber` функции.  
  
 [!code-vb[VbVbalrStrings#15](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="FormatPercent">
      <MemberSignature Language="C#" Value="public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);" />
      <MemberSignature Language="ILAsm" Value=".method public static string FormatPercent(object Expression, int32 NumDigitsAfterDecimal, valuetype Microsoft.VisualBasic.TriState IncludeLeadingDigit, valuetype Microsoft.VisualBasic.TriState UseParensForNegativeNumbers, valuetype Microsoft.VisualBasic.TriState GroupDigits) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
      <MemberSignature Language="VB.NET" Value="Public Function FormatPercent (Expression As Object, Optional NumDigitsAfterDecimal As Integer = -1, Optional IncludeLeadingDigit As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional UseParensForNegativeNumbers As TriState = Microsoft.VisualBasic.TriState.UseDefault, Optional GroupDigits As TriState = Microsoft.VisualBasic.TriState.UseDefault) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
        <Parameter Name="NumDigitsAfterDecimal" Type="System.Int32" />
        <Parameter Name="IncludeLeadingDigit" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="UseParensForNegativeNumbers" Type="Microsoft.VisualBasic.TriState" />
        <Parameter Name="GroupDigits" Type="Microsoft.VisualBasic.TriState" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Форматируемое выражение.</param>
        <param name="NumDigitsAfterDecimal">Необязательный. Числовое значение, указывающее количество отображаемых цифр справа от десятичной запятой. Значение по умолчанию — 1. Это указывает на то, что используются настройки языкового стандарта.</param>
        <param name="IncludeLeadingDigit">Необязательный. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, отображается ли ноль в дробных значениях. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="UseParensForNegativeNumbers">Необязательный. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, нужно ли заключать отрицательные значения в скобки. Сведения о значениях см. в разделе "Параметры".</param>
        <param name="GroupDigits">Необязательный. Константа <see cref="T:Microsoft.VisualBasic.TriState" />, указывающая, группируются ли значения с использованием разделителя, указанного в настройках языкового стандарта. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает выражение в виде процента (умноженное на 100) с символом % в конце.</summary>
        <returns>Возвращает выражение в виде процента (умноженное на 100) с символом % в конце.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда один или несколько необязательных аргументов опущены, значения задаются параметры языковых стандартов.  
  
> [!NOTE]
>  Сведения о всех настройках поступает из языкового стандарта приложения. По умолчанию, которые будут языковому стандарту, установленному на панели управления. Однако его можно изменить программным способом с помощью .NET Framework.  
  
 `IncludeLeadingDigit`, `UseParensForNegativeNumbers`, И `GroupDigits` аргументы имеют следующие параметры.  
  
|Константа|Описание:|  
|-|-|  
|`TriState.True`|Да|  
|`TriState.False`|False|  
|`TriState.Default`|Региональные настройки компьютера|  
  
   
  
## Examples  
 В этом примере показано использование `FormatPercent` функции.  
  
 [!code-vb[VbVbalrStrings#28](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">Тип не является числовым.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Format(System.Object,System.String)" />
        <altmember cref="T:Microsoft.VisualBasic.TriState" />
        <altmember cref="T:System.InvalidCastException" />
      </Docs>
    </Member>
    <Member MemberName="GetChar">
      <MemberSignature Language="C#" Value="public static char GetChar (string str, int Index);" />
      <MemberSignature Language="ILAsm" Value=".method public static char GetChar(string str, int32 Index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChar (str As String, Index As Integer) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char GetChar(System::String ^ str, int Index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="Index">Обязательно. Выражение <see langword="Integer" />. Возвращаемый индекс символа (отсчитываемый от 1) в <c>str</c>.</param>
        <summary>Возвращает значение типа <see langword="Char" />, представляющее знак из указанной позиции в предоставленной строке.</summary>
        <returns>
          Значение типа <see langword="Char" />, представляющее знак из указанного индекса в предоставленной строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Index` меньше 1 или больше индекса последнего символа в `str`, `ArgumentException` возникает исключение.  
  
   
  
## Examples  
 В этом примере показано, как использовать `GetChar` функцию для возврата знака из указанного индекса в `String`.  
  
 [!code-vb[VbVbalrStrings#23](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="str" /> равен <see langword="Nothing" />, параметр <paramref name="Index" /> &lt; 1, или параметр <paramref name="Index" /> больше индекса последнего символа в <paramref name="str" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="InStr">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.  Целое число представляет собой отсчитываемый от единицы индекс, если совпадение найдено.  Если совпадение не найдено, функция возвращает нуль.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Обязательно. Искомое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательно. Искомое выражение <see langword="String" />.</param>
        <param name="Compare">Необязательный. Указывает тип сравнения строк. Если параметр <c>Compare</c> не задан, параметр <see langword="Option Compare" /> определяет тип сравнения.</param>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStr возвращает  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="String1" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="String2" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description> Начальная позиция диапазона для поиска, которая по умолчанию в первом положении символа.  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="String2" /> не найден.  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> находится в пределах <paramref name="String1" /></term>
              <description> Позиция, где начинается соответствие  
  
 </description>
            </item>
            <item>
              <term></term>
              <description></description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило `InStr` функция используется при анализе строк.  
  
> [!NOTE]
>  `InStrB` В предыдущих версиях Visual Basic функция возвращает число байтов, а не позицию символа. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005 кодируются в Юникоде, и `InStrB` больше не поддерживается.  
  
 Параметры аргумента `Compare`:  
  
|Константа|Значение|Описание:|  
|-|-|-|  
|`Binary`|0|Выполняет двоичное сравнение|  
|`Text`|1|Выполняет сравнение текста|  
  
   
  
## Examples  
 В данном примере функция `InStr` используется для возврата позиции первого вхождения одной строки в другую.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStr">
      <MemberSignature Language="C#" Value="public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStr(int32 Start, string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStr (Start As Integer, String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Start">Необязательный. Числовое выражение, задающее начальную позицию для каждого поиска. Если это выражение опущено, поиск начинается с позиции первого знака. Начальный индекс равен 1.</param>
        <param name="String1">Обязательно. Искомое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательно. Искомое выражение <see langword="String" />.</param>
        <param name="Compare">Необязательный. Указывает тип сравнения строк. Если параметр <c>Compare</c> не задан, параметр <see langword="Option Compare" /> определяет тип сравнения.</param>
        <summary>Возвращает целое число, указывающее начальную позицию первого вхождения одной строки в другую.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStr возвращает  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="String1" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="String2" /> является пустой строкой или значением <see langword="Nothing" /></term>
              <description>
                <paramref name="start" />
              </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="String2" /> не найден.  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="String2" /> находится в пределах <paramref name="String1" /></term>
              <description> Позиция, где начинается соответствие  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="Start" /> &gt; Длина <paramref name="String1" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило `InStr` функция используется при анализе строк.  
  
> [!NOTE]
>  `InStrB` В предыдущих версиях Visual Basic функция возвращает число байтов, а не позицию символа. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic 2005 кодируются в Юникоде, и `InStrB` больше не поддерживается.  
  
 Параметры аргумента `Compare`:  
  
|Константа|Значение|Описание:|  
|-|-|-|  
|`Binary`|0|Выполняет двоичное сравнение|  
|`Text`|1|Выполняет сравнение текста|  
  
   
  
## Examples  
 В данном примере функция `InStr` используется для возврата позиции первого вхождения одной строки в другую.  
  
 [!code-vb[VbVbalrStrings#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt; 1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="InStrRev">
      <MemberSignature Language="C#" Value="public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 InStrRev(string StringCheck, string StringMatch, int32 Start, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function InStrRev (StringCheck As String, StringMatch As String, Optional Start As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="StringCheck" Type="System.String" />
        <Parameter Name="StringMatch" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="StringCheck">Обязательно. Строковое выражение, в котором ведется поиск.</param>
        <param name="StringMatch">Обязательно. Строковое выражение, которое требуется найти.</param>
        <param name="Start">Необязательный. Числовое выражение, устанавливающее начальную позицию, начиная с 1, для каждой операции поиска, начиная с левого края строки. Если параметр <c>Start</c> не указан, то используется значение –1, означающее, что поиск начинается с позиции последнего символа. После этого строка просматривается справа налево.</param>
        <param name="Compare">Необязательный. Числовое значение, показывающее вид сравнения, используемое при оценке подстрок. Если этот аргумент опущен, то выполняется двоичное сравнение. См. значения в разделе "Параметры".</param>
        <summary>Возвращает позицию первого вхождения одной строки в другую, начиная с правого конца строки.</summary>
        <returns>
          <list type="table">
            <item>
              <term> If  
  
 </term>
              <description> InStrRev возвращает  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="StringCheck" /> имеет нулевую длину  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="StringMatch" /> имеет нулевую длину  
  
 </term>
              <description>
                <paramref name="Start" />
              </description>
            </item>
            <item>
              <term>
                Параметр <paramref name="StringMatch" /> не найден.  
  
 </term>
              <description> 0  
  
 </description>
            </item>
            <item>
              <term>
                <paramref name="StringMatch" /> находится в пределах <paramref name="StringCheck" /></term>
              <description> Позиция, в которой найдено первое сравнение, начиная с правого конца строки.  
  
 </description>
            </item>
            <item>
              <term>
                Значение параметра <paramref name="Start" /> больше, чем длина параметра <paramref name="StringMatch" /></term>
              <description> 0  
  
 </description>
            </item>
          </list>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание, что синтаксис `InStrRev` функция отличается от синтаксиса `InStr` функции.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание:|  
|-|-|  
|`Binary`|Выполняется двоичное сравнение.|  
|`Text`|Выполняется текстовое сравнение.|  
  
   
  
## Examples  
 В этом примере показано использование функции `InStrRev` функции.  
  
 [!code-vb[VbVbalrStrings#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> = 0 или <paramref name="Start" /> &lt; –1.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Join">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (object[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(object[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As Object(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.Object[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Обязательно. Одномерный массив подстрок, подлежащих объединению.</param>
        <param name="Delimiter">Необязательный. Любая строка, используемая для разделения подстрок в составе возвращаемой строки. Если этот аргумент опущен, используется знак пробела (" "). Если в качестве <c>Delimiter</c> задана строка нулевой длины ("") или ключевое слово <see langword="Nothing" />, все элементы списка сцепляются без разделителей.</param>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
        <returns>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Равенство между `Join` и `Split` функции. `Join` Функция принимает массив строк и соединяет их, используя строку-разделитель для возвращения одной строки. `Split` Функция принимает строку и разбивает ее по разделителям, возвращая массив строк. Тем не менее, Ключевое отличие является `Join` можно соединить строки с любой строкой-разделителем `Split` строки, с помощью одного символа разделителя можно разделить.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование `Join` функцию, чтобы создать список из нескольких строк.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> не является одномерным.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Join">
      <MemberSignature Language="C#" Value="public static string Join (string[] SourceArray, string Delimiter = &quot; &quot;);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Join(string[] SourceArray, string Delimiter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Join(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Join (SourceArray As String(), Optional Delimiter As String = &quot; &quot;) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="SourceArray" Type="System.String[]" />
        <Parameter Name="Delimiter" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="SourceArray">Обязательно. Одномерный массив подстрок, подлежащих объединению.</param>
        <param name="Delimiter">Необязательный. Любая строка, используемая для разделения подстрок в составе возвращаемой строки. Если этот аргумент опущен, используется знак пробела (" "). Если в качестве <c>Delimiter</c> задана строка нулевой длины ("") или ключевое слово <see langword="Nothing" />, все элементы списка сцепляются без разделителей.</param>
        <summary>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</summary>
        <returns>Возвращает строку, образуемую путем соединения нескольких подстрок, содержащихся в массиве.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Равенство между `Join` и `Split` функции. `Join` Функция принимает массив строк и соединяет их, используя строку-разделитель для возвращения одной строки. `Split` Функция принимает строку и разбивает ее по разделителям, возвращая массив строк. Тем не менее, Ключевое отличие является `Join` можно соединить строки с любой строкой-разделителем `Split` строки, с помощью одного символа разделителя можно разделить.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование `Join` функцию, чтобы создать список из нескольких строк.  
  
 [!code-vb[VbVbalrStrings#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="SourceArray" /> не является одномерным.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или символ, преобразованные в нижний регистр.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static char LCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char LCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char LCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательно. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или символ, преобразованные в нижний регистр.</summary>
        <returns>Возвращает строку или символ, преобразованные в нижний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только прописные буквы преобразуются в нижний регистр; Все строчные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует данные язык и региональные параметры приложения при обработке строки, чтобы изменения регистра соответствовали для языкового стандарта, в котором используется это приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решений по безопасности на основе результата сравнения или операциями изменения регистра, то эта операция должна выполняться <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере используется `LCase` функция, возвращающая версия строки в нижний регистр.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="LCase">
      <MemberSignature Language="C#" Value="public static string LCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательно. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или символ, преобразованные в нижний регистр.</summary>
        <returns>Возвращает строку или символ, преобразованные в нижний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только прописные буквы преобразуются в нижний регистр; Все строчные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует данные язык и региональные параметры приложения при обработке строки, чтобы изменения регистра соответствовали для языкового стандарта, в котором используется это приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решений по безопасности на основе результата сравнения или операциями изменения регистра, то эта операция должна выполняться <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В этом примере используется `LCase` функция, возвращающая версия строки в нижний регистр.  
  
 [!code-vb[VbVbalrStrings#12](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#12)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.UCase" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public static string Left (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Left(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Left (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Left(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Выражение типа <see langword="String" />, из которого возвращаются крайние левые знаки.</param>
        <param name="Length">Обязательно. Выражение <see langword="Integer" />. Числовое выражение, показывающее необходимое число возвращаемых знаков. Если выражение равно 0, возвращается строка нулевой длины (""). Если выражение больше или равно числу символов в <c>str</c>, то возвращается вся строка.</param>
        <summary>Возвращает строку, содержащую указанное число знаков с левой стороны строки.</summary>
        <returns>Возвращает строку, содержащую указанное число знаков с левой стороны строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить число знаков в `str`, используйте `Len` функции. При использовании в приложении Windows Forms или любой другой класс, имеющий `Left` свойства, необходимо полностью определить функцию с `Microsoft.VisualBasic.Left`.  
  
> [!NOTE]
>  `LeftB` В предыдущих версиях Visual Basic функция возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LeftB` больше не поддерживается.  
  
   
  
## Examples  
 В этом примере показано использование функции `Left` функция возвращает подстроку из данного `String`. В классе, который имеет `Left` свойства, может оказаться необходимым для полного определения `Left` функции.  
  
 [!code-vb[VbVbalrStrings#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Len">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (bool Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(bool Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(bool Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (byte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Byte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Byte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (char Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(char Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Char) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(char Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (DateTime Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.DateTime Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As DateTime) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(DateTime Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (decimal Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(valuetype System.Decimal Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Decimal)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Decimal) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Decimal Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Decimal" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (double Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Double) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(double Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (short Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Short) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(short Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (int Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(int Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (long Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Long) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(long Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (object Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(object Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::Object ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (sbyte Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(int8 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.SByte)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As SByte) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::SByte Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.SByte" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Byte)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (float Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(float32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As Single) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(float Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ushort Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int16 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt16)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UShort) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt16 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int16)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (uint Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int32 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As UInteger) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt32 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="Len">
      <MemberSignature Language="C#" Value="public static int Len (ulong Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 Len(unsigned int64 Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Len(System.UInt64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Len (Expression As ULong) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static int Len(System::UInt64 Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="Expression">Любое допустимое выражение <see langword="String" /> или имя переменной. Если <c>Expression</c> имеет тип <see langword="Object" />, то функция <see langword="Len" /> возвращает размер объекта при записи в файл функцией <see langword="FilePut" />.</param>
        <summary>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</summary>
        <returns>Возвращает целое число, содержащее либо количество знаков в строке, либо количество байтов, необходимых для хранения переменной.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 С помощью определяемых пользователем типов и `Object` переменных, `Len` функция возвращает размер, как она будет записана в файл путем `FilePut` функции. Если `Object` содержит `String`, то возвращается длина строки. Если `Object` содержит другой тип, он возвращает размер объекта будет записан в файл с `FilePut` функции.  
  
 `VBFixedString` Атрибут может применяться к строковым полям в объекты, чтобы указать размер строки в байтах, при записи на диск. `Len` Функция использует `VBFixedString` атрибута, если он доступен, при определении размера `Object` переменных.  
  
> [!NOTE]
>  `Len` Функции не удается определить фактическое число байтов памяти, необходимых при использовании строк переменной длины в определенных пользователем типов данных.  
  
> [!NOTE]
>  `LenB` В предыдущих версиях Visual Basic функция возвращает число байтов в строке, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `LenB` больше не поддерживается.  
  
## <a name="smart-device-developer-notes"></a>Примечания для разработчиков интеллектуальных устройств  
 `Len` Функция принимает только `String` и `Object` переменные в качестве параметров. Если `Object` содержит `String`, то возвращается длина `String`. Если параметр имеет значение NULL `Object` ссылку, то функция возвращает ноль. Если `Object` содержит другой тип, выдается исключение.  
  
   
  
## Examples  
 В данном примере `Len` используется для возврата числа знаков в строке.  
  
 [!code-vb[VbVbalrStrings#33](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#33)]  
  
 ]]></format>
        </remarks>
        <altCompliant cref="M:Microsoft.VisualBasic.Strings.Len(System.Int64)" />
        <altmember cref="Overload:Microsoft.VisualBasic.FileSystem.FilePut" />
        <altmember cref="T:Microsoft.VisualBasic.VBFixedStringAttribute" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
      </Docs>
    </Member>
    <Member MemberName="LSet">
      <MemberSignature Language="C#" Value="public static string LSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Обязательно. Выражение <see langword="String" />. Имя строковой переменной.</param>
        <param name="Length">Обязательно. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <summary>Возвращает выровненную по левому краю строку запрашиваемой длины, содержащую указанную строку.</summary>
        <returns>Возвращает выровненную по левому краю строку запрашиваемой длины, содержащую указанную строку.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если указанная строка длиннее значения указанной длины, возвращаемая строка сокращается до указанной длины. Если указанная строка короче указанной длины, добавляются пробелы в правый конец возвращаемой строки для достижения соответствующей длины.  
  
   
  
## Examples  
 В этом примере показано использование функции `LSet` функции.  
  
 [!code-vb[VbVbalrStrings#11](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="LTrim">
      <MemberSignature Language="C#" Value="public static string LTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string LTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</summary>
        <returns>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, И `Trim` функции удалить пробелы в конце строки.  
  
   
  
## Examples  
 В данном примере функция `LTrim` используется, чтобы убрать пробелы в начале, а функция `RTrim` — чтобы убрать пробелы в конце строковой переменной. Функция `Trim` в примере используется для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Mid">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку, содержащую символы из указанной строки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Выражение <see langword="String" />, из которого возвращаются знаки.</param>
        <param name="Start">Обязательно. Выражение <see langword="Integer" />. Начальная позиция возвращаемых знаков. Если параметр <c>Start</c> больше, чем количество символов в параметре <c>str</c>, функция <see langword="Mid" /> возвращает пустую строку (""). Значение параметра <c>Start</c> отсчитывается от единицы.</param>
        <summary>Возвращает строку, содержащую все символы начиная с указанной позиции в строке.</summary>
        <returns>Строка, состоящая из всех символов начиная с указанной позиции в строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить число знаков в `str`, используйте `Len` функции.  
  
 Visual Basic использует `Mid` функции и `Mid` инструкции. Эти элементы, они работают на указанное число знаков в строке, но `Mid` функция возвращает символов при `Mid` инструкция заменяет символы. Дополнительные сведения см. в разделе [оператор Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` В предыдущих версиях Visual Basic функция возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic кодируются в Юникоде, и `MidB` больше не поддерживается.  
  
   
  
## Examples  
 Последняя строка в этом примере используется перегрузка метода `Mid` функция, возвращающая пятая и последующие символы из строки.  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 или <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public static string Mid (string str, int Start, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Mid(string str, int32 Start, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Mid (str As String, Start As Integer, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Mid(System::String ^ str, int Start, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Выражение <see langword="String" />, из которого возвращаются знаки.</param>
        <param name="Start">Обязательно. Выражение <see langword="Integer" />. Начальная позиция возвращаемых знаков. Если параметр <c>Start</c> больше, чем количество символов в параметре <c>str</c>, функция <see langword="Mid" /> возвращает пустую строку (""). Значение параметра <c>Start</c> отсчитывается от единицы.</param>
        <param name="Length">Необязательный. Выражение <see langword="Integer" />. Число возвращаемых знаков. Если этот параметр не указан или количество знаков в тексте меньше значения <c>Length</c> (включая символ в позиции <c>Start</c>), возвращаются все знаки от начальной позиции до конца строки.</param>
        <summary>Возвращает строку, содержащую указанное число символов начиная с указанной позиции в строке.</summary>
        <returns>Строка, состоящая из указанного числа символов начиная с указанной позиции в строке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить число знаков в `str`, используйте `Len` функции.  
  
 Visual Basic использует `Mid` функции и `Mid` инструкции. Эти элементы, они работают на указанное число знаков в строке, но `Mid` функция возвращает символов при `Mid` инструкция заменяет символы. Дополнительные сведения см. в разделе [оператор Mid](~/docs/visual-basic/language-reference/statements/mid-statement.md).  
  
> [!NOTE]
>  `MidB` В предыдущих версиях Visual Basic функция возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки Visual Basic кодируются в Юникоде, и `MidB` больше не поддерживается.  
  
   
  
## Examples  
 Первые два `Mid` функции в этом примере возвращает указанное количество символов из строки, начиная с заданной позиции. (Последняя функция иллюстрирует <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> перегружать и только указывает начальную точку для извлечения строки.)  
  
 [!code-vb[VbVbalrStrings#17](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#17)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Start" /> &lt;= 0 или <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Replace(string Expression, string Find, string Replacement, int32 Start, int32 Count, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (Expression As String, Find As String, Replacement As String, Optional Start As Integer = 1, Optional Count As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Find" Type="System.String" />
        <Parameter Name="Replacement" Type="System.String" />
        <Parameter Name="Start" Type="System.Int32" />
        <Parameter Name="Count" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Строковое выражение, содержащее замещаемую подстроку.</param>
        <param name="Find">Обязательно. Подстрока, которую требуется найти.</param>
        <param name="Replacement">Обязательно. Подстрока для замены.</param>
        <param name="Start">Необязательный. Позиция в <c>Expression</c>, с которой начинается подстрока, используемая для замены. Возвращаемое значение <see langword="Replace" /> представляет собой строку, начинающуюся со <c>Start</c> с соответствующими заменами. Если этот аргумент не указан, используется значение 1.</param>
        <param name="Count">Необязательный. Число выполняемых замен подстроки. Если этот аргумент опущен, по умолчанию принимается значение –1, указывающее, что следует "выполнить все возможные замены".</param>
        <param name="Compare">Необязательный. Числовое значение, показывающее вид сравнения, используемое при оценке подстрок. См. значения в разделе "Параметры".</param>
        <summary>Возвращает строку, в которой указанная подстрока заданное число раз заменена другой подстрокой.</summary>
        <returns>
          Метод <see langword="Replace" /> возвращает следующие значения.  
  
 <list type="table"><item><term> Условие  
  
 </term><description> Функция Replace возвращает  
  
 </description></item><item><term><paramref name="Find" /> имеет нулевую длину или равно <see langword="Nothing" /></term><description>. Копия <paramref name="Expression" /></description></item><item><term><paramref name="Replace" /> имеет нулевую длину.  
  
 </term><description> Копия <paramref name="Expression" /> без вхождений <paramref name="Find" /></description></item><item><term><paramref name="Expression" /> имеет нулевую длину или равна <see langword="Nothing" />, либо <paramref name="Start" /> больше длины <paramref name="Expression" /></term><description><see langword="Nothing" /></description></item><item><term><paramref name="Count" /> равно 0  
  
 </term><description> Копия <paramref name="Expression" /></description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение `Replace` функция представляет собой строку, которая начинается с позиции, указанной параметром `Start` и завершается в конце `Expression` строка со сделанными подстановками, заданные `Find` и `Replace` значения.  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание:|  
|-|-|  
|`Binary`|Выполняет двоичное сравнение|  
|`Text`|Выполняет сравнение по тексту|  
  
   
  
## Examples  
 В этом примере демонстрируется `Replace` функции.  
  
```vb  
Dim TestString As String = "Shopping List"  
' Returns "Shipping List".  
Dim aString As String = Replace(TestString, "o", "i")  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Count" /> &lt; –1 или <paramref name="Start" /> &lt;= 0.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Filter" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public static string Right (string str, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Right(string str, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Right (str As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Right(System::String ^ str, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Выражение типа <see langword="String" />, из которого возвращаются крайние правые знаки.</param>
        <param name="Length">Обязательно. <see langword="Integer" />. Числовое выражение, показывающее необходимое число возвращаемых знаков. Если выражение равно 0, возвращается строка нулевой длины (""). Если выражение больше или равно числу символов в <c>str</c>, то возвращается вся строка.</param>
        <summary>Возвращает строку, содержащую указанное число знаков с правой стороны строки.</summary>
        <returns>Возвращает строку, содержащую указанное число знаков с правой стороны строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы определить число знаков в `str`, используйте `Len` функции. При использовании в приложении Windows Form или любой другой класс, имеющий `Right` свойства, необходимо полностью определить функцию с `Microsoft.VisualBasic.Strings.Right`.  
  
> [!NOTE]
>  `RightB` В предыдущих версиях Visual Basic функция возвращает строку, в байтах, а не символы. Он используется главным образом для преобразования строк в приложениях с двухбайтовой кодировки (DBCS). Все строки текущей версии Visual Basic кодируются в Юникоде, и `RightB` больше не поддерживается.  
  
   
  
## Examples  
 В этом примере показано использование функции `Right` функция возвращает подстроку из данного `String`. В классе, который имеет `Right` свойства, может оказаться необходимым для полного определения `Right` функции.  
  
 [!code-vb[VbVbalrStrings#21](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Length" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Len" />
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Mid" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="RSet">
      <MemberSignature Language="C#" Value="public static string RSet (string Source, int Length);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RSet(string Source, int32 Length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RSet (Source As String, Length As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RSet(System::String ^ Source, int Length);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Source" Type="System.String" />
        <Parameter Name="Length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Source">Обязательно. Выражение <see langword="String" />. Имя строковой переменной.</param>
        <param name="Length">Обязательно. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <summary>Возвращает выровненную по правому краю строку, содержащую указанную строку, настроенную под указанную длину.</summary>
        <returns>Возвращает выровненную по правому краю строку, содержащую указанную строку, настроенную под указанную длину.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `Source` длиннее, чем `Length`, `RSet` помещает только первых символов до длины `Source`, в возвращаемой строке. Если указанная строка короче указанной длины, добавляются пробелы в левый конец строки для достижения соответствующей длины. Если указанная строка длиннее значения указанной длины, он сокращается до указанной длины.  
  
   
  
## Examples  
 В этом примере показано использование функции `RSet` функции.  
  
 [!code-vb[VbVbalrStrings#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RTrim">
      <MemberSignature Language="C#" Value="public static string RTrim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string RTrim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function RTrim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ RTrim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</summary>
        <returns>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, И `Trim` функции удалить пробелы в конце строки.  
  
   
  
## Examples  
 В данном примере функция `LTrim` используется, чтобы убрать пробелы в начале, а функция `RTrim` — чтобы убрать пробелы в конце строковой переменной. Функция `Trim` в примере используется для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Space">
      <MemberSignature Language="C#" Value="public static string Space (int Number);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Space(int32 Number) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Space (Number As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Space(int Number);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательно. Выражение <see langword="Integer" />. Нужное количество пробелов в строке.</param>
        <summary>Возвращает строку, состоящую из указанного числа пробелов.</summary>
        <returns>Возвращает строку, состоящую из указанного числа пробелов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Space` Функция используется для форматирования выходных данных и очистки данных в строках фиксированной длины.  
  
   
  
## Examples  
 В этом примере используется `Space` функция возвращает строку, состоящую из указанного числа пробелов.  
  
 [!code-vb[VbVbalrStrings#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="Number" /> &lt; 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="Split">
      <MemberSignature Language="C#" Value="public static string[] Split (string Expression, string Delimiter = &quot; &quot;, int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static string[] Split(string Expression, string Delimiter, int32 Limit, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function Split (Expression As String, Optional Delimiter As String = &quot; &quot;, Optional Limit As Integer = -1, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As String()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
        <Parameter Name="Delimiter" Type="System.String" />
        <Parameter Name="Limit" Type="System.Int32" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Выражение типа <see langword="String" />, содержащее подстроки и разделители.</param>
        <param name="Delimiter">Необязательный. Одиночный знак, используемый для обозначения границ подстроки. Если аргумент <c>Delimiter</c> опущен, в качестве разделителя используется пробел (" ").</param>
        <param name="Limit">Необязательный. Максимальное число подстрок, на которые должна быть разделена входная строка. По умолчанию –1 указывает, что входная строка должна быть разбита в местах каждого из вхождений строки <c>Delimiter</c>.</param>
        <param name="Compare">Необязательный. Числовое значение, которое указывает вид сравнения, выполняемого при оценке подстрок. Сведения о значениях см. в разделе "Параметры".</param>
        <summary>Возвращает одномерный массив (с индексацией от нуля), содержащий указанное число подстрок.</summary>
        <returns>
          Массив <see langword="String" />. Если <paramref name="Expression" /> является строкой нулевой длины (""), функция <see langword="Split" /> возвращает одноэлементный массив, содержащий строку нулевой длины. Если <paramref name="Delimiter" /> является строкой нулевой длины, или он нигде не найден в параметре <paramref name="Expression" />, функция <see langword="Split" /> возвращает одноэлементный массив, содержащий всю строку <paramref name="Expression" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию или когда `Limit` равно -1, `Split` функция Разделяет входную строку при каждом вхождении строки разделителя и возвращает подстроки в массиве. Когда `Limit` параметр больше нуля, `Split` функция разбивает строку на первый `Limit`-1 вхождений разделителей и возвращает массив с результирующими подстроками. Например `Split("a:b:c", ":")` возвращает массив `{"a", "b", "c"}`, пока `Split("a:b:c", ":", 2)` возвращает массив `{"a", "b:c"}`.  
  
 Если `Split` функция встречает два разделителя в строке или разделитель в начале или конце строки, они интерпретируются как окружающие пустую строку (»»). Например `Split("xx", "x")` возвращает массив, содержащий три пустых строки: одну от начала строки и первого «x», другую между двумя строками «x» и третью от последнего «x» и в конце строки.  
  
 В этой таблице показано, как необязательный `Delimiter`, `Limit`, и `Compare` параметры можно изменить поведение `Split` функции.  
  
|Вызов разделителя|Возвращаемое значение|  
|-|-|  
|`Split("42, 12, 19")`|{"42," , "12," , "19"}|  
|`Split("42, 12, 19", ", ")`|{"42", "12", "19"}|  
|`Split("42, 12, 19", ", ", 2)`|{"42", "12, 19"}|  
|`Split("192.168.0.1", ".")`|{"192", "168", "0", "1"}|  
|`Split("Alice and Bob", " AND ")`|{«Анна и Виктор»}|  
|`Split("Alice and Bob", " AND ", ,CompareMethod.Text)`|{«Алиса», «Bob»}|  
|`Split("someone@example.com", "@",1)`|{"someone@example.com"}|  
|`Split("someone@example.com", "@",2)`|{«someone», «example.com»}|  
  
 `Compare` Аргумент может иметь следующие значения.  
  
|Константа|Описание:|Значение|  
|-|-|-|  
|`CompareMethod.Binary`|Выполняет двоичное сравнение|0|  
|`CompareMethod.Text`|Выполняет сравнение по тексту|1|  
  
   
  
## Examples  
 В следующем примере показано, как для разбиения строки относительно пробелов.  
  
 [!code-vb[VbVbalrStrings#13](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#13)]  
  
 Следующий пример демонстрирует разбиение строк с несколькими разделителями в строке и фильтрация пустых строк.  
  
 [!code-vb[VbVbalrStrings#14](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.Join" />
        <altmember cref="T:Microsoft.VisualBasic.CompareMethod" />
      </Docs>
    </Member>
    <Member MemberName="StrComp">
      <MemberSignature Language="C#" Value="public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);" />
      <MemberSignature Language="ILAsm" Value=".method public static int32 StrComp(string String1, string String2, valuetype Microsoft.VisualBasic.CompareMethod Compare) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrComp (String1 As String, String2 As String, Optional Compare As CompareMethod = Microsoft.VisualBasic.CompareMethod.Binary) As Integer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="String1" Type="System.String" />
        <Parameter Name="String2" Type="System.String" />
        <Parameter Name="Compare" Type="Microsoft.VisualBasic.CompareMethod">
          <Attributes>
            <Attribute>
              <AttributeName>Microsoft.VisualBasic.CompilerServices.OptionCompare</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="String1">Обязательно. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="String2">Обязательно. Любое допустимое выражение типа <see langword="String" />.</param>
        <param name="Compare">Необязательный. Указывает тип сравнения строк. Если параметр <c>Compare</c> не задан, параметр <see langword="Option Compare" /> определяет тип сравнения.</param>
        <summary>Возвращает -1, 0 или 1 в зависимости от результата сравнения строк.</summary>
        <returns>Метод <see langword="StrComp" /> возвращает следующие значения.  
  
 <list type="table"><item><term> Условие  
  
 </term><description> StrComp возвращает  
  
 </description></item><item><term><paramref name="String1" /> сортирует перед <paramref name="String2" /></term><description> –1  
  
 </description></item><item><term><paramref name="String1" /> равно <paramref name="String2" /></term><description> 0  
  
 </description></item><item><term><paramref name="String1" /> сортирует после <paramref name="String2" /></term><description> 1  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Они сравниваются по буквенно-цифровой сортировки значений, начиная с первого символа. Дополнительные сведения о двоичном сравнении, текстовом сравнение и порядок сортировки см. в разделе [Option Compare Statement](~/docs/visual-basic/language-reference/statements/option-compare-statement.md).  
  
 Параметры аргумента `Compare`:  
  
|Константа|Описание:|  
|-|-|  
|`Binary`|Выполняет двоичное сравнение, на основе порядка сортировки, производного от внутренних двоичных представлений символов.|  
|`Text`|Выполняет сравнение текста, на основе порядка сортировки текста без учета регистра, определяется вашей системы `LocaleID` значение.|  
  
   
  
## Examples  
 В этом примере используется `StrComp` функции для возврата результатов сравнения строк.  
  
 [!code-vb[VbVbalrStrings#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Недопустимое значение параметра <paramref name="Compare" />.</exception>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.InStr" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <Member MemberName="StrConv">
      <MemberSignature Language="C#" Value="public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrConv(string str, valuetype Microsoft.VisualBasic.VbStrConv Conversion, int32 LocaleID) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrConv (str As String, Conversion As VbStrConv, Optional LocaleID As Integer = 0) As String" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="Conversion" Type="Microsoft.VisualBasic.VbStrConv" />
        <Parameter Name="LocaleID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Преобразуемое выражение <see langword="String" />.</param>
        <param name="Conversion">Обязательно. Член <see cref="T:Microsoft.VisualBasic.VbStrConv" />. Значение перечисления, задающее тип выполняемого преобразования.</param>
        <param name="LocaleID">Необязательный. Значение <see langword="LocaleID" />, если оно отличается от системного значения <see langword="LocaleID" />. (Системное значение <see langword="LocaleID" /> является значением по умолчанию.)</param>
        <summary>Возвращает строку, преобразованную как указано.</summary>
        <returns>Возвращает строку, преобразованную как указано.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Константы `VbStrConv.Wide`, `VbStrConv.Narrow`, `VbStrConv.SimplifiedChinese`, `VbStrConv.TraditionalChinese`, `VbStrConv.Katakana`, и `VbStrConv.Hiragana` может привести к ошибкам во время выполнения при использовании в регионах, где они не применяются, но не всегда: константы `VbStrConv.Katakana` и `VbStrConv.Hiragana`может использоваться в системе не японский с установлен японский языковой пакет. Кроме того, использование констант `VbStrConv.Wide` и `VbStrConv.Narrow` поддерживается в любой системе установлен восточноазиатских языков.  
  
 Эта функция использует данные язык и региональные параметры приложения при обработке строки, чтобы изменения регистра соответствовали для языкового стандарта, в котором используется это приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решений по безопасности на основе результата сравнения или операциями изменения регистра, то эта операция должна выполняться <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
 Параметры аргумента `Conversion`:  
  
|Член перечисления|Описание:|  
|-|-|  
|`VbStrConv.None`|Преобразование не выполняется|  
|`VbStrConv.LinguisticCasing`|Использует лингвистические правила для учета регистра, а не в файловой системе (по умолчанию). Допустимый с помощью `VbStrConv.UpperCase` и `VbStrConv.LowerCase` только.|  
|`VbStrConv.UpperCase`|Преобразует строку в верхний регистр.|  
|`VbStrConv.LowerCase`|Преобразует строку в нижний регистр.|  
|`VbStrConv.ProperCase`|Преобразует первую букву каждого слова в строке в верхний регистр.|  
|`VbStrConv.Wide` <sup>*</sup>|Преобразует узкие (с половиной ширины) знаки в строке (с полной шириной) расширенных символов. [!INCLUDE[vbstrconv-wide](~/includes/vbstrconv-wide-md.md)]|  
|`VbStrConv.Narrow` <sup>*</sup>|Преобразует широкие (с полной шириной) знаки в строке символов (с половиной ширины).|  
|`VbStrConv.Katakana` <sup>**</sup>|Преобразует все символы хирагана в символы катакана.|  
|`VbStrConv.Hiragana` <sup>**</sup>|Преобразует все символы катакана в символы хирагана.|  
|`VbStrConv.SimplifiedChinese` <sup>*</sup>|Преобразует символы традиционного китайского языка (упрощенное письмо).|  
|`VbStrConv.TraditionalChinese` <sup>*</sup>|Преобразует символы упрощенного китайского письма традиционного китайского письма.|  
  
 <sup>*</sup> Применяется к азиатских языков.  
  
 <sup>**</sup> Только для японского языка.  
  
> [!NOTE]
>  Эти константы указываются в общеязыковой среде выполнения .NET Framework. В результате они могут использоваться в любом месте в коде вместо фактических значений. Большинство могут объединяться (например, `UpperCase + Wide`), за исключением случаев, когда они являются взаимоисключающими (например, `VbStrConv.Wide + VbStrConv.Narrow`).  
  
 Ниже приведены допустимые разделители слов для правильного применения регистра: Null (`Chr$(0)`), символ горизонтальной табуляции (`Chr$(9)`), перевод строки (`Chr$(10)`), вертикальная табуляция (`Chr$(11)`), перевод страницы (`Chr$(12)`), символ возврата каретки (`Chr$(13)`), пробел () однобайтовая кодировка) (`Chr$(32)`). Фактическое значение для пробела, который может быть полной или половинной ширины, зависит от страны или региона для восточно-азиатских языков и региональных параметров.  
  
   
  
## Examples  
 Этот пример преобразует текст в буквы нижнего регистра.  
  
 [!code-vb[VbVbalrStrings#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="LocaleID" /> не поддерживается, <paramref name="Conversion" /> &lt; 0 или &gt; 2048, либо конверсия не поддерживается для указанного языкового стандарта.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Strings.Chr(System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.ChrW(System.Int32)" />
        <altmember cref="T:System.String" />
        <altmember cref="T:System.ArgumentException" />
      </Docs>
    </Member>
    <MemberGroup MemberName="StrDup">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, char Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, char Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Char) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, char Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательно. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <param name="Character">Обязательно. Любое допустимое выражение <see langword="Char" />, <see langword="String" /> или <see langword="Object" />. Используется только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
        <returns>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает `String` состоит из повторяющихся символов. Символ, содержащийся в строке является первым символом в `Character` аргумент, который повторяется `Number` количество раз.  
  
   
  
## Examples  
 В этом примере используется `StrDup` функция, возвращающая строки дублирован символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Недопустимо значение <paramref name="Number" /> меньшее 0 или типа <paramref name="Character" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static object StrDup (int Number, object Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static object StrDup(int32 Number, object Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As Object) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ StrDup(int Number, System::Object ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательно. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <param name="Character">Обязательно. Любое допустимое выражение <see langword="Char" />, <see langword="String" /> или <see langword="Object" />. Используется только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
        <returns>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает `String` состоит из повторяющихся символов. Символ, содержащийся в строке является первым символом в `Character` аргумент, который повторяется `Number` количество раз.  
  
   
  
## Examples  
 В этом примере используется `StrDup` функция, возвращающая строки дублирован символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Недопустимо значение <paramref name="Number" /> меньшее 0 или типа <paramref name="Character" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrDup">
      <MemberSignature Language="C#" Value="public static string StrDup (int Number, string Character);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrDup(int32 Number, string Character) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrDup (Number As Integer, Character As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrDup(int Number, System::String ^ Character);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Number" Type="System.Int32" />
        <Parameter Name="Character" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Number">Обязательно. Выражение <see langword="Integer" />. Длина возвращаемой строки.</param>
        <param name="Character">Обязательно. Любое допустимое выражение <see langword="Char" />, <see langword="String" /> или <see langword="Object" />. Используется только первый знак выражения. Если параметр Character относится к типу <see langword="Object" />, он должен содержать значение <see langword="Char" /> или <see langword="String" />.</param>
        <summary>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</summary>
        <returns>Возвращает строку или объект, состоящие из указанного знака, повторенного определенное количество раз.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта функция возвращает `String` состоит из повторяющихся символов. Символ, содержащийся в строке является первым символом в `Character` аргумент, который повторяется `Number` количество раз.  
  
   
  
## Examples  
 В этом примере используется `StrDup` функция, возвращающая строки дублирован символов.  
  
 [!code-vb[VbVbalrStrings#34](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#34)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Недопустимо значение <paramref name="Number" /> меньшее 0 или типа <paramref name="Character" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="Character" /> имеет значение <see langword="Nothing" />.</exception>
        <altmember cref="M:Microsoft.VisualBasic.FileSystem.SPC(System.Int16)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.ArgumentNullException" />
      </Docs>
    </Member>
    <Member MemberName="StrReverse">
      <MemberSignature Language="C#" Value="public static string StrReverse (string Expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static string StrReverse(string Expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.StrReverse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function StrReverse (Expression As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ StrReverse(System::String ^ Expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Expression" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Expression">Обязательно. Строковое выражение, знаки которого следует переставить в обратном порядке. Если параметр <c>Expression</c> является строкой нулевой длины (""), то возвращается строка нулевой длины.</param>
        <summary>Возвращает строку, содержащую те же знаки, что и в заданной строке, но в противоположном порядке.</summary>
        <returns>Возвращает строку, содержащую те же знаки, что и в заданной строке, но в противоположном порядке.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `StrReverse` Функция возвращает строку, содержащую те же символы как `Expression`, но в обратном порядке.  
  
   
  
## Examples  
 [!code-vb[VbVbalrStrings#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)" />
      </Docs>
    </Member>
    <Member MemberName="Trim">
      <MemberSignature Language="C#" Value="public static string Trim (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public static string Trim(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.Trim(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Trim (str As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ Trim(System::String ^ str);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">Обязательно. Любое допустимое выражение типа <see langword="String" />.</param>
        <summary>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</summary>
        <returns>Возвращает строку, содержащую копию указанной строки без начальных пробелов (<see langword="LTrim" />), замыкающих пробелов (<see langword="RTrim" />) или без тех и других (<see langword="Trim" />).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `LTrim`, `RTrim`, И `Trim` функции удалить пробелы в конце строки.  
  
   
  
## Examples  
 В данном примере функция `LTrim` используется, чтобы убрать пробелы в начале, а функция `RTrim` — чтобы убрать пробелы в конце строковой переменной. Функция `Trim` в примере используется для удаления обоих типов пробелов.  
  
 [!code-vb[VbVbalrStrings#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:Microsoft.VisualBasic.Strings.RTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.LTrim(System.String)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)" />
        <altmember cref="M:Microsoft.VisualBasic.Strings.Space(System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UCase">
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static char UCase (char Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static char UCase(char Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As Char) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static char UCase(char Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательно. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</summary>
        <returns>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только строчные буквы преобразуются в верхний регистр; Все прописные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует данные язык и региональные параметры приложения при обработке строки, чтобы изменения регистра соответствовали для языкового стандарта, в котором используется это приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решений по безопасности на основе результата сравнения или операциями изменения регистра, то эта операция должна выполняться <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В данном примере функция `UCase` используется для возврата строки в верхнем регистре.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
    <Member MemberName="UCase">
      <MemberSignature Language="C#" Value="public static string UCase (string Value);" />
      <MemberSignature Language="ILAsm" Value=".method public static string UCase(string Value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Strings.UCase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function UCase (Value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ UCase(System::String ^ Value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="Value">Обязательно. Любое допустимое значение <see langword="String" /> или выражение <see langword="Char" />.</param>
        <summary>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</summary>
        <returns>Возвращает строку или знак, содержащий указанную строку, преобразованную в верхний регистр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Только строчные буквы преобразуются в верхний регистр; Все прописные буквы и символы nonletter остаются неизменными.  
  
 Эта функция использует данные язык и региональные параметры приложения при обработке строки, чтобы изменения регистра соответствовали для языкового стандарта, в котором используется это приложение.  
  
> [!IMPORTANT]
>  Если приложение принимает решений по безопасности на основе результата сравнения или операциями изменения регистра, то эта операция должна выполняться <xref:System.String.Compare%2A?displayProperty=nameWithType> и передайте <xref:System.StringComparison.Ordinal> или <xref:System.StringComparison.OrdinalIgnoreCase> для `comparisonType` аргумент. Дополнительные сведения см. в разделе [как языка и региональных параметров влияет на строки в Visual Basic](~/docs/visual-basic/programming-guide/language-features/strings/how-culture-affects-strings.md).  
  
   
  
## Examples  
 В данном примере функция `UCase` используется для возврата строки в верхнем регистре.  
  
 [!code-vb[VbVbalrStrings#31](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrStrings/VB/Class1.vb#31)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:Microsoft.VisualBasic.Strings.LCase" />
      </Docs>
    </Member>
  </Members>
</Type>