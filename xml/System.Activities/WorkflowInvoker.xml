<Type Name="WorkflowInvoker" FullName="System.Activities.WorkflowInvoker">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1d6a938287920a69315e465828e1e66bb9224e5" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51895697" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class WorkflowInvoker" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit WorkflowInvoker extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Activities.WorkflowInvoker" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class WorkflowInvoker" />
  <TypeSignature Language="C++ CLI" Value="public ref class WorkflowInvoker sealed" />
  <TypeSignature Language="F#" Value="type WorkflowInvoker = class" />
  <AssemblyInfo>
    <AssemblyName>System.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="1edab-101">Предоставляет средства для вызова рабочего процесса аналогично вызову метода.</span>
      <span class="sxs-lookup">
        <span data-stu-id="1edab-101">Provides a means for invoking a workflow as if it were a method call.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-102">Модуль вызова <xref:System.Activities.WorkflowInvoker> содержит методы для вызова рабочих процессов в синхронном режиме (как методы экземпляра, так и статические методы), а также методы экземпляра для вызова рабочих процессов в асинхронном режиме.</span><span class="sxs-lookup"><span data-stu-id="1edab-102"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
 <span data-ttu-id="1edab-103"><xref:System.Activities.WorkflowInvoker> не разрешает управлять экземплярами, в частности сохранять, выгружать и возобновлять закладки.</span><span class="sxs-lookup"><span data-stu-id="1edab-103"><xref:System.Activities.WorkflowInvoker> does not allow instance control such as persisting, unloading, or resuming bookmarks.</span></span> <span data-ttu-id="1edab-104">Если необходимо управлять экземплярами, следует использовать <xref:System.Activities.WorkflowApplication>.</span><span class="sxs-lookup"><span data-stu-id="1edab-104">If instance control is desired, use <xref:System.Activities.WorkflowApplication> instead.</span></span>  
  
 <span data-ttu-id="1edab-105">Чтобы выполнять рабочие процессы в синхронном режиме без управления экземплярами, вызовите метод <xref:System.Activities.WorkflowInvoker.Invoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-105">To execute workflows synchronously with no instance control, call the <xref:System.Activities.WorkflowInvoker.Invoke%2A> method.</span></span> <span data-ttu-id="1edab-106">Чтобы выполнять рабочий процесс в асинхронном режиме без управления экземплярами, используйте пары методов <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> и <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> или метод <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-106">To execute a workflow asynchronously with no instance control, use the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> and <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method pairs, or the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-107">В следующем примере синхронно вызывается рабочий процесс, состоящий из одного действия <xref:System.Activities.Statements.WriteLine>, с помощью метода <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="1edab-107">The following example synchronously invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity using <xref:System.Activities.WorkflowInvoker>.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WorkflowInvoker (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (workflow As Activity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; WorkflowInvoker(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="new System.Activities.WorkflowInvoker : System.Activities.Activity -&gt; System.Activities.WorkflowInvoker" Usage="new System.Activities.WorkflowInvoker workflow" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="1edab-108">Определение рабочего процесса, который должен вызываться этим экземпляром класса <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-108">The workflow definition of the workflow to be invoked by this instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-109">Инициализирует новый экземпляр класса <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-109">Initializes a new instance of the <see cref="T:System.Activities.WorkflowInvoker" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-110">Модуль вызова <xref:System.Activities.WorkflowInvoker> содержит методы для вызова рабочих процессов в синхронном режиме (как методы экземпляра, так и статические методы), а также методы экземпляра для вызова рабочих процессов в асинхронном режиме.</span><span class="sxs-lookup"><span data-stu-id="1edab-110"><xref:System.Activities.WorkflowInvoker> contains both instance and static methods for invoking workflows synchronously, and instance methods for invoking workflows asynchronously.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-111">В следующем примере вызывается рабочий процесс, состоящий из одного действия <xref:System.Activities.Statements.WriteLine>.</span><span class="sxs-lookup"><span data-stu-id="1edab-111">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1edab-112">Вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования <see cref="T:System.IAsyncResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-112">Invokes a workflow asynchronously using the <see cref="T:System.IAsyncResult" /> asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-113">Дополнительные сведения см. в разделе [Обзор асинхронного программирования](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="1edab-113">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="1edab-114">Метод, вызываемый после завершения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-114">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="1edab-115">Относящийся к необязательному приложению объект, содержащий сведения об асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-115">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-116">Вызывает рабочий процесс в асинхронном режиме с указанным <see cref="T:System.AsyncCallback" /> и предоставляемым пользователем состоянием.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-116">Invokes a workflow asynchronously using the specified <see cref="T:System.AsyncCallback" /> and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-117">Ссылка на асинхронную операцию вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-117">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-118">Чтобы получить уведомление о завершении рабочего процесса и получить выходные параметры рабочего процесса, вызовите метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> из метода `callback`.</span><span class="sxs-lookup"><span data-stu-id="1edab-118">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="1edab-119">Если вызвать метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> до завершения рабочего процесса, он будет заблокирован до завершения рабочего процесса.</span><span class="sxs-lookup"><span data-stu-id="1edab-119">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="1edab-120">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-120">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-121">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="1edab-121">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="1edab-122">Дополнительные сведения см. в разделе [Обзор асинхронного программирования](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="1edab-122">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-123">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-123">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-124">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-124">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-125">Они возвращаются путем вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-125">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="1edab-126">После завершения вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-126">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-127">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-127">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="1edab-128">Метод, вызываемый после завершения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-128">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="1edab-129">Относящийся к необязательному приложению объект, содержащий сведения об асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-129">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-130">Вызывает рабочий процесс в асинхронном режиме с указанным словарем <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров, объектом <see cref="T:System.AsyncCallback" /> и предоставляемым пользователем состоянием.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-130">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-131">Ссылка на асинхронную операцию вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-131">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-132">Чтобы получить уведомление о завершении рабочего процесса и получить выходные параметры рабочего процесса, вызовите метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> из метода `callback`.</span><span class="sxs-lookup"><span data-stu-id="1edab-132">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="1edab-133">Если вызвать метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> до завершения рабочего процесса, он будет заблокирован до завершения рабочего процесса.</span><span class="sxs-lookup"><span data-stu-id="1edab-133">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  <span data-ttu-id="1edab-134">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-134">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-135">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="1edab-135">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="1edab-136">Дополнительные сведения см. в разделе [Обзор асинхронного программирования](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="1edab-136">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-137">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-137">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-138">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-138">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-139">Они возвращаются путем вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-139">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="1edab-140">После завершения вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-140">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1edab-141">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-141">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="1edab-142">Метод, вызываемый после завершения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-142">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="1edab-143">Относящийся к необязательному приложению объект, содержащий сведения об асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-143">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-144">Вызывает рабочий процесс в асинхронном режиме с использованием указанного интервала времени ожидания, объекта <see cref="T:System.AsyncCallback" /> и предоставляемого пользователем состояния.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-144">Invokes a workflow asynchronously using the specified time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-145">Ссылка на асинхронную операцию вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-145">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-146">Чтобы получить уведомление о завершении рабочего процесса и получить выходные параметры рабочего процесса, вызовите метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> из метода `callback`.</span><span class="sxs-lookup"><span data-stu-id="1edab-146">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="1edab-147">Если вызвать метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> до завершения рабочего процесса, он будет заблокирован до завершения рабочего процесса.</span><span class="sxs-lookup"><span data-stu-id="1edab-147">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="1edab-148">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, то он прерывается и при вызове метода <xref:System.TimeoutException> создается исключение <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-148">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when the <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> method is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-149">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-149">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-150">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-150">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="1edab-151">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="1edab-151">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="1edab-152">Дополнительные сведения см. в разделе [Обзор асинхронного программирования](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="1edab-152">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-153">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-153">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-154">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-154">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-155">Они возвращаются путем вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-155">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="1edab-156">После завершения вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-156">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.BeginInvoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * AsyncCallback * obj -&gt; IAsyncResult" Usage="workflowInvoker.BeginInvoke (inputs, timeout, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-157">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-157">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-158">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-158">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="callback">
          <span data-ttu-id="1edab-159">Метод, вызываемый после завершения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-159">The method to be called when the workflow has completed.</span>
          </span>
        </param>
        <param name="state">
          <span data-ttu-id="1edab-160">Относящийся к необязательному приложению объект, содержащий сведения об асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-160">An optional application-specific object that contains information about the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-161">Вызывает рабочий процесс в асинхронном режиме с указанным словарем <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров, интервалом времени ожидания, объектом <see cref="T:System.AsyncCallback" /> и предоставляемым пользователем состоянием.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-161">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, time-out interval, <see cref="T:System.AsyncCallback" />, and user-provided state.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-162">Ссылка на асинхронную операцию вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-162">A reference to the asynchronous invoke operation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-163">Чтобы получить уведомление о завершении рабочего процесса и получить выходные параметры рабочего процесса, вызовите метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> из метода `callback`.</span><span class="sxs-lookup"><span data-stu-id="1edab-163">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method.</span></span> <span data-ttu-id="1edab-164">Если вызвать метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> до завершения рабочего процесса, он будет заблокирован до завершения рабочего процесса.</span><span class="sxs-lookup"><span data-stu-id="1edab-164">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span> <span data-ttu-id="1edab-165">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, то он прерывается и при вызове <xref:System.TimeoutException> создается исключение <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-165">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown when <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-166">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-166">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-167">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-167">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="1edab-168">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="1edab-168">This method invokes a workflow asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="1edab-169">Дополнительные сведения см. в разделе [Обзор асинхронного программирования](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="1edab-169">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-170">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-170">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-171">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-171">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-172">Они возвращаются путем вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-172">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="1edab-173">После завершения вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-173">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.CancelAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : obj -&gt; unit" Usage="workflowInvoker.CancelAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="1edab-174">Маркер для отменяемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-174">The token for the workflow to cancel.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-175">Выполняет отмену рабочего процесса, вызванного с указанным состоянием <paramref name="userState" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-175">Attempts to cancel the workflow that was invoked with the specified <paramref name="userState" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-176">Отменять можно только рабочий процесс, вызванный одним из перегруженных вариантов метода <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, который принимает параметр `userState`.</span><span class="sxs-lookup"><span data-stu-id="1edab-176">Only a workflow invoked by one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that takes a `userState` parameter can be canceled.</span></span>  
  
 <span data-ttu-id="1edab-177">Если Отмена выполняется успешно, <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> свойство <xref:System.Activities.InvokeCompletedEventArgs> передается <xref:System.Activities.WorkflowInvoker.InvokeCompleted> обработчика `true`; в противном случае он становится равным `false`.</span><span class="sxs-lookup"><span data-stu-id="1edab-177">If the cancellation succeeds, the <xref:System.ComponentModel.AsyncCompletedEventArgs.Cancelled%2A> property of the <xref:System.Activities.InvokeCompletedEventArgs> passed to the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler is set to `true`; otherwise, it is set to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-178">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-178">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-179">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-179">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-180">Когда вызывается рабочий процесс, сервер пытается отменить его.</span><span class="sxs-lookup"><span data-stu-id="1edab-180">Once the workflow is invoked, the host attempts to cancel the workflow.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#34](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; EndInvoke (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; EndInvoke(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (result As IAsyncResult) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ EndInvoke(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="member this.EndInvoke : IAsyncResult -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.EndInvoke result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">
          <span data-ttu-id="1edab-181">Интерфейс <see cref="T:System.IAsyncResult" />, ссылающийся на операцию <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />, которая запустила рабочий процесс.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-181">The <see cref="T:System.IAsyncResult" /> that references the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> operation that started the workflow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-182">Возвращает результаты рабочего процесса, вызванного с помощью одного из перегруженных вариантов <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-182">Returns the results of a workflow that was invoked using one of the <see cref="Overload:System.Activities.WorkflowInvoker.BeginInvoke" /> overloads.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-183">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-183">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-184">Чтобы получить уведомление о завершении рабочего процесса и получить его выходные параметры, вызовите метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> из метода `callback`, указанного в <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-184">To be notified when the workflow is complete and retrieve the output parameters of the workflow, call <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> from the `callback` method specified by <xref:System.Activities.WorkflowInvoker.BeginInvoke%2A>.</span></span> <span data-ttu-id="1edab-185">Если вызвать метод <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> до завершения рабочего процесса, он будет заблокирован до завершения рабочего процесса.</span><span class="sxs-lookup"><span data-stu-id="1edab-185">If <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> is called before the workflow completes, it blocks until the workflow completes.</span></span>  
  
 <span data-ttu-id="1edab-186">Этот метод возвращает результат рабочего процесса, вызванного в асинхронном режиме с помощью асинхронного шаблона проектирования <xref:System.IAsyncResult>.</span><span class="sxs-lookup"><span data-stu-id="1edab-186">This method returns the result of a workflow invoked asynchronously using the <xref:System.IAsyncResult> asynchronous design pattern.</span></span> <span data-ttu-id="1edab-187">Дополнительные сведения см. в разделе [Обзор асинхронного программирования](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span><span class="sxs-lookup"><span data-stu-id="1edab-187">For more information, see [Asynchronous Programming Overview](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-188">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-188">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-189">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-189">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-190">Они возвращаются путем вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-190">These are retrieved by calling <xref:System.Activities.WorkflowInvoker.EndInvoke%2A>.</span></span> <span data-ttu-id="1edab-191">После завершения вызова <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-191">When the call to <xref:System.Activities.WorkflowInvoker.EndInvoke%2A> returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#32](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Extensions">
      <MemberSignature Language="C#" Value="public System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Activities.Hosting.WorkflowInstanceExtensionManager Extensions" />
      <MemberSignature Language="DocId" Value="P:System.Activities.WorkflowInvoker.Extensions" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Extensions As WorkflowInstanceExtensionManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Activities::Hosting::WorkflowInstanceExtensionManager ^ Extensions { System::Activities::Hosting::WorkflowInstanceExtensionManager ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Extensions : System.Activities.Hosting.WorkflowInstanceExtensionManager" Usage="System.Activities.WorkflowInvoker.Extensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Activities.Hosting.WorkflowInstanceExtensionManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1edab-192">Возвращает коллекцию <see cref="T:System.Collections.ObjectModel.Collection`1" /> расширений, доступных для рабочих процессов, вызываемых экземпляром <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-192">Gets the <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1edab-193">Коллекция <see cref="T:System.Collections.ObjectModel.Collection`1" /> расширений, доступных для рабочих процессов, вызываемых экземпляром <see cref="T:System.Activities.WorkflowInvoker" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-193">The <see cref="T:System.Collections.ObjectModel.Collection`1" /> of extensions that are available to workflows invoked by a <see cref="T:System.Activities.WorkflowInvoker" /> instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-194">Это свойство используется авторами узлов рабочих процессов для добавления расширений к экземпляру <xref:System.Activities.WorkflowInvoker>, чтобы они были доступны рабочим процессам, вызываемым эти экземпляром.</span><span class="sxs-lookup"><span data-stu-id="1edab-194">This property is used by workflow host authors to add extensions to the <xref:System.Activities.WorkflowInvoker> instance so they will be available to workflows invoked by it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-195">В следующем примере регистрируется настраиваемый участник <xref:System.Activities.Tracking.TrackingParticipant> с коллекцией <xref:System.Activities.WorkflowInvoker.Extensions%2A> экземпляра <xref:System.Activities.WorkflowInvoker>.</span><span class="sxs-lookup"><span data-stu-id="1edab-195">The following example registers a custom <xref:System.Activities.Tracking.TrackingParticipant> with the <xref:System.Activities.WorkflowInvoker.Extensions%2A> collection of a <xref:System.Activities.WorkflowInvoker> instance.</span></span> <span data-ttu-id="1edab-196">Данный пример кода является частью [настраиваемое отслеживание](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) образца.</span><span class="sxs-lookup"><span data-stu-id="1edab-196">This code example is part of the [Custom Tracking](~/docs/framework/windows-workflow-foundation/samples/custom-tracking.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#40](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#40)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1edab-197">Вызывает рабочий процесс в синхронном режиме и возвращает словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия, ключом которых является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-197">Invokes a workflow synchronously and returns a dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-198">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-198">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-199">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-199">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-200">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-200">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke () As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke();" />
      <MemberSignature Language="F#" Value="member this.Invoke : unit -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1edab-201">Вызывает рабочий процесс синхронным образом, используя определение рабочего процесса, переданное в конструктор <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-201">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-202">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-202">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-203">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-203">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-204">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-204">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-205">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-205">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-206">В следующем примере вызывается рабочий процесс, состоящий из одного действия `DiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-206">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="1edab-207">Действие `DiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-207">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-208">После завершения вызова `Invoke` в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-208">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span> <span data-ttu-id="1edab-209">Рабочий процесс вызывается дважды с использованием определения рабочего процесса, передаваемые в `WorkflowInvoker` конструктор.</span><span class="sxs-lookup"><span data-stu-id="1edab-209">The workflow is invoked twice, using the workflow definition passed into the `WorkflowInvoker` constructor.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#31](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#31)]  
  
 <span data-ttu-id="1edab-210">Если корневое действие рабочего процесса не имеет выходных аргументов или они не нужны обработчику, то их можно не учитывать.</span><span class="sxs-lookup"><span data-stu-id="1edab-210">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="1edab-211">В следующем примере вызывается рабочий процесс, состоящий из одного действия <xref:System.Activities.Statements.WriteLine>, которое не имеет выходных аргументов.</span><span class="sxs-lookup"><span data-stu-id="1edab-211">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#2](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="1edab-212">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-212">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-213">Вызывает рабочий процесс в синхронном режиме с помощью указанного определения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-213">Invokes a workflow synchronously using the specified workflow definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-214">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-214">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-215">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-215">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-216">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-216">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-217">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-217">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-218">В следующем примере вызывается рабочий процесс, состоящий из одного действия `DiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-218">The following example invokes a workflow consisting of a single `DiceRoll` activity.</span></span> <span data-ttu-id="1edab-219">Действие `DiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-219">The `DiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-220">После завершения вызова `Invoke` в словаре выходных данных возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-220">When the call to `Invoke` returns, each output argument is returned in the outputs dictionary, keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#130](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#130)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#30](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#30)]  
  
 <span data-ttu-id="1edab-221">Если корневое действие рабочего процесса не имеет выходных аргументов или они не нужны обработчику, то их можно не учитывать.</span><span class="sxs-lookup"><span data-stu-id="1edab-221">If the workflow's root activity has no output arguments or they are not needed by the host, they can be disregarded.</span></span> <span data-ttu-id="1edab-222">В следующем примере вызывается рабочий процесс, состоящий из одного действия <xref:System.Activities.Statements.WriteLine>, которое не имеет выходных аргументов.</span><span class="sxs-lookup"><span data-stu-id="1edab-222">The following example invokes a workflow consisting of a single <xref:System.Activities.Statements.WriteLine> activity that does not have any output arguments.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#1](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-223">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-223">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-224">Вызывает действие, переданное в конструктор <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />, в синхронном режиме с указанным словарем <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-224">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-225">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-225">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-226">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-226">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-227">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-227">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-228">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-228">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-229">В следующем примере вызывается рабочий процесс, состоящий из одного действия `Divide`, которое имеет два входных аргумента и два выходных аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-229">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="1edab-230">При вызове рабочего процесса передается словарь `arguments`, содержащий значения каждого входного аргумента с указанием имени аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-230">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="1edab-231">После завершения вызова `Invoke` в словаре выходных данных `outputs` возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-231">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#22](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#22)]  
  
 <span data-ttu-id="1edab-232">Если рабочий процесс является производным от <xref:System.Activities.ActivityWithResult>, такие как `CodeActivity<TResult>` или `Activity<TResult>`, и имеются выходные аргументы, помимо правильно определенного <xref:System.Activities.Activity%601.Result%2A> выходной аргумент, перегрузка метода нестандартную `Invoke`, такому как это, необходимо использовать в Чтобы получить дополнительные аргументы.</span><span class="sxs-lookup"><span data-stu-id="1edab-232">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="1edab-233">Для этого определение рабочего процесса, переданное в `WorkflowInvoker` конструктор должен иметь тип <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="1edab-233">To do this, the workflow definition passed into the `WorkflowInvoker` constructor must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="1edab-234">В этом примере `Divide` действие является производным от `CodeActivity<int>`, но объявляется как <xref:System.Activities.Activity> таким образом, чтобы данная перегруженная версия `Invoke`, которая возвращает словарь аргументов вместо одиночного значения, используется.</span><span class="sxs-lookup"><span data-stu-id="1edab-234">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#23](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#23)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1edab-235">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-235">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-236">Вызывает рабочий процесс в синхронном режиме с указанным интервалом времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-236">Invokes a workflow synchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-237">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-237">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-238">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-238">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-239">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-239">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-240">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-240">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-241">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-241">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-242">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-242">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-243">В следующем примере вызывается рабочий процесс, содержащий два действия <xref:System.Activities.Statements.WriteLine> и действие <xref:System.Activities.Statements.Delay>, для которого задан срок <xref:System.Activities.Statements.Delay.Duration%2A> в одну минуту.</span><span class="sxs-lookup"><span data-stu-id="1edab-243">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="1edab-244">Этот рабочий процесс вызывается дважды: сначала с интервалом ожидания в две минуты, а затем с интервалом ожидания в 30 секунд.</span><span class="sxs-lookup"><span data-stu-id="1edab-244">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="1edab-245">Первый рабочий процесс вызывается успешно, а второй не завершается, вызывается исключение <xref:System.TimeoutException>, и выводится следующее сообщение.</span><span class="sxs-lookup"><span data-stu-id="1edab-245">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="1edab-246">Например, с помощью `Invoke` с аргументами выходных данных, см. в разделе перегрузку <xref:System.Activities.WorkflowInvoker.Invoke%2A> с теми же параметрами, как эту перегрузку без ожидания.</span><span class="sxs-lookup"><span data-stu-id="1edab-246">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object)) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="1edab-247">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-247">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="1edab-248">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-248">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-249">Вызывает рабочий процесс в синхронном режиме с использованием определения рабочего процесса и словаря входных параметров <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-249">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-250">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-250">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-251">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-251">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-252">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-252">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-253">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-253">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-254">В следующем примере вызывается рабочий процесс, состоящий из одного действия `Divide`, которое имеет два входных аргумента и два выходных аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-254">The following example invokes a workflow consisting of a single `Divide` activity that has two input arguments and two output arguments.</span></span> <span data-ttu-id="1edab-255">При вызове рабочего процесса передается словарь `arguments`, содержащий значения каждого входного аргумента с указанием имени аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-255">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="1edab-256">После завершения вызова `Invoke` в словаре выходных данных `outputs` возвращается каждый выходной аргумент с указанием имени.</span><span class="sxs-lookup"><span data-stu-id="1edab-256">When the call to `Invoke` returns, each output argument is returned in the `outputs` dictionary, also keyed by argument name.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#120](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#120)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#20](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#20)]  
  
 <span data-ttu-id="1edab-257">Если рабочий процесс является производным от <xref:System.Activities.ActivityWithResult>, такие как `CodeActivity<TResult>` или `Activity<TResult>`, и имеются выходные аргументы, помимо правильно определенного <xref:System.Activities.Activity%601.Result%2A> выходной аргумент, перегрузка метода нестандартную `Invoke`, такому как это, необходимо использовать в Чтобы получить дополнительные аргументы.</span><span class="sxs-lookup"><span data-stu-id="1edab-257">If the workflow derives from <xref:System.Activities.ActivityWithResult>, such as `CodeActivity<TResult>` or `Activity<TResult>`, and there are output arguments in addition to the well-defined <xref:System.Activities.Activity%601.Result%2A> output argument, a non-generic overload of `Invoke`, such as this one, must be used in order to retrieve the additional arguments.</span></span> <span data-ttu-id="1edab-258">Для этого определение рабочего процесса, переданное в `Invoke`, должно быть типа <xref:System.Activities.Activity>.</span><span class="sxs-lookup"><span data-stu-id="1edab-258">To do this, the workflow definition passed into `Invoke` must be of type <xref:System.Activities.Activity>.</span></span> <span data-ttu-id="1edab-259">В этом примере `Divide` действие является производным от `CodeActivity<int>`, но объявляется как <xref:System.Activities.Activity> таким образом, чтобы данная перегруженная версия `Invoke`, которая возвращает словарь аргументов вместо одиночного значения, используется.</span><span class="sxs-lookup"><span data-stu-id="1edab-259">In this example the `Divide` activity derives from `CodeActivity<int>`, but is declared as <xref:System.Activities.Activity> so that this overload of `Invoke`, which returns a dictionary of arguments instead of a single return value, is used.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#121](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#121)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#21](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="1edab-260">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-260">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-261">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-261">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-262">Вызывает рабочий процесс в синхронном режиме с использованием указанного определения рабочего процесса и интервала времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-262">Invokes a workflow synchronously using the specified workflow definition and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-263">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-263">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-264">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-264">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-265">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-265">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-266">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-266">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-267">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-267">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-268">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-268">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-269">В следующем примере вызывается рабочий процесс, содержащий два действия <xref:System.Activities.Statements.WriteLine> и действие <xref:System.Activities.Statements.Delay>, для которого задан срок <xref:System.Activities.Statements.Delay.Duration%2A> в одну минуту.</span><span class="sxs-lookup"><span data-stu-id="1edab-269">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="1edab-270">Этот рабочий процесс вызывается дважды: сначала с интервалом ожидания в две минуты, а затем с интервалом ожидания в 30 секунд.</span><span class="sxs-lookup"><span data-stu-id="1edab-270">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="1edab-271">Первый рабочий процесс завершается успешно, а второй не завершается, и вызывается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-271">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="1edab-272">Например, с помощью `Invoke` с аргументами выходных данных, см. в разделе перегрузку <xref:System.Activities.WorkflowInvoker.Invoke%2A> с теми же параметрами, как эту перегрузку без ожидания.</span><span class="sxs-lookup"><span data-stu-id="1edab-272">For an example of using `Invoke` with output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.Invoke : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="workflowInvoker.Invoke (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-273">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-273">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-274">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-274">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-275">Вызывает действие, переданное в конструктор <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />, в синхронном режиме с указанным словарем <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров и указанным интервалом времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-275">Invokes the activity passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor synchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-276">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-276">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-277">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-277">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-278">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-278">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-279">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-279">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-280">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-280">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-281">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-281">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-282">В следующем примере вызывается рабочий процесс, содержащий два действия <xref:System.Activities.Statements.WriteLine> и действие <xref:System.Activities.Statements.Delay>, для которого задан срок <xref:System.Activities.Statements.Delay.Duration%2A> в одну минуту.</span><span class="sxs-lookup"><span data-stu-id="1edab-282">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="1edab-283">Этот рабочий процесс вызывается дважды: сначала с интервалом ожидания в две минуты, а затем с интервалом ожидания в 30 секунд.</span><span class="sxs-lookup"><span data-stu-id="1edab-283">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="1edab-284">Первый рабочий процесс вызывается успешно, а второй не завершается, вызывается исключение <xref:System.TimeoutException>, и выводится следующее сообщение.</span><span class="sxs-lookup"><span data-stu-id="1edab-284">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown and the following message is displayed.</span></span>  
  
```Output  
The operation did not complete within the allotted timeout of 00:00:30.   
The time allotted to this operation may have been a portion of a longer timeout.  
```  
  
 [!code-csharp[CFX_WorkflowInvokerExample#51](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#51)]  
  
 <span data-ttu-id="1edab-285">Например, с помощью `Invoke` с входными и выходными параметрами см. в разделе перегрузку <xref:System.Activities.WorkflowInvoker.Invoke%2A> с теми же параметрами, как эту перегрузку без ожидания.</span><span class="sxs-lookup"><span data-stu-id="1edab-285">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,object&gt; Invoke (System.Activities.Activity workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IDictionary`2&lt;string, object&gt; Invoke(class System.Activities.Activity workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke(System.Activities.Activity,System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke (workflow As Activity, inputs As IDictionary(Of String, Object), timeout As TimeSpan) As IDictionary(Of String, Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ Invoke(System::Activities::Activity ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; System.Collections.Generic.IDictionary&lt;string, obj&gt;" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="workflow">
          <span data-ttu-id="1edab-286">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-286">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="1edab-287">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-287">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-288">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-288">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-289">Вызывает рабочий процесс в синхронном режиме с использованием определения рабочего процесса, словаря входных параметров <see cref="T:System.Collections.Generic.IDictionary`2" /> и интервала ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-289">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-290">Словарь значений <see cref="T:System.Activities.OutArgument" /> и <see cref="T:System.Activities.InOutArgument" /> корневого действия. Ключом этих значений является имя аргумента, представляющего выходные значения рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-290">A dictionary of the root activity’s <see cref="T:System.Activities.OutArgument" /> and <see cref="T:System.Activities.InOutArgument" /> values keyed by argument name that represent the outputs of the workflow.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-291">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-291">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-292">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-292">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-293">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-293">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-294">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-294">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-295">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-295">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-296">В следующем примере вызывается рабочий процесс, содержащий два действия <xref:System.Activities.Statements.WriteLine> и действие <xref:System.Activities.Statements.Delay>, для которого задан срок <xref:System.Activities.Statements.Delay.Duration%2A> в одну минуту.</span><span class="sxs-lookup"><span data-stu-id="1edab-296">The following example invokes a workflow that contains two <xref:System.Activities.Statements.WriteLine> activities and a <xref:System.Activities.Statements.Delay> activity configured with a <xref:System.Activities.Statements.Delay.Duration%2A> of one minute.</span></span> <span data-ttu-id="1edab-297">Этот рабочий процесс вызывается дважды: сначала с интервалом ожидания в две минуты, а затем с интервалом ожидания в 30 секунд.</span><span class="sxs-lookup"><span data-stu-id="1edab-297">This workflow is invoked twice; the first time with a time-out interval of two minutes, and the second time with a time-out interval of 30 seconds.</span></span> <span data-ttu-id="1edab-298">Первый рабочий процесс завершается успешно, а второй не завершается, и вызывается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-298">The first workflow completes successfully, but the second one does not and a <xref:System.TimeoutException> is thrown.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#50](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#50)]  
  
 <span data-ttu-id="1edab-299">Например, с помощью `Invoke` с входными и выходными параметрами см. в разделе перегрузку <xref:System.Activities.WorkflowInvoker.Invoke%2A> с теми же параметрами, как эту перегрузку без ожидания.</span><span class="sxs-lookup"><span data-stu-id="1edab-299">For an example of using `Invoke` with input and output arguments, see the overload of <xref:System.Activities.WorkflowInvoker.Invoke%2A> with the same parameters as this overload without the time-out interval.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke workflow" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1edab-300">Тип рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-300">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="1edab-301">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-301">The workflow definition of the workflow to invoke.</span>
          </span>
          <span data-ttu-id="1edab-302">Определение рабочего процесса должно быть производным от <see cref="T:System.Activities.ActivityWithResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-302">The workflow definition needs to derive from <see cref="T:System.Activities.ActivityWithResult" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-303">Вызывает рабочий процесс синхронным образом, используя определение рабочего процесса, переданное в конструктор <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-303">Invokes a workflow synchronously using the workflow definition passed to the <see cref="M:System.Activities.WorkflowInvoker.#ctor(System.Activities.Activity)" /> constructor.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-304">Значение типа TResult с результатом выполнения действия.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-304">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-305">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-305">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-306">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-306">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-307">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-307">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-308">В следующем примере вызывается рабочий процесс, состоящий из одного `Add` действие, которое имеет два входных аргумента, и, поскольку он является производным от `CodeActivity<int>` он содержит один заранее определенный <xref:System.Activities.Activity%601.Result%2A> выходной аргумент.</span><span class="sxs-lookup"><span data-stu-id="1edab-308">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="1edab-309">При вызове рабочего процесса передается словарь `arguments`, содержащий значения каждого входного аргумента с указанием имени аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-309">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="1edab-310">При вызове `Invoke` возвращает значение <xref:System.Activities.Activity%601.Result%2A> выходного аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-310">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="1edab-311">Данный пример кода, расположенного за пределами класса [использование класса WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) образца.</span><span class="sxs-lookup"><span data-stu-id="1edab-311">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1edab-312">Тип рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-312">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="1edab-313">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-313">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="1edab-314">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-314">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-315">Вызывает рабочий процесс в синхронном режиме с использованием определения рабочего процесса и словаря входных параметров <see cref="T:System.Collections.Generic.IDictionary`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-315">Invokes a workflow synchronously using the specified workflow definition and <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-316">Значение типа TResult с результатом выполнения действия.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-316">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-317">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-317">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-318">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-318">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-319">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.Invoke%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-319">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.Invoke%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-320">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-320">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-321">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-321">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-322">В следующем примере вызывается рабочий процесс, состоящий из одного `Add` действие, которое имеет два входных аргумента, и, поскольку он является производным от `CodeActivity<int>` он содержит один заранее определенный <xref:System.Activities.Activity%601.Result%2A> выходной аргумент.</span><span class="sxs-lookup"><span data-stu-id="1edab-322">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="1edab-323">При вызове рабочего процесса передается словарь `arguments`, содержащий значения каждого входного аргумента с указанием имени аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-323">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="1edab-324">При вызове `Invoke` возвращает значение <xref:System.Activities.Activity%601.Result%2A> выходного аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-324">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="1edab-325">Данный пример кода, расположенного за пределами класса [использование класса WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) образца.</span><span class="sxs-lookup"><span data-stu-id="1edab-325">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1edab-326">Тип рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-326">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="1edab-327">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-327">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="1edab-328">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-328">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-329">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-329">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-330">Вызывает рабочий процесс в синхронном режиме с использованием определения рабочего процесса, словаря входных параметров <see cref="T:System.Collections.Generic.IDictionary`2" /> и интервала ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-330">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-331">Значение типа TResult с результатом выполнения действия.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-331">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-332">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-332">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-333">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-333">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-334">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-334">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-335">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-335">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-336">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-336">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-337">В следующем примере вызывается рабочий процесс, состоящий из одного `Add` действие, которое имеет два входных аргумента, и, поскольку он является производным от `CodeActivity<int>` он содержит один заранее определенный <xref:System.Activities.Activity%601.Result%2A> выходной аргумент.</span><span class="sxs-lookup"><span data-stu-id="1edab-337">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="1edab-338">При вызове рабочего процесса передается словарь `arguments`, содержащий значения каждого входного аргумента с указанием имени аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-338">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="1edab-339">При вызове `Invoke` возвращает значение <xref:System.Activities.Activity%601.Result%2A> выходного аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-339">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="1edab-340">Данный пример кода, расположенного за пределами класса [использование класса WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) образца.</span><span class="sxs-lookup"><span data-stu-id="1edab-340">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Invoke&lt;TResult&gt; (System.Activities.Activity&lt;TResult&gt; workflow, System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, out System.Collections.Generic.IDictionary&lt;string,object&gt; additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Invoke&lt;TResult&gt;(class System.Activities.Activity`1&lt;!!TResult&gt; workflow, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, [out] class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&amp; additionalOutputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.Invoke``1(System.Activities.Activity{``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object}@,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Invoke(Of TResult) (workflow As Activity(Of TResult), inputs As IDictionary(Of String, Object), ByRef additionalOutputs As IDictionary(Of String, Object), timeout As TimeSpan) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static TResult Invoke(System::Activities::Activity&lt;TResult&gt; ^ workflow, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, [Runtime::InteropServices::Out] System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ % additionalOutputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Invoke : System.Activities.Activity&lt;'Result&gt; * System.Collections.Generic.IDictionary&lt;string, obj&gt; *  * TimeSpan -&gt; 'Result" Usage="System.Activities.WorkflowInvoker.Invoke (workflow, inputs, additionalOutputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="workflow" Type="System.Activities.Activity&lt;TResult&gt;" />
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="additionalOutputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" RefType="out" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1edab-341">Тип рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-341">The type of the workflow.</span>
          </span>
        </typeparam>
        <param name="workflow">
          <span data-ttu-id="1edab-342">Определение вызываемого рабочего процесса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-342">The workflow definition of the workflow to invoke.</span>
          </span>
        </param>
        <param name="inputs">
          <span data-ttu-id="1edab-343">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-343">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="additionalOutputs">
          <span data-ttu-id="1edab-344">Словарь дополнительных выходных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-344">The dictionary of additional output parameters of the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-345">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-345">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-346">Вызывает рабочий процесс в синхронном режиме с использованием указанного определения рабочего процесса, словаря <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров, словаря <see cref="T:System.Collections.Generic.IDictionary`2" /> дополнительных выходных параметров и интервала времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-346">Invokes a workflow synchronously using the specified workflow definition, <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, <see cref="T:System.Collections.Generic.IDictionary`2" /> of additional output parameters, and time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1edab-347">Значение типа TResult с результатом выполнения действия.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-347">A value of type TResult with the result of the execution of the activity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-348">Этот метод блокируется до завершения рабочего процесса, включая время простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-348">This method blocks until the workflow has completed, including idle time.</span></span> <span data-ttu-id="1edab-349">Все выполнение рабочего процесса гарантированно будет запущено в потоке вызова.</span><span class="sxs-lookup"><span data-stu-id="1edab-349">All workflow execution is guaranteed to execute on the invoking thread.</span></span> <span data-ttu-id="1edab-350">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-350">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-351">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-351">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-352">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-352">A workflow that takes longer than the specified time-out interval to complete, completes successfully if the workflow does not become idle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-353">В следующем примере вызывается рабочий процесс, состоящий из одного `Add` действие, которое имеет два входных аргумента, и, поскольку он является производным от `CodeActivity<int>` он содержит один заранее определенный <xref:System.Activities.Activity%601.Result%2A> выходной аргумент.</span><span class="sxs-lookup"><span data-stu-id="1edab-353">The following example invokes a workflow consisting of a single `Add` activity that has two input arguments and since it derives from `CodeActivity<int>` it has one well-defined <xref:System.Activities.Activity%601.Result%2A> output argument.</span></span> <span data-ttu-id="1edab-354">При вызове рабочего процесса передается словарь `arguments`, содержащий значения каждого входного аргумента с указанием имени аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-354">When the workflow is invoked, the `arguments` dictionary is passed which contains the values for each input argument, keyed by argument name.</span></span> <span data-ttu-id="1edab-355">При вызове `Invoke` возвращает значение <xref:System.Activities.Activity%601.Result%2A> выходного аргумента.</span><span class="sxs-lookup"><span data-stu-id="1edab-355">When the call to `Invoke` returns, the value of the <xref:System.Activities.Activity%601.Result%2A> output argument is returned.</span></span> <span data-ttu-id="1edab-356">Данный пример кода, расположенного за пределами класса [использование класса WorkflowInvoker](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) образца.</span><span class="sxs-lookup"><span data-stu-id="1edab-356">This code example is based off of the [Using the WorkflowInvoker Class](~/docs/framework/windows-workflow-foundation/samples/using-the-workflowinvoker-class.md) sample.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#110](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#110)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#10](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeAsync">
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1edab-357">Вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-357">Invokes a workflow asynchronously using the event-based asynchronous design pattern.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-358">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-358">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-359">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-359">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-360">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-360">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-361">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-361">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync();" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : unit -&gt; unit" Usage="workflowInvoker.InvokeAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1edab-362">Вызывает рабочий процесс в асинхронном режиме.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-362">Invokes a workflow asynchronously.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-363">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-363">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-364">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-364">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-365">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-365">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-366">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-366">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-367">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-367">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-368">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-368">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-369">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-369">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; -&gt; unit" Usage="workflowInvoker.InvokeAsync inputs" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-370">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-370">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-371">Вызывает рабочий процесс в асинхронном режиме с использованием указанного словаря <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-371">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-372">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-372">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-373">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-373">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-374">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-374">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-375">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-375">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-376">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-376">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-377">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-377">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-378">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-378">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : obj -&gt; unit" Usage="workflowInvoker.InvokeAsync userState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userState">
          <span data-ttu-id="1edab-379">Предоставляемый пользователем объект, который позволяет отличить данную асинхронную операцию вызова от других текущих асинхронных операций вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-379">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-380">Вызывает рабочий процесс в асинхронном режиме с использованием указанного уникального идентификатора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-380">Invokes a workflow asynchronously using the specified unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-381">Параметр `userState` должен быть уникальным для всех выполняемых в настоящий момент операций <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> данного действия.</span><span class="sxs-lookup"><span data-stu-id="1edab-381">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="1edab-382">Если параметр `userState` не уникален, возникает исключение <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-382">If the `userState` parameter is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="1edab-383">Параметр `userState` используется для выявления рабочего процесса в состоянии <xref:System.Activities.WorkflowInvoker.InvokeCompleted> и отмены этого рабочего процесса с помощью метода <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-383">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="1edab-384">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-384">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-385">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-385">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-386">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-386">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-387">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-387">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-388">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-388">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-389">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-389">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-390">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-390">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1edab-391">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-391">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-392">Вызывает рабочий процесс в асинхронном режиме с указанным интервалом времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-392">Invokes a workflow asynchronously with the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-393">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-393">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-394">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-394">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-395">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-395">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-396">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-396">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="1edab-397">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-397">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-398">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-398">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-399">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-399">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-400">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-400">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-401">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-401">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-402">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-402">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="1edab-403">Предоставляемый пользователем объект, который позволяет отличить данную асинхронную операцию вызова от других текущих асинхронных операций вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-403">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-404">Вызывает рабочий процесс в асинхронном режиме с использованием указанного словаря <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров и уникального идентификатора.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-404">Invokes a workflow asynchronously using the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-405">Параметр `userState` должен быть уникальным для всех выполняемых в настоящий момент операций <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> данного действия.</span><span class="sxs-lookup"><span data-stu-id="1edab-405">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="1edab-406">Если `userState` не уникален, возникает исключение <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-406">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="1edab-407">Параметр `userState` используется для выявления рабочего процесса в состоянии <xref:System.Activities.WorkflowInvoker.InvokeCompleted> и отмены этого рабочего процесса с помощью метода <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-407">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="1edab-408">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-408">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-409">Чтобы задать интервал ожидания, в течение которого рабочий процесс должен завершиться, используйте одну из перегруженных версий метода <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, принимающую аргумент <xref:System.TimeSpan>.</span><span class="sxs-lookup"><span data-stu-id="1edab-409">To configure a time-out interval in which the workflow must complete, use one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads that take a <xref:System.TimeSpan>.</span></span>  
  
 <span data-ttu-id="1edab-410">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-410">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-411">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-411">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-412">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-412">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-413">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-413">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-414">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-414">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-415">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-415">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-416">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-416">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-417">Вызывает рабочий процесс в асинхронном режиме с указанным словарем <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров и указанным интервалом времени ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-417">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters and the specified time-out interval.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-418">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-418">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-419">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-419">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-420">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-420">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-421">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-421">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="1edab-422">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-422">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-423">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-423">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-424">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-424">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-425">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-425">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-426">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-426">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="timeout">
          <span data-ttu-id="1edab-427">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-427">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="1edab-428">Предоставляемый пользователем объект, который позволяет отличить данную асинхронную операцию вызова от других текущих асинхронных операций вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-428">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-429">Вызывает рабочий процесс в асинхронном режиме с указанным интервалом времени ожидания и уникальным идентификатором.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-429">Invokes a workflow asynchronously with the specified time-out interval and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-430">Параметр `userState` должен быть уникальным для всех выполняемых в настоящий момент операций <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> данного действия.</span><span class="sxs-lookup"><span data-stu-id="1edab-430">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="1edab-431">Если `userState` не уникален, возникает исключение <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-431">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="1edab-432">Параметр `userState` используется для выявления рабочего процесса в состоянии <xref:System.Activities.WorkflowInvoker.InvokeCompleted> и отмены этого рабочего процесса с помощью метода <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-432">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="1edab-433">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-433">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-434">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-434">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-435">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-435">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-436">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-436">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="1edab-437">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-437">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-438">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-438">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-439">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-439">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-440">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-440">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-441">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-441">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeAsync">
      <MemberSignature Language="C#" Value="public void InvokeAsync (System.Collections.Generic.IDictionary&lt;string,object&gt; inputs, TimeSpan timeout, object userState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InvokeAsync(class System.Collections.Generic.IDictionary`2&lt;string, object&gt; inputs, valuetype System.TimeSpan timeout, object userState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Activities.WorkflowInvoker.InvokeAsync(System.Collections.Generic.IDictionary{System.String,System.Object},System.TimeSpan,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvokeAsync (inputs As IDictionary(Of String, Object), timeout As TimeSpan, userState As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvokeAsync(System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ inputs, TimeSpan timeout, System::Object ^ userState);" />
      <MemberSignature Language="F#" Value="member this.InvokeAsync : System.Collections.Generic.IDictionary&lt;string, obj&gt; * TimeSpan * obj -&gt; unit" Usage="workflowInvoker.InvokeAsync (inputs, timeout, userState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="userState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="inputs">
          <span data-ttu-id="1edab-442">Словарь входных параметров рабочего процесса, различаемых по имени аргумента.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-442">The dictionary of input parameters to the workflow, keyed by argument name.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="1edab-443">Период времени, в течение которого рабочий процесс должен быть завершен, прежде чем он будет прерван и возникнет исключение <see cref="T:System.TimeoutException" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-443">The interval in which the workflow must complete before it is aborted and a <see cref="T:System.TimeoutException" /> is thrown.</span>
          </span>
        </param>
        <param name="userState">
          <span data-ttu-id="1edab-444">Предоставляемый пользователем объект, который позволяет отличить данную асинхронную операцию вызова от других текущих асинхронных операций вызова.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-444">A user-provided object used to distinguish this particular asynchronous invoke operation from other current asynchronous invoke operations.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1edab-445">Вызывает рабочий процесс в асинхронном режиме с указанным словарем <see cref="T:System.Collections.Generic.IDictionary`2" /> входных параметров, указанным интервалом времени ожидания и уникальным идентификатором.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-445">Invokes a workflow asynchronously with the specified <see cref="T:System.Collections.Generic.IDictionary`2" /> of input parameters, the specified time-out interval, and a unique identifier.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-446">Параметр `userState` должен быть уникальным для всех выполняемых в настоящий момент операций <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> данного действия.</span><span class="sxs-lookup"><span data-stu-id="1edab-446">The `userState` parameter must be unique across all currently running <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> operations for the current activity.</span></span> <span data-ttu-id="1edab-447">Если `userState` не уникален, возникает исключение <xref:System.ArgumentException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-447">If `userState` is not unique, an <xref:System.ArgumentException> is thrown.</span></span> <span data-ttu-id="1edab-448">Параметр `userState` используется для выявления рабочего процесса в состоянии <xref:System.Activities.WorkflowInvoker.InvokeCompleted> и отмены этого рабочего процесса с помощью метода <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span><span class="sxs-lookup"><span data-stu-id="1edab-448">`userState` is used to identify the workflow in <xref:System.Activities.WorkflowInvoker.InvokeCompleted>, and to cancel the workflow using <xref:System.Activities.WorkflowInvoker.CancelAsync%2A>.</span></span>  
  
 <span data-ttu-id="1edab-449">Чтобы получить уведомление о завершении рабочего процесса, необходимо обработать событие <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-449">To be notified when the workflow is complete, handle <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span></span> <span data-ttu-id="1edab-450">Если рабочий процесс не завершается в течение указанного интервала времени ожидания, он прерывается и создается исключение <xref:System.TimeoutException>.</span><span class="sxs-lookup"><span data-stu-id="1edab-450">If the workflow does not complete within the specified time-out interval the workflow is aborted and a <xref:System.TimeoutException> is thrown.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1edab-451">Исключение <xref:System.TimeoutException> создается только в случае, если время ожидания истекло и рабочий процесс перешел в состояние бездействия во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="1edab-451">The <xref:System.TimeoutException> is only thrown if the time-out interval elapses and the workflow becomes idle during execution.</span></span> <span data-ttu-id="1edab-452">Рабочий процесс, не завершающийся в течение отведенного времени ожидания, завершается успешно, если не переходит в состояние простоя.</span><span class="sxs-lookup"><span data-stu-id="1edab-452">A workflow that takes longer than the specified time-out interval to complete completes successfully if the workflow does not become idle.</span></span>  
  
 <span data-ttu-id="1edab-453">Этот метод вызывает рабочий процесс в асинхронном режиме с помощью асинхронного шаблона проектирования на основе событий.</span><span class="sxs-lookup"><span data-stu-id="1edab-453">This method invokes a workflow asynchronously using the event-based asynchronous design pattern.</span></span> <span data-ttu-id="1edab-454">Дополнительные сведения см. в разделе [Обзор асинхронной модели на основе событий](https://go.microsoft.com/fwlink/?LinkId=141765).</span><span class="sxs-lookup"><span data-stu-id="1edab-454">For more information, see [Event-based Asynchronous Pattern Overview](https://go.microsoft.com/fwlink/?LinkId=141765).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-455">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-455">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-456">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-456">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-457">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-457">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeCompleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Activities.InvokeCompletedEventArgs&gt; InvokeCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Activities.WorkflowInvoker.InvokeCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event InvokeCompleted As EventHandler(Of InvokeCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Activities::InvokeCompletedEventArgs ^&gt; ^ InvokeCompleted;" />
      <MemberSignature Language="F#" Value="member this.InvokeCompleted : EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " Usage="member this.InvokeCompleted : System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Activities.InvokeCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1edab-458">Вызывается, когда рабочий процесс, вызванный одним из перегруженных вариантов <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" />, завершается или отменяется.</span>
          <span class="sxs-lookup">
            <span data-stu-id="1edab-458">Occurs when the workflow invoked by one of the <see cref="Overload:System.Activities.WorkflowInvoker.InvokeAsync" /> overloads is completed or canceled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1edab-459">Обработайте это для определения того, завершился ли успешно рабочий поток, вызванный одним из перегруженных вариантов <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A>, и для получения выходных аргументов завершившегося рабочего процесса.</span><span class="sxs-lookup"><span data-stu-id="1edab-459">Handle this to determine whether a workflow invoked with one of the <xref:System.Activities.WorkflowInvoker.InvokeAsync%2A> overloads completed successfully and to retrieve the output arguments of the completed workflow.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1edab-460">В следующем примере вызывается рабочий процесс, состоящий из действия `LongRunningDiceRoll`.</span><span class="sxs-lookup"><span data-stu-id="1edab-460">The following example invokes a workflow consisting of a `LongRunningDiceRoll` activity.</span></span> <span data-ttu-id="1edab-461">Действие `LongRunningDiceRoll` имеет два выходных аргумента, представляющих результаты броска игральных костей.</span><span class="sxs-lookup"><span data-stu-id="1edab-461">The `LongRunningDiceRoll` activity has two output arguments that represent the results of the dice roll operation.</span></span> <span data-ttu-id="1edab-462">После завершения рабочего процесса они возвращаются в обработчик <xref:System.Activities.WorkflowInvoker.InvokeCompleted>.</span><span class="sxs-lookup"><span data-stu-id="1edab-462">When the workflow completes these are retrieved in the <xref:System.Activities.WorkflowInvoker.InvokeCompleted> handler.</span></span>  
  
 [!code-csharp[CFX_WorkflowInvokerExample#131](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#131)]  
  
 [!code-csharp[CFX_WorkflowInvokerExample#33](~/samples/snippets/csharp/VS_Snippets_CFX/cfx_workflowinvokerexample/cs/program.cs#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>