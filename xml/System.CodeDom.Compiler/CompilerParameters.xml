<Type Name="CompilerParameters" FullName="System.CodeDom.Compiler.CompilerParameters">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="670c26ef706ee6fcccc193c77ac89e2269d9dc90" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36647224" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompilerParameters" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CompilerParameters extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CompilerParameters" />
  <TypeSignature Language="VB.NET" Value="Public Class CompilerParameters" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompilerParameters" />
  <TypeSignature Language="F#" Value="type CompilerParameters = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет параметры, используемые для вызова компилятора.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.CodeDom.Compiler.CompilerParameters> объект представляет параметры и параметры для <xref:System.CodeDom.Compiler.ICodeCompiler> интерфейса.  
  
 При компиляции исполняемой программы необходимо задать <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> свойства `true`. Когда <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> равно `false`, компилятор создает библиотеку классов. По умолчанию новый <xref:System.CodeDom.Compiler.CompilerParameters> инициализируется с его <xref:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable%2A> свойство `false`. При компиляции исполняемой программы из графа CodeDOM следует определить в графе объект <xref:System.CodeDom.CodeEntryPointMethod>. Если есть несколько точек входа в код, можно указать класс, который определяет точку входа для использования, задав имя класса для <xref:System.CodeDom.Compiler.CompilerParameters.MainClass%2A> свойства.  
  
 Можно указать имя файла для выходной сборки в <xref:System.CodeDom.Compiler.CompilerParameters.OutputAssembly%2A> свойство. В противном случае будет использоваться имя выходного файла по умолчанию. Чтобы включить сведения об отладке в создаваемую сборку, задайте <xref:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation%2A> свойства `true`. Если проект ссылается на все сборки, необходимо указать имена сборок, как элементы в <xref:System.Collections.Specialized.StringCollection> значение <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A> свойство <xref:System.CodeDom.Compiler.CompilerParameters> используется при вызове компиляции.  
  
 Можно скомпилировать сборку, которая записывается в памяти, а не на диске, задав <xref:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory%2A> свойства `true`. При создании сборки в памяти код может получить ссылку на создаваемую сборку из свойства <xref:System.CodeDom.Compiler.CompilerResults.CompiledAssembly%2A> объекта <xref:System.CodeDom.Compiler.CompilerResults>. При записи сборки на диск можно получить путь к созданной сборке из <xref:System.CodeDom.Compiler.CompilerResults.PathToAssembly%2A> свойство <xref:System.CodeDom.Compiler.CompilerResults>.  
  
 Чтобы указать уровень предупреждения, на котором следует прекратить компиляцию, задайте свойство <xref:System.CodeDom.Compiler.CompilerParameters.WarningLevel%2A> как целое число, представляющее уровень предупреждения для прекращения компиляции. Можно также настроить компилятор на прекращение компиляции при обнаружении предупреждений, задав <xref:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors%2A> свойства `true`.  
  
 Чтобы указать пользовательскую строку аргументов командной строки, которую следует использовать при вызове процесса компиляции, задайте строку в свойстве <xref:System.CodeDom.Compiler.CompilerParameters.CompilerOptions%2A>. Если для вызова процесса компилятора требуется маркер безопасности Win32, задайте этот маркер в свойстве <xref:System.CodeDom.Compiler.CompilerParameters.UserToken%2A>. Чтобы включить файлы ресурсов .NET Framework в скомпилированной сборке, добавьте имена файлов ресурсов для <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> свойства. Для ссылки на ресурсы платформы .NET Framework в другой сборке, добавьте имена файлов ресурсов для <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> свойства. Чтобы включить файл ресурсов Win32 в скомпилированной сборке, укажите имя файла ресурсов Win32 в <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> свойство.  
  
> [!NOTE]
>  Этот класс содержит запрос компоновки и запрос наследования на уровне класса, который применяется ко всем элементам. Объект <xref:System.Security.SecurityException> возникает, когда непосредственного вызывающего или производного класса не имеет разрешения полного доверия. Дополнительные сведения о требованиях безопасности см. в разделе [требования связывания](~/docs/framework/misc/link-demands.md) и [требования к наследованию](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 Следующий пример строится графа источника CodeDOM для простой программы Hello World.  Источник затем сохраняется в файл скомпилирован в исполняемый файл и запустить. `CompileCode` Метод показывает, как использовать <xref:System.CodeDom.Compiler.CompilerParameters> класс, чтобы указать различные параметры компилятора и параметры.  
  
 [!code-cpp[CompilerParametersExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#1)]
 [!code-csharp[CompilerParametersExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#1)]
 [!code-vb[CompilerParametersExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">для полного доверия для непосредственного вызывающего. Этот класс не может использоваться частично доверенным кодом.</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">для полного доверия для разработчиков производных классов. Этот класс не наследуется частично доверенным кодом.</permission>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">для полного доверия для непосредственного вызывающего. Этот класс не может использоваться частично доверенным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.Compiler.CompilerParameters : string[] -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="new System.CodeDom.Compiler.CompilerParameters assemblyNames" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Имя сборок для ссылки.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> с использованием указанных имен сборок.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">для полного доверия для непосредственного вызывающего. Этот класс не может использоваться частично доверенным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), outputName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames, System::String ^ outputName);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.Compiler.CompilerParameters : string[] * string -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="new System.CodeDom.Compiler.CompilerParameters (assemblyNames, outputName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Имя сборок для ссылки.</param>
        <param name="outputName">Имя выходного файла.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, используя указанные имена сборок и имя выходного файла.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">для полного доверия для непосредственного вызывающего. Этот класс не может использоваться частично доверенным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompilerParameters (string[] assemblyNames, string outputName, bool includeDebugInformation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] assemblyNames, string outputName, bool includeDebugInformation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyNames As String(), outputName As String, includeDebugInformation As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompilerParameters(cli::array &lt;System::String ^&gt; ^ assemblyNames, System::String ^ outputName, bool includeDebugInformation);" />
      <MemberSignature Language="F#" Value="new System.CodeDom.Compiler.CompilerParameters : string[] * string * bool -&gt; System.CodeDom.Compiler.CompilerParameters" Usage="new System.CodeDom.Compiler.CompilerParameters (assemblyNames, outputName, includeDebugInformation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyNames" Type="System.String[]" />
        <Parameter Name="outputName" Type="System.String" />
        <Parameter Name="includeDebugInformation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="assemblyNames">Имя сборок для ссылки.</param>
        <param name="outputName">Имя выходного файла.</param>
        <param name="includeDebugInformation">Значение <see langword="true" />, чтобы включить отладочные данные; значение <see langword="false" />, чтобы исключить отладочные данные.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.Compiler.CompilerParameters" />, используя указанные имена сборок, имя выходного файла и значение, показывающее, следует ли включать сведения об отладке.</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">для полного доверия для непосредственного вызывающего. Этот класс не может использоваться частично доверенным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="CompilerOptions">
      <MemberSignature Language="C#" Value="public string CompilerOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompilerOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property CompilerOptions As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompilerOptions { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CompilerOptions : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.CompilerOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает необязательный аргументы командной строки для использования при вызове компилятора.</summary>
        <value>Аргументы дополнительной командной строки для компилятора.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.ICodeCompiler> Обычно включает данную строку в командной строке при вызове компилятора командной строки. По умолчанию это свойство содержит пустую строку.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CoreAssemblyFileName">
      <MemberSignature Language="C#" Value="public string CoreAssemblyFileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CoreAssemblyFileName" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName" />
      <MemberSignature Language="VB.NET" Value="Public Property CoreAssemblyFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CoreAssemblyFileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CoreAssemblyFileName : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя основной или стандартной сборки, которая содержит базовые типы, такие как <see cref="T:System.Object" />, <see cref="T:System.String" /> или <see cref="T:System.Int32" />.</summary>
        <value>Имя основной сборки, содержащей базовые типы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение этого свойства является пустая строка или `null`, компилятор использует основную сборку по умолчанию. В зависимости от версии компилятора основную сборку по умолчанию возможно библиотеки mscorlib.dll и System.Runtime.dll Framework каталог или каталог ссылок на сборки. Если значение этого свойства не пустое, объектной модели документов кода (CodeDOM) явно ссылается на указанной сборки и параметры компилятора, которые не ссылок на сборки, неявным образом во время компиляции компилятор выдает... Для компиляторов, ссылающихся на основной или стандартную сборку только неявно с по умолчанию, это свойство может использоваться самостоятельно. Компиляторы, которые неявно ссылаться на сборки Кроме основных или стандартный сборку, с помощью этого параметра может потребоваться указание дополнительных записей в <xref:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies%2A?displayProperty=nameWithType> свойство.  
  
> [!NOTE]
>  <xref:System.CodeDom.Compiler.ICodeCompiler> Или <xref:System.CodeDom.Compiler.CodeDomProvider> реализации, можно игнорировать это свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EmbeddedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection EmbeddedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection EmbeddedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EmbeddedResources As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ EmbeddedResources { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EmbeddedResources : System.Collections.Specialized.StringCollection" Usage="System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает файлы ресурсов платформы .NET Framework для включения при компиляции вывода сборки.</summary>
        <value>Коллекция, содержащая пути к файлам ресурсов платформы .NET Framework для включения в созданную сборку.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Внедренные ресурсы встраиваются в генерируемый выходной файл сборки. Включение файлов с помощью этого свойства аналогична `/resource` аргумент командной строки поддерживается многими компиляторы .NET Framework.  
  
 Не все компиляторы поддерживают файлы ресурсов платформы .NET Framework, поэтому следует проверить наличие такой поддержки путем вызова <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> метода с флагом <xref:System.CodeDom.Compiler.GeneratorSupport.Resources>.  
  
 Добавление одного или нескольких путей файлов ресурсов .NET Framework в возвращаемую <xref:System.Collections.Specialized.StringCollection> внедрить файл ресурсов в скомпилированной сборке. Добавление дубликат или недопустимый файл путь приводит к ошибкам компиляции; Убедитесь, что каждая строка задает уникальный путь является допустимым файлом ресурсов .NET Framework.  
  
 Используйте <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> для включения по умолчанию или нейтральной культуре ресурсы платформы .NET Framework для сборки; используйте <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> свойство ссылки .NET Framework ресурсы во вспомогательные сборки.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="Evidence">
      <MemberSignature Language="C#" Value="public System.Security.Policy.Evidence Evidence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Policy.Evidence Evidence" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Evidence" />
      <MemberSignature Language="VB.NET" Value="Public Property Evidence As Evidence" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Policy::Evidence ^ Evidence { System::Security::Policy::Evidence ^ get(); void set(System::Security::Policy::Evidence ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Evidence : System.Security.Policy.Evidence with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.Evidence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("CAS policy is obsolete and will be removed in a future release of the .NET Framework. Please see http://go2.microsoft.com/fwlink/?LinkId=131738 for more information.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Policy.Evidence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает объект свидетельства, представляющий разрешения политики безопасности для предоставления компилируемой сборке.</summary>
        <value>Объект, представляющий разрешения политики безопасности для предоставления компилируемой сборки.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для возможности управления свидетельством. Значение разрешения: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" /> действие по обеспечению безопасности: <see cref="F:System.Security.Permissions.SecurityAction.Demand" /></permission>
        <altmember cref="T:System.Security.Policy.Evidence" />
      </Docs>
    </Member>
    <Member MemberName="GenerateExecutable">
      <MemberSignature Language="C#" Value="public bool GenerateExecutable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateExecutable" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
      <MemberSignature Language="VB.NET" Value="Public Property GenerateExecutable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GenerateExecutable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GenerateExecutable : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.GenerateExecutable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, показывающее, следует ли создавать исполняемый файл.</summary>
        <value>
          <see langword="true" />, если следует создавать исполняемый файл; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если значение этого свойства равно `false`, будет создана библиотека DLL. По умолчанию значением этого свойства является `false`.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateInMemory">
      <MemberSignature Language="C#" Value="public bool GenerateInMemory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GenerateInMemory" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory" />
      <MemberSignature Language="VB.NET" Value="Public Property GenerateInMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GenerateInMemory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GenerateInMemory : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.GenerateInMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, показывающее, следует ли создавать выходной файл в памяти.</summary>
        <value>
          <see langword="true" />, если компилятор должен создавать выходной файл в памяти; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IncludeDebugInformation">
      <MemberSignature Language="C#" Value="public bool IncludeDebugInformation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IncludeDebugInformation" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation" />
      <MemberSignature Language="VB.NET" Value="Public Property IncludeDebugInformation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IncludeDebugInformation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IncludeDebugInformation : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, показывающее, следует ли включать сведения об отладке в компилируемый исполняемый файл.</summary>
        <value>
          <see langword="true" />, если следует создавать сведения об отладке; в противном случае — <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkedResources">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection LinkedResources { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection LinkedResources" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinkedResources As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ LinkedResources { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LinkedResources : System.Collections.Specialized.StringCollection" Usage="System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает файлы ресурсов платформы .NET Framework, на которые имеются ссылки в текущем источнике.</summary>
        <value>Коллекция, содержащая пути к файлам ресурсов платформы .NET Framework, на которые имеются ссылки в данном источнике.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Связанные файлы ресурсов позволяют сборке ссылаться на ресурсы платформы .NET Framework без внедрения фактические ресурсы в сборке. Ссылки на файлы с помощью этого свойства аналогична `/linkresource` аргумент командной строки поддерживается многими компиляторы .NET Framework.  
  
 Не все компиляторы поддерживают файлы ресурсов платформы .NET Framework, поэтому следует проверить наличие такой поддержки путем вызова <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> метода с флагом <xref:System.CodeDom.Compiler.GeneratorSupport.Resources>.  
  
 Добавление одного или нескольких путей файлов ресурсов .NET Framework в возвращаемую <xref:System.Collections.Specialized.StringCollection> для создания ссылки на ресурсы в скомпилированной сборке. Добавление дубликат или недопустимый файл путь приводит к ошибкам компиляции; Убедитесь, что каждая строка задает уникальный путь является допустимым файлом ресурсов .NET Framework.  
  
 Используйте <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> для ссылки на ресурсы платформы .NET Framework в сопутствующих сборках, локализованные для определенного языка и региональных параметров; используйте <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> свойство, чтобы встроить ресурсы в скомпилированной сборке.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      </Docs>
    </Member>
    <Member MemberName="MainClass">
      <MemberSignature Language="C#" Value="public string MainClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MainClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.MainClass" />
      <MemberSignature Language="VB.NET" Value="Public Property MainClass As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MainClass { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.MainClass : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.MainClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя главного класса.</summary>
        <value>Имя главного класса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Главный класс содержит точку входа для программы.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAssembly">
      <MemberSignature Language="C#" Value="public string OutputAssembly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputAssembly" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly" />
      <MemberSignature Language="VB.NET" Value="Public Property OutputAssembly As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OutputAssembly { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OutputAssembly : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.OutputAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя выходной сборки.</summary>
        <value>Имя выходной сборки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferencedAssemblies">
      <MemberSignature Language="C#" Value="public System.Collections.Specialized.StringCollection ReferencedAssemblies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Specialized.StringCollection ReferencedAssemblies" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReferencedAssemblies As StringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::Specialized::StringCollection ^ ReferencedAssemblies { System::Collections::Specialized::StringCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReferencedAssemblies : System.Collections.Specialized.StringCollection" Usage="System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Specialized.StringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает сборки, на которые ссылается текущий проект.</summary>
        <value>Коллекция, содержащая имена сборок, на которые ссылается источник, для компиляции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Коллекции строк должно состоять из или сборок, на которые имеются ссылки в текущем проекте. Добавьте имена файлов сборки с возвращенным <xref:System.Collections.Specialized.StringCollection> для импорта манифест сборки и ссылаться на данные типа сборки текущего проекта.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.Specialized.StringCollection" />
      </Docs>
    </Member>
    <Member MemberName="TempFiles">
      <MemberSignature Language="C#" Value="public System.CodeDom.Compiler.TempFileCollection TempFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.Compiler.TempFileCollection TempFiles" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TempFiles" />
      <MemberSignature Language="VB.NET" Value="Public Property TempFiles As TempFileCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::Compiler::TempFileCollection ^ TempFiles { System::CodeDom::Compiler::TempFileCollection ^ get(); void set(System::CodeDom::Compiler::TempFileCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TempFiles : System.CodeDom.Compiler.TempFileCollection with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.TempFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.TempFileCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает коллекцию временных файлов.</summary>
        <value>Коллекция, содержащая временные файлы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Временные файлы в коллекции сохранены или удалены после завершения действия компилятора, который основан на значении <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> свойства в коллекции. <xref:System.CodeDom.Compiler.TempFileCollection.KeepFiles%2A> Свойству при создании коллекции с помощью <xref:System.CodeDom.Compiler.TempFileCollection.%23ctor%28System.String%2CSystem.Boolean%29> конструктор с `keepFiles` равным `true`.  
  
> [!NOTE]
>  Этот класс содержит запрос компоновки и запрос наследования на уровне класса, который применяется ко всем элементам. Объект <xref:System.Security.SecurityException> возникает, когда непосредственного вызывающего или производного класса не имеет разрешения полного доверия. Дополнительные сведения о требованиях безопасности см. в разделе [требования связывания](~/docs/framework/misc/link-demands.md) и [требования к наследованию](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">для полного доверия для непосредственного вызывающего. Этот член не может быть использован частично доверенным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="TreatWarningsAsErrors">
      <MemberSignature Language="C#" Value="public bool TreatWarningsAsErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TreatWarningsAsErrors" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property TreatWarningsAsErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TreatWarningsAsErrors { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TreatWarningsAsErrors : bool with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, следует ли интерпретировать предупреждения как ошибки.</summary>
        <value>
          <see langword="true" />, если следует интерпретировать предупреждения как ошибки; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UserToken">
      <MemberSignature Language="C#" Value="public IntPtr UserToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int UserToken" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.UserToken" />
      <MemberSignature Language="VB.NET" Value="Public Property UserToken As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr UserToken { IntPtr get(); void set(IntPtr value); };" />
      <MemberSignature Language="F#" Value="member this.UserToken : nativeint with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.UserToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пользовательский токен, используемый при создании процесса компилятора.</summary>
        <value>Пользовательский токен для использования.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WarningLevel">
      <MemberSignature Language="C#" Value="public int WarningLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WarningLevel" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property WarningLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int WarningLevel { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WarningLevel : int with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.WarningLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает уровень предупреждения, на котором компилятор прекращает компиляцию.</summary>
        <value>Уровень предупреждения, на котором компилятор прекращает компиляцию.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.CodeDom.Compiler.CompilerParameters> для задания различных параметров компилятора и параметров. Данный пример кода является частью большего примера, приведенного для <xref:System.CodeDom.Compiler.CompilerParameters> класса.  
  
 [!code-cpp[CompilerParametersExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CompilerParametersExample/CPP/source.cpp#2)]
 [!code-csharp[CompilerParametersExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CompilerParametersExample/CS/source.cs#2)]
 [!code-vb[CompilerParametersExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CompilerParametersExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Win32Resource">
      <MemberSignature Language="C#" Value="public string Win32Resource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Win32Resource" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      <MemberSignature Language="VB.NET" Value="Public Property Win32Resource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Win32Resource { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Win32Resource : string with get, set" Usage="System.CodeDom.Compiler.CompilerParameters.Win32Resource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя файла ресурса Win32 для связывания с компилируемой сборкой.</summary>
        <value>Файл ресурса Win32, который будет связан с компилируемой сборкой.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Привязка файлов с помощью этого свойства аналогична `/winres` и `/winresource` аргументы командной строки поддерживается многими компиляторы .NET Framework.  
  
 Используйте <xref:System.CodeDom.Compiler.CompilerParameters.Win32Resource%2A> для компиляции файла ресурсов Win32 в сборку. Используйте <xref:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources%2A> или <xref:System.CodeDom.Compiler.CompilerParameters.LinkedResources%2A> для компиляции с файлами ресурсов .NET Framework.  
  
 Не все компиляторы поддерживают файлы ресурсов Win32, поэтому следует проверить генератор кода для этой поддержки, прежде чем связывать файл ресурсов путем вызова <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> метода с флагом <xref:System.CodeDom.Compiler.GeneratorSupport.Win32Resources>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources" />
        <altmember cref="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources" />
      </Docs>
    </Member>
  </Members>
</Type>