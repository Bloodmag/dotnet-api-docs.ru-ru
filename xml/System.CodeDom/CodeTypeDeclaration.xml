<Type Name="CodeTypeDeclaration" FullName="System.CodeDom.CodeTypeDeclaration">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="52c8bfcbe9527832064fa06fd15fae096ecb1cf0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30369648" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CodeTypeDeclaration : System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit CodeTypeDeclaration extends System.CodeDom.CodeTypeMember" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.CodeTypeDeclaration" />
  <TypeSignature Language="VB.NET" Value="Public Class CodeTypeDeclaration&#xA;Inherits CodeTypeMember" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeTypeDeclaration : System::CodeDom::CodeTypeMember" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.CodeDom.CodeTypeMember</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="d5689-101">Представляет объявление типа для класса, структуры, интерфейса или перечисления.</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5689-101">Represents a type declaration for a class, structure, interface, or enumeration.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5689-102"><xref:System.CodeDom.CodeTypeDeclaration> используется для представления кода, объявляющего класса, структуры, интерфейса или перечисления.</span><span class="sxs-lookup"><span data-stu-id="d5689-102"><xref:System.CodeDom.CodeTypeDeclaration> can be used to represent code that declares a class, structure, interface, or enumeration.</span></span> <span data-ttu-id="d5689-103"><xref:System.CodeDom.CodeTypeDeclaration> можно использовать для объявления типа, который вложен в другой тип.</span><span class="sxs-lookup"><span data-stu-id="d5689-103"><xref:System.CodeDom.CodeTypeDeclaration> can be used to declare a type that is nested within another type.</span></span>  
  
 <span data-ttu-id="d5689-104"><xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> Свойство указывает базовый тип или типы объявляемый тип.</span><span class="sxs-lookup"><span data-stu-id="d5689-104">The <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> property specifies the base type or base types of the type being declared.</span></span> <span data-ttu-id="d5689-105"><xref:System.CodeDom.CodeTypeDeclaration.Members%2A> Свойство содержит члены типов, которые могут включать методы, поля, свойства, комментарии и других типов.</span><span class="sxs-lookup"><span data-stu-id="d5689-105">The <xref:System.CodeDom.CodeTypeDeclaration.Members%2A> property contains the type members, which can include methods, fields, properties, comments and other types.</span></span> <span data-ttu-id="d5689-106"><xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> Указывает свойство <xref:System.Reflection.TypeAttributes> для объявления типа значения, которые указывают тип категории типа.</span><span class="sxs-lookup"><span data-stu-id="d5689-106">The <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property indicates the <xref:System.Reflection.TypeAttributes> values for the type declaration, which indicate the type category of the type.</span></span> <span data-ttu-id="d5689-107"><xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, И <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> методы укажите, является ли тип класса, структуры, перечисления или тип интерфейса, соответственно.</span><span class="sxs-lookup"><span data-stu-id="d5689-107">The <xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A>, <xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A>, and <xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5689-108">Некоторые языки программирования поддерживают только объявления ссылочных типов или классов.</span><span class="sxs-lookup"><span data-stu-id="d5689-108">Some programming languages only support the declaration of reference types, or classes.</span></span> <span data-ttu-id="d5689-109">Чтобы проверить генератора кода CodeDOM языковой поддержки для объявления перечисления, интерфейсы, а также типы значений, вызовите <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> метод для проверки соответствующего <xref:System.CodeDom.Compiler.GeneratorSupport> флаги.</span><span class="sxs-lookup"><span data-stu-id="d5689-109">To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method to test for the appropriate <xref:System.CodeDom.Compiler.GeneratorSupport> flags.</span></span> <span data-ttu-id="d5689-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> Указывает на поддержку интерфейсов, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> указывает на поддержку перечисления, и <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> указывает поддержку для типов значений, таких как структуры.</span><span class="sxs-lookup"><span data-stu-id="d5689-110"><xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces> indicates support for interfaces, <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums> indicates support for enumerations, and <xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes> indicates support for value types such as structures.</span></span>  
  
 <span data-ttu-id="d5689-111">Сборки, класса или структуры реализация в одном объявлении завершения или распределяться реализации нескольких объявлениях.</span><span class="sxs-lookup"><span data-stu-id="d5689-111">You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="d5689-112"><xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> Свойство указывает, является ли объявление типа полные или неполные.</span><span class="sxs-lookup"><span data-stu-id="d5689-112">The <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property indicates whether the type declaration is complete or partial.</span></span> <span data-ttu-id="d5689-113">Не все генераторы кода поддерживает объявления разделяемого типа, поэтому следует проверить наличие такой поддержки путем вызова <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> метода с флагом <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="d5689-113">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5689-114">В этом примере показано использование <xref:System.CodeDom.CodeTypeDeclaration> для объявления типа.</span><span class="sxs-lookup"><span data-stu-id="d5689-114">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to declare a type.</span></span>  
  
 [!code-cpp[CodeTypeDeclarationExample#2](~/samples/snippets/cpp/VS_Snippets_CLR/CodeTypeDeclarationExample/CPP/codetypedeclarationexample.cpp#2)]
 [!code-csharp[CodeTypeDeclarationExample#2](~/samples/snippets/csharp/VS_Snippets_CLR/CodeTypeDeclarationExample/CS/codetypedeclarationexample.cs#2)]
 [!code-vb[CodeTypeDeclarationExample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeTypeDeclarationExample/VB/codetypedeclarationexample.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.CodeDom.CodeTypeDeclarationCollection" />
    <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-115">Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-115">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5689-116">Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-116">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeTypeDeclaration (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CodeTypeDeclaration(System::String ^ name);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d5689-117">Имя нового типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-117">The name for the new type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5689-118">Инициализирует новый экземпляр класса <see cref="T:System.CodeDom.CodeTypeDeclaration" /> с указанным именем.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-118">Initializes a new instance of the <see cref="T:System.CodeDom.CodeTypeDeclaration" /> class with the specified name.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseTypes">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeReferenceCollection BaseTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeReferenceCollection BaseTypes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseTypes As CodeTypeReferenceCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeReferenceCollection ^ BaseTypes { System::CodeDom::CodeTypeReferenceCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeReferenceCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-119">Получает базовые типы типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-119">Gets the base types of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-120">Объект <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />, указывающий базовые типы типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-120">A <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> object that indicates the base types of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5689-121">Чтобы создать класс на языке Visual Basic, не является производным от базового типа, но реализуют один или несколько интерфейсов, необходимо включить <xref:System.Object> как первый элемент в <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> коллекции.</span><span class="sxs-lookup"><span data-stu-id="d5689-121">To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <xref:System.Object> as the first item in the <xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A> collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5689-122">В .NET Framework версии 2.0, не обязательно <xref:System.CodeDom.CodeTypeReference> для <xref:System.Object> Если интерфейс реализуется уже существует, и обращении к нему по типу.</span><span class="sxs-lookup"><span data-stu-id="d5689-122">In the .NET Framework version 2.0 you do not need the <xref:System.CodeDom.CodeTypeReference> for <xref:System.Object> if the interface you are implementing already exists and you are referring to it by type.</span></span> <span data-ttu-id="d5689-123">Например, если вы реализуете <xref:System.Collections.ICollection> интерфейс и добавьте его в коллекцию с настоящим заявлением, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, нет необходимости предыдущих `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` инструкции.</span><span class="sxs-lookup"><span data-stu-id="d5689-123">For example, if you are implementing the <xref:System.Collections.ICollection> interface and add it to the collection with this statement, `ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`, you do not need the preceding `ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))` statement.</span></span>  
  
 <span data-ttu-id="d5689-124">В следующем коде показано добавление <xref:System.CodeDom.CodeTypeReference> в коллекцию, которая ссылается на <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="d5689-124">The following code illustrates the addition of a <xref:System.CodeDom.CodeTypeReference> to the collection that refers to <xref:System.Object>.</span></span>  
  
```vb  
Dim ctd As New CodeTypeDeclaration("Class1")  
ctd.IsClass = True  
ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))  
ctd.BaseTypes.Add(New CodeTypeReference("Interface1"))  
```  
  
```csharp  
CodeTypeDeclaration ctd = new CodeTypeDeclaration("Class1");  
ctd.IsClass = true;  
ctd.BaseTypes.Add(new CodeTypeReference(typeof(Object)));  
ctd.BaseTypes.Add(new CodeTypeReference("Interface1"));  
```  
  
 <span data-ttu-id="d5689-125">Предыдущий код вызывает эквивалент следующего кода Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="d5689-125">The preceding code generates the equivalent of the following Visual Basic code.</span></span>  
  
```vb  
Public Class Class1  
Implements Interface1  
```  
  
 <span data-ttu-id="d5689-126">Тем не менее код Visual Basic, который фактически создается выглядит следующим образом.</span><span class="sxs-lookup"><span data-stu-id="d5689-126">However, the Visual Basic code actually generated is the following.</span></span>  
  
```vb  
Public Class Class1  
Inherits Object  
Implements Interface1  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeReferenceCollection" />
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-127">Получает или задает значение, показывающее, является ли тип классом или ссылочным типом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-127">Gets or sets a value indicating whether the type is a class or reference type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-128">Значение <see langword="true" />, если тип является классом или ссылочным типом; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-128">
              <see langword="true" /> if the type is a class or reference type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-129">Получает или задает значение, указывающее, является ли тип перечислением.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-129">Gets or sets a value indicating whether the type is an enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-130">Значение <see langword="true" />, если тип является перечислением; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-130">
              <see langword="true" /> if the type is an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-131">Получает или задает значение, указывающее, является ли тип интерфейсом.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-131">Gets or sets a value indicating whether the type is an interface.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-132">Значение <see langword="true" />, если тип является интерфейсом; в противном случае — <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-132">
              <see langword="true" /> if the type is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPartial">
      <MemberSignature Language="C#" Value="public bool IsPartial { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPartial" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsPartial" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPartial As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPartial { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-133">Получает или задает значение, указывающее, является ли объявление типа полным или разделяемым.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-133">Gets or sets a value indicating whether the type declaration is complete or partial.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-134">Значение <see langword="true" />, если объявление класса или структуры является частичным представлением реализации; значение <see langword="false" />, если объявление является полной реализацией класса или структуры.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-134">
              <see langword="true" /> if the class or structure declaration is a partial representation of the implementation; <see langword="false" /> if the declaration is a complete implementation of the class or structure.</span>
          </span>
          <span data-ttu-id="d5689-135">Значение по умолчанию: <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-135">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5689-136">Реализация класса или структуры, в одном объявлении завершения построения или распределяться реализации нескольких объявлениях.</span><span class="sxs-lookup"><span data-stu-id="d5689-136">You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</span></span> <span data-ttu-id="d5689-137">Реализации обычно предоставляются в одном полном объявлении типа.</span><span class="sxs-lookup"><span data-stu-id="d5689-137">Implementations are commonly supplied in one complete type declaration.</span></span> <span data-ttu-id="d5689-138">В этом случае значение объявление типа <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> свойства `false`, который указывает, что объявление типа представляет все сведения для реализации класса или структуры.</span><span class="sxs-lookup"><span data-stu-id="d5689-138">In this case, set the type declaration <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `false`, which indicates that the type declaration represents all details for the class or structure implementation.</span></span>  
  
 <span data-ttu-id="d5689-139">Объявление разделяемого типа облегчает построение различных частей реализация класса или структуры в различных модулях приложения.</span><span class="sxs-lookup"><span data-stu-id="d5689-139">A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</span></span> <span data-ttu-id="d5689-140">Объявления разделяемого типа можно сохранять в один исходный файл, или распределяться несколько исходных файлов, которые совместно компилируемых для формирования объединенный тип реализации.</span><span class="sxs-lookup"><span data-stu-id="d5689-140">The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</span></span>  
  
 <span data-ttu-id="d5689-141">Язык C# поддерживает объявления разделяемого типа классов и структур через `partial` ключевое слово.</span><span class="sxs-lookup"><span data-stu-id="d5689-141">The C# language supports partial type declarations of classes and structures through the `partial` keyword.</span></span> <span data-ttu-id="d5689-142">Visual Basic поддерживает объявления разделяемого типа классов и структур с `Partial` ключевое слово.</span><span class="sxs-lookup"><span data-stu-id="d5689-142">Visual Basic supports partial type declarations of classes and structures with the `Partial` keyword.</span></span> <span data-ttu-id="d5689-143">Не все генераторы кода поддерживает объявления разделяемого типа, поэтому следует проверить наличие такой поддержки путем вызова <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> метода с флагом <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span><span class="sxs-lookup"><span data-stu-id="d5689-143">Not all code generators support partial type declarations, so you should test for this support by calling the <xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A> method with the flag <xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5689-144">Объявления разделяемого типа поддерживаются для классов и структур.</span><span class="sxs-lookup"><span data-stu-id="d5689-144">Partial type declarations are supported for classes and structures.</span></span> <span data-ttu-id="d5689-145">При указании объявления разделяемого типа для перечисления или интерфейса, созданный код вызывает ошибки компилятора.</span><span class="sxs-lookup"><span data-stu-id="d5689-145">If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</span></span>  
  
 <span data-ttu-id="d5689-146">При указании реализация класса или структуры на несколько объявлений, задайте <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> свойства `true` для исходного объявления и все дополнительные объявления.</span><span class="sxs-lookup"><span data-stu-id="d5689-146">When supplying a class or structure implementation across multiple declarations, set the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true` for the initial declaration and all supplemental declarations.</span></span> <span data-ttu-id="d5689-147">Исходного объявления необходимо полностью указывать тип подписи, включая модификаторы доступа, унаследованные типы и реализованные интерфейсы.</span><span class="sxs-lookup"><span data-stu-id="d5689-147">The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</span></span> <span data-ttu-id="d5689-148">Дополнительные объявления не нужно повторно определить сигнатура типа.</span><span class="sxs-lookup"><span data-stu-id="d5689-148">The supplementary declarations do not need to re-specify the type signature.</span></span> <span data-ttu-id="d5689-149">Ошибка компилятора обычно происходит при повторном определении подписи типа в дополнительном объявлении.</span><span class="sxs-lookup"><span data-stu-id="d5689-149">A compiler error typically results if you redefine the type signature in a supplementary declaration.</span></span>  
  
 <span data-ttu-id="d5689-150">Visual Studio 2005 использует разделяемые типы для разделения кода, созданного пользователем кода конструктора.</span><span class="sxs-lookup"><span data-stu-id="d5689-150">Visual Studio 2005 uses partial types to separate user-generated code from designer code.</span></span> <span data-ttu-id="d5689-151">В проектах приложений Windows в Visual Basic, пользовательский код помещается в разделяемый класс, который не квалифицируется `Partial` ключевое слово, предоставляемыми конструктором код отображается в разделяемый класс, имеющий `Partial` ключевое слово.</span><span class="sxs-lookup"><span data-stu-id="d5689-151">In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the `Partial` keyword; the designer-provided code appears in the partial class that has the `Partial` keyword.</span></span> <span data-ttu-id="d5689-152">В C# пользовательский код и код конструктора помещаются в разделяемый класс, определяемый `partial` ключевое слово.</span><span class="sxs-lookup"><span data-stu-id="d5689-152">In C#, both the user code and designer code appear in partial classes identified by the `partial` keyword.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5689-153">В этом примере показано использование <xref:System.CodeDom.CodeTypeDeclaration> предоставить реализацию класса на несколько объявлений.</span><span class="sxs-lookup"><span data-stu-id="d5689-153">This example demonstrates using a <xref:System.CodeDom.CodeTypeDeclaration> to supply a class implementation across multiple declarations.</span></span> <span data-ttu-id="d5689-154">Мы добавим в операторе объявления исходного класса и задает <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="d5689-154">The example builds the initial class declaration statement and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomPartialTypeExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#3)]
 [!code-vb[CodeDomPartialTypeExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#3)]  
  
 <span data-ttu-id="d5689-155">Другой метод в примере расширяет реализацию класса.</span><span class="sxs-lookup"><span data-stu-id="d5689-155">A different method in the example extends the class implementation.</span></span> <span data-ttu-id="d5689-156">Этот метод создает новый оператор объявления типа для существующего класса и наборы <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> свойства `true`.</span><span class="sxs-lookup"><span data-stu-id="d5689-156">This method builds a new type declaration statement for the existing class and sets the <xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A> property to `true`.</span></span> <span data-ttu-id="d5689-157">Компилятор объединяет два объявления разделяемого типа для полной реализации класса.</span><span class="sxs-lookup"><span data-stu-id="d5689-157">The compiler combines the two partial type declarations together for the complete class implementation.</span></span>  
  
 [!code-cpp[CodeDomPartialTypeExample#7](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomPartialTypeExample/CPP/source.cpp#7)]
 [!code-csharp[CodeDomPartialTypeExample#7](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomPartialTypeExample/CS/source.cs#7)]
 [!code-vb[CodeDomPartialTypeExample#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomPartialTypeExample/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes" />
      </Docs>
    </Member>
    <Member MemberName="IsStruct">
      <MemberSignature Language="C#" Value="public bool IsStruct { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStruct" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.IsStruct" />
      <MemberSignature Language="VB.NET" Value="Public Property IsStruct As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStruct { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-158">Получает или задает значение, указывающее, являются ли тип типом значения (структурой).</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-158">Gets or sets a value indicating whether the type is a value type (struct).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-159">Значение <see langword="true" />, если тип является типом значения; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-159">
              <see langword="true" /> if the type is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Members">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeMemberCollection Members { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeMemberCollection Members" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.Members" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Members As CodeTypeMemberCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeMemberCollection ^ Members { System::CodeDom::CodeTypeMemberCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeMemberCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-160">Получает коллекцию элементов класса для представленного типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-160">Gets the collection of class members for the represented type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-161">Объект <see cref="T:System.CodeDom.CodeTypeMemberCollection" />, указывающий элементы класса.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-161">A <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> object that indicates the class members.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.CodeDom.CodeTypeMemberCollection" />
      </Docs>
    </Member>
    <Member MemberName="PopulateBaseTypes">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateBaseTypes;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateBaseTypes" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateBaseTypes As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateBaseTypes;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-162">Происходит при первом доступе к коллекции <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-162">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> collection is accessed for the first time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopulateMembers">
      <MemberSignature Language="C#" Value="public event EventHandler PopulateMembers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PopulateMembers" />
      <MemberSignature Language="DocId" Value="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PopulateMembers As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PopulateMembers;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-163">Происходит при первом доступе к коллекции <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-163">Occurs when the <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> collection is accessed for the first time.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAttributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes TypeAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes TypeAttributes" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property TypeAttributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes TypeAttributes { System::Reflection::TypeAttributes get(); void set(System::Reflection::TypeAttributes value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-164">Получает или задает атрибуты типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-164">Gets or sets the attributes of the type.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-165">Объект <see cref="T:System.Reflection.TypeAttributes" />, указывающий атрибуты типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-165">A <see cref="T:System.Reflection.TypeAttributes" /> object that indicates the attributes of the type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5689-166"><xref:System.Reflection.TypeAttributes> Свойство содержит тот же тип значений, используемых в <xref:System.Reflection> при исследовании типа во время выполнения.</span><span class="sxs-lookup"><span data-stu-id="d5689-166">The <xref:System.Reflection.TypeAttributes> property contains the same type of values used by <xref:System.Reflection> when investigating a type at run time.</span></span> <span data-ttu-id="d5689-167">Многие из этих флагов не соответствуют синтаксиса объявления типов для некоторых языков.</span><span class="sxs-lookup"><span data-stu-id="d5689-167">Many of these flags do not correspond to the type declaration syntax for some languages.</span></span> <span data-ttu-id="d5689-168">В результате только следующие флаги являются значимыми для <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, и <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span><span class="sxs-lookup"><span data-stu-id="d5689-168">As a result, only the following flags are significant to <xref:System.CodeDom.CodeTypeDeclaration> : <xref:System.Reflection.TypeAttributes.Class>, <xref:System.Reflection.TypeAttributes.Interface>, <xref:System.Reflection.TypeAttributes.Abstract>, <xref:System.Reflection.TypeAttributes.Sealed>, <xref:System.Reflection.TypeAttributes.Public>, <xref:System.Reflection.TypeAttributes.NotPublic>, <xref:System.Reflection.TypeAttributes.NestedPublic>, and <xref:System.Reflection.TypeAttributes.NestedPrivate>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5689-169">Некоторые флаги, такие как <xref:System.Reflection.TypeAttributes.Abstract> перекрывают значение флагов в <xref:System.CodeDom.CodeTypeMember.Attributes%2A> свойство <xref:System.CodeDom.CodeTypeDeclaration> , наследуемый от <xref:System.CodeDom.CodeTypeMember>.</span><span class="sxs-lookup"><span data-stu-id="d5689-169">Some of the flags such as <xref:System.Reflection.TypeAttributes.Abstract> overlap with the meaning of flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property of <xref:System.CodeDom.CodeTypeDeclaration> that is inherited from <xref:System.CodeDom.CodeTypeMember>.</span></span> <span data-ttu-id="d5689-170"><xref:System.CodeDom.CodeTypeMember.Attributes%2A> Свойство является побочным эффектом <xref:System.CodeDom.CodeTypeDeclaration> класс, наследующий от <xref:System.CodeDom.CodeTypeMember> , чтобы классы могут быть вложенными.</span><span class="sxs-lookup"><span data-stu-id="d5689-170">The <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property is a side effect of the <xref:System.CodeDom.CodeTypeDeclaration> class inheriting from <xref:System.CodeDom.CodeTypeMember> so that classes can be nested.</span></span> <span data-ttu-id="d5689-171">Флаги в <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> свойство должно использоваться вместо флаги в <xref:System.CodeDom.CodeTypeMember.Attributes%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="d5689-171">The flags in the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property should be used instead of the flags in the <xref:System.CodeDom.CodeTypeMember.Attributes%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5689-172">Шаблон для установки видимости флагов (флаги, содержащих слова `Public` или `Nested`) — маскировать видимость всех флагов с помощью <xref:System.Reflection.TypeAttributes.VisibilityMask> и установите флаг требуемой видимости.</span><span class="sxs-lookup"><span data-stu-id="d5689-172">The pattern for setting the visibility flags (flags containing the words `Public` or `Nested`) is to mask out all visibility flags using the <xref:System.Reflection.TypeAttributes.VisibilityMask> and then set the desired visibility flag.</span></span> <span data-ttu-id="d5689-173">Например, оператор C# кода для идентификации <xref:System.CodeDom.CodeTypeDeclaration> (с именем `cd`) как внутренний класс `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span><span class="sxs-lookup"><span data-stu-id="d5689-173">For example, the C# code statement to identify the <xref:System.CodeDom.CodeTypeDeclaration> (named `cd`) as an internal class is `cd.TypeAttributes = (cd.TypeAttributes & ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`.</span></span>  <span data-ttu-id="d5689-174">Код, чтобы задать одинаковое значение в Visual Basic — `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span><span class="sxs-lookup"><span data-stu-id="d5689-174">The code to set the same value in Visual Basic is `cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`.</span></span> <span data-ttu-id="d5689-175">Установка <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> свойство непосредственно к флаг видимости (`cd.TypeAttributes = TypeAttributes.NotPublic;`) стирает все флаги, которые могут быть установлены.</span><span class="sxs-lookup"><span data-stu-id="d5689-175">Setting the <xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A> property directly to a visibility flag (`cd.TypeAttributes = TypeAttributes.NotPublic;`) erases all other flags that might be set.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.TypeAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TypeParameters">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeTypeParameterCollection TypeParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeTypeParameterCollection TypeParameters" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.CodeTypeDeclaration.TypeParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeParameters As CodeTypeParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeTypeParameterCollection ^ TypeParameters { System::CodeDom::CodeTypeParameterCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeTypeParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5689-176">Получает параметры типа для объявления типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-176">Gets the type parameters for the type declaration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5689-177">
            <see cref="T:System.CodeDom.CodeTypeParameterCollection" />, содержащий параметры типа для объявления типа.</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5689-177">A <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> that contains the type parameters for the type declaration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5689-178">Объявление универсального типа содержит один или несколько неуказанных типов параметров типа.</span><span class="sxs-lookup"><span data-stu-id="d5689-178">A generic type declaration contains one or more unspecified types known as type parameters.</span></span> <span data-ttu-id="d5689-179">Имя параметра типа означает тип в теле универсального объявления.</span><span class="sxs-lookup"><span data-stu-id="d5689-179">A type parameter name stands for the type within the body of the generic declaration.</span></span> <span data-ttu-id="d5689-180">Например, универсальное объявление <xref:System.Collections.Generic.List%601> класс содержит параметр типа `T`.</span><span class="sxs-lookup"><span data-stu-id="d5689-180">For example, the generic declaration for the <xref:System.Collections.Generic.List%601> class contains the type parameter `T`.</span></span>  
  
 <span data-ttu-id="d5689-181">Дополнительные сведения об универсальных шаблонах см. в разделе [универсальные шаблоны в библиотеке классов .NET Framework](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span><span class="sxs-lookup"><span data-stu-id="d5689-181">For more information on generics, see [Generics in the .NET Framework Class Library](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.CodeDom.CodeTypeParameterCollection" />
        <altmember cref="T:System.CodeDom.CodeTypeParameter" />
      </Docs>
    </Member>
  </Members>
</Type>