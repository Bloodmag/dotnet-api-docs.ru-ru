<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeTypeDeclaration.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac552c8bfcbe9527832064fa06fd15fae096ecb1cf0.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">52c8bfcbe9527832064fa06fd15fae096ecb1cf0</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Represents a type declaration for a class, structure, interface, or enumeration.</source>
          <target state="translated">Представляет объявление типа для класса, структуры, интерфейса или перечисления.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to represent code that declares a class, structure, interface, or enumeration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> используется для представления кода, объявляющего класса, структуры, интерфейса или перечисления.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> can be used to declare a type that is nested within another type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> можно использовать для объявления типа, который вложен в другой тип.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> property specifies the base type or base types of the type being declared.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> Свойство указывает базовый тип или типы объявляемый тип.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> property contains the type members, which can include methods, fields, properties, comments and other types.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.Members%2A&gt;</ph> Свойство содержит члены типов, которые могут включать методы, поля, свойства, комментарии и других типов.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property indicates the <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> values for the type declaration, which indicate the type category of the type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> Указывает свойство <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> для объявления типа значения, которые указывают тип категории типа.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, and <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> methods indicate whether the type is a class, structure, enumeration, or interface type, respectively.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsClass%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsStruct%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsEnum%2A&gt;</ph>, И <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsInterface%2A&gt;</ph> методы укажите, является ли тип класса, структуры, перечисления или тип интерфейса, соответственно.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Some programming languages only support the declaration of reference types, or classes.</source>
          <target state="translated">Некоторые языки программирования поддерживают только объявления ссылочных типов или классов.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>To check a language-specific CodeDOM code generator for support for declaring interfaces, enumerations, or value types, call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method to test for the appropriate <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags.</source>
          <target state="translated">Чтобы проверить генератора кода CodeDOM языковой поддержки для объявления перечисления, интерфейсы, а также типы значений, вызовите <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> метод для проверки соответствующего <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> флаги.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> indicates support for interfaces, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> indicates support for enumerations, and <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> indicates support for value types such as structures.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces&gt;</ph> Указывает на поддержку интерфейсов, <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums&gt;</ph> указывает на поддержку перечисления, и <ph id="ph3">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes&gt;</ph> указывает поддержку для типов значений, таких как структуры.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>You can build a class or a structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Сборки, класса или структуры реализация в одном объявлении завершения или распределяться реализации нескольких объявлениях.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property indicates whether the type declaration is complete or partial.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> Свойство указывает, является ли объявление типа полные или неполные.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">Не все генераторы кода поддерживает объявления разделяемого типа, поэтому следует проверить наличие такой поддержки путем вызова <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> метода с флагом <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to declare a type.</source>
          <target state="translated">В этом примере показано использование <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> для объявления типа.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="T:System.CodeDom.CodeTypeDeclaration">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>The name for the new type.</source>
          <target state="translated">Имя нового типа.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> class with the specified name.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> с указанным именем.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>Gets the base types of the type.</source>
          <target state="translated">Получает базовые типы типа.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph> object that indicates the base types of the type.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReferenceCollection" /&gt;</ph>, указывающий базовые типы типа.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>To generate a class in Visual Basic that does not inherit from a base type, but that does implement one or more interfaces, you must include <ph id="ph1">&lt;xref:System.Object&gt;</ph> as the first item in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> collection.</source>
          <target state="translated">Чтобы создать класс на языке Visual Basic, не является производным от базового типа, но реализуют один или несколько интерфейсов, необходимо включить <ph id="ph1">&lt;xref:System.Object&gt;</ph> как первый элемент в <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration.BaseTypes%2A&gt;</ph> коллекции.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>In the .NET Framework version 2.0 you do not need the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> for <ph id="ph2">&lt;xref:System.Object&gt;</ph> if the interface you are implementing already exists and you are referring to it by type.</source>
          <target state="translated">В .NET Framework версии 2.0, не обязательно <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> для <ph id="ph2">&lt;xref:System.Object&gt;</ph> Если интерфейс реализуется уже существует, и обращении к нему по типу.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>For example, if you are implementing the <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> interface and add it to the collection with this statement, <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, you do not need the preceding <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> statement.</source>
          <target state="translated">Например, если вы реализуете <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> интерфейс и добавьте его в коллекцию с настоящим заявлением, <ph id="ph2">`ctd.BaseTypes.Add(New CodeTypeReference(typeof(ICollection)))`</ph>, нет необходимости предыдущих <ph id="ph3">`ctd.BaseTypes.Add(New CodeTypeReference(GetType(Object)))`</ph> инструкции.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The following code illustrates the addition of a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> to the collection that refers to <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</source>
          <target state="translated">В следующем коде показано добавление <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeReference&gt;</ph> в коллекцию, которая ссылается на <ph id="ph2">&lt;xref:System.Object&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>The preceding code generates the equivalent of the following Visual Basic code.</source>
          <target state="translated">Предыдущий код вызывает эквивалент следующего кода Visual Basic.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
          <source>However, the Visual Basic code actually generated is the following.</source>
          <target state="translated">Тем не менее код Visual Basic, который фактически создается выглядит следующим образом.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source>Gets or sets a value indicating whether the type is a class or reference type.</source>
          <target state="translated">Получает или задает значение, показывающее, является ли тип классом или ссылочным типом.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsClass">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a class or reference type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если тип является классом или ссылочным типом; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source>Gets or sets a value indicating whether the type is an enumeration.</source>
          <target state="translated">Получает или задает значение, указывающее, является ли тип перечислением.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an enumeration; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если тип является перечислением; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source>Gets or sets a value indicating whether the type is an interface.</source>
          <target state="translated">Получает или задает значение, указывающее, является ли тип интерфейсом.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is an interface; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если тип является интерфейсом; в противном случае — <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Gets or sets a value indicating whether the type declaration is complete or partial.</source>
          <target state="translated">Получает или задает значение, указывающее, является ли объявление типа полным или разделяемым.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the class or structure declaration is a partial representation of the implementation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> if the declaration is a complete implementation of the class or structure.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если объявление класса или структуры является частичным представлением реализации; значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>, если объявление является полной реализацией класса или структуры.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The default is <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение по умолчанию: <ph id="ph1">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>You can build a class or structure implementation in one complete declaration, or spread the implementation across multiple declarations.</source>
          <target state="translated">Реализация класса или структуры, в одном объявлении завершения построения или распределяться реализации нескольких объявлениях.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Implementations are commonly supplied in one complete type declaration.</source>
          <target state="translated">Реализации обычно предоставляются в одном полном объявлении типа.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In this case, set the type declaration <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`false`</ph>, which indicates that the type declaration represents all details for the class or structure implementation.</source>
          <target state="translated">В этом случае значение объявление типа <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> свойства <ph id="ph2">`false`</ph>, который указывает, что объявление типа представляет все сведения для реализации класса или структуры.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A partial type declaration makes it easier to build different portions of a class or structure implementation in different modules of your application.</source>
          <target state="translated">Объявление разделяемого типа облегчает построение различных частей реализация класса или структуры в различных модулях приложения.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The partial type declarations can be stored in one source file, or spread across multiple source files that are eventually compiled together to form the combined type implementation.</source>
          <target state="translated">Объявления разделяемого типа можно сохранять в один исходный файл, или распределяться несколько исходных файлов, которые совместно компилируемых для формирования объединенный тип реализации.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The C# language supports partial type declarations of classes and structures through the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">Язык C# поддерживает объявления разделяемого типа классов и структур через <ph id="ph1">`partial`</ph> ключевое слово.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Basic supports partial type declarations of classes and structures with the <ph id="ph1">`Partial`</ph> keyword.</source>
          <target state="translated">Visual Basic поддерживает объявления разделяемого типа классов и структур с <ph id="ph1">`Partial`</ph> ключевое слово.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Not all code generators support partial type declarations, so you should test for this support by calling the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> method with the flag <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</source>
          <target state="translated">Не все генераторы кода поддерживает объявления разделяемого типа, поэтому следует проверить наличие такой поддержки путем вызова <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator.Supports%2A&gt;</ph> метода с флагом <ph id="ph2">&lt;xref:System.CodeDom.Compiler.GeneratorSupport.PartialTypes&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Partial type declarations are supported for classes and structures.</source>
          <target state="translated">Объявления разделяемого типа поддерживаются для классов и структур.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>If you specify a partial type declaration for an enumeration or interface, the generated code produces compiler errors.</source>
          <target state="translated">При указании объявления разделяемого типа для перечисления или интерфейса, созданный код вызывает ошибки компилятора.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>When supplying a class or structure implementation across multiple declarations, set the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph> for the initial declaration and all supplemental declarations.</source>
          <target state="translated">При указании реализация класса или структуры на несколько объявлений, задайте <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> свойства <ph id="ph2">`true`</ph> для исходного объявления и все дополнительные объявления.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The initial declaration must fully specify the type signature, including access modifiers, inherited types, and implemented interfaces.</source>
          <target state="translated">Исходного объявления необходимо полностью указывать тип подписи, включая модификаторы доступа, унаследованные типы и реализованные интерфейсы.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The supplementary declarations do not need to re-specify the type signature.</source>
          <target state="translated">Дополнительные объявления не нужно повторно определить сигнатура типа.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A compiler error typically results if you redefine the type signature in a supplementary declaration.</source>
          <target state="translated">Ошибка компилятора обычно происходит при повторном определении подписи типа в дополнительном объявлении.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>Visual Studio 2005 uses partial types to separate user-generated code from designer code.</source>
          <target state="translated">Visual Studio 2005 использует разделяемые типы для разделения кода, созданного пользователем кода конструктора.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In Visual Basic Windows Application projects, the user code is placed in a partial class that is not qualified by the <ph id="ph1">`Partial`</ph> keyword; the designer-provided code appears in the partial class that has the <ph id="ph2">`Partial`</ph> keyword.</source>
          <target state="translated">В проектах приложений Windows в Visual Basic, пользовательский код помещается в разделяемый класс, который не квалифицируется <ph id="ph1">`Partial`</ph> ключевое слово, предоставляемыми конструктором код отображается в разделяемый класс, имеющий <ph id="ph2">`Partial`</ph> ключевое слово.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>In C#, both the user code and designer code appear in partial classes identified by the <ph id="ph1">`partial`</ph> keyword.</source>
          <target state="translated">В C# пользовательский код и код конструктора помещаются в разделяемый класс, определяемый <ph id="ph1">`partial`</ph> ключевое слово.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This example demonstrates using a <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> to supply a class implementation across multiple declarations.</source>
          <target state="translated">В этом примере показано использование <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> предоставить реализацию класса на несколько объявлений.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The example builds the initial class declaration statement and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Мы добавим в операторе объявления исходного класса и задает <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> свойства <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>A different method in the example extends the class implementation.</source>
          <target state="translated">Другой метод в примере расширяет реализацию класса.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>This method builds a new type declaration statement for the existing class and sets the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> property to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">Этот метод создает новый оператор объявления типа для существующего класса и наборы <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.IsPartial%2A&gt;</ph> свойства <ph id="ph2">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
          <source>The compiler combines the two partial type declarations together for the complete class implementation.</source>
          <target state="translated">Компилятор объединяет два объявления разделяемого типа для полной реализации класса.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source>Gets or sets a value indicating whether the type is a value type (struct).</source>
          <target state="translated">Получает или задает значение, указывающее, являются ли тип типом значения (структурой).</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the type is a value type; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если тип является типом значения; в противном случае — значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>Gets the collection of class members for the represented type.</source>
          <target state="translated">Получает коллекцию элементов класса для представленного типа.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.Members">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph> object that indicates the class members.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMemberCollection" /&gt;</ph>, указывающий элементы класса.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">Происходит при первом доступе к коллекции <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
          <source>Occurs when the <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph> collection is accessed for the first time.</source>
          <target state="translated">Происходит при первом доступе к коллекции <ph id="ph1">&lt;see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Gets or sets the attributes of the type.</source>
          <target state="translated">Получает или задает атрибуты типа.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>A <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph> object that indicates the attributes of the type.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Reflection.TypeAttributes" /&gt;</ph>, указывающий атрибуты типа.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> property contains the same type of values used by <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> when investigating a type at run time.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Reflection.TypeAttributes&gt;</ph> Свойство содержит тот же тип значений, используемых в <ph id="ph2">&lt;xref:System.Reflection&gt;</ph> при исследовании типа во время выполнения.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Many of these flags do not correspond to the type declaration syntax for some languages.</source>
          <target state="translated">Многие из этих флагов не соответствуют синтаксиса объявления типов для некоторых языков.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>As a result, only the following flags are significant to <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, and <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</source>
          <target state="translated">В результате только следующие флаги являются значимыми для <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> : <ph id="ph2">&lt;xref:System.Reflection.TypeAttributes.Class&gt;</ph>, <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.Interface&gt;</ph>, <ph id="ph4">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph>, <ph id="ph5">&lt;xref:System.Reflection.TypeAttributes.Sealed&gt;</ph>, <ph id="ph6">&lt;xref:System.Reflection.TypeAttributes.Public&gt;</ph>, <ph id="ph7">&lt;xref:System.Reflection.TypeAttributes.NotPublic&gt;</ph>, <ph id="ph8">&lt;xref:System.Reflection.TypeAttributes.NestedPublic&gt;</ph>, и <ph id="ph9">&lt;xref:System.Reflection.TypeAttributes.NestedPrivate&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Some of the flags such as <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> overlap with the meaning of flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property of <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> that is inherited from <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</source>
          <target state="translated">Некоторые флаги, такие как <ph id="ph1">&lt;xref:System.Reflection.TypeAttributes.Abstract&gt;</ph> перекрывают значение флагов в <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> свойство <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> , наследуемый от <ph id="ph4">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property is a side effect of the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> class inheriting from <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> so that classes can be nested.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> Свойство является побочным эффектом <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> класс, наследующий от <ph id="ph3">&lt;xref:System.CodeDom.CodeTypeMember&gt;</ph> , чтобы классы могут быть вложенными.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The flags in the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property should be used instead of the flags in the <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> property.</source>
          <target state="translated">Флаги в <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> свойство должно использоваться вместо флаги в <ph id="ph2">&lt;xref:System.CodeDom.CodeTypeMember.Attributes%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The pattern for setting the visibility flags (flags containing the words <ph id="ph1">`Public`</ph> or <ph id="ph2">`Nested`</ph>) is to mask out all visibility flags using the <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> and then set the desired visibility flag.</source>
          <target state="translated">Шаблон для установки видимости флагов (флаги, содержащих слова <ph id="ph1">`Public`</ph> или <ph id="ph2">`Nested`</ph>) — маскировать видимость всех флагов с помощью <ph id="ph3">&lt;xref:System.Reflection.TypeAttributes.VisibilityMask&gt;</ph> и установите флаг требуемой видимости.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>For example, the C# code statement to identify the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (named <ph id="ph2">`cd`</ph>) as an internal class is <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</source>
          <target state="translated">Например, оператор C# кода для идентификации <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration&gt;</ph> (с именем <ph id="ph2">`cd`</ph>) как внутренний класс <ph id="ph3">`cd.TypeAttributes = (cd.TypeAttributes &amp; ~TypeAttributes.VisibilityMask) | TypeAttributes.NotPublic;`</ph>.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>The code to set the same value in Visual Basic is <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</source>
          <target state="translated">Код, чтобы задать одинаковое значение в Visual Basic — <ph id="ph1">`cd.TypeAttributes = (cd.TypeAttributes And (TypeAttributes.VisibilityMask Xor -1)) Or TypeAttributes.NotPublic`</ph>.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
          <source>Setting the <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> property directly to a visibility flag (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) erases all other flags that might be set.</source>
          <target state="translated">Установка <ph id="ph1">&lt;xref:System.CodeDom.CodeTypeDeclaration.TypeAttributes%2A&gt;</ph> свойство непосредственно к флаг видимости (<ph id="ph2">`cd.TypeAttributes = TypeAttributes.NotPublic;`</ph>) стирает все флаги, которые могут быть установлены.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>Gets the type parameters for the type declaration.</source>
          <target state="translated">Получает параметры типа для объявления типа.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph> that contains the type parameters for the type declaration.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeParameterCollection" /&gt;</ph>, содержащий параметры типа для объявления типа.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A generic type declaration contains one or more unspecified types known as type parameters.</source>
          <target state="translated">Объявление универсального типа содержит один или несколько неуказанных типов параметров типа.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>A type parameter name stands for the type within the body of the generic declaration.</source>
          <target state="translated">Имя параметра типа означает тип в теле универсального объявления.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For example, the generic declaration for the <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> class contains the type parameter <ph id="ph2">`T`</ph>.</source>
          <target state="translated">Например, универсальное объявление <ph id="ph1">&lt;xref:System.Collections.Generic.List%601&gt;</ph> класс содержит параметр типа <ph id="ph2">`T`</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
          <source>For more information on generics, see <bpt id="p1">[</bpt>Generics in the .NET Framework Class Library<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</source>
          <target state="translated">Дополнительные сведения об универсальных шаблонах см. в разделе <bpt id="p1">[</bpt>универсальные шаблоны в библиотеке классов .NET Framework<ept id="p1">](~/docs/csharp/programming-guide/generics/generics-in-the-net-framework-class-library.md)</ept>.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>