<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Stack`1.xml" source-language="en-US" target-language="ru-RU">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac54573609c4b35e8133fdd9cc4e6d874da8137223e.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">4573609c4b35e8133fdd9cc4e6d874da8137223e</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Specifies the type of elements in the stack.</source>
          <target state="translated">Задает тип элементов в стеке.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.</source>
          <target state="translated">Представляет коллекцию переменного размера экземпляров одинакового заданного типа, обслуживаемую по принципу "последним пришел - первым вышел" (LIFO).</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> реализован в виде массива.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Stacks and queues are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value.</source>
          <target state="translated">Стеки и очереди полезны, когда требуется временное хранилище для данных; то есть при может потребоваться отменить элемент после извлечения его значения.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> if you need to access the information in the same order that it is stored in the collection.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Collections.Generic.Queue%601&gt;</ph> требуется доступ к сведениям в том же порядке, что он хранится в коллекции.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> if you need to access the information in reverse order.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> Если требуется доступ к данным в обратном порядке.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> types when you need to access the collection from multiple threads concurrently.</source>
          <target state="translated">Используйте <ph id="ph1">&lt;xref:System.Collections.Concurrent.ConcurrentStack%601?displayProperty=nameWithType&gt;</ph> и <ph id="ph2">&lt;xref:System.Collections.Concurrent.ConcurrentQueue%601?displayProperty=nameWithType&gt;</ph> типов, когда требуется доступ к коллекции из нескольких потоков одновременно.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A common use for <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> is to preserve variable states during calls to other procedures.</source>
          <target state="translated">Распространенным применением <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> — для сохранения состояния переменной при вызове других процедур.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Three main operations can be performed on a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> and its elements:</source>
          <target state="translated">Три основные операции, которые могут выполняться на <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601?displayProperty=nameWithType&gt;</ph> и его элементы:</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> inserts an element at the top of the <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> Вставляет элемент в верхней части <ph id="ph2">&lt;xref:System.Collections.Stack&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> removes an element from the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Удаляет элемент из верхней части <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> returns an element that is at the top of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> but does not remove it from the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Возвращает элемент, находящийся в верхней части <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> , но не удаляет его из <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Емкость <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> — число элементов <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> может содержать.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">При добавлении элементов к <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Емкость может быть уменьшена путем вызова <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> меньше, чем размер стека, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> является операцией o(1).</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Если емкость требуется увеличить для размещения нового элемента <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> становится операцией O (<ph id="ph2">`n`</ph>) операции, где <ph id="ph3">`n`</ph> — <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> является операцией o(1).</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> accepts <ph id="ph2">`null`</ph> as a valid value for reference types and allows duplicate elements.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> принимает <ph id="ph2">`null`</ph> как допустимое значение для ссылки на типы и допускает наличие повторяющихся элементов.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Public static (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> in Visual Basic) members of this type are thread safe.</source>
          <target state="translated">Открытые статические (<ph id="ph1">&lt;see langword="Shared" /&gt;</ph> в Visual Basic) члены этого типа являются потокобезопасными.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Any instance members are not guaranteed to be thread safe.</source>
          <target state="translated">Потокобезопасность членов экземпляров не гарантируется.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>A <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can support multiple readers concurrently, as long as the collection is not modified.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> может поддерживать несколько читающих параллельно, до тех пор, пока коллекция не изменяется.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>Even so, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Даже в этом случае перечисление коллекции само по себе не является потокобезопасной процедурой.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Collections.Generic.Stack`1">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="T:System.Collections.Generic.Stack`1">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the default initial capacity.</source>
          <target state="translated">Инициализирует новый экземпляр класса <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, который является пустым и имеет начальную емкость по умолчанию.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Емкость <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> — количество элементов, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> может содержать.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">При добавлении элементов к <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Емкость может быть уменьшена путем вызова <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>This constructor is an O(1) operation.</source>
          <target state="translated">Этот конструктор является операцией o(1).</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">В следующем примере кода демонстрируется этот конструктор и несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The collection to copy elements from.</source>
          <target state="translated">Коллекция, из которой требуется скопировать элементы.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.</source>
          <target state="translated">Инициализирует новый экземпляр <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, который содержит элементы, скопированные из указанной коллекции, и имеет емкость, достаточную для размещения всех скопированных элементов.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Емкость <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> — количество элементов, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> может содержать.</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">При добавлении элементов к <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Емкость может быть уменьшена путем вызова <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements are copied onto the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> in the same order they are read by the <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> of the collection.</source>
          <target state="translated">Элементы копируются на <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> в том же порядке, они считываются при <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601&gt;</ph> коллекции.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is the number of elements in <ph id="ph3">`collection`</ph>.</source>
          <target state="translated">Этот конструктор является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — число элементов в <ph id="ph3">`collection`</ph>.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The following code example demonstrates this constructor and several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class.</source>
          <target state="translated">В следующем примере кода демонстрируется этот конструктор и несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
          <source><ph id="ph1">&lt;paramref name="collection" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="collection" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The initial number of elements that the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> can contain.</source>
          <target state="translated">Начальное количество элементов, которое может содержать коллекция <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</source>
          <target state="translated">Инициализирует новый экземпляр <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, который является пустым и обладает указанной начальной емкостью или емкостью по умолчанию, в зависимости от того, какое значение больше.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity of a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can hold.</source>
          <target state="translated">Емкость <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> — количество элементов, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> может содержать.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>As elements are added to a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, the capacity is automatically increased as required by reallocating the internal array.</source>
          <target state="translated">При добавлении элементов к <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, емкость автоматически увеличивается, если это требуется перераспределения внутреннего массива.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Если размер коллекции можно оценить, целесообразно указать начальную емкость избавляет от необходимости выполнять операции изменения размера при добавлении элементов в <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>The capacity can be decreased by calling <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Емкость может быть уменьшена путем вызова <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source>This constructor is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">`capacity`</ph>.</source>
          <target state="translated">Этот конструктор является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">`capacity`</ph>.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> is less than zero.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="capacity" /&gt;</ph> меньше нуля.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Removes all objects from the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Удаляет все объекты из <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is set to zero, and references to other objects from elements of the collection are also released.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> имеет значение 0, а также ссылки на другие объекты из элементов коллекции также освобождаются.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The capacity remains unchanged.</source>
          <target state="translated">Емкость не изменяется.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>To reset the capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, call <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</source>
          <target state="translated">Чтобы сбросить емкость <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>, вызовите <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Удаление пустой <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> задает емкость объекта <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> емкость по умолчанию.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Этот метод является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Clear">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The object to locate in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Объект для поиска в <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">Для ссылочных типов допускается значение <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>Determines whether an element is in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Определяет, входит ли элемент в коллекцию <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="item" /&gt;</ph> is found in the <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">Значение <ph id="ph1">&lt;see langword="true" /&gt;</ph>, если параметр <ph id="ph2">&lt;paramref name="item" /&gt;</ph> найден в коллекции <ph id="ph3">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>; в противном случае — значение <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method determines equality using the default equality comparer <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> for <ph id="ph2">`T`</ph>, the type of values in the list.</source>
          <target state="translated">Этот метод определяет равенство, используя компаратор проверки на равенство по умолчанию <ph id="ph1">&lt;xref:System.Collections.Generic.EqualityComparer%601.Default%2A?displayProperty=nameWithType&gt;</ph> для <ph id="ph2">`T`</ph>, тип значений в списке.</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>This method performs a linear search; therefore, this method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Этот метод выполняет линейный поиск; Таким образом, этот метод является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Contains(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Одномерный массив <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>, в который копируются элементы из интерфейса <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">Массив <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> должен иметь индексацию, начинающуюся с нуля.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Отсчитываемый от нуля индекс в <bpt id="p1">&lt;c&gt;</bpt>массиве<ept id="p1">&lt;/c&gt;</ept> с которого начинается копирование.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to an existing one-dimensional <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at the specified array index.</source>
          <target state="translated">Копирует элементы класса <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> в существующий одномерный массив класса <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, начиная с указанного индекса массива.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">Элементы копируются в массив по последним пришел первым вышел (LIFO), аналогично порядку элементов, которые возвращаются с помощью последовательности вызовов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Этот метод является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="array" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> меньше нуля.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Число элементов в исходной коллекции <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> больше доступного места от положения, заданного значением параметра <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph>, до конца массива назначения <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Gets the number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Получает число элементов, содержащихся в интерфейсе <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The number of elements contained in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Число элементов, содержащихся в интерфейсе <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is the number of elements that the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can store.</source>
          <target state="translated">Емкость <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> — количество элементов, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> можно сохранить.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is the number of elements that are actually in the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> число элементов, фактически <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The capacity is always greater than or equal to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Емкость всегда больше или равно <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> превышает емкость при добавлении элементов, емкость увеличивается посредством автоматического перераспределения внутреннего массива перед копированием старых элементов и добавлением новых элементов.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Получение значения данного свойства является операцией порядка сложности O(1).</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The following code example demonstrates several properties and methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property.</source>
          <target state="translated">В следующем примере кода демонстрируется несколько свойств и методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.Count">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Returns an enumerator for the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Возвращает перечислитель для коллекции <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Интерфейс <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1.Enumerator" /&gt;</ph> для <ph id="ph2">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Инструкции языка C# (<ph id="ph2">`for each`</ph> в C++ <ph id="ph3">`For Each`</ph> в Visual Basic) позволяет скрыть сложный механизм перечислителей.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Поэтому рекомендуется вместо непосредственного использования перечислителя применять ключевое слово <ph id="ph1">`foreach`</ph>.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Перечислители могут использоваться для чтения данных в коллекции, но не для ее изменения.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Изначально перечислитель располагается перед первым элементом коллекции.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">В этой позиции значение свойства <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> не определено.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Поэтому необходимо вызвать метод <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> возвращает тот же объект, пока не будет вызван метод <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> задает <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> в качестве значения для следующего элемента.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> возвращает <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Если перечислитель находится в этой позиции, последующие вызовы <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> также возвращают <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Если последний вызов метода <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.MoveNext%2A&gt;</ph> возвращается <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> не определено.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Значение свойства <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Enumerator.Current%2A&gt;</ph> не может быть повторно задано первому элементу коллекции; вместо этого следует создать новый экземпляр перечислителя.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Перечислитель остается действительным, пока коллекция не изменяется.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Если в коллекцию вносятся изменения, например добавляются, изменяются или удаляются элементы, перечислитель становится недействительным без возможности восстановление, а его поведение не определено.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">У перечислителя нет эксклюзивного доступа к коллекции, поэтому перечисление коллекции не является потокобезопасной процедурой.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">По умолчанию реализации коллекций в <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> не синхронизированы.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Этот метод является операцией o(1).</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The following code example demonstrates that the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class is enumerable.</source>
          <target state="translated">В следующем примере кода показано, что <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса enumerable.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement (<ph id="ph2">`For Each`</ph> in Visual Basic, <ph id="ph3">`for each`</ph> in C++) is used to enumerate the queue.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Инструкции (<ph id="ph2">`For Each`</ph> в Visual Basic <ph id="ph3">`for each`</ph> в C++) используется для перечисления в очередь.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.GetEnumerator">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>Returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> without removing it.</source>
          <target state="translated">Возвращает объект, находящийся в начале <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, без его удаления.</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Объект, находящийся в начале <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Этот метод аналогичен методу <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>, однако метод <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> не вносит изменения в очередь <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Если тип <ph id="ph1">`T`</ph> является ссылочным типом, <ph id="ph2">`null`</ph> можно помещаемый <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> как заполнитель, при необходимости.</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Этот метод является операцией o(1).</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Peek">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated">Очередь <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> является пустой.</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>Removes and returns the object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Удаляет и возвращает объект, находящийся в начале <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The object removed from the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Объект, удаляемый из начала <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is similar to the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method, but <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> does not modify the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</source>
          <target state="translated">Этот метод аналогичен методу <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph>, однако метод <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> не вносит изменения в очередь <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Если тип <ph id="ph1">`T`</ph> является ссылочным типом, <ph id="ph2">`null`</ph> можно помещаемый <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> как заполнитель, при необходимости.</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> реализован в виде массива.</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Этот метод является операцией o(1).</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Pop">
          <source>The <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> is empty.</source>
          <target state="translated">Очередь <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> является пустой.</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The object to push onto the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Объект, вставляемый в <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The value can be <ph id="ph1">&lt;see langword="null" /&gt;</ph> for reference types.</source>
          <target state="translated">Для ссылочных типов допускается значение <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>Inserts an object at the top of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Вставляет объект как верхний элемент стека <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is implemented as an array.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> реализован в виде массива.</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> already equals the capacity, the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> уже равна емкости, емкость <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> увеличивается на автоматического перераспределения внутреннего массива и существующие элементы копируются в новый массив перед добавлением нового элемента.</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If type <ph id="ph1">`T`</ph> is a reference type, <ph id="ph2">`null`</ph> can be pushed onto the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> as a placeholder, if needed.</source>
          <target state="translated">Если тип <ph id="ph1">`T`</ph> является ссылочным типом, <ph id="ph2">`null`</ph> можно помещаемый <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> как заполнитель, при необходимости.</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>It occupies a slot in the stack and is treated like any object.</source>
          <target state="translated">Оно занимает ячейку стека и обрабатывается как любой объект.</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> is less than the capacity of the stack, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> is an O(1) operation.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> меньше, чем размер стека, <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> является операцией o(1).</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>If the capacity needs to be increased to accommodate the new element, <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> becomes an O(<ph id="ph2">`n`</ph>) operation, where <ph id="ph3">`n`</ph> is <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Если емкость требуется увеличить для размещения нового элемента <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> становится операцией O (<ph id="ph2">`n`</ph>) операции, где <ph id="ph3">`n`</ph> — <ph id="ph4">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.Push(`0)">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Returns an enumerator that iterates through the collection.</source>
          <target state="translated">Возвращает перечислитель, выполняющий перебор элементов в коллекции.</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Collections.Generic.IEnumerator`1" /&gt;</ph>, который может использоваться для итерации элементов коллекции.</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Инструкции языка C# (<ph id="ph2">`for each`</ph> в C++ <ph id="ph3">`For Each`</ph> в Visual Basic) позволяет скрыть сложный механизм перечислителей.</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Поэтому рекомендуется вместо непосредственного использования перечислителя применять ключевое слово <ph id="ph1">`foreach`</ph>.</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Перечислители могут использоваться для чтения данных в коллекции, но не для ее изменения.</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Изначально перечислитель располагается перед первым элементом коллекции.</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">В этой позиции значение свойства <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> не определено.</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</source>
          <target state="translated">Поэтому необходимо вызвать метод <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> returns the same object until <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> возвращает тот же объект, пока не будет вызван метод <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> задает <ph id="ph2">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> в качестве значения для следующего элемента.</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> возвращает <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Если перечислитель находится в этой позиции, последующие вызовы <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> также возвращают <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Если последний вызов метода <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> возвращается <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> не определено.</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>You cannot set <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> to the first element of the collection again; you must create a new enumerator instance instead.</source>
          <target state="translated">Значение свойства <ph id="ph1">&lt;xref:System.Collections.Generic.IEnumerator%601.Current%2A&gt;</ph> не может быть повторно задано первому элементу коллекции; вместо этого следует создать новый экземпляр перечислителя.</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Перечислитель остается действительным, пока коллекция не изменяется.</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Если в коллекцию вносятся изменения, например добавляются, изменяются или удаляются элементы, перечислитель становится недействительным без возможности восстановление, а его поведение не определено.</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">У перечислителя нет эксклюзивного доступа к коллекции, поэтому перечисление коллекции не является потокобезопасной процедурой.</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления.</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">По умолчанию реализации коллекций в <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> не синхронизированы.</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable&amp;lt;T&amp;gt;#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Этот метод является операцией o(1).</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The one-dimensional <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> that is the destination of the elements copied from <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Одномерный массив <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph>, в который копируются элементы из интерфейса <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> must have zero-based indexing.</source>
          <target state="translated">Массив <ph id="ph1">&lt;see cref="T:System.Array" /&gt;</ph> должен иметь индексацию, начинающуюся с нуля.</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The zero-based index in <bpt id="p1">&lt;c&gt;</bpt>array<ept id="p1">&lt;/c&gt;</ept> at which copying begins.</source>
          <target state="translated">Отсчитываемый от нуля индекс в <bpt id="p1">&lt;c&gt;</bpt>массиве<ept id="p1">&lt;/c&gt;</ept> с которого начинается копирование.</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>Copies the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> to an <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, starting at a particular <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph> index.</source>
          <target state="translated">Копирует элементы коллекции <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> в массив <ph id="ph2">&lt;see cref="T:System.Array" /&gt;</ph>, начиная с указанного индекса массива <ph id="ph3">&lt;see cref="T:System.Array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>If the type of the source <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">`array`</ph>, the non-generic implementations of <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, whereas the generic implementations throw <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</source>
          <target state="translated">Если тип источника <ph id="ph1">&lt;xref:System.Collections.ICollection&gt;</ph> не может быть автоматически приведен к типу массива назначения <ph id="ph2">`array`</ph>, реализаций неуниверсальных <ph id="ph3">&lt;xref:System.Collections.ICollection.CopyTo%2A?displayProperty=nameWithType&gt;</ph> throw <ph id="ph4">&lt;xref:System.InvalidCastException&gt;</ph>, тогда как универсальный реализации вызывают <ph id="ph5">&lt;xref:System.ArgumentException&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Этот метод является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Свойство <ph id="ph1">&lt;paramref name="array" /&gt;</ph> имеет значение <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> is less than zero.</source>
          <target state="translated">Значение параметра <ph id="ph1">&lt;paramref name="arrayIndex" /&gt;</ph> меньше нуля.</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> is multidimensional.</source>
          <target state="translated">Массив <ph id="ph1">&lt;paramref name="array" /&gt;</ph> является многомерным.</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="array" /&gt;</ph> does not have zero-based indexing.</source>
          <target state="translated">В массиве <ph id="ph1">&lt;paramref name="array" /&gt;</ph> не используется индексация, начинающаяся с нуля.</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The number of elements in the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is greater than the available space from <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph> to the end of the destination <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Число элементов в исходном массиве <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> больше доступного места от положения, заданного значением параметра <ph id="ph2">&lt;paramref name="arrayIndex" /&gt;</ph>, до конца массива назначения <ph id="ph3">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>-or-</source>
          <target state="translated">- или -</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
          <source>The type of the source <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> cannot be cast automatically to the type of the destination <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</source>
          <target state="translated">Тип исходного массива <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> не может быть автоматически приведен к типу массива назначения <ph id="ph2">&lt;paramref name="array" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Gets a value indicating whether access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe).</source>
          <target state="translated">Возвращает значение, показывающее, является ли доступ к коллекции <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> синхронизированным (потокобезопасным).</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if access to the <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> is synchronized (thread safe); otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph>, если доступ к классу <ph id="ph2">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph> является синхронизированным (потокобезопасным); в противном случае — <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">В используемой по умолчанию реализации <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> это свойство всегда возвращает значение <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">По умолчанию реализации коллекций в <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> не синхронизированы.</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Перечисление коллекции не является потокобезопасной процедурой.</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>In the rare case where enumerations contend with write accesses, you must lock the collection during the entire enumeration.</source>
          <target state="translated">В редких случаях, когда перечисления конкурировать с доступом для записи необходимо заблокировать коллекцию на все время перечисления.</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Возвращает объект, который может использоваться для синхронизации доступа к <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">Синхронизация действует только в том случае, если все потоки блокируют данный объект перед доступом к коллекции.</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Получение значения данного свойства является операцией порядка сложности O(1).</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Gets an object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Получает объект, с помощью которого можно синхронизировать доступ к коллекции <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>An object that can be used to synchronize access to the <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</source>
          <target state="translated">Объект, который может использоваться для синхронизации доступа к <ph id="ph1">&lt;see cref="T:System.Collections.ICollection" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>In the default implementation of <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, this property always returns the current instance.</source>
          <target state="translated">В используемой по умолчанию реализации <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> это свойство всегда возвращает текущий экземпляр.</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">По умолчанию реализации коллекций в <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> не синхронизированы.</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">Перечисление коллекции не является потокобезопасной процедурой.</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления.</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> returns an object that can be used to synchronize access to the <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> Возвращает объект, который может использоваться для синхронизации доступа к <ph id="ph2">&lt;xref:System.Collections.ICollection&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Synchronization is effective only if all threads lock this object before accessing the collection.</source>
          <target state="translated">Синхронизация действует только в том случае, если все потоки блокируют данный объект перед доступом к коллекции.</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>The following code shows the use of the <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> property for C#, C++, and Visual Basic.</source>
          <target state="translated">В следующем коде показано использование <ph id="ph1">&lt;xref:System.Collections.ICollection.SyncRoot%2A&gt;</ph> свойство для C#, C++ и Visual Basic.</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
          <source>Retrieving the value of this property is an O(1) operation.</source>
          <target state="translated">Получение значения данного свойства является операцией порядка сложности O(1).</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Returns an enumerator that iterates through a collection.</source>
          <target state="translated">Возвращает перечислитель, который осуществляет итерацию по коллекции.</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph> that can be used to iterate through the collection.</source>
          <target state="translated">Объект <ph id="ph1">&lt;see cref="T:System.Collections.IEnumerator" /&gt;</ph>, который может использоваться для итерации элементов коллекции.</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The <ph id="ph1">`foreach`</ph> statement of the C# language (<ph id="ph2">`for each`</ph> in C++, <ph id="ph3">`For Each`</ph> in Visual Basic) hides the complexity of the enumerators.</source>
          <target state="translated"><ph id="ph1">`foreach`</ph> Инструкции языка C# (<ph id="ph2">`for each`</ph> в C++ <ph id="ph3">`For Each`</ph> в Visual Basic) позволяет скрыть сложный механизм перечислителей.</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, using <ph id="ph1">`foreach`</ph> is recommended, instead of directly manipulating the enumerator.</source>
          <target state="translated">Поэтому рекомендуется вместо непосредственного использования перечислителя применять ключевое слово <ph id="ph1">`foreach`</ph>.</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</source>
          <target state="translated">Перечислители могут использоваться для чтения данных в коллекции, но не для ее изменения.</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Initially, the enumerator is positioned before the first element in the collection.</source>
          <target state="translated">Изначально перечислитель располагается перед первым элементом коллекции.</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> also brings the enumerator back to this position.</source>
          <target state="translated">Метод <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> также переводит перечислитель в эту позицию.</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>At this position, <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">В этой позиции значение свойства <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> не определено.</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Therefore, you must call <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> to advance the enumerator to the first element of the collection before reading the value of <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</source>
          <target state="translated">Поэтому необходимо вызвать метод <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>, чтобы переместить перечислитель к первому элементу коллекции до считывания значения свойства <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> returns the same object until either <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> is called.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> возвращает тот же объект, пока не будет вызван метод <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> или <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> sets <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the next element.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> задает <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> в качестве значения для следующего элемента.</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> passes the end of the collection, the enumerator is positioned after the last element in the collection and <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returns <ph id="ph3">`false`</ph>.</source>
          <target state="translated">Если <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> проходит в конец коллекции, перечислитель помещается за последним элементом в коллекции и <ph id="ph2">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> возвращает <ph id="ph3">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>When the enumerator is at this position, subsequent calls to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> also return <ph id="ph2">`false`</ph>.</source>
          <target state="translated">Если перечислитель находится в этой позиции, последующие вызовы <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> также возвращают <ph id="ph2">`false`</ph>.</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If the last call to <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> returned <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> is undefined.</source>
          <target state="translated">Если последний вызов метода <ph id="ph1">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph> возвращается <ph id="ph2">`false`</ph>, <ph id="ph3">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> не определено.</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To set <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> to the first element of the collection again, you can call <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> followed by <ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</source>
          <target state="translated">Чтобы снова задать в качестве значения свойства <ph id="ph1">&lt;xref:System.Collections.IEnumerator.Current%2A&gt;</ph> первый элемент коллекции, можно последовательно вызвать методы <ph id="ph2">&lt;xref:System.Collections.IEnumerator.Reset%2A&gt;</ph> и<ph id="ph3">&lt;xref:System.Collections.IEnumerator.MoveNext%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>An enumerator remains valid as long as the collection remains unchanged.</source>
          <target state="translated">Перечислитель остается действительным, пока коллекция не изменяется.</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</source>
          <target state="translated">Если в коллекцию вносятся изменения, например добавляются, изменяются или удаляются элементы, перечислитель становится недействительным без возможности восстановление, а его поведение не определено.</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.</source>
          <target state="translated">У перечислителя нет эксклюзивного доступа к коллекции, поэтому перечисление коллекции не является потокобезопасной процедурой.</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.</source>
          <target state="translated">Чтобы гарантировать потокобезопасность, можно заблокировать коллекцию на время всего перечисления.</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</source>
          <target state="translated">Чтобы разрешить доступ к коллекции из нескольких потоков для чтения и записи, необходимо реализовать собственную синхронизацию.</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>Default implementations of collections in <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> are not synchronized.</source>
          <target state="translated">По умолчанию реализации коллекций в <ph id="ph1">&lt;xref:System.Collections.Generic?displayProperty=nameWithType&gt;</ph> не синхронизированы.</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
          <source>This method is an O(1) operation.</source>
          <target state="translated">Этот метод является операцией o(1).</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>Copies the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> to a new array.</source>
          <target state="translated">Копирует <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph> в новый массив.</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>A new array containing copies of the elements of the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</source>
          <target state="translated">Новый массив, содержащий копии элементов <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</source>
          <target state="translated">Элементы копируются в массив по последним пришел первым вышел (LIFO), аналогично порядку элементов, которые возвращаются с помощью последовательности вызовов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Этот метод является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The following code example demonstrates several methods of the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> generic class, including the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method.</source>
          <target state="translated">В следующем примере кода показано несколько методов <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> универсального класса, включая <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The code example creates a stack of strings with default capacity and uses the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> method to push five strings onto the stack.</source>
          <target state="translated">В примере кода создается стек строк с емкостью по умолчанию и использует <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Push%2A&gt;</ph> метод пять строк в стек.</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the stack are enumerated, which does not change the state of the stack.</source>
          <target state="translated">Выполняется перечисление элементов стека, что не изменяет состояние стека.</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop the first string off the stack.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> Метод используется для раскрытия первая строка из стека.</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> method is used to look at the next item on the stack, and then the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> method is used to pop it off.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Peek%2A&gt;</ph> Метод используется для просмотра следующего элемента в стеке, а затем <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Pop%2A&gt;</ph> метод используется для вывода его из системы.</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> method is used to create an array and copy the stack elements to it, then the array is passed to the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor that takes <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, creating a copy of the stack with the order of the elements reversed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.ToArray%2A&gt;</ph> Метод используется для создания массива и копирование элементов стека в него, а затем передается массив <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> конструктор, принимающий <ph id="ph3">&lt;xref:System.Collections.Generic.IEnumerable%601&gt;</ph>, создав копию стека с порядок элементов в обратном направлении.</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The elements of the copy are displayed.</source>
          <target state="translated">Отображаются элементы копии.</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>An array twice the size of the stack is created, and the <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> method is used to copy the array elements beginning at the middle of the array.</source>
          <target state="translated">Массив дважды размер стека создается и <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.CopyTo%2A&gt;</ph> метод используется для копирования элементов массива, начиная с середины массива.</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> constructor is used again to create a copy of the stack with the order of elements reversed; thus, the three null elements are at the end.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.%23ctor%2A&gt;</ph> Конструктор снова используется для создания копии стека с порядок элементов в обратном направлении; таким образом, три элемента null в конце.</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.ToArray">
          <source>The <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> method is used to show that the string "four" is in the first copy of the stack, after which the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method clears the copy and the <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> property shows that the stack is empty.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601.Contains%2A&gt;</ph> Метод используется для отображения, строку «4» находится в первой копии стека, после чего <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод очищает копирования и <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph> свойство показывает, что стек пуст.</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Sets the capacity to the actual number of elements in the <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, if that number is less than 90 percent of current capacity.</source>
          <target state="translated">Устанавливает емкость равной фактическому количеству элементов в <ph id="ph1">&lt;see cref="T:System.Collections.Generic.Stack`1" /&gt;</ph>, если это количество составляет менее 90 процентов текущей емкости.</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</source>
          <target state="translated">Этот метод можно использовать для минимизации издержек коллекцией памяти, если новые элементы добавляются в коллекцию.</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>The cost of reallocating and copying a large <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> can be considerable, however, so the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method does nothing if the list is at more than 90 percent of capacity.</source>
          <target state="translated">Стоимость перераспределение и копирование больших <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> могут быть значительными, тем не менее, поэтому <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> метод не выполняет никаких действий, если список находится на более 90% от общей мощности.</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This avoids incurring a large reallocation cost for a relatively small gain.</source>
          <target state="translated">Это позволяет избежать затрат на больших перераспределение при относительно небольшом выигрыше.</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>This method is an O(<ph id="ph1">`n`</ph>) operation, where <ph id="ph2">`n`</ph> is <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</source>
          <target state="translated">Этот метод является операцией O (<ph id="ph1">`n`</ph>) операции, где <ph id="ph2">`n`</ph> — <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.Count%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>To reset a <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to its initial state, call the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> method before calling <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> method.</source>
          <target state="translated">Чтобы сбросить <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> в исходное состояние, вызовите <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601.Clear%2A&gt;</ph> метод перед вызовом метода <ph id="ph3">&lt;xref:System.Collections.Generic.Stack%601.TrimExcess%2A&gt;</ph> метод.</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Collections.Generic.Stack`1.TrimExcess">
          <source>Trimming an empty <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> sets the capacity of the <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> to the default capacity.</source>
          <target state="translated">Удаление пустой <ph id="ph1">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> задает емкость объекта <ph id="ph2">&lt;xref:System.Collections.Generic.Stack%601&gt;</ph> емкость по умолчанию.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>