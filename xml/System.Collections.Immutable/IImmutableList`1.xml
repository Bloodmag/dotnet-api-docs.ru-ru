<Type Name="IImmutableList&lt;T&gt;" FullName="System.Collections.Immutable.IImmutableList&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="bca0299bca249ee3c5637b75d1e9d7432f085369" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52252095" /></Metadata><TypeSignature Language="C#" Value="public interface IImmutableList&lt;T&gt; : System.Collections.Generic.IEnumerable&lt;T&gt;, System.Collections.Generic.IReadOnlyCollection&lt;T&gt;, System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IImmutableList`1&lt;T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyCollection`1&lt;!T&gt;, class System.Collections.Generic.IReadOnlyList`1&lt;!T&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Collections.Immutable.IImmutableList`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IImmutableList(Of T)&#xA;Implements IEnumerable(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IImmutableList : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Collections::Generic::IReadOnlyCollection&lt;T&gt;, System::Collections::Generic::IReadOnlyList&lt;T&gt;" />
  <TypeSignature Language="F#" Value="type IImmutableList&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IEnumerable&#xA;    interface IReadOnlyCollection&lt;'T&gt;&#xA;    interface IReadOnlyList&lt;'T&gt;" />
  <AssemblyInfo>
    <AssemblyName>System.Collections.Immutable</AssemblyName>
    <AssemblyVersion>1.2.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
    <AssemblyVersion>1.2.2.0</AssemblyVersion>
    <AssemblyVersion>1.2.3.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyCollection&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.Generic.IReadOnlyList&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T"><span data-ttu-id="9536d-101">Тип элементов в списке.</span><span class="sxs-lookup"><span data-stu-id="9536d-101">The type of elements in the list.</span></span></typeparam>
    <summary><span data-ttu-id="9536d-102">Представляет список элементов, которые невозможно изменить.</span><span class="sxs-lookup"><span data-stu-id="9536d-102">Represents a list of elements that cannot be modified.</span></span>  
  
 <span data-ttu-id="9536d-103">**Пакет NuGet**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">сведения о неизменяемых коллекциях и способах их установки</see>)</span><span class="sxs-lookup"><span data-stu-id="9536d-103">**NuGet package**: <see href="https://www.nuget.org/packages/System.Collections.Immutable/">System.Collections.Immutable</see> (<see href="https://docs.microsoft.com/dotnet/api/system.collections.immutable?#remarks">about immutable collections and how to install</see>)</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9536d-104">При добавлении или удалении элементов из <xref:System.Collections.Immutable.IImmutableList%601>, создается копия исходный список, с учетом применения изменений...</span><span class="sxs-lookup"><span data-stu-id="9536d-104">When you add or remove items from an <xref:System.Collections.Immutable.IImmutableList%601>, a copy of the original list is created, with the changes applied..</span></span> <span data-ttu-id="9536d-105">Добавочные изменения в список совместно использовать столько памяти, как можно с более ранними версиями списка и включите сбор мусора для очистки любой уникальный список данных, которые больше не приведена ссылка.</span><span class="sxs-lookup"><span data-stu-id="9536d-105">Incremental changes to a list share as much memory as possible with earlier versions of a list and enable garbage collection to clean up any unique list data that is no longer being referenced.</span></span>  
  
 <span data-ttu-id="9536d-106">Чтобы создать новый список, используйте метод Create.</span><span class="sxs-lookup"><span data-stu-id="9536d-106">To create a new list, use the Create method.</span></span>  
  
 <span data-ttu-id="9536d-107"><xref:System.Collections.Immutable.IImmutableList%601> Не имеет открытого конструктора, как это создаст пустой неизменяемый список.</span><span class="sxs-lookup"><span data-stu-id="9536d-107">The <xref:System.Collections.Immutable.IImmutableList%601> has no public constructor, as this would create an empty immutable list.</span></span> <span data-ttu-id="9536d-108">Следует создать новый список с помощью метода Create.</span><span class="sxs-lookup"><span data-stu-id="9536d-108">You should create a new list using the Create method.</span></span> <span data-ttu-id="9536d-109">Можно добавить новые элементы к копии исходного списка с помощью <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, и <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="9536d-109">You can add new items to a copy of the original list using the <xref:System.Collections.Immutable.ImmutableList%601.Add%2A>, and <xref:System.Collections.Immutable.ImmutableList%601.AddRange%2A> methods.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Add (T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Add(!T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Add(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Add(T value);" />
      <MemberSignature Language="F#" Value="abstract member Add : 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Add value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9536d-110">Объект, который нужно добавить в список.</span><span class="sxs-lookup"><span data-stu-id="9536d-110">The object to add to the list.</span></span></param>
        <summary><span data-ttu-id="9536d-111">Создает копию списка и добавляет указанный объект в ее конец.</span><span class="sxs-lookup"><span data-stu-id="9536d-111">Makes a copy of the list, and adds the specified object to the end of the  copied list.</span></span></summary>
        <returns><span data-ttu-id="9536d-112">Новый список, в который добавлен указанный объект, или исходный список, если такой объект в нем уже есть.</span><span class="sxs-lookup"><span data-stu-id="9536d-112">A new list with the object added, or this list if the object is already in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; AddRange (System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; AddRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.AddRange(System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function AddRange (items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ AddRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="9536d-113">Объект, который нужно добавить в список.</span><span class="sxs-lookup"><span data-stu-id="9536d-113">The objects to add to the list.</span></span></param>
        <summary><span data-ttu-id="9536d-114">Создает копию списка и добавляет указанные объекты в ее конец.</span><span class="sxs-lookup"><span data-stu-id="9536d-114">Makes a copy of the list and adds the specified objects to the end of the copied list.</span></span></summary>
        <returns><span data-ttu-id="9536d-115">Новый список, в который добавлены указанные элементы, или исходный список, если такие элементы в нем уже есть.</span><span class="sxs-lookup"><span data-stu-id="9536d-115">A new list with the elements added, or this list if the elements already exist in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Function Clear () As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9536d-116">Создает список, из которого удалены все элементы и в котором используется те же правила сортировки и упорядочения, что и в исходном списке.</span><span class="sxs-lookup"><span data-stu-id="9536d-116">Creates  a list with all the items removed, but with the same sorting and ordering semantics as this list.</span></span></summary>
        <returns><span data-ttu-id="9536d-117">Пустой список с теми же правилами сортировки и упорядочения, что и в исходном экземпляре.</span><span class="sxs-lookup"><span data-stu-id="9536d-117">An empty list that has the same sorting and ordering semantics as this instance.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.IndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.IndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="9536d-118">Объект для поиска в <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-118">The object to locate in the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span> <span data-ttu-id="9536d-119">Для ссылочных типов допускается значение null.</span><span class="sxs-lookup"><span data-stu-id="9536d-119">This value can be null for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="9536d-120">Отсчитываемый от нуля индекс начальной позиции поиска.</span><span class="sxs-lookup"><span data-stu-id="9536d-120">The zero-based starting indes of the search.</span></span> <span data-ttu-id="9536d-121">Значение 0 (ноль) действительно в пустом списке.</span><span class="sxs-lookup"><span data-stu-id="9536d-121">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="9536d-122">Число элементов в диапазоне, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="9536d-122">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="9536d-123">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-123">The equality comparer to use to locate <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="9536d-124">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс первого вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, начинающемся с заданного индекса и содержащем указанное число элементов.</span><span class="sxs-lookup"><span data-stu-id="9536d-124">Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at the specified index and contains the specified number of elements.</span></span></summary>
        <returns><span data-ttu-id="9536d-125">Отсчитываемый от нуля индекс первого вхождения объекта <paramref name="item" /> в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, который начинается с позиции <paramref name="index" /> и содержит <paramref name="count" /> элементов, если искомый объект найден; в противном случае — значение –1.</span><span class="sxs-lookup"><span data-stu-id="9536d-125">The zero-based index of the first occurrence of <paramref name="item" /> within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that starts at <paramref name="index" /> and contains <paramref name="count" /> number of elements if found; otherwise -1.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Insert (int index, T element);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Insert(int32 index, !T element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Insert(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (index As Integer, element As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Insert(int index, T element);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Insert (index, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="element" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9536d-126">Отсчитываемый с нуля индекс, по которому нужно вставить значение.</span><span class="sxs-lookup"><span data-stu-id="9536d-126">The zero-based index at which to insert the value.</span></span></param>
        <param name="element"><span data-ttu-id="9536d-127">Вставляемый объект.</span><span class="sxs-lookup"><span data-stu-id="9536d-127">The object to insert.</span></span></param>
        <summary><span data-ttu-id="9536d-128">Вставляет указанный элемент в неизменяемый список по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="9536d-128">Inserts the specified element at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="9536d-129">Новый неизменяемый список с указанным элементом.</span><span class="sxs-lookup"><span data-stu-id="9536d-129">A new immutable list that includes the specified element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; InsertRange (int index, System.Collections.Generic.IEnumerable&lt;T&gt; items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; InsertRange(int32 index, class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function InsertRange (index As Integer, items As IEnumerable(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ InsertRange(int index, System::Collections::Generic::IEnumerable&lt;T&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member InsertRange : int * seq&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.InsertRange (index, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9536d-130">Отсчитываемый от нуля индекс места вставки новых элементов.</span><span class="sxs-lookup"><span data-stu-id="9536d-130">The zero-based index at which the new elements should be inserted.</span></span></param>
        <param name="items"><span data-ttu-id="9536d-131">Вставляемые элементы.</span><span class="sxs-lookup"><span data-stu-id="9536d-131">The elements to insert.</span></span></param>
        <summary><span data-ttu-id="9536d-132">Вставляет указанные элементы в неизменяемый список по указанному индексу.</span><span class="sxs-lookup"><span data-stu-id="9536d-132">Inserts the specified elements at the specified index in the immutable list.</span></span></summary>
        <returns><span data-ttu-id="9536d-133">Новый неизменяемый список с указанными элементами.</span><span class="sxs-lookup"><span data-stu-id="9536d-133">A new immutable list that includes the specified elements.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastIndexOf">
      <MemberSignature Language="C#" Value="public int LastIndexOf (T item, int index, int count, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 LastIndexOf(!T item, int32 index, int32 count, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.LastIndexOf(`0,System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function LastIndexOf (item As T, index As Integer, count As Integer, equalityComparer As IEqualityComparer(Of T)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LastIndexOf(T item, int index, int count, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member LastIndexOf : 'T * int * int * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; int" Usage="iImmutableList.LastIndexOf (item, index, count, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="item"><span data-ttu-id="9536d-134">Объект, который нужно найти в списке.</span><span class="sxs-lookup"><span data-stu-id="9536d-134">The object to locate in the list.</span></span> <span data-ttu-id="9536d-135">Для ссылочных типов допускается значение <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-135">The value can be <see langword="null" /> for reference types.</span></span></param>
        <param name="index"><span data-ttu-id="9536d-136">Индекс (с нуля) начальной позиции поиска.</span><span class="sxs-lookup"><span data-stu-id="9536d-136">The zero-based starting index of the search.</span></span> <span data-ttu-id="9536d-137">Значение 0 (ноль) действительно в пустом списке.</span><span class="sxs-lookup"><span data-stu-id="9536d-137">0 (zero) is valid in an empty list.</span></span></param>
        <param name="count"><span data-ttu-id="9536d-138">Число элементов в диапазоне, в котором выполняется поиск.</span><span class="sxs-lookup"><span data-stu-id="9536d-138">The number of elements in the section to search.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="9536d-139">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="item" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-139">The equality comparer to match <paramref name="item" />.</span></span></param>
        <summary><span data-ttu-id="9536d-140">Выполняет поиск указанного объекта и возвращает отсчитываемый от нуля индекс последнего вхождения в диапазоне элементов списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />, содержащем указанное число элементов и заканчивающемся в позиции с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="9536d-140">Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <see cref="T:System.Collections.Immutable.IImmutableList`1" /> that contains the specified number of elements and ends at the specified index.</span></span></summary>
        <returns><span data-ttu-id="9536d-141">Возвращает <see cref="T:System.Int32" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-141">Returns <see cref="T:System.Int32" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Remove (T value, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Remove(!T value, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Remove(`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Remove (value As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Remove(T value, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Remove : 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Remove (value, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9536d-142">Объект, который нужно удалить из списка.</span><span class="sxs-lookup"><span data-stu-id="9536d-142">The object to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="9536d-143">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-143">The equality comparer to use to locate <paramref name="value" />.</span></span></param>
        <summary><span data-ttu-id="9536d-144">Удаляет первое вхождение указанного объекта из неизменяемого списка.</span><span class="sxs-lookup"><span data-stu-id="9536d-144">Removes the first occurrence of a specified object from this immutable list.</span></span></summary>
        <returns><span data-ttu-id="9536d-145">Возвращает новый список, из которого удален указанный объект.</span><span class="sxs-lookup"><span data-stu-id="9536d-145">Returns a new list with the specified object removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAll">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAll (Predicate&lt;T&gt; match);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAll(class System.Predicate`1&lt;!T&gt; match) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAll(System.Predicate{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAll (match As Predicate(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAll(Predicate&lt;T&gt; ^ match);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAll : Predicate&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAll match" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="match" Type="System.Predicate&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="match"><span data-ttu-id="9536d-146">Делегат, определяющий условия удаления элементов.</span><span class="sxs-lookup"><span data-stu-id="9536d-146">The delegate that defines the conditions of the elements to remove.</span></span></param>
        <summary><span data-ttu-id="9536d-147">Удаляет все элементы, удовлетворяющие условиям указанного предиката.</span><span class="sxs-lookup"><span data-stu-id="9536d-147">Removes all the elements that match the conditions defined by the specified predicate.</span></span></summary>
        <returns><span data-ttu-id="9536d-148">Новый неизменяемый список, из которого удалены указанные элементы.</span><span class="sxs-lookup"><span data-stu-id="9536d-148">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveAt (index As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9536d-149">Индекс элемента, который должен быть удален.</span><span class="sxs-lookup"><span data-stu-id="9536d-149">The index of the element to remove.</span></span></param>
        <summary><span data-ttu-id="9536d-150">Удаляет из неизменяемого списка элемент с указанным индексом.</span><span class="sxs-lookup"><span data-stu-id="9536d-150">Removes the element at the specified index of the immutable list.</span></span></summary>
        <returns><span data-ttu-id="9536d-151">Новый список, из которого удален указанный элемент.</span><span class="sxs-lookup"><span data-stu-id="9536d-151">A new list with the element removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (System.Collections.Generic.IEnumerable&lt;T&gt; items, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(class System.Collections.Generic.IEnumerable`1&lt;!T&gt; items, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (items As IEnumerable(Of T), equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(System::Collections::Generic::IEnumerable&lt;T&gt; ^ items, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : seq&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (items, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="items"><span data-ttu-id="9536d-152">Объект, который нужно удалить из списка.</span><span class="sxs-lookup"><span data-stu-id="9536d-152">The objects to remove from the list.</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="9536d-153">Функция сравнения на равенство, которую нужно использовать для сравнения объекта <paramref name="items" /> с элементами списка.</span><span class="sxs-lookup"><span data-stu-id="9536d-153">The equality comparer to use to determine if <paramref name="items" /> match any objects in the list.</span></span></param>
        <summary><span data-ttu-id="9536d-154">Удаляет из списка указанный объект.</span><span class="sxs-lookup"><span data-stu-id="9536d-154">Removes the specified object from the list.</span></span></summary>
        <returns><span data-ttu-id="9536d-155">Новый неизменяемый список, из которого удалены указанные элементы, если для объекта <paramref name="items" /> были найдены совпадения.</span><span class="sxs-lookup"><span data-stu-id="9536d-155">A new immutable list with the specified objects removed, if <paramref name="items" /> matched objects in the list.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; RemoveRange (int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; RemoveRange(int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.RemoveRange(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function RemoveRange (index As Integer, count As Integer) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ RemoveRange(int index, int count);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRange : int * int -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.RemoveRange (index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9536d-156">Отсчитываемый от нуля индекс начала диапазона элементов, которые требуется удалить.</span><span class="sxs-lookup"><span data-stu-id="9536d-156">The zero-based starting index of the range of elements to remove.</span></span></param>
        <param name="count"><span data-ttu-id="9536d-157">Число удаляемых элементов.</span><span class="sxs-lookup"><span data-stu-id="9536d-157">The number of elements to remove.</span></span></param>
        <summary><span data-ttu-id="9536d-158">Удаляет диапазон элементов из списка <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-158">Removes a range of elements from the <see cref="T:System.Collections.Immutable.IImmutableList`1" />.</span></span></summary>
        <returns><span data-ttu-id="9536d-159">Новый неизменяемый список, из которого удалены указанные элементы.</span><span class="sxs-lookup"><span data-stu-id="9536d-159">A new immutable list with the elements removed.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Replace">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; Replace (T oldValue, T newValue, System.Collections.Generic.IEqualityComparer&lt;T&gt; equalityComparer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; Replace(!T oldValue, !T newValue, class System.Collections.Generic.IEqualityComparer`1&lt;!T&gt; equalityComparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.Replace(`0,`0,System.Collections.Generic.IEqualityComparer{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function Replace (oldValue As T, newValue As T, equalityComparer As IEqualityComparer(Of T)) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ Replace(T oldValue, T newValue, System::Collections::Generic::IEqualityComparer&lt;T&gt; ^ equalityComparer);" />
      <MemberSignature Language="F#" Value="abstract member Replace : 'T * 'T * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.Replace (oldValue, newValue, equalityComparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldValue" Type="T" />
        <Parameter Name="newValue" Type="T" />
        <Parameter Name="equalityComparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="oldValue"><span data-ttu-id="9536d-160">Элемент, который нужно заменить.</span><span class="sxs-lookup"><span data-stu-id="9536d-160">The element to be replaced.</span></span></param>
        <param name="newValue"><span data-ttu-id="9536d-161">Элемент, которым нужно заменить первое вхождение объекта <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-161">The element to replace the  the first occurrence of <paramref name="oldValue" /> with</span></span></param>
        <param name="equalityComparer"><span data-ttu-id="9536d-162">Функция сравнения на равенство, которую нужно использовать для поиска объекта <paramref name="oldValue" />.</span><span class="sxs-lookup"><span data-stu-id="9536d-162">The equality comparer to use for matching <paramref name="oldValue" />.</span></span></param>
        <summary><span data-ttu-id="9536d-163">Возвращает новый список, в котором первый совпадающий элемент заменен указанным элементом.</span><span class="sxs-lookup"><span data-stu-id="9536d-163">Returns a new list with the first matching element in the list replaced with the specified element.</span></span></summary>
        <returns><span data-ttu-id="9536d-164">Новый список, который содержит элемент <paramref name="newValue" />, даже если объекты <paramref name="oldvalue" /> и <paramref name="newValue" /> идентичны.</span><span class="sxs-lookup"><span data-stu-id="9536d-164">A new list that contains <paramref name="newValue" />, even if <paramref name="oldvalue" /> is the same as <paramref name="newValue" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9536d-165"><paramref name="oldValue" /> не существует в списке.</span><span class="sxs-lookup"><span data-stu-id="9536d-165"><paramref name="oldValue" /> does not exist in the list.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public System.Collections.Immutable.IImmutableList&lt;T&gt; SetItem (int index, T value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Immutable.IImmutableList`1&lt;!T&gt; SetItem(int32 index, !T value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Collections.Immutable.IImmutableList`1.SetItem(System.Int32,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function SetItem (index As Integer, value As T) As IImmutableList(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Immutable::IImmutableList&lt;T&gt; ^ SetItem(int index, T value);" />
      <MemberSignature Language="F#" Value="abstract member SetItem : int * 'T -&gt; System.Collections.Immutable.IImmutableList&lt;'T&gt;" Usage="iImmutableList.SetItem (index, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Collections.Immutable</AssemblyName>
        <AssemblyVersion>1.2.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
        <AssemblyVersion>1.2.2.0</AssemblyVersion>
        <AssemblyVersion>1.2.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Immutable.IImmutableList&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="T" />
      </Parameters>
      <Docs>
        <param name="index"><span data-ttu-id="9536d-166">Позиция элемента, который нужно заменить.</span><span class="sxs-lookup"><span data-stu-id="9536d-166">The position in the list of the element to replace.</span></span></param>
        <param name="value"><span data-ttu-id="9536d-167">Элемент, которым нужно заменить старый элемент.</span><span class="sxs-lookup"><span data-stu-id="9536d-167">The element to replace the old element with.</span></span></param>
        <summary><span data-ttu-id="9536d-168">Заменяет элемент списка в заданной позиции указанным элементом.</span><span class="sxs-lookup"><span data-stu-id="9536d-168">Replaces an element in the list at a given position with the specified element.</span></span></summary>
        <returns><span data-ttu-id="9536d-169">Новый список, который содержит новый элемент, даже если он идентичен элементу в указанной позиции.</span><span class="sxs-lookup"><span data-stu-id="9536d-169">A new list that contains the new element, even if the element at the specified location is the same as the new element.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>