<Type Name="ReflectionModelServices" FullName="System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1a4d3b8e3f924b79615c212cabd990d42339a305" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class ReflectionModelServices" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ReflectionModelServices extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices" />
  <TypeSignature Language="VB.NET" Value="Public Class ReflectionModelServices" />
  <TypeSignature Language="C++ CLI" Value="public ref class ReflectionModelServices abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="ec25a-101">Предоставляет методы расширения для создания и извлечения частей, основанных на отражении.</span>
      <span class="sxs-lookup">
        <span data-stu-id="ec25a-101">Provides extension methods to create and retrieve reflection-based parts.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateExportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ExportDefinition CreateExportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo exportingMember, string contractName, Lazy&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; metadata, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ExportDefinition CreateExportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo exportingMember, string contractName, class System.Lazy`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; metadata, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateExportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateExportDefinition (exportingMember As LazyMemberInfo, contractName As String, metadata As Lazy(Of IDictionary(Of String, Object)), origin As ICompositionElement) As ExportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ExportDefinition ^ CreateExportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo exportingMember, System::String ^ contractName, Lazy&lt;System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ metadata, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ExportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="metadata" Type="System.Lazy&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="exportingMember">
          <span data-ttu-id="ec25a-102">Экспортируемый член.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-102">The member to export.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="ec25a-103">Имя контракта, используемого для экспорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-103">The contract name to use for the export.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="ec25a-104">Метаданные для экспорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-104">The metadata for the export.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-105">Объект, от которого происходит экспорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-105">The object that the export originates from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-106">Создает определение экспорта из указанного члена, используя заданные имя контракта, метаданные и источник.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-106">Creates an export definition from the specified member, with the specified contract name, metadata, and origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-107">Определение экспорта, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-107">An export definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateImportDefinition">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="ec25a-108">Создает определение импорта для участника или параметра.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-108">Creates an import definition for a member or parameter.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (Lazy&lt;System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (parameter As Lazy(Of ParameterInfo), contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, requiredCreationPolicy As CreationPolicy, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ parameter, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Lazy&lt;System.Reflection.ParameterInfo&gt;" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="ec25a-109">Импортируемый параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-109">The parameter to import.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="ec25a-110">Имя контракта, используемого для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-110">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="ec25a-111">Требуемое удостоверение типа для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-111">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="ec25a-112">Требуемые метаданные для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-112">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="ec25a-113">Количество элементов импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-113">The cardinality of the import.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="ec25a-114">Одно из значений перечисления, определяющее политику создания импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-114">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-115">Объект, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-115">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-116">Создает определение импорта для указанного параметра, используя заданные имя контракта, удостоверение типа, метаданные импорта, количество элементов и политику создания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-116">Creates an import definition for the specified parameter by using the specified contract name, type identity, import metadata, cardinality, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-117">Определение импорта, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-117">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, requiredCreationPolicy As CreationPolicy, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="ec25a-118">Член, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-118">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="ec25a-119">Имя контракта, используемого для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-119">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="ec25a-120">Требуемое удостоверение типа для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-120">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="ec25a-121">Требуемые метаданные для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-121">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="ec25a-122">Количество элементов импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-122">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="ec25a-123">Значение <see langword="true" /> для указания того, что импорт разрешает рекомпозицию; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-123">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="ec25a-124">Одно из значений перечисления, определяющее политику создания импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-124">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-125">Объект, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-125">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-126">Создает определение импорта для указанного члена, используя заданные имя контракта, удостоверение типа, метаданные импорта, количество элементов, политику рекомпозиции и политику создания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-126">Creates an import definition for the specified member by using the specified contract name, type identity, import metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-127">Определение импорта, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-127">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (Lazy&lt;System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; parameter, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.Lazy{System.Reflection.ParameterInfo},System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (parameter As Lazy(Of ParameterInfo), contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ parameter, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Lazy&lt;System.Reflection.ParameterInfo&gt;" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="parameter">
          <span data-ttu-id="ec25a-128">Импортируемый параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-128">The parameter to import.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="ec25a-129">Имя контракта, используемого для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-129">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="ec25a-130">Требуемое удостоверение типа для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-130">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="ec25a-131">Требуемые метаданные для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-131">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="ec25a-132">Количество элементов импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-132">The cardinality of the import.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="ec25a-133">Одно из значений перечисления, определяющее политику создания импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-133">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="ec25a-134">Метаданные контракта</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-134">The contract metadata</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="ec25a-135">Значение <see langword="true" /> для указания того, что импорт представляет объект <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-135">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-136">Объект, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-136">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-137">Создает определение импорта для указанного параметра, используя заданные имя контракта, удостоверение типа, метаданные импорта и контракта, количество элементов и политику создания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-137">Creates an import definition for the specified parameter by using the specified contract name, type identity, import and contract metadata, cardinality, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-138">Определение импорта, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-138">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="ec25a-139">Член, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-139">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="ec25a-140">Имя контракта, используемого для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-140">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="ec25a-141">Требуемое удостоверение типа для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-141">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="ec25a-142">Требуемые метаданные для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-142">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="ec25a-143">Количество элементов импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-143">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="ec25a-144">Значение <see langword="true" /> для указания того, что импорт разрешает рекомпозицию; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-144">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="ec25a-145">Одно из значений перечисления, определяющее политику создания импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-145">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="ec25a-146">Метаданные контракта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-146">The contract metadata.</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="ec25a-147">Значение <see langword="true" /> для указания того, что импорт представляет объект <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-147">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-148">Объект, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-148">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-149">Создает определение импорта для указанного члена, используя заданные имя контракта, удостоверение типа, метаданные импорта и контракта, количество элементов, политику рекомпозиции и политику создания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-149">Creates an import definition for the specified member by using the specified contract name, type identity, import and contract metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-150">Определение импорта, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-150">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition (System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;string,Type&gt;&gt; requiredMetadata, System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, System.Collections.Generic.IDictionary&lt;string,object&gt; metadata, bool isExportFactory, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition CreateImportDefinition(valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo importingMember, string contractName, string requiredTypeIdentity, class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Collections.Generic.KeyValuePair`2&lt;string, class System.Type&gt;&gt; requiredMetadata, valuetype System.ComponentModel.Composition.Primitives.ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, valuetype System.ComponentModel.Composition.CreationPolicy requiredCreationPolicy, class System.Collections.Generic.IDictionary`2&lt;string, object&gt; metadata, bool isExportFactory, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreateImportDefinition(System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo,System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Type}},System.ComponentModel.Composition.Primitives.ImportCardinality,System.Boolean,System.Boolean,System.ComponentModel.Composition.CreationPolicy,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateImportDefinition (importingMember As LazyMemberInfo, contractName As String, requiredTypeIdentity As String, requiredMetadata As IEnumerable(Of KeyValuePair(Of String, Type)), cardinality As ImportCardinality, isRecomposable As Boolean, isPreRequisite As Boolean, requiredCreationPolicy As CreationPolicy, metadata As IDictionary(Of String, Object), isExportFactory As Boolean, origin As ICompositionElement) As ContractBasedImportDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ CreateImportDefinition(System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo importingMember, System::String ^ contractName, System::String ^ requiredTypeIdentity, System::Collections::Generic::IEnumerable&lt;System::Collections::Generic::KeyValuePair&lt;System::String ^, Type ^&gt;&gt; ^ requiredMetadata, System::ComponentModel::Composition::Primitives::ImportCardinality cardinality, bool isRecomposable, bool isPreRequisite, System::ComponentModel::Composition::CreationPolicy requiredCreationPolicy, System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^ metadata, bool isExportFactory, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importingMember" Type="System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo" />
        <Parameter Name="contractName" Type="System.String" />
        <Parameter Name="requiredTypeIdentity" Type="System.String" />
        <Parameter Name="requiredMetadata" Type="System.Collections.Generic.IEnumerable&lt;System.Collections.Generic.KeyValuePair&lt;System.String,System.Type&gt;&gt;" />
        <Parameter Name="cardinality" Type="System.ComponentModel.Composition.Primitives.ImportCardinality" />
        <Parameter Name="isRecomposable" Type="System.Boolean" />
        <Parameter Name="isPreRequisite" Type="System.Boolean" />
        <Parameter Name="requiredCreationPolicy" Type="System.ComponentModel.Composition.CreationPolicy" />
        <Parameter Name="metadata" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;" />
        <Parameter Name="isExportFactory" Type="System.Boolean" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="importingMember">
          <span data-ttu-id="ec25a-151">Член, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-151">The member to import into.</span>
          </span>
        </param>
        <param name="contractName">
          <span data-ttu-id="ec25a-152">Имя контракта, используемого для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-152">The contract name to use for the import.</span>
          </span>
        </param>
        <param name="requiredTypeIdentity">
          <span data-ttu-id="ec25a-153">Требуемое удостоверение типа для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-153">The required type identity for the import.</span>
          </span>
        </param>
        <param name="requiredMetadata">
          <span data-ttu-id="ec25a-154">Требуемые метаданные для импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-154">The required metadata for the import.</span>
          </span>
        </param>
        <param name="cardinality">
          <span data-ttu-id="ec25a-155">Количество элементов импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-155">The cardinality of the import.</span>
          </span>
        </param>
        <param name="isRecomposable">
          <span data-ttu-id="ec25a-156">Значение <see langword="true" /> для указания того, что импорт разрешает рекомпозицию; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-156">
              <see langword="true" /> to indicate that the import is recomposable; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="isPreRequisite">
          <span data-ttu-id="ec25a-157">Значение <see langword="true" /> для указания того, что импорт является необходимым условием; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-157">
              <see langword="true" /> to indicate that the import is a prerequisite; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="requiredCreationPolicy">
          <span data-ttu-id="ec25a-158">Одно из значений перечисления, определяющее политику создания импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-158">One of the enumeration values that specifies the import's creation policy.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="ec25a-159">Метаданные контракта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-159">The contract metadata.</span>
          </span>
        </param>
        <param name="isExportFactory">
          <span data-ttu-id="ec25a-160">Значение <see langword="true" /> для указания того, что импорт представляет объект <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-160">
              <see langword="true" /> to indicate that the import represents an <see cref="T:System.ComponentModel.Composition.ExportFactory`1" />; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-161">Объект, в который выполняется импорт.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-161">The object to import into.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-162">Создает определение импорта для указанного члена, используя заданные имя контракта, удостоверение типа, метаданные импорта и контракта, количество элементов, политику рекомпозиции и политику создания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-162">Creates an import definition for the specified member by using the specified contract name, type identity, import and contract metadata, cardinality, recomposition policy, and creation policy.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-163">Определение импорта, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-163">An import definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePartDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ComposablePartDefinition CreatePartDefinition (Lazy&lt;Type&gt; partType, bool isDisposalRequired, Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; imports, Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; exports, Lazy&lt;System.Collections.Generic.IDictionary&lt;string,object&gt;&gt; metadata, System.ComponentModel.Composition.Primitives.ICompositionElement origin);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ComposablePartDefinition CreatePartDefinition(class System.Lazy`1&lt;class System.Type&gt; partType, bool isDisposalRequired, class System.Lazy`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt; imports, class System.Lazy`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt; exports, class System.Lazy`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, object&gt;&gt; metadata, class System.ComponentModel.Composition.Primitives.ICompositionElement origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.CreatePartDefinition(System.Lazy{System.Type},System.Boolean,System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ImportDefinition}},System.Lazy{System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.ExportDefinition}},System.Lazy{System.Collections.Generic.IDictionary{System.String,System.Object}},System.ComponentModel.Composition.Primitives.ICompositionElement)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreatePartDefinition (partType As Lazy(Of Type), isDisposalRequired As Boolean, imports As Lazy(Of IEnumerable(Of ImportDefinition)), exports As Lazy(Of IEnumerable(Of ExportDefinition)), metadata As Lazy(Of IDictionary(Of String, Object)), origin As ICompositionElement) As ComposablePartDefinition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ CreatePartDefinition(Lazy&lt;Type ^&gt; ^ partType, bool isDisposalRequired, Lazy&lt;System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::ImportDefinition ^&gt; ^&gt; ^ imports, Lazy&lt;System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::ExportDefinition ^&gt; ^&gt; ^ exports, Lazy&lt;System::Collections::Generic::IDictionary&lt;System::String ^, System::Object ^&gt; ^&gt; ^ metadata, System::ComponentModel::Composition::Primitives::ICompositionElement ^ origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePartDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partType" Type="System.Lazy&lt;System.Type&gt;" />
        <Parameter Name="isDisposalRequired" Type="System.Boolean" />
        <Parameter Name="imports" Type="System.Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ImportDefinition&gt;&gt;" />
        <Parameter Name="exports" Type="System.Lazy&lt;System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.ExportDefinition&gt;&gt;" />
        <Parameter Name="metadata" Type="System.Lazy&lt;System.Collections.Generic.IDictionary&lt;System.String,System.Object&gt;&gt;" />
        <Parameter Name="origin" Type="System.ComponentModel.Composition.Primitives.ICompositionElement" />
      </Parameters>
      <Docs>
        <param name="partType">
          <span data-ttu-id="ec25a-164">Тип части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-164">The type of the part.</span>
          </span>
        </param>
        <param name="isDisposalRequired">
          <span data-ttu-id="ec25a-165">Значение <see langword="true" />, если для части требуется ликвидация, в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-165">
              <see langword="true" /> if the part requires disposal; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <param name="imports">
          <span data-ttu-id="ec25a-166">Коллекция импортов части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-166">A collection of the part's imports.</span>
          </span>
        </param>
        <param name="exports">
          <span data-ttu-id="ec25a-167">Коллекция экспортов части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-167">A collection of the part's exports.</span>
          </span>
        </param>
        <param name="metadata">
          <span data-ttu-id="ec25a-168">Метаданные части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-168">The part's metadata.</span>
          </span>
        </param>
        <param name="origin">
          <span data-ttu-id="ec25a-169">Источник части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-169">The part's origin.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-170">Создает определение части, используя заданные тип части, импорты, экспорты, метаданные и источник.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-170">Creates a part definition with the specified part type, imports, exports, metadata, and origin.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-171">Определение части, созданное на основе заданных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-171">A part definition created from the specified parameters.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportFactoryProductImportDefinition">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition GetExportFactoryProductImportDefinition (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition GetExportFactoryProductImportDefinition(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportFactoryProductImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::Primitives::ContractBasedImportDefinition ^ GetExportFactoryProductImportDefinition(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ContractBasedImportDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="ec25a-172">Представляемое определение импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-172">The import definition to represent.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-173">Возвращает представление определения импорта как продукт фабрики экспорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-173">Returns a representation of an import definition as an export factory product.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-174">Представление определения импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-174">The representation of the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportingMember">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetExportingMember (System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetExportingMember(class System.ComponentModel.Composition.Primitives.ExportDefinition exportDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetExportingMember(System.ComponentModel.Composition.Primitives.ExportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo GetExportingMember(System::ComponentModel::Composition::Primitives::ExportDefinition ^ exportDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exportDefinition" Type="System.ComponentModel.Composition.Primitives.ExportDefinition" />
      </Parameters>
      <Docs>
        <param name="exportDefinition">
          <span data-ttu-id="ec25a-175">Проверяемое определение экспорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-175">The export definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-176">Получает экспортирующий член из заданного определения экспорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-176">Gets the exporting member from a specified export definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-177">Член, указанный в определении экспорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-177">The member specified in the export definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec25a-178">Свойство <paramref name="exportDefinition" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-178">
              <paramref name="exportDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportingMember">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetImportingMember (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo GetImportingMember(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingMember(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::Composition::ReflectionModel::LazyMemberInfo GetImportingMember(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.ReflectionModel.LazyMemberInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="ec25a-179">Проверяемое определение импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-179">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-180">Получает импортирующий член из заданного определения импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-180">Gets the importing member from a specified import definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-181">Член, указанный в определении импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-181">The member specified in the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec25a-182">Свойство <paramref name="importDefinition" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-182">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetImportingParameter">
      <MemberSignature Language="C#" Value="public static Lazy&lt;System.Reflection.ParameterInfo&gt; GetImportingParameter (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Lazy`1&lt;class System.Reflection.ParameterInfo&gt; GetImportingParameter(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Lazy&lt;System::Reflection::ParameterInfo ^&gt; ^ GetImportingParameter(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;System.Reflection.ParameterInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="ec25a-183">Проверяемое определение импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-183">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-184">Получает импортирующий параметр из заданного определения импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-184">Gets the importing parameter from a specified import definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-185">Параметр, указанный в определении импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-185">The parameter specified in the import definition.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec25a-186">Свойство <paramref name="importDefinition" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-186">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetPartType">
      <MemberSignature Language="C#" Value="public static Lazy&lt;Type&gt; GetPartType (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Lazy`1&lt;class System.Type&gt; GetPartType(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.GetPartType(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetPartType (partDefinition As ComposablePartDefinition) As Lazy(Of Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Lazy&lt;Type ^&gt; ^ GetPartType(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;System.Type&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="ec25a-187">Проверяемое определение части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-187">The part definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-188">Получает тип части из указанного определения части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-188">Gets the type of a part from a specified part definition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-189">Тип определяемой части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-189">The type of the defined part.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec25a-190">Свойство <paramref name="partDefinition" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-190">
              <paramref name="partDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsDisposalRequired">
      <MemberSignature Language="C#" Value="public static bool IsDisposalRequired (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDisposalRequired(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsDisposalRequired(System.ComponentModel.Composition.Primitives.ComposablePartDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDisposalRequired (partDefinition As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDisposalRequired(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="ec25a-191">Проверяемая часть.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-191">The part to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-192">Определяет, требуется ли ликвидация для указанной части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-192">Determines whether the specified part requires disposal.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-193">Значение <see langword="true" />, если для части требуется ликвидация, в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-193">
              <see langword="true" /> if the part requires disposal; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec25a-194">Свойство <paramref name="partDefinition" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-194">
              <paramref name="partDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IsExportFactoryImportDefinition">
      <MemberSignature Language="C#" Value="public static bool IsExportFactoryImportDefinition (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsExportFactoryImportDefinition(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsExportFactoryImportDefinition(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsExportFactoryImportDefinition(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="ec25a-195">Проверяемое определение импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-195">The import definition to check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-196">Указывает, представляет ли указанное определение импорта фабрику экспорта (объект <see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> или <see cref="T:System.ComponentModel.Composition.ExportFactory`2" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-196">Indicates whether a specified import definition represents an export factory (<see cref="T:System.ComponentModel.Composition.ExportFactory`1" /> or <see cref="T:System.ComponentModel.Composition.ExportFactory`2" /> object).</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-197">Значение <see langword="true" />, если указанное определение импорта представляет фабрику экспорта; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-197">
              <see langword="true" /> if the specified import definition represents an export factory; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImportingParameter">
      <MemberSignature Language="C#" Value="public static bool IsImportingParameter (System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsImportingParameter(class System.ComponentModel.Composition.Primitives.ImportDefinition importDefinition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.IsImportingParameter(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsImportingParameter(System::ComponentModel::Composition::Primitives::ImportDefinition ^ importDefinition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importDefinition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="importDefinition">
          <span data-ttu-id="ec25a-198">Проверяемое определение импорта.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-198">The import definition to examine.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-199">Определяет, какой элемент представляет определение импорта: член или параметр.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-199">Determines whether an import definition represents a member or a parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-200">Значение <see langword="true" />, если определение импорта представляет параметр; в противном случае — определение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-200">
              <see langword="true" /> if the import definition represents a parameter; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="ec25a-201">Свойство <paramref name="importDefinition" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-201">
              <paramref name="importDefinition" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryMakeGenericPartDefinition">
      <MemberSignature Language="C#" Value="public static bool TryMakeGenericPartDefinition (System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition, System.Collections.Generic.IEnumerable&lt;Type&gt; genericParameters, out System.ComponentModel.Composition.Primitives.ComposablePartDefinition specialization);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryMakeGenericPartDefinition(class System.ComponentModel.Composition.Primitives.ComposablePartDefinition partDefinition, class System.Collections.Generic.IEnumerable`1&lt;class System.Type&gt; genericParameters, [out] class System.ComponentModel.Composition.Primitives.ComposablePartDefinition&amp; specialization) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.ReflectionModel.ReflectionModelServices.TryMakeGenericPartDefinition(System.ComponentModel.Composition.Primitives.ComposablePartDefinition,System.Collections.Generic.IEnumerable{System.Type},System.ComponentModel.Composition.Primitives.ComposablePartDefinition@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryMakeGenericPartDefinition (partDefinition As ComposablePartDefinition, genericParameters As IEnumerable(Of Type), ByRef specialization As ComposablePartDefinition) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryMakeGenericPartDefinition(System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ partDefinition, System::Collections::Generic::IEnumerable&lt;Type ^&gt; ^ genericParameters, [Runtime::InteropServices::Out] System::ComponentModel::Composition::Primitives::ComposablePartDefinition ^ % specialization);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partDefinition" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition" />
        <Parameter Name="genericParameters" Type="System.Collections.Generic.IEnumerable&lt;System.Type&gt;" />
        <Parameter Name="specialization" Type="System.ComponentModel.Composition.Primitives.ComposablePartDefinition&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="partDefinition">
          <span data-ttu-id="ec25a-202">Определение части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-202">The part definition.</span>
          </span>
        </param>
        <param name="genericParameters">
          <span data-ttu-id="ec25a-203">Коллекция типов для задания универсальных параметров.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-203">A collection of types to specify the generic parameters.</span>
          </span>
        </param>
        <param name="specialization">
          <span data-ttu-id="ec25a-204">Когда выполнение этого метода завершается, содержит специальное определение части.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-204">When this method returns, contains the specialized part definition.</span>
          </span>
          <span data-ttu-id="ec25a-205">Этот параметр обрабатывается как неинициализированный.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-205">This parameter is treated as uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="ec25a-206">Указывает, можно ли универсальный шаблон части специализировать предоставленными параметрами.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-206">Indicates whether a generic part definition can be specialized with the provided parameters.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="ec25a-207">Значение <see langword="true" />, если сериализация прошла успешно; в противном случае — значение <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="ec25a-207">
              <see langword="true" /> if the specialization succeeds; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>