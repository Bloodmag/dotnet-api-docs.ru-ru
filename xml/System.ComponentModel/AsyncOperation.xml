<Type Name="AsyncOperation" FullName="System.ComponentModel.AsyncOperation">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8233507e60cc21eeaa9f70d12a2ac70cc9b2b5c4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36705227" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class AsyncOperation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit AsyncOperation extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperation" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class AsyncOperation" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperation sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperation = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="11f15-101">Отслеживает время существования асинхронной операции.</span>
      <span class="sxs-lookup">
        <span data-stu-id="11f15-101">Tracks the lifetime of an asynchronous operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11f15-102">При реализации класса согласно [Обзор асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), может потребоваться отслеживать время существования каждого асинхронную операцию, вызванную в экземпляре класса.</span><span class="sxs-lookup"><span data-stu-id="11f15-102">When you implement a class according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you may need to track the lifetime of each asynchronous operation invoked on an instance of your class.</span></span> <span data-ttu-id="11f15-103"><xref:System.ComponentModel.AsyncOperation> Класс предоставляет способы отслеживания и сообщают о ходе выполнения асинхронной задачи.</span><span class="sxs-lookup"><span data-stu-id="11f15-103">The <xref:System.ComponentModel.AsyncOperation> class provides ways to track and report the progress of an asynchronous task.</span></span>  
  
 <span data-ttu-id="11f15-104">В следующем списке перечислены способы использования <xref:System.ComponentModel.AsyncOperation> объекта:</span><span class="sxs-lookup"><span data-stu-id="11f15-104">The following list identifies ways to use an <xref:System.ComponentModel.AsyncOperation> object:</span></span>  
  
-   <span data-ttu-id="11f15-105">Для отчета о ходе выполнения и промежуточные результаты клиенту, вызовите <xref:System.ComponentModel.AsyncOperation.Post%2A> из асинхронного рабочего кода.</span><span class="sxs-lookup"><span data-stu-id="11f15-105">To report progress and interim results to the client, call <xref:System.ComponentModel.AsyncOperation.Post%2A> from your asynchronous worker code.</span></span>  
  
-   <span data-ttu-id="11f15-106">Указывает, что асинхронная задача выполнена, или отменить ожидающие асинхронные задачи, вызовите <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="11f15-106">To indicate that an asynchronous task has completed, or to cancel a pending asynchronous task, call <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span>  
  
 <span data-ttu-id="11f15-107">Класс должен получить <xref:System.ComponentModel.AsyncOperation> для каждой асинхронной задачи путем вызова <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> при запуске каждой задачи.</span><span class="sxs-lookup"><span data-stu-id="11f15-107">Your class should get an <xref:System.ComponentModel.AsyncOperation> object for each asynchronous task by calling <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> when each task starts.</span></span> <span data-ttu-id="11f15-108">Чтобы разрешить клиенту провести различие отдельных асинхронных задач, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> с параметром уникальный предоставляемых клиентом маркер, который становится <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="11f15-108">To allow the client to distinguish separate asynchronous tasks, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType> takes a parameter for a unique client-provided token, which becomes the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="11f15-109">Он затем может использоваться в клиентском коде для идентификации определенного асинхронные задачи, которая вызывает события выполнения или завершения.</span><span class="sxs-lookup"><span data-stu-id="11f15-109">It can then be used by client code to identify the particular asynchronous task that is raising progress or completion events.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11f15-110">В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation> объектов для отслеживания времени существования асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-110">The following code example demonstrates using an <xref:System.ComponentModel.AsyncOperation> object to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="11f15-111">Данный пример кода является частью большего примера, приведенного для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.</span><span class="sxs-lookup"><span data-stu-id="11f15-111">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
 <span data-ttu-id="11f15-112">Полный листинг кода, в разделе [как: реализация компонента, поддерживающего асинхронную модель, основанную на событиях](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span><span class="sxs-lookup"><span data-stu-id="11f15-112">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="11f15-113">Полный листинг кода для клиентской формы, в разделе [как: реализация клиента асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="11f15-113">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <span data-ttu-id="11f15-114">
        <para>Необходимо обеспечить исполнители <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> и <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> являются асинхронными вызовами, переполнения, чтобы класс библиотеки поставщиков не нужно обращаться с потенциальной стека, если они предполагают асинхронного поведения в определенное приложение модель, которая происходит синхронно.  Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md) на основе событий.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="11f15-114">
          <para>Implementers must ensure the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> and <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocations are asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchronous behavior in a particular application model that happens to be synchronous.  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
  </Docs>
  <Members>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~AsyncOperation ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!AsyncOperation ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="asyncOperation.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11f15-115">Завершает асинхронную операцию.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-115">Finalizes the asynchronous operation.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationCompleted">
      <MemberSignature Language="C#" Value="public void OperationCompleted ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void OperationCompleted() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.OperationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Sub OperationCompleted ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OperationCompleted();" />
      <MemberSignature Language="F#" Value="member this.OperationCompleted : unit -&gt; unit" Usage="asyncOperation.OperationCompleted " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="11f15-116">Завершает время существования асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-116">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11f15-117">Вызовите <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> метод время существования асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-117">Call the <xref:System.ComponentModel.AsyncOperation.OperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="11f15-118">После вызова этого метода для конкретной задачи вызывает с соответствующим <xref:System.ComponentModel.AsyncOperation> вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="11f15-118">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> will raise an exception.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="11f15-119">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-119">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Post">
      <MemberSignature Language="C#" Value="public void Post (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Post(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Post (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Post(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.Post : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.Post (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="11f15-120">Объект <see cref="T:System.Threading.SendOrPostCallback" />, создающий оболочку делегата, который должен вызываться при завершении операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-120">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="11f15-121">Аргумент для делегата, содержащегося в параметре <c>d</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-121">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="11f15-122">Вызывает делегата для потока или контекста, соответствующего модели приложения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-122">Invokes a delegate on the thread or context appropriate for the application model.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11f15-123"><xref:System.ComponentModel.AsyncOperation.Post%2A> Метод вызывает делегат, заданный параметром `arg` параметр без прекращения выполнения асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-123">The <xref:System.ComponentModel.AsyncOperation.Post%2A> method invokes the delegate specified by the `arg` parameter without ending the lifetime of the asynchronous operation.</span></span>  
  
 <span data-ttu-id="11f15-124">Можно вызвать <xref:System.ComponentModel.AsyncOperation.Post%2A> столько раз, сколько угодно, пока не было завершено время существования асинхронной операции с помощью вызова метода <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span><span class="sxs-lookup"><span data-stu-id="11f15-124">You can call the <xref:System.ComponentModel.AsyncOperation.Post%2A> method as often as you like while the lifetime of the asynchronous operation has not been ended by a call to <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A>.</span></span> <span data-ttu-id="11f15-125">Можно использовать метод отправить отчет о ходе выполнения или промежуточные результаты обратно клиентам.</span><span class="sxs-lookup"><span data-stu-id="11f15-125">You can use the method to report progress or interim results back to clients.</span></span>  
  
 <span data-ttu-id="11f15-126">`d` Параметр, создающий оболочку делегата требуется вызван, когда требуется передачи обновления состояния асинхронной задачи.</span><span class="sxs-lookup"><span data-stu-id="11f15-126">The `d` parameter wraps the delegate you want called when you want to post an update about the status of the asynchronous task.</span></span> <span data-ttu-id="11f15-127"><xref:System.ComponentModel.AsyncOperation> Объекта убедитесь, что делегат может быть вызван в потоке или контекста, соответствующего модели приложения.</span><span class="sxs-lookup"><span data-stu-id="11f15-127">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="11f15-128">Метод при необходимости можно создать событие, которое уведомляет клиентов изменение состояния, обновление хода выполнения или новые добавочные результаты.</span><span class="sxs-lookup"><span data-stu-id="11f15-128">Your method can optionally raise an event that notifies clients of a status change, progress update, or newly available incremental results.</span></span>  
  
 <span data-ttu-id="11f15-129">`arg` Параметр должен использоваться для передачи состояния делегату, оболочкой для которого `d` параметра.</span><span class="sxs-lookup"><span data-stu-id="11f15-129">The `arg` parameter should be used to pass state to the delegate wrapped by the `d` parameter.</span></span> <span data-ttu-id="11f15-130">Он может представлять собой ссылку на <xref:System.ComponentModel.AsyncOperation>, или это может быть <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> объекта.</span><span class="sxs-lookup"><span data-stu-id="11f15-130">It might be a reference to an <xref:System.ComponentModel.AsyncOperation>, or it might be a <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> object.</span></span> <span data-ttu-id="11f15-131">Может потребоваться создать собственный класс, от <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> для предоставления дополнительного состояния хранилища.</span><span class="sxs-lookup"><span data-stu-id="11f15-131">It may be desirable to derive your own class from <xref:System.ComponentModel.ProgressChangedEventArgs?displayProperty=nameWithType> to provide additional state storage.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11f15-132">В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.Post%2A> метод для отображения хода выполнения и добавочных результатов асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-132">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.Post%2A> method for reporting progress and incremental results of an asynchronous operation.</span></span> <span data-ttu-id="11f15-133">Данный пример кода является частью большего примера, приведенного для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.</span><span class="sxs-lookup"><span data-stu-id="11f15-133">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#5)]
[!code-vb[System.ComponentModel.AsyncOperationManager#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="11f15-134">Метод <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> уже был вызван ранее для этой задачи.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-134">The <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> method has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="11f15-135">Свойство <paramref name="d" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-135">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="11f15-136">
            <para>Необходимо внести наследники <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> асинхронной, поэтому класс библиотеки поставщиков не требуется заниматься потенциальных стека вызова вызывает переполнение, если они предполагают асинхронности, но конкретную модель приложения происходит синхронно.  <block subset="none" type="note"><para> Консольные приложения не синхронизируют выполнение <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> вызовов. Это может вызвать беспорядочное возникновение событий <see langword="ProgressChanged" />. Если вы хотите получить сериализованное выполнение вызовов <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" />, реализуйте и установите класс <see cref="T:System.Threading.SynchronizationContext" />.  </para></block>  Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md) на основе событий.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-136">
              <para>Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous.  <block subset="none" type="note"><para> Console applications do not synchronize the execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls. This can cause <see langword="ProgressChanged" /> events to be raised out of order. If you wish to have serialized execution of <see cref="M:System.ComponentModel.AsyncOperation.Post(System.Threading.SendOrPostCallback,System.Object)" /> calls, implement and install a <see cref="T:System.Threading.SynchronizationContext" /> class.  </para></block>  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="PostOperationCompleted">
      <MemberSignature Language="C#" Value="public void PostOperationCompleted (System.Threading.SendOrPostCallback d, object arg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostOperationCompleted(class System.Threading.SendOrPostCallback d, object arg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PostOperationCompleted (d As SendOrPostCallback, arg As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PostOperationCompleted(System::Threading::SendOrPostCallback ^ d, System::Object ^ arg);" />
      <MemberSignature Language="F#" Value="member this.PostOperationCompleted : System.Threading.SendOrPostCallback * obj -&gt; unit" Usage="asyncOperation.PostOperationCompleted (d, arg)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="System.Threading.SendOrPostCallback" />
        <Parameter Name="arg" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="d">
          <span data-ttu-id="11f15-137">Объект <see cref="T:System.Threading.SendOrPostCallback" />, создающий оболочку делегата, который должен вызываться при завершении операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-137">A <see cref="T:System.Threading.SendOrPostCallback" /> object that wraps the delegate to be called when the operation ends.</span>
          </span>
        </param>
        <param name="arg">
          <span data-ttu-id="11f15-138">Аргумент для делегата, содержащегося в параметре <c>d</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-138">An argument for the delegate contained in the <c>d</c> parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="11f15-139">Завершает время существования асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-139">Ends the lifetime of an asynchronous operation.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11f15-140">Вызовите <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> метод время существования асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-140">Call the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="11f15-141">После вызова этого метода для конкретной задачи вызывает с соответствующим <xref:System.ComponentModel.AsyncOperation> объект вызовет исключение.</span><span class="sxs-lookup"><span data-stu-id="11f15-141">After this method is called for a particular task, calls to its corresponding <xref:System.ComponentModel.AsyncOperation> object will raise an exception.</span></span>  
  
 <span data-ttu-id="11f15-142">`d` Параметр заключает в оболочку делегата, класс вызывается после завершения времени существования задачи из-за завершения, отмены или сбоя задачи.</span><span class="sxs-lookup"><span data-stu-id="11f15-142">The `d` parameter wraps the delegate you want your class to call when the task's lifetime ends due to completion, cancellation, or failure of the task.</span></span> <span data-ttu-id="11f15-143"><xref:System.ComponentModel.AsyncOperation> Объекта убедитесь, что делегат может быть вызван в потоке или контекста, соответствующего модели приложения.</span><span class="sxs-lookup"><span data-stu-id="11f15-143">The <xref:System.ComponentModel.AsyncOperation> object will ensure that your delegate is invoked on the thread or context appropriate for the application model.</span></span> <span data-ttu-id="11f15-144">Делегат может при необходимости вызывать событие, которое уведомляет клиентов, которые завершения асинхронной задачи.</span><span class="sxs-lookup"><span data-stu-id="11f15-144">Your delegate can optionally raise an event that notifies clients that the asynchronous task's lifetime has ended.</span></span>  
  
 <span data-ttu-id="11f15-145">`arg` Параметр используется для передачи сведений о состоянии делегату завершения `d`.</span><span class="sxs-lookup"><span data-stu-id="11f15-145">The `arg` parameter is used to pass state information to the completion delegate `d`.</span></span> <span data-ttu-id="11f15-146">Можно использовать <xref:System.ComponentModel.AsyncOperation> объекта, или <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> объект в качестве значения параметра.</span><span class="sxs-lookup"><span data-stu-id="11f15-146">You can use an <xref:System.ComponentModel.AsyncOperation> object, or an <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> object as the parameter value.</span></span> <span data-ttu-id="11f15-147">Кроме того, если требуется для предоставления дополнительного состояния хранилища, можно использовать экземпляр класса, производного от <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> класса.</span><span class="sxs-lookup"><span data-stu-id="11f15-147">Alternatively, if you want to provide additional state storage, you can use an instance of a class you derive from the <xref:System.ComponentModel.AsyncCompletedEventArgs?displayProperty=nameWithType> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11f15-148">В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> метод время существования асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-148">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperation.PostOperationCompleted%2A> method to end the lifetime of an asynchronous operation.</span></span> <span data-ttu-id="11f15-149">Данный пример кода является частью большего примера, приведенного для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.</span><span class="sxs-lookup"><span data-stu-id="11f15-149">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="11f15-150">Метод <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> ранее уже вызывался для этой задачи.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-150">
              <see cref="M:System.ComponentModel.AsyncOperation.OperationCompleted" /> has been called previously for this task.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="11f15-151">Свойство <paramref name="d" /> имеет значение <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-151">
              <paramref name="d" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="11f15-152">
            <para>Необходимо внести наследники <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> асинхронной, поэтому класс библиотеки поставщиков не требуется заниматься потенциальных стека вызова вызывает переполнение, если они предполагают асинхронности, но конкретную модель приложения происходит синхронно. Метод должен интерпретироваться как вызов «прекращения выполнения», это означает, что реализация должна выполнить действия, соответствующего модели приложения. Например ASP.NET уменьшит счетчик ожидающих асинхронных операций. Это также следует разместить операцию в состояние таким образом, что все последующие вызовы в него завершится ошибкой, так как она уже завершена.  Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md) на основе событий.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-152">
              <para>Inheritors must make the <see cref="M:System.ComponentModel.AsyncOperation.PostOperationCompleted(System.Threading.SendOrPostCallback,System.Object)" /> invocation asynchronous, so that class library providers do not need to concern themselves with potential stack overflows if they assume asynchrony but a particular application model happens to be synchronous. The method should be interpreted as an "ending the lifetime" call, meaning the implementation needs to do what is appropriate for the application model. For instance, ASP.NET will decrement its count of outstanding asynchronous operations. This also should put the operation into a state such that any subsequent calls into it will fail, since it has now completed.  For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public System.Threading.SynchronizationContext SynchronizationContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext" Usage="System.ComponentModel.AsyncOperation.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="11f15-153">Возвращает объект <see cref="T:System.Threading.SynchronizationContext" />, переданный в конструктор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-153">Gets the <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="11f15-154">Объект <see cref="T:System.Threading.SynchronizationContext" />, передаваемый в конструктор.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-154">The <see cref="T:System.Threading.SynchronizationContext" /> object that was passed to the constructor.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserSuppliedState">
      <MemberSignature Language="C#" Value="public object UserSuppliedState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object UserSuppliedState" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UserSuppliedState As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ UserSuppliedState { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserSuppliedState : obj" Usage="System.ComponentModel.AsyncOperation.UserSuppliedState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="11f15-155">Возвращает или задает объект, используемый для уникальной идентификации асинхронной операции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-155">Gets or sets an object used to uniquely identify an asynchronous operation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="11f15-156">Объект состояния, переданный в вызов асинхронного метода.</span>
          <span class="sxs-lookup">
            <span data-stu-id="11f15-156">The state object passed to the asynchronous method invocation.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="11f15-157">Если ваш класс поддерживает несколько асинхронных методов или несколько вызовов одного асинхронного метода, клиентам потребуется способ определить, какая асинхронная задача вызывает события.</span><span class="sxs-lookup"><span data-stu-id="11f15-157">If your class supports multiple asynchronous methods or multiple invocations of a single asynchronous method, clients will need a way to determine which asynchronous task is raising events.</span></span> <span data-ttu-id="11f15-158">Ваш `MethodNameAsync` метод должен принимать параметр типа <xref:System.Object> , будет выступать в качестве идентификатора задачи.</span><span class="sxs-lookup"><span data-stu-id="11f15-158">Your `MethodNameAsync` method should take a parameter of type <xref:System.Object> that will act as a task ID.</span></span> <span data-ttu-id="11f15-159">Идентификатор этой задачи будет использоваться при вызове <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, метод и это свяжет идентификатор задачи клиента конкретного вызова асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-159">You will use this task ID when you call the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A?displayProperty=nameWithType>, method and this will associate the client's task ID with a particular invocation of your asynchronous operation.</span></span> <span data-ttu-id="11f15-160">Эта задача, идентификатор становится доступным через реализации <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> свойство.</span><span class="sxs-lookup"><span data-stu-id="11f15-160">This task ID is made available to your implementation through the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="11f15-161">Клиентский код должен быть осторожным при предоставлении уникальное значение для <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> свойства.</span><span class="sxs-lookup"><span data-stu-id="11f15-161">Client code must be careful to provide a unique value for the <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> property.</span></span> <span data-ttu-id="11f15-162">Неуникальные идентификаторы задач может вызвать реализация будет неправильно сообщать о ходе выполнения и другие события.</span><span class="sxs-lookup"><span data-stu-id="11f15-162">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="11f15-163">Код должен проверить идентификатора неуникального задачи и повысить <xref:System.ArgumentException> если она будет обнаружена.</span><span class="sxs-lookup"><span data-stu-id="11f15-163">Your code should check for a non-unique task ID and raise an <xref:System.ArgumentException> if one is detected.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="11f15-164">В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> для отслеживания времени существования асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="11f15-164">The following code example demonstrates using <xref:System.ComponentModel.AsyncOperation.UserSuppliedState%2A> to track the lifetime of asynchronous operations.</span></span> <span data-ttu-id="11f15-165">Данный пример кода является частью большего примера, приведенного для <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> класса.</span><span class="sxs-lookup"><span data-stu-id="11f15-165">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager?displayProperty=nameWithType> class.</span></span>  
  
  
[!code-csharp[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#4)]
[!code-vb[System.ComponentModel.AsyncOperationManager#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperationManager" />
      </Docs>
    </Member>
  </Members>
</Type>