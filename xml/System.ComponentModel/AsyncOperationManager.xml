<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9c93f-101">Обеспечивает управление параллелизмом для классов, поддерживающих вызовы асинхронных методов.</span><span class="sxs-lookup"><span data-stu-id="9c93f-101">Provides concurrency management for classes that support asynchronous method calls.</span></span> <span data-ttu-id="9c93f-102">Этот класс не наследуется.</span><span class="sxs-lookup"><span data-stu-id="9c93f-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c93f-103">Если класс должен обеспечивать асинхронное поведение в соответствии с [Обзор асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), возникает ряд проблем управления параллелизмом.</span><span class="sxs-lookup"><span data-stu-id="9c93f-103">If your class needs to provide asynchronous behavior according to the [Event-based Asynchronous Pattern Overview](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), you will encounter a number of concurrency management issues.</span></span> <span data-ttu-id="9c93f-104">К ним относится требование, чтобы убедиться, что обработчики событий вызываются из потока или контекста, соответствующего модели приложения (например, приложения Windows Forms [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] приложений, консольные приложения и т. д).</span><span class="sxs-lookup"><span data-stu-id="9c93f-104">Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] applications, console applications, and so on).</span></span> <span data-ttu-id="9c93f-105"><xref:System.ComponentModel.AsyncOperationManager> Предоставляет удобный способ создания класса, выполняется в должном порядке во всех моделях приложений, поддерживаемых [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span><span class="sxs-lookup"><span data-stu-id="9c93f-105">The <xref:System.ComponentModel.AsyncOperationManager> provides a convenient way to create a class that runs properly under all application models supported by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="9c93f-106"><xref:System.ComponentModel.AsyncOperationManager> Класса есть один метод <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, который возвращает <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> может использоваться для отслеживания длительность конкретной асинхронной задачи.</span><span class="sxs-lookup"><span data-stu-id="9c93f-106">The <xref:System.ComponentModel.AsyncOperationManager> class has one method, <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, which returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that can be used to track the duration of a particular asynchronous task.</span></span> <span data-ttu-id="9c93f-107"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Для задачи может использоваться для оповещения клиентов при ее завершении.</span><span class="sxs-lookup"><span data-stu-id="9c93f-107">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for a task can be used to alert clients when a task completes.</span></span> <span data-ttu-id="9c93f-108">Он также может использоваться для передачи обновлений хода выполнения и добавочных результатов без завершения операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-108">It can also be used to post progress updates and incremental results without terminating the operation.</span></span>  
  
 <span data-ttu-id="9c93f-109">Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели, основанной на событиях](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="9c93f-109">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c93f-110">В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperationManager> класса, чтобы создать класс, который поддерживает асинхронные операции для любой модели приложения.</span><span class="sxs-lookup"><span data-stu-id="9c93f-110">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager> class to create a class that supports asynchronous operations for any application model.</span></span> <span data-ttu-id="9c93f-111">Показано, как реализовать класс, проверяющий число, чтобы определить, является ли оно простым.</span><span class="sxs-lookup"><span data-stu-id="9c93f-111">It shows how to implement a class that tests a number to determine whether it is prime.</span></span> <span data-ttu-id="9c93f-112">Это вычисление может занять много времени, поэтому оно выполняется в отдельном потоке.</span><span class="sxs-lookup"><span data-stu-id="9c93f-112">This calculation can be time consuming, so it is done on a separate thread.</span></span> <span data-ttu-id="9c93f-113">Отчеты о ходе выполнения, добавочных результатах и уведомлений о завершении обрабатываются <xref:System.ComponentModel.AsyncOperation> класс, который гарантирует, что обработчики событий клиента вызываются в правильном потоке или контексте.</span><span class="sxs-lookup"><span data-stu-id="9c93f-113">Progress reports, incremental results, and completion notifications are handled by the <xref:System.ComponentModel.AsyncOperation> class, which ensures that the client's event handlers are called on the proper thread or context.</span></span>  
  
 <span data-ttu-id="9c93f-114">Полный листинг кода, в разделе [как: реализация компонента, поддерживающего асинхронную модель, основанную на событиях](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span><span class="sxs-lookup"><span data-stu-id="9c93f-114">For a full code listing, see [How to: Implement a Component That Supports the Event-based Asynchronous Pattern](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf).</span></span> <span data-ttu-id="9c93f-115">Полный листинг кода для клиентской формы, в разделе [как: реализация клиента асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="9c93f-115">For a full code listing of a client form, see [How to: Implement a Client of the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState"><span data-ttu-id="9c93f-116">Объект, используемый для связи элемента состояния клиента, например идентификатора задачи, с конкретной асинхронной операцией.</span><span class="sxs-lookup"><span data-stu-id="9c93f-116">An object used to associate a piece of client state, such as a task ID, with a particular asynchronous operation.</span></span></param>
        <summary><span data-ttu-id="9c93f-117">Возвращает объект <see cref="T:System.ComponentModel.AsyncOperation" /> для контроля длительности конкретной асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-117">Returns an <see cref="T:System.ComponentModel.AsyncOperation" /> for tracking the duration of a particular asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="9c93f-118">Объект <see cref="T:System.ComponentModel.AsyncOperation" />, который можно использовать для контроля длительности вызова асинхронного метода.</span><span class="sxs-lookup"><span data-stu-id="9c93f-118">An <see cref="T:System.ComponentModel.AsyncOperation" /> that you can use to track the duration of an asynchronous method invocation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c93f-119"><xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Возвращает метод <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , можно использовать для отслеживания длительность определенной асинхронной операции и предупреждения модели приложения, после завершения операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-119">The <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method returns an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes.</span></span> <span data-ttu-id="9c93f-120">Его также можно использовать для передачи обновлений хода выполнения и добавочных результатов без завершения операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-120">You can also use it to post progress updates and incremental results without terminating the operation.</span></span> <span data-ttu-id="9c93f-121"><xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Будет правильно маршалинга этих вызовов в соответствующем потоке или контексте для модели приложения.</span><span class="sxs-lookup"><span data-stu-id="9c93f-121">The <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> will correctly marshal these calls to the appropriate thread or context for the application model.</span></span>  
  
 <span data-ttu-id="9c93f-122">Если реализуется класс, поддерживающий асинхронную модель на основе событий, следует вызывать ваш класс <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> каждый раз к *имя_метода* `Async` вызывается метод.</span><span class="sxs-lookup"><span data-stu-id="9c93f-122">If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> each time your *MethodName*`Async` method is called.</span></span> <span data-ttu-id="9c93f-123">Можно использовать клиентское приложение, вызывающее метод `userSuppliedState` параметра для уникальной идентификации каждого вызова, чтобы отличать события, вызываемые во время выполнения асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-123">The client application that makes calls to the method can use the `userSuppliedState` parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="9c93f-124">Клиентский код должен предоставить уникальное значение для `userSuppliedState` параметра.</span><span class="sxs-lookup"><span data-stu-id="9c93f-124">Client code must provide a unique value for the `userSuppliedState` parameter.</span></span> <span data-ttu-id="9c93f-125">Неуникальные идентификаторы задач может вызвать реализация будет неправильно сообщать о ходе выполнения и другие события.</span><span class="sxs-lookup"><span data-stu-id="9c93f-125">Non-unique task IDs may cause your implementation to report progress and other events incorrectly.</span></span> <span data-ttu-id="9c93f-126">Код необходимо проверить идентификатора неуникального задачи и вызывать <xref:System.ArgumentException?displayProperty=nameWithType> если она будет обнаружена.</span><span class="sxs-lookup"><span data-stu-id="9c93f-126">Your code should check for a non-unique task ID and throw an <xref:System.ArgumentException?displayProperty=nameWithType> if one is detected.</span></span>  
  
 <span data-ttu-id="9c93f-127">Код должен отслеживать каждый <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> возвращенных <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> и использовать объект в базовой асинхронной операцией, чтобы размещать обновления и завершить операцию.</span><span class="sxs-lookup"><span data-stu-id="9c93f-127">Your code should track every <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> returned by <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation.</span></span> <span data-ttu-id="9c93f-128">Это отслеживания может быть сложнее, чем передача <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> как параметр вместе с делегатами.</span><span class="sxs-lookup"><span data-stu-id="9c93f-128">This tracking can be as simple as passing the <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> as a parameter among delegates.</span></span> <span data-ttu-id="9c93f-129">В более сложных схемах класс поддержки коллекцию <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> объекты, добавив объекты при запуске задач и их удаления, когда задача завершена или отменена.</span><span class="sxs-lookup"><span data-stu-id="9c93f-129">In more sophisticated designs, your class can maintain a collection of <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> objects, adding objects when tasks are started and removing them when tasks are completed or canceled.</span></span> <span data-ttu-id="9c93f-130">Такой подход позволяет искать уникальный `userSuppliedState` параметра значения, и метод, который следует использовать при работе с классами, которые поддерживают несколько одновременных вызовов.</span><span class="sxs-lookup"><span data-stu-id="9c93f-130">This approach allows you to check for unique `userSuppliedState` parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</span></span>  
  
 <span data-ttu-id="9c93f-131">Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели, основанной на событиях](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span><span class="sxs-lookup"><span data-stu-id="9c93f-131">For more information about implementing asynchronous classes, see [Implementing the Event-based Asynchronous Pattern](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9c93f-132">В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> метод для создания <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> для отслеживания во время асинхронных операций.</span><span class="sxs-lookup"><span data-stu-id="9c93f-132">The following code example demonstrates using the <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> method to create an <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> for tracking the duration of asynchronous operations.</span></span> <span data-ttu-id="9c93f-133">Данный пример кода является частью большего примера, приведенного для <xref:System.ComponentModel.AsyncOperationManager> класса.</span><span class="sxs-lookup"><span data-stu-id="9c93f-133">This code example is part of a larger example provided for the <xref:System.ComponentModel.AsyncOperationManager> class.</span></span>  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9c93f-134">Получает или задает контекст синхронизации для асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-134">Gets or sets the synchronization context for the asynchronous operation.</span></span></summary>
        <value><span data-ttu-id="9c93f-135">Контекст синхронизации для асинхронной операции.</span><span class="sxs-lookup"><span data-stu-id="9c93f-135">The synchronization context for the asynchronous operation.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9c93f-136">Реализация по умолчанию — это реализация свободных потоков.</span><span class="sxs-lookup"><span data-stu-id="9c93f-136">The default implementation is the free-threaded implementation.</span></span>  
  
 <span data-ttu-id="9c93f-137">Поток должен быть установлен <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> свойства `null` освобождать фабрики свободных потоков, если это будет сделано, в противном случае своей фабрики никогда не удаляются.</span><span class="sxs-lookup"><span data-stu-id="9c93f-137">A thread should set the <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> property to `null` to release the free-threaded factory when it is done, or else its factory will never be disposed.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="9c93f-138">для задания контекста синхронизации.</span><span class="sxs-lookup"><span data-stu-id="9c93f-138">for setting the synchronization context.</span></span> <span data-ttu-id="9c93f-139">Требовать значение: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="9c93f-139">Demand value: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="9c93f-140">Связанное состояние:</span><span class="sxs-lookup"><span data-stu-id="9c93f-140">Associated state:</span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>