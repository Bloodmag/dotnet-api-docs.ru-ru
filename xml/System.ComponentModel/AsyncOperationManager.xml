<Type Name="AsyncOperationManager" FullName="System.ComponentModel.AsyncOperationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8d1b155cf78b98814e10e0b058e967a3c5ef092" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36704869" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class AsyncOperationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AsyncOperationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.AsyncOperationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class AsyncOperationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class AsyncOperationManager abstract sealed" />
  <TypeSignature Language="F#" Value="type AsyncOperationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Обеспечивает управление параллелизмом для классов, поддерживающих вызовы асинхронных методов. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если класс должен обеспечивать асинхронное поведение в соответствии с [Обзор асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/event-based-asynchronous-pattern-overview.md), возникает ряд проблем управления параллелизмом. К ним относится требование, чтобы убедиться, что обработчики событий вызываются из потока или контекста, соответствующего модели приложения (например, приложения Windows Forms [!INCLUDE[vstecasp](~/includes/vstecasp-md.md)] приложений, консольные приложения и т. д). <xref:System.ComponentModel.AsyncOperationManager> Предоставляет удобный способ создания класса, выполняется в должном порядке во всех моделях приложений, поддерживаемых [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].  
  
 <xref:System.ComponentModel.AsyncOperationManager> Класса есть один метод <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A>, который возвращает <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> может использоваться для отслеживания длительность конкретной асинхронной задачи. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Для задачи может использоваться для оповещения клиентов при ее завершении. Он также может использоваться для передачи обновлений хода выполнения и добавочных результатов без завершения операции.  
  
 Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели, основанной на событиях](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperationManager> класса, чтобы создать класс, который поддерживает асинхронные операции для любой модели приложения. Показано, как реализовать класс, проверяющий число, чтобы определить, является ли оно простым. Это вычисление может занять много времени, поэтому оно выполняется в отдельном потоке. Отчеты о ходе выполнения, добавочных результатах и уведомлений о завершении обрабатываются <xref:System.ComponentModel.AsyncOperation> класс, который гарантирует, что обработчики событий клиента вызываются в правильном потоке или контексте.  
  
 Полный листинг кода, в разделе [как: реализация компонента, поддерживающего асинхронную модель, основанную на событиях](http://msdn.microsoft.com/library/3c1aa4d4-da87-4a03-b812-3d167b8c57cf). Полный листинг кода для клиентской формы, в разделе [как: реализация клиента асинхронной модели на основе событий](~/docs/standard/asynchronous-programming-patterns/how-to-implement-a-client-of-the-event-based-asynchronous-pattern.md).  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.ComponentModel.AsyncOperation" />
  </Docs>
  <Members>
    <Member MemberName="CreateOperation">
      <MemberSignature Language="C#" Value="public static System.ComponentModel.AsyncOperation CreateOperation (object userSuppliedState);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.ComponentModel.AsyncOperation CreateOperation(object userSuppliedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateOperation (userSuppliedState As Object) As AsyncOperation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::ComponentModel::AsyncOperation ^ CreateOperation(System::Object ^ userSuppliedState);" />
      <MemberSignature Language="F#" Value="static member CreateOperation : obj -&gt; System.ComponentModel.AsyncOperation" Usage="System.ComponentModel.AsyncOperationManager.CreateOperation userSuppliedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncOperation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userSuppliedState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="userSuppliedState">Объект, используемый для связи элемента состояния клиента, например идентификатора задачи, с конкретной асинхронной операцией.</param>
        <summary>Возвращает объект <see cref="T:System.ComponentModel.AsyncOperation" /> для контроля длительности конкретной асинхронной операции.</summary>
        <returns>Объект <see cref="T:System.ComponentModel.AsyncOperation" />, который можно использовать для контроля длительности вызова асинхронного метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> Возвращает метод <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> , можно использовать для отслеживания длительность определенной асинхронной операции и предупреждения модели приложения, после завершения операции. Его также можно использовать для передачи обновлений хода выполнения и добавочных результатов без завершения операции. <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> Будет правильно маршалинга этих вызовов в соответствующем потоке или контексте для модели приложения.  
  
 Если реализуется класс, поддерживающий асинхронную модель на основе событий, следует вызывать ваш класс <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> каждый раз к *имя_метода* `Async` вызывается метод. Можно использовать клиентское приложение, вызывающее метод `userSuppliedState` параметра для уникальной идентификации каждого вызова, чтобы отличать события, вызываемые во время выполнения асинхронной операции.  
  
> [!CAUTION]
>  Клиентский код должен предоставить уникальное значение для `userSuppliedState` параметра. Неуникальные идентификаторы задач может вызвать реализация будет неправильно сообщать о ходе выполнения и другие события. Код необходимо проверить идентификатора неуникального задачи и вызывать <xref:System.ArgumentException?displayProperty=nameWithType> если она будет обнаружена.  
  
 Код должен отслеживать каждый <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> возвращенных <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> и использовать объект в базовой асинхронной операцией, чтобы размещать обновления и завершить операцию. Это отслеживания может быть сложнее, чем передача <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> как параметр вместе с делегатами. В более сложных схемах класс поддержки коллекцию <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> объекты, добавив объекты при запуске задач и их удаления, когда задача завершена или отменена. Такой подход позволяет искать уникальный `userSuppliedState` параметра значения, и метод, который следует использовать при работе с классами, которые поддерживают несколько одновременных вызовов.  
  
 Дополнительные сведения о реализации асинхронных классов см. в разделе [реализации асинхронной модели, основанной на событиях](~/docs/standard/asynchronous-programming-patterns/implementing-the-event-based-asynchronous-pattern.md).  
  
   
  
## Examples  
 В следующем примере кода показано использование <xref:System.ComponentModel.AsyncOperationManager.CreateOperation%2A> метод для создания <xref:System.ComponentModel.AsyncOperation?displayProperty=nameWithType> для отслеживания во время асинхронных операций. Данный пример кода является частью большего примера, приведенного для <xref:System.ComponentModel.AsyncOperationManager> класса.  
  
 [!code-csharp[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/CS/primenumbercalculatormain.cs#3)]
 [!code-vb[System.ComponentModel.AsyncOperationManager#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.ComponentModel.AsyncOperationManager/VB/primenumbercalculatormain.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncOperation" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizationContext">
      <MemberSignature Language="C#" Value="public static System.Threading.SynchronizationContext SynchronizationContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Threading.SynchronizationContext SynchronizationContext" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SynchronizationContext As SynchronizationContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Threading::SynchronizationContext ^ SynchronizationContext { System::Threading::SynchronizationContext ^ get(); void set(System::Threading::SynchronizationContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SynchronizationContext : System.Threading.SynchronizationContext with get, set" Usage="System.ComponentModel.AsyncOperationManager.SynchronizationContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.EventBasedAsync</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.SynchronizationContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает контекст синхронизации для асинхронной операции.</summary>
        <value>Контекст синхронизации для асинхронной операции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация по умолчанию — это реализация свободных потоков.  
  
 Поток должен быть установлен <xref:System.ComponentModel.AsyncOperationManager.SynchronizationContext%2A> свойства `null` освобождать фабрики свободных потоков, если это будет сделано, в противном случае своей фабрики никогда не удаляются.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.NamedPermissionSet">для задания контекста синхронизации. Требовать значение: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />. Связанное состояние:</permission>
      </Docs>
    </Member>
  </Members>
</Type>