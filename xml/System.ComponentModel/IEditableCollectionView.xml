<Type Name="IEditableCollectionView" FullName="System.ComponentModel.IEditableCollectionView">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e36b31face508dbee8f8406a23e0dfcf0adf4e05" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36702812" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEditableCollectionView" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEditableCollectionView" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.IEditableCollectionView" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEditableCollectionView" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEditableCollectionView" />
  <TypeSignature Language="F#" Value="type IEditableCollectionView = interface" />
  <AssemblyInfo>
    <AssemblyName>WindowsBase</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Определяет методы и свойства, реализуемые классом <see cref="T:System.Windows.Data.CollectionView" /> для предоставления возможностей редактирования коллекции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда представление коллекции реализует <xref:System.ComponentModel.IEditableCollectionView> интерфейс, непосредственно при можно изменить базовую коллекцию, он позволяет вносить изменения, с помощью методов и свойств, <xref:System.ComponentModel.IEditableCollectionView> предоставляет, независимо от типа коллекции.  
  
 Типы <xref:System.Windows.Controls.ItemCollection>, <xref:System.Windows.Data.BindingListCollectionView>, и <xref:System.Windows.Data.ListCollectionView> являются типами, которые поставляются вместе с [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] , наследующих от <xref:System.Windows.Data.CollectionView>.  Эти типы также реализуют <xref:System.ComponentModel.IEditableCollectionView>, поэтому можно изменить коллекцию, которая использует один из этих типов.  <xref:System.Windows.Controls.ItemCollection>, в частности, часто используется, поскольку <xref:System.Windows.Controls.ItemsControl.Items%2A?displayProperty=nameWithType> свойство <xref:System.Windows.Controls.ItemCollection>.  
  
   
  
## Examples  
 В следующем примере показано, как добавить элемент в коллекцию с помощью методов, которые определены в <xref:System.ComponentModel.IEditableCollectionView>.  Это приложение отображает список товаров для продажи и дает пользователю возможность добавления, изменения или удаления элемента.  Когда пользователь добавляет или изменяет элемент, формы предлагает пользователю ввести новый элемент.  Если пользователь отправляет форму, элемент помещается в коллекцию.  Если пользователь отменяет формы, элемент отклоняется. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public object AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Function AddNew () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ AddNew();" />
      <MemberSignature Language="F#" Value="abstract member AddNew : unit -&gt; obj" Usage="iEditableCollectionView.AddNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Добавляет новый элемент в коллекцию.</summary>
        <returns>Новый элемент, добавленный в коллекцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> начинается транзакция добавления.  Необходимо вызвать <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> или <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> для завершения операции добавления. Новый элемент всегда отображается в представлении коллекции. Какой-либо фильтрации, сортировки или группировки, применяется для представления применяется к новому элемента, когда <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> вызывается.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Windows.Window> , предлагая пользователю добавить новый элемент.  Затем он вызывает <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> для создания нового объекта и наборы <xref:System.Windows.FrameworkElement.DataContext%2A> из <xref:System.Windows.Window> на этот объект. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddNew">
      <MemberSignature Language="C#" Value="public bool CanAddNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanAddNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanAddNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanAddNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanAddNew : bool" Usage="System.ComponentModel.IEditableCollectionView.CanAddNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, можно ли добавить новый элемент в коллекцию.</summary>
        <value>Значение <see langword="true" />, если в коллекцию можно добавить новый элемент; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView> Можно добавить новый элемент, если выполняются следующие:  
  
-   Можно добавить элемент к базовой коллекции.  Например, если коллекция доступна только для чтения <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> — `false`.  
  
-   <xref:System.ComponentModel.IEditableCollectionView> Могут создать объект типа, который присутствует в коллекции.  Например, если коллекция имеет тип <xref:System.Collections.ObjectModel.ObservableCollection%601>, <xref:System.ComponentModel.IEditableCollectionView> должен иметь возможность создать объект типа `T`.  
  
   
  
## Examples  
 В следующем примере проверяется, можно ли добавить элемент в коллекцию.  Если <xref:System.ComponentModel.IEditableCollectionView.CanAddNew%2A> — `false`, пример сообщает пользователю не удается добавить элемент.  В противном случае отображается форма, предлагая пользователю добавить новый элемент. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanCancelEdit">
      <MemberSignature Language="C#" Value="public bool CanCancelEdit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanCancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanCancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanCancelEdit { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanCancelEdit : bool" Usage="System.ComponentModel.IEditableCollectionView.CanCancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, может ли представление коллекции отклонить отложенные изменения и восстановить исходные значения изменяемого объекта.</summary>
        <value>Значение <see langword="true" />, если представление коллекции может отклонить отложенные изменения и восстановить исходные значения изменяемого объекта. В противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> — `true` Если представление поддерживает понятие «ожидающие изменения» на данный момент элемент.   Например, представление коллекции может возвратить `true` Если редактируемый элемент реализует <xref:System.ComponentModel.IEditableObject>, или если в представлении есть сведения о состоянии элемента, его можно использовать для наката резервное изменения. <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> — `false` Если представление не может отменить изменения объекта.  В этом случае вызывать <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> заставить представлении, чтобы выйти из состояние редактирования и обеспечить логику, чтобы отменить изменения в объекте, который был изменен.  
  
   
  
## Examples  
 В следующем примере извлекается <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> для проверки, можно ли восстановить исходные значения изменяемого элемента перед вызовом <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  Если не удается восстановить значения, вы должны предоставить дополнительную логику для этого.  Если они могут быть восстанавливаются значения, если в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.   Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public void CancelEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelEdit();" />
      <MemberSignature Language="F#" Value="abstract member CancelEdit : unit -&gt; unit" Usage="iEditableCollectionView.CancelEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает транзакцию изменения и, если это возможно, восстанавливает исходное значение для элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> Задает <xref:System.ComponentModel.IEditableCollectionView.CurrentEditItem%2A> для `null` в результате чего представление коллекции для выхода из состояние редактирования.  Если <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> — `true`, <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> также восстанавливает исходные значения изменяемого объекта.  
  
   
  
## Examples  
 В следующем примере извлекается <xref:System.ComponentModel.IEditableCollectionView.CanCancelEdit%2A> для проверки, можно ли восстановить исходные значения изменяемого элемента перед вызовом <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  Если не удается восстановить значения, вы должны предоставить дополнительную логику для этого.  Если они могут быть восстанавливаются значения, если в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#canceledit)]
 [!code-vb[EditingCollectionsSnippets#CancelEdit](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#canceledit)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelNew">
      <MemberSignature Language="C#" Value="public void CancelNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CancelNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelNew();" />
      <MemberSignature Language="F#" Value="abstract member CancelNew : unit -&gt; unit" Usage="iEditableCollectionView.CancelNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает транзакцию добавления и отменяет ожидающий новый элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример отображает форму, которая предлагает пользователю добавить новый элемент.  Если пользователь отправляет форму, в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> для добавления элемента в коллекцию.  Если пользователь отменяет формы, в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> Чтобы удалить элемент. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRemove">
      <MemberSignature Language="C#" Value="public bool CanRemove { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRemove" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanRemove As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanRemove { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRemove : bool" Usage="System.ComponentModel.IEditableCollectionView.CanRemove" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, можно ли удалить элемент из коллекции.</summary>
        <value>Значение <see langword="true" />, если элемент можно удалить из коллекции; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> — `false` если коллекции только для чтения.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> для проверки, можно ли удалить элемент из коллекции.  Если элемент может быть удален, пример предлагает пользователю подтвердить действие и вызовы <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> при нажатии кнопки **Да**. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEdit">
      <MemberSignature Language="C#" Value="public void CommitEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitEdit" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitEdit();" />
      <MemberSignature Language="F#" Value="abstract member CommitEdit : unit -&gt; unit" Usage="iEditableCollectionView.CommitEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает транзакцию изменения и сохраняет отложенные изменения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается форму, которая предлагает пользователю изменить существующий элемент.  Если пользователь отправляет форму, в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> сохранить изменения в коллекцию.  Если пользователь отменяет формы, в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A> для отмены изменений. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitNew">
      <MemberSignature Language="C#" Value="public void CommitNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.CommitNew" />
      <MemberSignature Language="VB.NET" Value="Public Sub CommitNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CommitNew();" />
      <MemberSignature Language="F#" Value="abstract member CommitNew : unit -&gt; unit" Usage="iEditableCollectionView.CommitNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает транзакцию добавления и сохраняет ожидаемый новый элемент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Какой-либо фильтрации, сортировки или группировки, присваиваемое <xref:System.Windows.Data.CollectionView> применяется для нового элемента, когда <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> вызывается.  
  
   
  
## Examples  
 Следующий пример отображает форму, которая предлагает пользователю добавить новый элемент.  Если пользователь отправляет форму, в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> для добавления элемента в коллекцию.  Если пользователь отменяет формы, в примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A> Чтобы удалить элемент. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#AddItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#additem)]
 [!code-vb[EditingCollectionsSnippets#AddItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#additem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAddItem">
      <MemberSignature Language="C#" Value="public object CurrentAddItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentAddItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentAddItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentAddItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentAddItem : obj" Usage="System.ComponentModel.IEditableCollectionView.CurrentAddItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает элемент, добавляемый во время текущей транзакции добавления.</summary>
        <value>Добавляемый элемент, если свойство <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> имеет значение <see langword="true" />. В противном случае — значение <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentEditItem">
      <MemberSignature Language="C#" Value="public object CurrentEditItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object CurrentEditItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentEditItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ CurrentEditItem { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentEditItem : obj" Usage="System.ComponentModel.IEditableCollectionView.CurrentEditItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает изменяемый элемент коллекции.</summary>
        <value>Редактируемый элемент в коллекции, если свойство <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> имеет значение <see langword="true" />; в противном случае — значение <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditItem">
      <MemberSignature Language="C#" Value="public void EditItem (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditItem(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EditItem (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EditItem(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member EditItem : obj -&gt; unit" Usage="iEditableCollectionView.EditItem item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Изменяемый элемент.</param>
        <summary>Начинает транзакцию изменения заданного элемента.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается форму, которая предлагает пользователю изменить существующий элемент.  Если пользователь отправляет форму, изменения фиксируются в коллекцию.  Если пользователь отменяет формы, изменения будут отменены. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections) .  
  
 [!code-csharp[EditingCollectionsSnippets#EditItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#edititem)]
 [!code-vb[EditingCollectionsSnippets#EditItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#edititem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddingNew">
      <MemberSignature Language="C#" Value="public bool IsAddingNew { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAddingNew" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAddingNew As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAddingNew { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAddingNew : bool" Usage="System.ComponentModel.IEditableCollectionView.IsAddingNew" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, выполняется ли в данный момент транзакция добавления.</summary>
        <value>Значение <see langword="true" />, если транзакция добавления выполняется; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Транзакция добавления начинается с вызова <xref:System.ComponentModel.IEditableCollectionView.AddNew%2A> и до конца транзакции добавить, вызвав <xref:System.ComponentModel.IEditableCollectionView.CommitNew%2A> или <xref:System.ComponentModel.IEditableCollectionView.CancelNew%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditingItem">
      <MemberSignature Language="C#" Value="public bool IsEditingItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditingItem" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEditingItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEditingItem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEditingItem : bool" Usage="System.ComponentModel.IEditableCollectionView.IsEditingItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, выполняется ли в данный момент транзакция изменения.</summary>
        <value>Значение <see langword="true" />, если транзакция редактирования выполняется; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Транзакция изменения начинается с вызова <xref:System.ComponentModel.IEditableCollectionView.EditItem%2A> и до конца транзакции, вызвав <xref:System.ComponentModel.IEditableCollectionView.CommitEdit%2A> или <xref:System.ComponentModel.IEditableCollectionView.CancelEdit%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewItemPlaceholderPosition">
      <MemberSignature Language="C#" Value="public System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ComponentModel.NewItemPlaceholderPosition NewItemPlaceholderPosition" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberSignature Language="VB.NET" Value="Public Property NewItemPlaceholderPosition As NewItemPlaceholderPosition" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::NewItemPlaceholderPosition NewItemPlaceholderPosition { System::ComponentModel::NewItemPlaceholderPosition get(); void set(System::ComponentModel::NewItemPlaceholderPosition value); };" />
      <MemberSignature Language="F#" Value="member this.NewItemPlaceholderPosition : System.ComponentModel.NewItemPlaceholderPosition with get, set" Usage="System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.NewItemPlaceholderPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает положение местозаполнителя нового элемента в представлении коллекции.</summary>
        <value>Одно из значений перечисления, которое задает положение местозаполнителя нового элемента в представлении коллекции.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit" Usage="iEditableCollectionView.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Удаляемый элемент.</param>
        <summary>Удаляет заданный элемент из коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `item` не входит в коллекцию, <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> не выполняет никаких действий.  
  
   
  
## Examples  
 В следующем примере вызывается <xref:System.ComponentModel.IEditableCollectionView.CanRemove%2A> для проверки, можно ли удалить элемент из коллекции.  Если элемент может быть удален, пример предлагает пользователю подтвердить действие и вызовы <xref:System.ComponentModel.IEditableCollectionView.Remove%2A> при нажатии кнопки **Да**. Полный пример см. [изменение коллекции по с помощью образца IEditableCollectionView](https://github.com/Microsoft/WPF-Samples/tree/master/Data%20Binding/EditingCollections).  
  
 [!code-csharp[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/csharp/VS_Snippets_Wpf/EditingCollectionsSnippets/CSharp/Window1.xaml.cs#removeitem)]
 [!code-vb[EditingCollectionsSnippets#RemoveItem](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EditingCollectionsSnippets/visualbasic/window1.xaml.vb#removeitem)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit" Usage="iEditableCollectionView.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>WindowsBase</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Позиция удаляемого элемента.</param>
        <summary>Удаляет элемент в указанной позиции из коллекции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `index` связан с представлением коллекции, а не коллекцию.  Например, если коллекция содержит 10 элементов и представление имеет <xref:System.ComponentModel.ICollectionView.Filter%2A> , чтобы отображались 7 элементов, допустимые значения `index` — от 0 до 6.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="index" /> меньше нуля и превышает количество элементов в представлении коллекции.</exception>
      </Docs>
    </Member>
  </Members>
</Type>