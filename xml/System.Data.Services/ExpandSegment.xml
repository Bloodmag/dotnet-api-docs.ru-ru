<Type Name="ExpandSegment" FullName="System.Data.Services.ExpandSegment">
  <TypeSignature Language="C#" Value="public class ExpandSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExpandSegment extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Services.ExpandSegment" />
  <TypeSignature Language="VB.NET" Value="Public Class ExpandSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExpandSegment" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Services</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Diagnostics.DebuggerDisplay("ExpandSegment ({name},Filter={filter})]")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="52f11-101">Сегмент запроса, обозначающий, должны ли данные встраиваться, а не возвращаться в виде отдельно загружаемого содержимого. </span><span class="sxs-lookup"><span data-stu-id="52f11-101">The segment of a query that indicates whether data should be returned inline instead of as deferred content.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52f11-102">`$expand` Предложение указывает, что каждый `$expand` элемент должен быть развернут полностью.</span><span class="sxs-lookup"><span data-stu-id="52f11-102">An `$expand` clause indicates that each `$expand` item should be fully expanded.</span></span> <span data-ttu-id="52f11-103">Например, значение `OrderLines.Product.Image` с `$expand` вызывает `OrderLines`, `Product` каждого элемента в `OrderLines`и `Image` из `Product` каждого элемента в `OrderLines` развернуть.</span><span class="sxs-lookup"><span data-stu-id="52f11-103">For example, the value `OrderLines.Product.Image` with `$expand` causes `OrderLines`, the `Product` of each element in `OrderLines`, and the `Image` of the `Product` of each element in `OrderLines` to be expanded.</span></span>  
  
 <span data-ttu-id="52f11-104">Свойство слева в `$expand` предложение должно быть свойством типа сущности в наборе сущностей, обозначенную последнего сегмента пути в URI запроса.</span><span class="sxs-lookup"><span data-stu-id="52f11-104">The left-most property in an `$expand` clause must be a property on the entity type within the entity set identified by the last path segment in the request URI.</span></span>  
  
 <span data-ttu-id="52f11-105">Избыточная разверните предложение правила, допускаются, но игнорируются.</span><span class="sxs-lookup"><span data-stu-id="52f11-105">Redundant expand clause rules are acceptable and ignored.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="52f11-106">Следующий URI разворачивает `OrderLines` связанных с каждым `Order` возвращенных запросом.</span><span class="sxs-lookup"><span data-stu-id="52f11-106">The following URI expands the `OrderLines` associated with each `Order` returned by the query.</span></span>  
  
```  
http://host/service.svc/Orders?$expand=OrderLines  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExpandSegment (string name, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (name As String, filter As Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExpandSegment(System::String ^ name, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="name"><span data-ttu-id="52f11-107">Имя разворачиваемого свойства.</span><span class="sxs-lookup"><span data-stu-id="52f11-107">The name of the property to be expanded.</span></span></param>
        <param name="filter"><span data-ttu-id="52f11-108">Параметр фильтра в запросе, к которому применяется сегмент развертывания.</span><span class="sxs-lookup"><span data-stu-id="52f11-108">The filter option in the query to which the expand segment applies.</span></span></param>
        <summary><span data-ttu-id="52f11-109">Инициализирует объект <see cref="T:System.Data.Services.ExpandSegment" />, с заданным именем свойства и фильтрующим выражением, возможно равным null.</span><span class="sxs-lookup"><span data-stu-id="52f11-109">Initializes an <see cref="T:System.Data.Services.ExpandSegment" /> object with the specified property name and a filtering expression, possibly null.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandedProperty">
      <MemberSignature Language="C#" Value="public System.Data.Services.Providers.ResourceProperty ExpandedProperty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Services.Providers.ResourceProperty ExpandedProperty" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.ExpandSegment.ExpandedProperty" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExpandedProperty As ResourceProperty" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Services::Providers::ResourceProperty ^ ExpandedProperty { System::Data::Services::Providers::ResourceProperty ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Services.Providers.ResourceProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52f11-110">Получает свойство для расширения.</span><span class="sxs-lookup"><span data-stu-id="52f11-110">Gets the property to be expanded.</span></span></summary>
        <value><span data-ttu-id="52f11-111">Разворачиваемое свойство.</span><span class="sxs-lookup"><span data-stu-id="52f11-111">The property to expand.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression Filter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression Filter" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.ExpandSegment.Filter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Filter As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Linq::Expressions::Expression ^ Filter { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52f11-112">Параметр фильтра в запросе, к которому применяется сегмент развертывания.</span><span class="sxs-lookup"><span data-stu-id="52f11-112">The filter option in the query to which the expand segment applies.</span></span></summary>
        <value><span data-ttu-id="52f11-113">Выражение, задающее фильтр для целевых данных.</span><span class="sxs-lookup"><span data-stu-id="52f11-113">An expression that specifies the filter on target data.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasFilter">
      <MemberSignature Language="C#" Value="public bool HasFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasFilter" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.ExpandSegment.HasFilter" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasFilter As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasFilter { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52f11-114">Логическое значение, указывающее, используется ли фильтрующее выражение с сегментом расширения.</span><span class="sxs-lookup"><span data-stu-id="52f11-114">A Boolean value that indicates whether the expand statement is used with a filter expression.</span></span></summary>
        <value><span data-ttu-id="52f11-115">True или false.</span><span class="sxs-lookup"><span data-stu-id="52f11-115">True or false.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxResultsExpected">
      <MemberSignature Language="C#" Value="public int MaxResultsExpected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxResultsExpected" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.ExpandSegment.MaxResultsExpected" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaxResultsExpected As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxResultsExpected { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52f11-116">Возвращает максимальное количество ожидаемых результатов.</span><span class="sxs-lookup"><span data-stu-id="52f11-116">Gets the maximum number of results expected.</span></span></summary>
        <value><span data-ttu-id="52f11-117">Целое значение, указывающее максимальное количество результатов.</span><span class="sxs-lookup"><span data-stu-id="52f11-117">The integer value that indicates maximum number of results.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="52f11-118">Включить службу данных для обнаружения сбоя соответствуют это ограничение, можно развернуть поставщики должны возвращать не более чем <xref:System.Data.Services.ExpandSegment.MaxResultsExpected%2A> + 1 элементов.</span><span class="sxs-lookup"><span data-stu-id="52f11-118">To enable the data service to detect a failure to meet this constraint, expand providers should return no more than <xref:System.Data.Services.ExpandSegment.MaxResultsExpected%2A> + 1 elements.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Data.Services.ExpandSegment.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="52f11-119">Имя разворачиваемого свойства.</span><span class="sxs-lookup"><span data-stu-id="52f11-119">The name of the property to be expanded.</span></span></summary>
        <value><span data-ttu-id="52f11-120">Строковое значение, содержащее имя свойства.</span><span class="sxs-lookup"><span data-stu-id="52f11-120">A string value containing the name of the property.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PathHasFilter">
      <MemberSignature Language="C#" Value="public static bool PathHasFilter (System.Collections.Generic.IEnumerable&lt;System.Data.Services.ExpandSegment&gt; path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool PathHasFilter(class System.Collections.Generic.IEnumerable`1&lt;class System.Data.Services.ExpandSegment&gt; path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PathHasFilter (path As IEnumerable(Of ExpandSegment)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool PathHasFilter(System::Collections::Generic::IEnumerable&lt;System::Data::Services::ExpandSegment ^&gt; ^ path);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Services</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Collections.Generic.IEnumerable&lt;System.Data.Services.ExpandSegment&gt;" />
      </Parameters>
      <Docs>
        <param name="path"><span data-ttu-id="52f11-121">Перечисление сегментов, в который проверяется наличие фильтров.</span><span class="sxs-lookup"><span data-stu-id="52f11-121">The enumeration of segments to check for filters.</span></span></param>
        <summary><span data-ttu-id="52f11-122">Логическое значение, указывающее, включает ли маршрут параметр фильтрации целевых данных.</span><span class="sxs-lookup"><span data-stu-id="52f11-122">A Boolean value that indicates whether the path includes a filter option on target data.</span></span></summary>
        <returns><span data-ttu-id="52f11-123">True, если для какого-либо из сегментов в маршруте имеется фильтр; в противном случае — false.</span><span class="sxs-lookup"><span data-stu-id="52f11-123">True if any of the segments in the path has a filter; false otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>