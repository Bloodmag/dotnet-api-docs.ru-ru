<Type Name="SqlCommandBuilder" FullName="System.Data.SqlClient.SqlCommandBuilder">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f98e8b8a8201db8545a634c3df54306e188ae9f9" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36680176" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlCommandBuilder : System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlCommandBuilder extends System.Data.Common.DbCommandBuilder" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlCommandBuilder" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlCommandBuilder&#xA;Inherits DbCommandBuilder" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlCommandBuilder sealed : System::Data::Common::DbCommandBuilder" />
  <TypeSignature Language="F#" Value="type SqlCommandBuilder = class&#xA;    inherit DbCommandBuilder" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbCommandBuilder</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Автоматически генерирует однотабличные команды, которые позволяют согласовать изменения, вносимые в объект <see cref="T:System.Data.DataSet" />, со связанной базой данных SQL Server. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlDataAdapter> Не создает автоматически инструкции Transact-SQL, необходимые для согласования изменений, внесенных в <xref:System.Data.DataSet> с связанного экземпляра служб SQL Server. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> для автоматического создания инструкции Transact-SQL для отдельных обновлений, если задать <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> свойство <xref:System.Data.SqlClient.SqlDataAdapter>. Затем, все дополнительные инструкции Transact-SQL, не устанавливайте генерируются <xref:System.Data.SqlClient.SqlCommandBuilder>.  
  
 <xref:System.Data.SqlClient.SqlCommandBuilder> Регистрирует себя в качестве прослушивателя для <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> событий всякий раз при установке <xref:System.Data.SqlClient.SqlCommandBuilder.DataAdapter%2A> свойство. Можно связать только одну <xref:System.Data.SqlClient.SqlDataAdapter> или <xref:System.Data.SqlClient.SqlCommandBuilder> объектов друг с другом за один раз.  
  
 Для создания инструкций INSERT, UPDATE или DELETE, <xref:System.Data.SqlClient.SqlCommandBuilder> использует <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> свойство для получения требуемого набора метаданных автоматически. При изменении <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> после метаданные получения, такие как после первого обновления, необходимо вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> метод для обновления метаданных.  
  
 Свойство `SelectCommand` должно также возвратить по крайней мере один столбец первичного ключа или столбец с атрибутом UNIQUE. Если таковые отсутствуют, **InvalidOperation** сгенерировано исключение, и команды не создаются.  
  
 <xref:System.Data.SqlClient.SqlCommandBuilder> Также использует <xref:System.Data.SqlClient.SqlCommand.Connection%2A>, <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A>, и <xref:System.Data.SqlClient.SqlCommand.Transaction%2A> ссылается <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>. Следует вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> Если одна или несколько из этих свойств будут изменены или <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> выполнена замена. В противном случае <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, и <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> свойства сохраняют свои предыдущие значения.  
  
 При вызове метода <xref:System.ComponentModel.Component.Dispose%2A>, <xref:System.Data.SqlClient.SqlCommandBuilder> отсоединяется от <xref:System.Data.SqlClient.SqlDataAdapter>, и созданные команды больше не используются.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Data.SqlClient.SqlCommand>, а <xref:System.Data.SqlClient.SqlDataAdapter> и <xref:System.Data.SqlClient.SqlConnection>для выборки строк из источника данных. В примере выполняется передача строки подключения, строки запроса, которая является инструкцией Transact-SQL SELECT и строка, представляющая имя таблицы базы данных. Затем пример создает <xref:System.Data.SqlClient.SqlCommandBuilder>.  
  
 [!code-csharp[Classic WebData SqlCommandBuilder#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/CS/Source.cs#1)]
 [!code-vb[Classic WebData SqlCommandBuilder#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommandBuilder/VB/Source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlCommandBuilder (System.Data.SqlClient.SqlDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.SqlClient.SqlDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.#ctor(System.Data.SqlClient.SqlDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (adapter As SqlDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlCommandBuilder(System::Data::SqlClient::SqlDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="new System.Data.SqlClient.SqlCommandBuilder : System.Data.SqlClient.SqlDataAdapter -&gt; System.Data.SqlClient.SqlCommandBuilder" Usage="new System.Data.SqlClient.SqlCommandBuilder adapter" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.SqlClient.SqlDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">Имя <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlCommandBuilder" /> вместе со связанным объектом <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommandBuilder> Регистрирует себя в качестве прослушивателя для <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> событий, создаваемых <xref:System.Data.SqlClient.SqlDataAdapter> указанный в этом свойстве.  
  
 При создании нового экземпляра <xref:System.Data.SqlClient.SqlCommandBuilder>, все существующие <xref:System.Data.SqlClient.SqlCommandBuilder> связанный с этим <xref:System.Data.SqlClient.SqlDataAdapter> освобождается.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyParameterInfo">
      <MemberSignature Language="C#" Value="protected override void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow datarow, System.Data.StatementType statementType, bool whereClause);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ApplyParameterInfo(class System.Data.Common.DbParameter parameter, class System.Data.DataRow datarow, valuetype System.Data.StatementType statementType, bool whereClause) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ApplyParameterInfo(System::Data::Common::DbParameter ^ parameter, System::Data::DataRow ^ datarow, System::Data::StatementType statementType, bool whereClause);" />
      <MemberSignature Language="F#" Value="override this.ApplyParameterInfo : System.Data.Common.DbParameter * System.Data.DataRow * System.Data.StatementType * bool -&gt; unit" Usage="sqlCommandBuilder.ApplyParameterInfo (parameter, datarow, statementType, whereClause)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameter" Type="System.Data.Common.DbParameter" />
        <Parameter Name="datarow" Type="System.Data.DataRow" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="whereClause" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="parameter">To be added.</param>
        <param name="datarow">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="whereClause">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogLocation">
      <MemberSignature Language="C#" Value="public override System.Data.Common.CatalogLocation CatalogLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.Common.CatalogLocation CatalogLocation" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogLocation As CatalogLocation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::Common::CatalogLocation CatalogLocation { System::Data::Common::CatalogLocation get(); void set(System::Data::Common::CatalogLocation value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogLocation : System.Data.Common.CatalogLocation with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.CatalogLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Common.CatalogLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see cref="T:System.Data.Common.CatalogLocation" /> для экземпляра класса <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
        <value>Объект <see cref="T:System.Data.Common.CatalogLocation" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CatalogSeparator">
      <MemberSignature Language="C#" Value="public override string CatalogSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CatalogSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CatalogSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ CatalogSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CatalogSeparator : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.CatalogSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает строку, которую можно использовать в качестве разделителя каталогов, для экземпляра класса <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</summary>
        <value>Строка, указывающая разделитель каталогов, который используется в экземпляре класса <see cref="T:System.Data.SqlClient.SqlCommandBuilder" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAdapter">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlDataAdapter DataAdapter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlDataAdapter DataAdapter" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberSignature Language="VB.NET" Value="Public Property DataAdapter As SqlDataAdapter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlDataAdapter ^ DataAdapter { System::Data::SqlClient::SqlDataAdapter ^ get(); void set(System::Data::SqlClient::SqlDataAdapter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataAdapter : System.Data.SqlClient.SqlDataAdapter with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.DataAdapter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlDataAdapter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект <see cref="T:System.Data.SqlClient.SqlDataAdapter" />, для которого автоматически создаются инструкции Transact-SQL.</summary>
        <value>Объект <see cref="T:System.Data.SqlClient.SqlDataAdapter" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlCommandBuilder> Регистрирует себя в качестве прослушивателя для <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> событий, создаваемых <xref:System.Data.SqlClient.SqlDataAdapter> указанный в этом свойстве.  
  
 При создании нового экземпляра <xref:System.Data.SqlClient.SqlCommandBuilder>, все существующие <xref:System.Data.SqlClient.SqlCommandBuilder> связанный с этим <xref:System.Data.SqlClient.SqlDataAdapter> освобождается.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeriveParameters">
      <MemberSignature Language="C#" Value="public static void DeriveParameters (System.Data.SqlClient.SqlCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeriveParameters(class System.Data.SqlClient.SqlCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.DeriveParameters(System.Data.SqlClient.SqlCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeriveParameters (command As SqlCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeriveParameters(System::Data::SqlClient::SqlCommand ^ command);" />
      <MemberSignature Language="F#" Value="static member DeriveParameters : System.Data.SqlClient.SqlCommand -&gt; unit" Usage="System.Data.SqlClient.SqlCommandBuilder.DeriveParameters command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.SqlClient.SqlCommand" />
      </Parameters>
      <Docs>
        <param name="command">Объект <see cref="T:System.Data.SqlClient.SqlCommand" /> ссылается на хранимую процедуру, из которой необходимо извлечь сведения о параметрах. Извлеченные параметры добавляются в коллекцию параметров <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> объекта <see cref="T:System.Data.SqlClient.SqlCommand" />.</param>
        <summary>Извлекает сведения о параметрах из хранимой процедуры, указанной в объекте <see cref="T:System.Data.SqlClient.SqlCommand" />, и включает их в коллекцию параметров <see cref="P:System.Data.SqlClient.SqlCommand.Parameters" /> указанного объекта <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `DeriveParameters` перезаписывает любые существующие данные параметров для `SqlDbCommand`.  
  
 `DeriveParameters` требуется дополнительное обращение к базе данных для получения сведений. Если сведения о параметрах известна заранее, более эффективно будет заполнить коллекцию параметров путем задания сведений явным образом.  
  
 Можно использовать только `DeriveParameters` с хранимыми процедурами. Нельзя использовать `DeriveParameters` с расширенными хранимыми процедурами. Нельзя использовать `DeriveParameters` для заполнения <xref:System.Data.SqlClient.SqlParameterCollection> произвольными инструкциями Transact-SQL, таких как инструкции SELECT с параметрами.  
  
 Дополнительные сведения см. в разделе [Настройка параметров и типов данных параметров](~/docs/framework/data/adonet/configuring-parameters-and-parameter-data-types.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Текст команды не является допустимым именем хранимой процедуры.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDeleteCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения операций удаления в базе данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции SQL приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand();" />
      <MemberSignature Language="F#" Value="override this.GetDeleteCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetDeleteCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения операций удаления в базе данных.</summary>
        <returns>Автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, необходимый для выполнения операций удаления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции SQL приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetDeleteCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetDeleteCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDeleteCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetDeleteCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetDeleteCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetDeleteCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Если значением является <see langword="true" />, создаются имена параметров, совпадающие с именами столбцов, если это возможно. Если значение равно <see langword="false" />, создаются @p1, @p2 и т. д.</param>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения операций удаления в базе данных.</summary>
        <returns>Автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" /> позволяет выполнять операции удаления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции SQL приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetDeleteCommand%2A>.  
  
 Поведение по умолчанию, при создании имен параметра является использование @p1, @p2, и так далее для различных параметров. Передача `true` для `useColumnsForParameterNames` параметра позволяет принудительно выполнять <xref:System.Data.OleDb.OleDbCommandBuilder> для создания параметров на основании вместо имен столбцов. Он завершается успешно только в том случае, если выполняются следующие условия.  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> , Возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> коллекции указан, и его длина меньше, чем имя создаваемого параметра.  
  
-   Имя создаваемого параметра соответствует критериям, указанным в <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> , возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> регулярного выражения коллекции.  
  
-   Объект <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> , возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> задана коллекция.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInsertCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения операций вставки в базе данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand();" />
      <MemberSignature Language="F#" Value="override this.GetInsertCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetInsertCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения операций вставки в базу данных.</summary>
        <returns>Автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, необходимый для выполнения операций вставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetInsertCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetInsertCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInsertCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetInsertCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetInsertCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetInsertCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Если значением является <see langword="true" />, создаются имена параметров, совпадающие с именами столбцов, если это возможно. Если значение равно <see langword="false" />, создаются @p1, @p2 и т. д.</param>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения операций вставки в базе данных.</summary>
        <returns>Автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, необходимый для выполнения операции вставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetInsertCommand%2A>.  
  
 Поведение по умолчанию, при создании имен параметра является использование @p1, @p2, и так далее для различных параметров. Передача `true` для `useColumnsForParameterNames` параметра позволяет принудительно выполнять <xref:System.Data.OleDb.OleDbCommandBuilder> для создания параметров на основании вместо имен столбцов. Он завершается успешно только в том случае, если выполняются следующие условия.  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> , Возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> коллекции указан, и его длина меньше, чем имя создаваемого параметра.  
  
-   Имя создаваемого параметра соответствует критериям, указанным в <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> , возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> регулярного выражения коллекции.  
  
-   Объект <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> , возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> задана коллекция.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(int parameterOrdinal);" />
      <MemberSignature Language="F#" Value="override this.GetParameterName : int -&gt; string" Usage="sqlCommandBuilder.GetParameterName parameterOrdinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterName">
      <MemberSignature Language="C#" Value="protected override string GetParameterName (string parameterName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterName(string parameterName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterName (parameterName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterName(System::String ^ parameterName);" />
      <MemberSignature Language="F#" Value="override this.GetParameterName : string -&gt; string" Usage="sqlCommandBuilder.GetParameterName parameterName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parameterName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParameterPlaceholder">
      <MemberSignature Language="C#" Value="protected override string GetParameterPlaceholder (int parameterOrdinal);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance string GetParameterPlaceholder(int32 parameterOrdinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetParameterPlaceholder(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetParameterPlaceholder (parameterOrdinal As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::String ^ GetParameterPlaceholder(int parameterOrdinal);" />
      <MemberSignature Language="F#" Value="override this.GetParameterPlaceholder : int -&gt; string" Usage="sqlCommandBuilder.GetParameterPlaceholder parameterOrdinal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameterOrdinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parameterOrdinal">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchemaTable">
      <MemberSignature Language="C#" Value="protected override System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand srcCommand);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.DataTable GetSchemaTable(class System.Data.Common.DbCommand srcCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetSchemaTable (srcCommand As DbCommand) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::DataTable ^ GetSchemaTable(System::Data::Common::DbCommand ^ srcCommand);" />
      <MemberSignature Language="F#" Value="override this.GetSchemaTable : System.Data.Common.DbCommand -&gt; System.Data.DataTable" Usage="sqlCommandBuilder.GetSchemaTable srcCommand" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcCommand" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="srcCommand">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUpdateCommand">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения обновлений базы данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand();" />
      <MemberSignature Language="F#" Value="override this.GetUpdateCommand : unit -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetUpdateCommand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения обновлений базы данных.</summary>
        <returns>Автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, необходимый для выполнения операции обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand GetUpdateCommand (bool useColumnsForParameterNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand GetUpdateCommand(bool useColumnsForParameterNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUpdateCommand (useColumnsForParameterNames As Boolean) As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ GetUpdateCommand(bool useColumnsForParameterNames);" />
      <MemberSignature Language="F#" Value="override this.GetUpdateCommand : bool -&gt; System.Data.SqlClient.SqlCommand" Usage="sqlCommandBuilder.GetUpdateCommand useColumnsForParameterNames" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="useColumnsForParameterNames" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="useColumnsForParameterNames">Если значением является <see langword="true" />, создаются имена параметров, совпадающие с именами столбцов, если это возможно. Если значение равно <see langword="false" />, создаются @p1, @p2 и т. д.</param>
        <summary>Получает автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, который требуется для выполнения обновлений базы данных.</summary>
        <returns>Автоматически созданный объект <see cref="T:System.Data.SqlClient.SqlCommand" />, необходимый для выполнения операций обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение может использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> метод для получения сведений и устранения неполадок, поскольку он возвращает <xref:System.Data.SqlClient.SqlCommand> объект для выполнения.  
  
 Можно также использовать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> в качестве основы для измененной команды. Например, можно вызвать <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> и изменения <xref:System.Data.SqlClient.SqlCommand.CommandTimeout%2A> и явно задать, на <xref:System.Data.SqlClient.SqlDataAdapter>.  
  
 После первоначального создания инструкции Transact-SQL, приложение должно явно вызвать <xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> если она изменяет инструкцию каким-либо образом. В противном случае <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A> по-прежнему работать с данными из предыдущей инструкции, которые могут быть неправильными. Инструкции Transact-SQL впервые создаются, когда приложение вызывает метод <xref:System.Data.Common.DbDataAdapter.Update%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.GetUpdateCommand%2A>.  
  
 Поведение по умолчанию, при создании имен параметра является использование @p1, @p2, и так далее для различных параметров. Передача `true` для `useColumnsForParameterNames` параметра позволяет принудительно выполнять <xref:System.Data.OleDb.OleDbCommandBuilder> для создания параметров на основании вместо имен столбцов. Он завершается успешно только в том случае, если выполняются следующие условия.  
  
-   <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength> , Возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> коллекции указан, и его длина меньше, чем имя создаваемого параметра.  
  
-   Имя создаваемого параметра соответствует критериям, указанным в <xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern> , возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> регулярного выражения коллекции.  
  
-   Объект <xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat> , возвращенные **GetSchema** метод вызова и найти в <xref:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation> задана коллекция.  
  
 Дополнительные сведения см. в разделе [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand InitializeCommand(class System.Data.Common.DbCommand command) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function InitializeCommand (command As DbCommand) As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ InitializeCommand(System::Data::Common::DbCommand ^ command);" />
      <MemberSignature Language="F#" Value="override this.InitializeCommand : System.Data.Common.DbCommand -&gt; System.Data.Common.DbCommand" Usage="sqlCommandBuilder.InitializeCommand command" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.Data.Common.DbCommand" />
      </Parameters>
      <Docs>
        <param name="command">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuoteIdentifier">
      <MemberSignature Language="C#" Value="public override string QuoteIdentifier (string unquotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string QuoteIdentifier(string unquotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.QuoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function QuoteIdentifier (unquotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ QuoteIdentifier(System::String ^ unquotedIdentifier);" />
      <MemberSignature Language="F#" Value="override this.QuoteIdentifier : string -&gt; string" Usage="sqlCommandBuilder.QuoteIdentifier unquotedIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unquotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="unquotedIdentifier">Исходный идентификатор без кавычек.</param>
        <summary>При заданном идентификаторе без кавычек в каталоге, набранном в правильном регистре, возвращает заключенный в кавычки идентификатор в корректной форме. При этом корректно исключаются встроенные в идентификатор кавычки.</summary>
        <returns>Версия идентификатора, заключенного кавычки. Кавычки, внедренные в идентификатор, корректно исключаются.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QuotePrefix">
      <MemberSignature Language="C#" Value="public override string QuotePrefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuotePrefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuotePrefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuotePrefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QuotePrefix : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.QuotePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает начальный символ или символы, используемые для указания объектов базы данных SQL Server (например, таблиц или столбцов), имена которых содержат такие символы, как пробелы или зарезервированные токены.</summary>
        <value>Используемый начальный символ или символы. Значение по умолчанию - пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Несмотря на то, что нельзя изменить <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> свойства после вставки, обновления или удаления создана команда, их параметры можно изменить после вызова `Update` метод объекта DataAdapter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство не может быть изменено после создания команды INSERT, UPDATE или DELETE.</exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteSuffix">
      <MemberSignature Language="C#" Value="public override string QuoteSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string QuoteSuffix" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property QuoteSuffix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ QuoteSuffix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QuoteSuffix : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает конечный символ или символы, используемые для указания объектов базы данных SQL Server (например, таблиц или столбцов), имена которых содержат такие символы, как пробелы или зарезервированные токены.</summary>
        <value>Используемый конечный символ или символы. Значение по умолчанию - пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Несмотря на то, что нельзя изменить <xref:System.Data.SqlClient.SqlCommandBuilder.QuotePrefix%2A> или <xref:System.Data.SqlClient.SqlCommandBuilder.QuoteSuffix%2A> свойства после вставки, обновления или удаления создания операции, их параметры можно изменить после вызова `Update` метод объекта DataAdapter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Это свойство не может быть изменено после создания команды INSERT, UPDATE или DELETE.</exception>
      </Docs>
    </Member>
    <Member MemberName="SchemaSeparator">
      <MemberSignature Language="C#" Value="public override string SchemaSeparator { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SchemaSeparator" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SchemaSeparator As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SchemaSeparator { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SchemaSeparator : string with get, set" Usage="System.Data.SqlClient.SqlCommandBuilder.SchemaSeparator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает символ, который используется в качестве разделителя между идентификатором схемы и остальными идентификаторами.</summary>
        <value>Символ, который необходимо использовать в схеме в качестве разделителя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило серверы баз данных указать схему для идентификатора, имя схемы отделяют от идентификатора определенным символом. Например SQL Server используется период, создание качестве, где «Person» — это имя схемы, а «CustomerName» — идентификатор. Задание этого свойства позволяет разработчикам изменять это поведение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRowUpdatingHandler">
      <MemberSignature Language="C#" Value="protected override void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetRowUpdatingHandler(class System.Data.Common.DbDataAdapter adapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetRowUpdatingHandler (adapter As DbDataAdapter)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetRowUpdatingHandler(System::Data::Common::DbDataAdapter ^ adapter);" />
      <MemberSignature Language="F#" Value="override this.SetRowUpdatingHandler : System.Data.Common.DbDataAdapter -&gt; unit" Usage="sqlCommandBuilder.SetRowUpdatingHandler adapter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adapter" Type="System.Data.Common.DbDataAdapter" />
      </Parameters>
      <Docs>
        <param name="adapter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnquoteIdentifier">
      <MemberSignature Language="C#" Value="public override string UnquoteIdentifier (string quotedIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string UnquoteIdentifier(string quotedIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlCommandBuilder.UnquoteIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function UnquoteIdentifier (quotedIdentifier As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ UnquoteIdentifier(System::String ^ quotedIdentifier);" />
      <MemberSignature Language="F#" Value="override this.UnquoteIdentifier : string -&gt; string" Usage="sqlCommandBuilder.UnquoteIdentifier quotedIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="quotedIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="quotedIdentifier">Идентификатор, из которого будут удалены внедренные кавычки.</param>
        <summary>При заданном идентификаторе без кавычек в каталоге, набранном в правильном регистре, возвращает заключенный в кавычки идентификатор в корректной форме. При этом все кавычки, внедренные в идентификатор, корректно сохраняются.</summary>
        <returns>Идентификатор без кавычек, в котором встроенные кавычки корректно сохранены.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>