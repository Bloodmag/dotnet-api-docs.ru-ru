<Type Name="SqlConnection" FullName="System.Data.SqlClient.SqlConnection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="13a8805b62cac7e4548ac44737cd6c5c1dc3578c" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34452441" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlConnection extends System.Data.Common.DbConnection implements class System.Data.IDbConnection, class System.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlConnection" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlConnection&#xA;Inherits DbConnection&#xA;Implements ICloneable, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlConnection sealed : System::Data::Common::DbConnection, ICloneable, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbConnection</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("InfoMessage")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет подключение к базе данных SQL Server. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Data.SqlClient.SqlConnection> представляет уникальный сеанс с источником данных SQL Server. В систему клиента и сервера базы данных является эквивалентом сетевого подключения к серверу. <xref:System.Data.SqlClient.SqlConnection> используется совместно с <xref:System.Data.SqlClient.SqlDataAdapter> и <xref:System.Data.SqlClient.SqlCommand> для увеличения производительности при подключении к базе данных Microsoft SQL Server. Для всех продуктов сторонних разработчиков SQL Server и других источников данных, поддерживаемых OLE DB, используйте <xref:System.Data.OleDb.OleDbConnection>.  
  
 При создании экземпляра <xref:System.Data.SqlClient.SqlConnection>, всем свойствам присваиваются их начальные значения. Список этих значений см. в разделе <xref:System.Data.SqlClient.SqlConnection> конструктор.  
  
 В разделе <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> список ключевых слов в строке подключения.  
  
 Если <xref:System.Data.SqlClient.SqlConnection> выходит за границы области, он не будет закрыт. Таким образом, необходимо явно закрыть подключение путем вызова `Close` или `Dispose`. `Close` и `Dispose` функционально эквивалентны. Если организация пулов соединений значение `Pooling` равно `true` или `yes`, Базовое соединение возвращается в пул подключений. С другой стороны Если `Pooling` равно `false` или `no`, фактически закрыт базового подключения к серверу.  
  
> [!NOTE]
>  События входа в систему и выхода из системы не вызываются на сервере при выборке подключения из пула подключений и при возврате его в пул подключений, поскольку при возврате в пул подключений подключение фактически не закрывается. Дополнительные сведения см. в разделе [Пулы подключений SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
 Чтобы убедиться, что подключения всегда закрыты, откройте подключение внутри `using` блока, как показано в следующем фрагменте кода. Это гарантирует, что соединение закрывается автоматически при выходе в коде из блока.  
  
```vb  
Using connection As New SqlConnection(connectionString)  
    connection.Open()  
    ' Do work here; connection closed on following line.  
End Using  
  
```  
  
```csharp  
using (SqlConnection connection = new SqlConnection(connectionString))  
    {  
        connection.Open();  
        // Do work here; connection closed on following line.  
    }  
```  
  
> [!NOTE]
>  Чтобы развернуть высокопроизводительные приложения, необходимо использовать пул подключений. При использовании поставщика данных .NET Framework для SQL Server нет для включения пула подключений, поскольку поставщик сделал это автоматически, несмотря на то, что некоторые параметры можно изменить. Дополнительные сведения см. в разделе [Пулы подключений SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
 Если <xref:System.Data.SqlClient.SqlException> создается методом, выполняющим <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlConnection> остается открытым, если уровень важности не превышает 19. Когда уровень важности превышает 20, сервер обычно закрывает <xref:System.Data.SqlClient.SqlConnection>. Тем не менее, пользователь может опять открыть подключение и продолжить работу.  
  
 Приложение, которое создает экземпляр <xref:System.Data.SqlClient.SqlConnection> объекта может потребовать все прямые и непрямые вызывающие имеет достаточных разрешений для кода, установив требования декларативной или принудительной безопасности. <xref:System.Data.SqlClient.SqlConnection> делает требования безопасности с помощью <xref:System.Data.SqlClient.SqlClientPermission> объекта. Пользователи могут проверить наличие необходимых разрешений кода с помощью <xref:System.Data.SqlClient.SqlClientPermissionAttribute> объекта. Пользователи и Администраторы могут также использовать [Caspol.exe (средство политики безопасности доступа кода)](~/docs/framework/tools/caspol-exe-code-access-security-policy-tool.md) изменения политики безопасности на уровне компьютера, пользователя и предприятия. Дополнительные сведения см. в разделе [Безопасность](http://msdn.microsoft.com/library/9a9621d7-8883-4a4f-a874-65e8e09e20a6). Пример, демонстрирующий использование требования безопасности см. в разделе [управления доступом для кода и ADO.NET](~/docs/framework/data/adonet/code-access-security.md).  
  
 Дополнительные сведения об обработке предупреждений и информационных сообщений с сервера см. в разделе [события соединения](~/docs/framework/data/adonet/connection-events.md). Ошибки ядра СУБД SQL Server и сообщения об ошибках, описаны в электронной документации по SQL Server.  
  
> [!CAUTION]
>  Вместо общей памяти можно принудительно использовать TCP. Это можно сделать с помощью префикса tcp: к имени сервера в соединении строки, или же можно использовать localhost.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlCommand> и <xref:System.Data.SqlClient.SqlConnection>. <xref:System.Data.SqlClient.SqlConnection> Открыто и задано как <xref:System.Data.SqlClient.SqlCommand.Connection%2A> для <xref:System.Data.SqlClient.SqlCommand>. Затем в примере вызывается <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. Чтобы выполнить это, <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> передается строка подключения и строку запроса, который является [!INCLUDE[tsql](~/includes/tsql-md.md)] инструкции INSERT. Соединение закрывается автоматически при выходе из этого блока.  
  
 [!code-csharp[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlCommand.ExecuteNonQuery Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании нового экземпляра <xref:System.Data.SqlClient.SqlConnection> создается для чтения записи свойствам присваиваются следующие начальные значения, если они заданы особым образом соответствующими ключевыми словами в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> свойство.  
  
|Свойства|Исходное значение|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|Пустая строка (»»)|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|Пустая строка (»»)|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|Пустая строка (»»)|  
  
 Значение этих свойств можно изменить только с помощью <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> свойство. <xref:System.Data.SqlClient.SqlConnectionStringBuilder> Класс предоставляет функциональные возможности для создания и управления содержимым строки соединения.  
  
   
  
## Examples  
 В следующем примере создается и открывается <xref:System.Data.SqlClient.SqlConnection>.  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Подключение, которое используется для открытия базы данных SQL Server.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlConnection" /> после получения строки, содержащей строку соединения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании нового экземпляра <xref:System.Data.SqlClient.SqlConnection> создается для чтения записи свойствам присваиваются следующие начальные значения, если они заданы особым образом соответствующими ключевыми словами в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> свойство.  
  
|Свойства|Исходное значение|  
|----------------|-------------------|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  
|<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|15|  
|<xref:System.Data.SqlClient.SqlConnection.Database%2A>|Пустая строка (»»)|  
|<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>|Пустая строка (»»)|  
  
 Значение этих свойств можно изменить только с помощью <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> свойство. <xref:System.Data.SqlClient.SqlConnection> Класс предоставляет функциональные возможности для создания и управления содержимым строки соединения.  
  
   
  
## Examples  
 В следующем примере создается и открывается <xref:System.Data.SqlClient.SqlConnection>.  
  
 [!code-csharp[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.SqlConnection1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential credential) cil managed" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;xamarinandroid-7.1;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, credential As SqlCredential)" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential);" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString, class System.Data.SqlClient.SqlCredential cred) cil managed" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String, cred As SqlCredential)" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SqlConnection(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ cred);" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" Index="0" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="cred" Type="System.Data.SqlClient.SqlCredential" Index="1" FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="connectionString">Строка подключения, которая не использует какое-либо из следующих ключевых слов строки подключения: <see langword="Integrated Security = true" />, <see langword="UserId" /> и <see langword="Password" />, или не использует <see langword="ContextConnection = true" />.</param>
        <param name="credential">To be added.</param>
        <param name="cred">To be added.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.SqlClient.SqlConnection" />, используя строку подключения, в которой не используется <see langword="Integrated Security = true" />, и объект <see cref="T:System.Data.SqlClient.SqlCredential" />, содержащий идентификатор пользователя и пароль.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessToken">
      <MemberSignature Language="C#" Value="public string AccessToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessToken" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.AccessToken" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessToken As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessToken { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает токен доступа для подключения.</summary>
        <value>Токен доступа для подключения.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDbTransaction">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbTransaction BeginDbTransaction(valuetype System.Data.IsolationLevel isolationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbTransaction ^ BeginDbTransaction(System::Data::IsolationLevel isolationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="isolationLevel" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="isolationLevel">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginTransaction">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Начинает транзакцию базы данных.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction () As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает транзакцию базы данных.</summary>
        <returns>Объект, представляющий новую транзакцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта команда сопоставляется с SQL Server реализации BEGIN TRANSACTION.  
  
 Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> метод. Чтобы обеспечить правильную работу поставщик данных .NET Framework для SQL Server модели управления транзакциями, избегайте использования других моделей управления транзакциями, например, предоставляемых SQL Server.  
  
> [!NOTE]
>  Если уровень изоляции не указан, используется уровень изоляции по умолчанию. Для указания уровня изоляции с <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> метода, используйте перегрузку, которая принимает `iso` параметра (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>). Уровень изоляции транзакции сохраняется после завершения транзакции, и до подключения закрыт или удален. Выбранный уровень изоляции для **моментального снимка** в базе данных, где не включена уровень изоляции моментального снимка не вызывает исключение. Транзакция будет выполнена с использованием уровня изоляции по умолчанию.  
  
> [!CAUTION]
>  Если транзакция запускается, уровень 16 или выше ошибка возникает на сервере будет не выполнен откат транзакции до <xref:System.Data.SqlClient.SqlDataReader.Read%2A> вызывается метод. Исключение не возникает **ExecuteReader**.  
  
> [!CAUTION]
>  Если запрос возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException> возникает, поскольку SQL Server не допускает параллельные транзакции, при использовании режима MARS. Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">Параллельные транзакции не разрешены при использовании режима MARS.</exception>
        <exception cref="T:System.InvalidOperationException">Параллельные транзакции не поддерживаются.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
      </Parameters>
      <Docs>
        <param name="iso">Уровень изоляции, с которым должна выполняться транзакция.</param>
        <summary>Начинает транзакцию базы данных с указанным уровнем изоляции.</summary>
        <returns>Объект, представляющий новую транзакцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта команда сопоставляется с SQL Server реализации BEGIN TRANSACTION.  
  
 Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> метод. Чтобы обеспечить правильную работу поставщик данных .NET Framework для SQL Server модели управления транзакциями, избегайте использования других моделей управления транзакциями, например, предоставляемых SQL Server.  
  
> [!NOTE]
>  После фиксации или отката транзакции уровень изоляции транзакции сохраняется для всех последующих команд, которые находятся в режиме автоматической фиксации (SQL Server по умолчанию). Это может привести к непредвиденным результатам, например уровня изоляции REPEATABLE READ, сохранение и блокировка других пользователей вне строки. Чтобы восстановить уровень изоляции по умолчанию (READ COMMITTED), выполните [!INCLUDE[tsql](~/includes/tsql-md.md)] НАБОР ТРАНЗАКЦИЙ ИЗОЛЯЦИИ УРОВНЯ READ COMMITTED инструкции, либо вызовите <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType> немедленно, а затем <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>. Дополнительные сведения об уровнях изоляции SQL Server см. в разделе «Изоляции уровни в Database Engine» в электронной документации по SQL Server.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
> [!CAUTION]
>  Если запрос возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException> возникает, поскольку SQL Server не допускает параллельные транзакции, при использовании режима MARS. Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">Параллельные транзакции не разрешены при использовании режима MARS.</exception>
        <exception cref="T:System.InvalidOperationException">Параллельные транзакции не поддерживаются.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">Имя транзакции.</param>
        <summary>Начинает транзакцию базы данных с указанным уровнем изоляции.</summary>
        <returns>Объект, представляющий новую транзакцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта команда сопоставляется с SQL Server реализации BEGIN TRANSACTION.  
  
 Длина `transactionName` параметра не должна превышать 32 символов; в противном случае будет создано исключение.  
  
 Значение в `transactionName` параметр может использоваться в последующих вызовах <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> и `savePoint` параметр <xref:System.Data.SqlClient.SqlTransaction.Save%2A> метода.  
  
 Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> метод. Чтобы убедиться в том, что [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] поставщика данных для модели управления транзакциями SQL Server выполняет правильно, избегайте использования других моделей управления транзакциями, например, предоставляемым SQL Server.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
> [!CAUTION]
>  Если запрос возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException> возникает, поскольку SQL Server не допускает параллельные транзакции, при использовании режима MARS. Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">Параллельные транзакции не разрешены при использовании режима MARS.</exception>
        <exception cref="T:System.InvalidOperationException">Параллельные транзакции не поддерживаются.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginTransaction">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlTransaction BeginTransaction(valuetype System.Data.IsolationLevel iso, string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginTransaction (iso As IsolationLevel, transactionName As String) As SqlTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlTransaction ^ BeginTransaction(System::Data::IsolationLevel iso, System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlTransaction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iso" Type="System.Data.IsolationLevel" />
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="iso">Уровень изоляции, с которым должна выполняться транзакция.</param>
        <param name="transactionName">Имя транзакции.</param>
        <summary>Начинает транзакцию базы данных с указанным уровнем изоляции и именем транзакции.</summary>
        <returns>Объект, представляющий новую транзакцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта команда сопоставляется с SQL Server реализации BEGIN TRANSACTION.  
  
 Значение в `transactionName` параметр может использоваться в последующих вызовах <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> и `savePoint` параметр <xref:System.Data.SqlClient.SqlTransaction.Save%2A> метода.  
  
 Необходимо явно зафиксировать или откатить транзакцию с помощью <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> или <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> метод. Чтобы обеспечить правильную работу модели управления транзакциями SQL Server, избегайте использования других моделей управления транзакциями, например, предоставляемых SQL Server.  
  
> [!NOTE]
>  После фиксации или отката транзакции уровень изоляции транзакции сохраняется для всех последующих команд, которые находятся в режиме автоматической фиксации (SQL Server по умолчанию). Это может привести к непредвиденным результатам, например уровня изоляции REPEATABLE READ, сохранение и блокировка других пользователей вне строки. Чтобы восстановить уровень изоляции по умолчанию (READ COMMITTED), выполните [!INCLUDE[tsql](~/includes/tsql-md.md)] НАБОР ТРАНЗАКЦИЙ ИЗОЛЯЦИИ УРОВНЯ READ COMMITTED инструкции, либо вызовите <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=nameWithType> немедленно, а затем <xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=nameWithType>. Дополнительные сведения об уровнях изоляции SQL Server см. в разделе «Изоляции уровни в Database Engine» в электронной документации по SQL Server.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
> [!CAUTION]
>  Если запрос возвращает большой объем данных и вызывает метод `BeginTransaction`, <xref:System.Data.SqlClient.SqlException> возникает, поскольку SQL Server не допускает параллельные транзакции, при использовании режима MARS. Чтобы избежать этой проблемы, всегда связывайте транзакцию с команды и соединения перед открыты любые средства чтения.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">Параллельные транзакции не разрешены при использовании режима MARS.</exception>
        <exception cref="T:System.InvalidOperationException">Параллельные транзакции не поддерживаются.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangeDatabase">
      <MemberSignature Language="C#" Value="public override void ChangeDatabase (string database);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ChangeDatabase(string database) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ChangeDatabase (database As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ChangeDatabase(System::String ^ database);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.ChangeDatabase(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="database" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="database">Имя базы данных, предназначенной для использования вместо текущей базы данных.</param>
        <summary>Осуществляет смену текущей базы данных для открытого соединения <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение, указанное в `database` параметр должен быть действительным именем базы данных. `database` Параметр не может содержать значение null, пустой строкой или строкой, содержащей только из пустых символов.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и отображаются некоторые его свойства только для чтения.  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое имя базы данных.</exception>
        <exception cref="T:System.InvalidOperationException">Соединение не открыто.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Невозможно изменить базу данных.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ChangePassword">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Изменяет пароль SQL Server.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, string newPassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, string newPassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, newPassword As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::String ^ newPassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="newPassword" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="connectionString">Строка подключения, содержащая достаточно информации для подключения к требуемому серверу. В строке подключения должны быть заданы идентификатор пользователя и его текущий пароль.</param>
        <param name="newPassword">Новый пароль. Новый пароль должен соответствовать установленной на сервере политике безопасности паролей, включая минимальную длину, требования к использованию определенных знаков и т. д.</param>
        <summary>Заменяет пароль SQL Server для пользователя, указанного в строке подключения, заданным новым паролем.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании SQL Server в Windows Server, разработчики могут использовать преимущества функциональности, позволяющей клиентскому приложению задать текущий и новый пароль для изменения существующего пароля. Приложения могут реализовывать функции, такие как подтверждения от пользователя ввести новый пароль во время первого входа, если старый истек, и эта операция может выполняться без вмешательства администратора.  
  
 <xref:System.Data.SqlClient.SqlConnection.ChangePassword%2A> Метод изменяет пароль SQL Server для пользователя, указанного в предоставленном `connectionString` параметр значению, переданному в `newPassword` параметра. Если строка подключения содержит параметр для использования встроенной безопасности (т. е «Integrated Security = True» или его эквивалент), создается исключение.  
  
 Чтобы определить, что действия пароля истек, вызвав <xref:System.Data.SqlClient.SqlConnection.Open%2A> вызывает метод <xref:System.Data.SqlClient.SqlException>. Чтобы указать, что необходимо сбросить пароль, который содержится в строке подключения, <xref:System.Data.SqlClient.SqlException.Number%2A> свойство для исключения содержит значение состояния 18487 или 18488. Первое значение (18487) указывает, что срок действия пароля, и второе (18488) указывает, что пароль должен быть сброшен перед вход.  
  
 Этот метод открывает собственное подключение к серверу, запрашивает изменение пароля и закрывает соединение, сразу после ее завершения. Это подключение не получаться и не возвращается в пул подключений SQL Server.  
  
   
  
## Examples  
 Ниже приведен простой пример изменения пароля:  
  
```  
class Program {  
   static void Main(string[] args) {  
      System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password");  
   }  
}  
  
```  
  
```  
Module Module1  
    Sub Main()  
System.Data.SqlClient.SqlConnection.ChangePassword(  
        "Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password",   
       "new_password")  
    End Sub  
End Module  
  
```  
  
 Следующее консольное приложение демонстрирует процесс изменения пароля пользователя истек текущий пароль.  
  
 [!code-csharp[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/CS/source.cs#1)]
 [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/DataWorks SqlConnection.ChangePassword/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Строка подключения содержит параметр, позволяющий использовать встроенную систему безопасности.  Или  Длина параметра <paramref name="newPassword" /> превышает 128 символов.</exception>
        <exception cref="T:System.ArgumentNullException">Либо параметр <paramref name="connectionString" />, либо <paramref name="newPassword" /> имеет значение NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="ChangePassword">
      <MemberSignature Language="C#" Value="public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ChangePassword(string connectionString, class System.Data.SqlClient.SqlCredential credential, class System.Security.SecureString newSecurePassword) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ChangePassword (connectionString As String, credential As SqlCredential, newSecurePassword As SecureString)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ChangePassword(System::String ^ connectionString, System::Data::SqlClient::SqlCredential ^ credential, System::Security::SecureString ^ newSecurePassword);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connectionString" Type="System.String" />
        <Parameter Name="credential" Type="System.Data.SqlClient.SqlCredential" />
        <Parameter Name="newSecurePassword" Type="System.Security.SecureString" />
      </Parameters>
      <Docs>
        <param name="connectionString">Строка подключения, содержащая достаточно информации для подключения к серверу. Строка подключения должна использовать любое из следующих ключевых слов строки подключения: <see langword="Integrated Security = true" />, <see langword="UserId" /> и <see langword="Password" />; или <see langword="ContextConnection = true" />.</param>
        <param name="credential">Объект <see cref="T:System.Data.SqlClient.SqlCredential" />.</param>
        <param name="newSecurePassword">Новый пароль. Параметр <c>newSecurePassword</c> должен быть доступен только для чтения. Пароль должен также соответствовать установленной на сервере политике безопасности паролей, (например, минимальной длине и требованиям к использованию определенных символов).</param>
        <summary>Изменяет пароль SQL Server для пользователя, указанного в объекте <see cref="T:System.Data.SqlClient.SqlCredential" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">1.  Строка подключения содержит любое сочетание <see langword="UserId" />, <see langword="Password" /> и <see langword="Integrated Security=true" />.  2.  Строка подключения содержит <see langword="Context Connection=true" />.  3.  Длина значения параметра <paramref name="newSecurePassword" /> более 128 символов.  4.  Параметр <paramref name="newSecurePassword" /> доступен не только для чтения.  5.  Параметр <paramref name="newSecurePassword" /> равен пустой строке.</exception>
        <exception cref="T:System.ArgumentNullException">Один из параметров (<paramref name="connectionString" />, <paramref name="credential" /> или <paramref name="newSecurePassword" />) имеет значение NULL.</exception>
      </Docs>
    </Member>
    <Member MemberName="ClearAllPools">
      <MemberSignature Language="C#" Value="public static void ClearAllPools ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearAllPools() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearAllPools" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearAllPools ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearAllPools();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Очищает пул подключений.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClearAllPools%2A> Сбрасывает или очищает пул подключений. При наличии подключения, используемые во время вызова они соответствующим образом помечаются и будут удалены (а возвращены в пул) при <xref:System.Data.SqlClient.SqlConnection.Close%2A> вызывается на них.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearPool">
      <MemberSignature Language="C#" Value="public static void ClearPool (System.Data.SqlClient.SqlConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearPool(class System.Data.SqlClient.SqlConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearPool (connection As SqlConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearPool(System::Data::SqlClient::SqlConnection ^ connection);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.SqlClient.SqlConnection" />
      </Parameters>
      <Docs>
        <param name="connection">Подключение <see cref="T:System.Data.SqlClient.SqlConnection" />, которое требуется удалить из пула.</param>
        <summary>Очищает пул подключений, связанный с заданным подключением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClearPool%2A> Очищает пул подключений, с которым связан `connection`. Если дополнительные подключения, связанные с `connection` , используется во время вызова они соответствующим образом помечаются и удаляются (а возвращены в пул), когда <xref:System.Data.SqlClient.SqlConnection.Close%2A> вызывается на них.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientConnectionId">
      <MemberSignature Language="C#" Value="public Guid ClientConnectionId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid ClientConnectionId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ClientConnectionId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientConnectionId As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid ClientConnectionId { Guid get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Идентификатор соединения последней попытки подключения, независимо от того, успешно ли выполнена попытка или завершилась ошибкой.</summary>
        <value>Идентификатор соединения последней попытки соединения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ClientConnectionId%2A> работает независимо от того, какая версия сервера устанавливается соединение, но журналы расширенных событий и записи по ошибкам кольцевого буфера соединений будет отсутствовать в [!INCLUDE[sskatmai_r2](~/includes/sskatmai-r2-md.md)] и более ранних версий.  
  
 Идентификатор соединения можно найти в журнале расширенных событий, чтобы увидеть ли Включение расширенных событий в журнале идентификатор соединения для произошла ошибка на сервере. Идентификатор соединения можно также найти в кольцевом буфере соединений ([Устранение неполадок подключения в SQL Server 2008 с помощью кольцевого буфера подключения](http://go.microsoft.com/fwlink/?LinkId=207752)) для определенных ошибок подключения. Если идентификатор подключения не находится в кольцевом буфере соединений, можно предположить сетевая ошибка.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Close</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает соединение с базой данных. Рекомендуется использовать этот метод для закрытия любого открытого подключения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.Close%2A> Метод откатывает все отложенные транзакции. Освобождает соединение в пул подключений или закрывает подключение, если пул подключений отключен.  
  
> [!NOTE]
>  Отложенные транзакции, запущенные с помощью [!INCLUDE[tsql](~/includes/tsql-md.md)] или <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> автоматически откатывается подключение сбрасывается, если включен пул соединений. Если пул подключений отключен, транзакция откатывается после `SqlConnection.Close` вызывается. Транзакции, запущенные посредством <xref:System.Transactions> осуществляется с помощью `System.Transactions` инфраструктуры и они не подвержены `SqlConnection.Close`.  
  
 Приложение может вызвать <xref:System.Data.SqlClient.SqlConnection.Close%2A> более одного раза. Исключение не формируется.  
  
 Если <xref:System.Data.SqlClient.SqlConnection> выходит за границы области, он не будет закрыт. Таким образом, необходимо явно закрыть подключение путем вызова `Close` или `Dispose`. `Close` и `Dispose` функционально эквивалентны. Если организация пулов соединений значение `Pooling` равно `true` или `yes`, Базовое соединение возвращается в пул подключений. С другой стороны Если `Pooling` равно `false` или `no`, закрытия базового подключения к серверу.  
  
> [!NOTE]
>  События входа в систему и выхода из системы не вызываются на сервере при выборке подключения из пула подключений и при возврате его в пул подключений, поскольку при возврате в пул подключений подключение фактически не закрывается. Дополнительные сведения см. в разделе [Пулы подключений SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
> [!CAUTION]
>  Не вызывайте `Close` или `Dispose` на соединение, DataReader или любого другого управляемого объекта в `Finalize` метод класса. Метод завершения следует только освобождать неуправляемые ресурсы, которыми ваш класс непосредственно владеет. Если класс не владеет какими-либо неуправляемыми ресурсами, не включайте в его определение метод `Finalize`. Дополнительные сведения см. в разделе [мусора](~/docs/standard/garbage-collection/index.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection>, выполняется его открытие, отображаются некоторые его свойства. Соединение закрывается автоматически в конце `using` блока.  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.SqlClient.SqlException">При открытии подключения произошла ошибка на уровне подключения.</exception>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionKeyCacheTtl">
      <MemberSignature Language="C#" Value="public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.TimeSpan ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionKeyCacheTtl As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeSpan ColumnEncryptionKeyCacheTtl { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает срок жизни для записей ключей шифрования столбцов в кэше ключей шифрования столбцов для функции [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine). Значение по умолчанию — 2 часа. 0 означает отсутствие кэширования.</summary>
        <value>Интервал времени.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionQueryMetadataCacheEnabled">
      <MemberSignature Language="C#" Value="public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property ColumnEncryptionQueryMetadataCacheEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool ColumnEncryptionQueryMetadataCacheEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, включено ли кэширование метаданных запроса (True) или нет (False) для параметризованных запросов к базам данных с поддержкой функции [Always Encrypted](/sql/relational-databases/security/encryption/always-encrypted-database-engine). Значение по умолчанию — true.</summary>
        <value>Возвращает значение True, если кэширование метаданных запроса включено; в противном случае — значение False. Значение True — это значение по умолчанию.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для параметризованных запросов SqlClient совершается обмен данными с SQL Server для параметра метаданных, чтобы увидеть, какой параметр, его необходимо зашифровать и как (какие ключи и алгоритмы следует использовать). Если приложение вызывает тот же запрос несколько раз, дополнительное обращение выполняется на сервере каждый раз приводит к снижению производительности приложения.  
  
 С **ColumnEncryptionQueryMetadataCacheEnabled** задано значение true, если тот же запрос вызывается несколько раз, обращение к серверу будут выполняться только один раз. В кэше имеется ненастраиваемые Max параметр размера, равное 2000 запросов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnEncryptionTrustedMasterKeyPaths">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IDictionary&lt;string,System.Collections.Generic.IList&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Collections.Generic.IDictionary`2&lt;string, class System.Collections.Generic.IList`1&lt;string&gt;&gt; ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ColumnEncryptionTrustedMasterKeyPaths As IDictionary(Of String, IList(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ ColumnEncryptionTrustedMasterKeyPaths { System::Collections::Generic::IDictionary&lt;System::String ^, System::Collections::Generic::IList&lt;System::String ^&gt; ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.Collections.Generic.IList&lt;System.String&gt;&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Позволяет задать список доверенных путей к разделам для сервера базы данных. Если при обработке запроса приложения драйвер получает путь к разделу, которого нет в списке, запрос завершится ошибкой. Это свойство обеспечивает дополнительную защиту от атак на систему безопасности, которые подразумевают предоставление скомпрометированным сервером SQL Server неверных путей к разделам, что может привести к утечке учетных данных хранилища ключей.</summary>
        <value>Список доверенных путей к главным ключам для шифрования столбца.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionString">
      <MemberSignature Language="C#" Value="public override string ConnectionString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ConnectionString" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ConnectionString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ConnectionString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionString</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.SQL.Design.SqlConnectionStringEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает строку, используемую для открытия базы данных SQL Server.</summary>
        <value>Строка подключения, включающая имя источника базы данных и другие параметры, необходимые для установки исходного подключения. Значение по умолчанию - пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> Аналогична строке подключения OLE DB, но не совпадает. В отличие от OLE DB или ADO, возвращаемая строка соединения является заданной пользователем <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>, за вычетом сведения о безопасности, если Persist Security Info имеет значение `false` (по умолчанию). Поставщик данных .NET Framework для SQL Server не сохраняет и не возвращает пароль в строке подключения, равным Persist Security Info `true`.  
  
 Можно использовать <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> свойства для подключения к базе данных. В следующем примере строка соединения.  
  
```  
"Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)"  
```  
  
 Используйте новую <xref:System.Data.SqlClient.SqlConnectionStringBuilder> для создания допустимых строк соединения во время выполнения. Дополнительные сведения см. в разделе [построители строк соединения](~/docs/framework/data/adonet/connection-string-builders.md).  
  
 <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> Может быть установлено только в том случае, если подключение закрывается. Многие значения строки подключения имеют соответствующие свойства только для чтения. Когда задана строка соединения, эти свойства обновляются, за исключением того, при обнаружении ошибки. В этом случае ни одно свойство обновляются. <xref:System.Data.SqlClient.SqlConnection> свойства возвращают только те параметры, которые содержатся в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.  
  
 Чтобы подключиться к локальному компьютеру, укажите «(local)» для сервера. Если не указано имя сервера, подключение будет предпринята попытка экземпляр по умолчанию на локальном компьютере.  
  
 Сброс <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> для закрытого соединения сбрасывает все значения строки подключения (и связанные с ним свойства), включая пароль. Например, если задать строку подключения, которая включает» базы данных = AdventureWorks», а затем снова строку подключения к» источника данных = myserver; Integrated Security = true», <xref:System.Data.SqlClient.SqlConnection.Database%2A> больше не задано значение «AdventureWorks».  
  
 Строка соединения анализируется сразу после установки. Если обнаружены ошибки синтаксиса во время синтаксического анализа, исключение времени выполнения, такие как <xref:System.ArgumentException>, создается. Другие ошибки можно найти только в том случае, при попытке открыть соединение.  
  
 Базовый формат строки подключения содержит ряд пар ключевых слов и значений, разделенных точкой с запятой. Знак равенства (=) соединяет каждое ключевое слово и его значение. Чтобы включить значения, содержащие точку с запятой, знак одинарной или двойной кавычки, значение должно заключаться в двойные кавычки. Если значение содержит точку с запятой и символ двойной кавычки, значение может заключаться в одинарные кавычки. Одинарная кавычка также полезна, если значение начинается с символа двойной кавычки. И наоборот двойные кавычки можно использовать, если значение начинается с одинарной кавычки. Если значение содержит символы одинарных и двойных кавычек, знак кавычек для выделения значения необходимо повторить все вхождения в пределах значения.  
  
 Чтобы включить начальные или конечные пробелы в строковое значение, значение должны заключаться в одинарные кавычки или двойные кавычки. Все начальные или конечные пробелы вокруг целое число, логическое значение или последовательность значений, игнорируются, даже если они заключены в кавычки. Однако пробелы внутри ключевое слово-литерал строки или значения сохраняются. Одинарные или двойные кавычки могут использоваться в строке подключения без разделителей (например, Data Source = my'Server или Data Source = my Server «), если символ кавычки не является первым или последним символом в значении.  
  
 Ключевые слова не учитывают регистр.  
  
 В следующей таблице перечислены допустимые имена для значений ключевых слов в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>.  
  
  В следующем списке приведены допустимые имена для значений пула подключений в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>. Дополнительные сведения см. в разделе [Пулы подключений SQL Server (ADO.NET)](~/docs/framework/data/adonet/sql-server-connection-pooling.md).  
  
-   Время жизни подключения (или Load Balance Timeout)  
  
-   Enlist  
  
-   Max Pool Size  
  
-   Min Pool Size  
  
-   Pooling  
  
 При указании ключевого слова или значений пула подключений, требующих логических значений, можно использовать «Да» вместо «true» и «нет» вместо «false». Целочисленные значения, представляются в виде строки.  
  
> [!NOTE]
>  Поставщик данных .NET Framework для SQL Server использует собственный протокол для взаимодействия с SQL Server. Таким образом он не поддерживает использование имя источника данных ODBC (DSN) при подключении к SQL Server, так как он не добавляет уровень ODBC.  
  
> [!NOTE]
>  Файлы универсальной связи (UDL) данных не поддерживается для поставщика данных .NET Framework для SQL Server.  
  
> [!CAUTION]
>  В этом выпуске приложения следует проявлять осторожность при построении строки подключения на основе ввода пользователя (например, при извлечении идентификатора и пароля пользователя из диалоговое окно и добавить его в строку подключения). Приложение должно гарантировать, что пользователь не удается внедрить в эти значения дополнительные параметры строки подключения (например, ввести пароль в виде «validpassword; базы данных = somedb» при попытке присоединения к другой базе данных). Если вам нужно создавать строки соединения на основе ввода пользователя, использовать новую <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, который проверяет строку подключения и помогает избежать этой проблемы. В разделе [построители строк подключения](~/docs/framework/data/adonet/connection-string-builders.md) для получения дополнительной информации.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и задает <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> свойства до открытия соединения.  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Передан недопустимый аргумент строки подключения, или не задан обязательный аргумент строки подключения.</exception>
      </Docs>
    </Member>
    <Member MemberName="ConnectionTimeout">
      <MemberSignature Language="C#" Value="public override int ConnectionTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ConnectionTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ConnectionTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ConnectionTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ConnectionTimeout { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.ConnectionTimeout</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает время ожидания при попытке установки подключения, по истечении которого попытка подключения завершается и создается ошибка.</summary>
        <value>Время (в секундах), в течение которого должно производиться ожидание открытия соединения. Значение по умолчанию - 15 секунды.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно задать время ожидания подключения для времени ожидания с помощью `Connect Timeout` или `Connection Timeout` ключевые слова в строке подключения. Значение 0 означает отсутствие ограничений и следует избегать в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> так, как попытка подключения ждет неопределенно долгое время.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и задает `Connection Timeout` до 30 секунд в строке подключения. Код открывает соединение и отображает <xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> свойства в окне консоли.  
  
 [!code-csharp[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.ConnectionTimeout Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Заданное значение меньше 0.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateCommand">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCommand CreateCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.SqlClient.SqlCommand CreateCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateCommand () As SqlCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::SqlClient::SqlCommand ^ CreateCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает и возвращает объект <see cref="T:System.Data.SqlClient.SqlCommand" />, связанный с <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <returns>Объект <see cref="T:System.Data.SqlClient.SqlCommand" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[SqlConnection_CreateCommand#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/sqlconnection_createcommand/cs/source.cs#1)]
 [!code-vb[SqlConnection_CreateCommand#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/sqlconnection_createcommand/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDbCommand">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbCommand CreateDbCommand ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.DbCommand CreateDbCommand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.CreateDbCommand" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateDbCommand () As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::DbCommand ^ CreateDbCommand();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credential">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credential { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credential" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credential" />
      <MemberSignature Language="VB.NET" Value="Public Property Credential As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credential { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект <see cref="T:System.Data.SqlClient.SqlCredential" /> для этого подключения.</summary>
        <value>Объект <see cref="T:System.Data.SqlClient.SqlCredential" /> для этого подключения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Persist Security Info = true` Для получения значения требуется <xref:System.Data.SqlClient.SqlCredential> объекта с <xref:System.Data.SqlClient.SqlConnection.Credential%2A>.  
  
 Значение по умолчанию <xref:System.Data.SqlClient.SqlConnection.Credential%2A> имеет значение null.  
  
 <xref:System.InvalidOperationException> Будет порождено исключение:  
  
-   Если <xref:System.Data.SqlClient.SqlConnection.Credential%2A> устанавливается на открытое соединение.  
  
-   Если <xref:System.Data.SqlClient.SqlConnection.Credential%2A> устанавливается при `Context Connection=true`.  
  
-   Если <xref:System.Data.SqlClient.SqlConnection.Credential%2A> устанавливается при `Integrated Security = true`.  
  
-   Если <xref:System.Data.SqlClient.SqlConnection.Credential%2A> будет установлен, если в строке подключения используется `Password`.  
  
-   Если <xref:System.Data.SqlClient.SqlConnection.Credential%2A> будет установлен, если в строке подключения используется `UserID`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlCredential Credentials { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlCredential Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Property Credentials As SqlCredential" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlCredential ^ Credentials { System::Data::SqlClient::SqlCredential ^ get(); void set(System::Data::SqlClient::SqlCredential ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlCredential</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Database">
      <MemberSignature Language="C#" Value="public override string Database { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Database" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.Database" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Database As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Database { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.Database</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя текущей базы данных или базы данных, которая будет использоваться после открытия подключения.</summary>
        <value>Имя текущей базы данных или базы данных, которая будет использоваться после открытия подключения. Значение по умолчанию - пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection.Database%2A> Свойство обновляется динамически. При изменении текущей базы данных с помощью [!INCLUDE[tsql](~/includes/tsql-md.md)] инструкции или <xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A> , метод информационное сообщение отправляется и свойство обновляется автоматически.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и отображаются некоторые его свойства только для чтения.  
  
 [!code-csharp[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Database Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Database Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public override string DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property DataSource As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ DataSource { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя экземпляра SQL Server, к которому осуществляется подключение.</summary>
        <value>Имя экземпляра SQL Server, к которому выполняется подключение. Значение по умолчанию - пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Data.SqlClient.SqlConnection.DataSource%2A> Возвращает `null` Если строка соединения для <xref:System.Data.SqlClient.SqlConnection> — «контекстное соединение = true».  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и отображаются некоторые его свойства только для чтения.  
  
 [!code-csharp[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbProviderFactory">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbProviderFactory DbProviderFactory" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.DbProviderFactory" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbProviderFactory As DbProviderFactory" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbProviderFactory ^ DbProviderFactory { System::Data::Common::DbProviderFactory ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbProviderFactory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistDistributedTransaction">
      <MemberSignature Language="C#" Value="public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnlistDistributedTransaction(class System.EnterpriseServices.ITransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnlistDistributedTransaction (transaction As ITransaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnlistDistributedTransaction(System::EnterpriseServices::ITransaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.EnterpriseServices.ITransaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Ссылка на существующий объект <see cref="T:System.EnterpriseServices.ITransaction" />, к которому выполняется присоединение.</param>
        <summary>Выполняет присоединение указанной транзакции как распределенной транзакции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> метод прикрепление к распределенной транзакции. Так как он прикрепляет подключение к <xref:System.Transactions.Transaction> экземпляра, **EnlistTransaction** использует преимущества функций, доступных в <xref:System.Transactions> пространство имен для управления распределенные транзакции, сделав его более предпочтительным, чем ** EnlistDistributedTransaction** для этой цели. Дополнительные сведения см. в разделе [распределенные транзакции](~/docs/framework/data/adonet/distributed-transactions.md).  
  
 Можно продолжить прикрепить его к существующей распределенной транзакции с помощью **EnlistDistributedTransaction** метод, если автоматическое прикрепление отключено. Прикрепление к существующей распределенной транзакции гарантирует, что, если транзакция фиксируется или откатывается назад, изменения, выполненные кодом в источнике данных также фиксации или отката.  
  
 `EnlistDistributedTransaction` Возвращает исключение, если <xref:System.Data.SqlClient.SqlConnection> уже запустил транзакцию, используя <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>. Тем не менее если транзакция является локальной транзакции, запущенной из источника данных (например, путем явного выполнения инструкции BEGIN TRANSACTION с помощью <xref:System.Data.SqlClient.SqlCommand> объекта), **EnlistDistributedTransaction** откат локальную транзакцию и прикрепляется к существующей распределенной транзакции, согласно запросу. Вы не получите уведомления об откате локальной транзакции, ответственность за управление любыми локальными транзакциями не запущены с использованием <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnlistTransaction">
      <MemberSignature Language="C#" Value="public override void EnlistTransaction (System.Transactions.Transaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EnlistTransaction(class System.Transactions.Transaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EnlistTransaction(System::Transactions::Transaction ^ transaction);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transaction" Type="System.Transactions.Transaction" />
      </Parameters>
      <Docs>
        <param name="transaction">Ссылка на существующий объект <see cref="T:System.Transactions.Transaction" />, к которому выполняется присоединение.</param>
        <summary>Выполняет присоединение указанной транзакции как распределенной транзакции.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать <xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> метод прикрепление к распределенной транзакции. Так как он прикрепляет подключение к <xref:System.Transactions.Transaction> экземпляра, **EnlistTransaction** использует преимущества функций, доступных в <xref:System.Transactions> пространство имен для управления распределенные транзакции, сделав его более предпочтительным, чем ** EnlistDistributedTransaction**, которая использует **System.EnterpriseServices.ITransaction** объекта. Он также имеет различную семантику: после явного прикрепления соединения к транзакции, не может быть откреплено или прикреплено в другой транзакции до завершения первой транзакции. Дополнительные сведения о распределенных транзакциях см. в разделе [распределенные транзакции](~/docs/framework/data/adonet/distributed-transactions.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FireInfoMessageEventOnUserErrors">
      <MemberSignature Language="C#" Value="public bool FireInfoMessageEventOnUserErrors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />
      <MemberSignature Language="VB.NET" Value="Public Property FireInfoMessageEventOnUserErrors As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FireInfoMessageEventOnUserErrors { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает свойство <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" />.</summary>
        <value>Значение <see langword="true" />, если свойство <see cref="P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors" /> задано. В противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> для `true`, ошибки, которые были ранее рассматривается как исключения теперь организованы в виде <xref:System.Data.SqlClient.SqlConnection.InfoMessage> события. Все события генерируются немедленно и обрабатываются обработчиком событий. Если — <xref:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors%2A> равно `false`, затем <xref:System.Data.SqlClient.SqlConnection.InfoMessage> события обрабатываются в конце процедуры.  
  
> [!NOTE]
>  Ошибки со степенью серьезности 17 и выше, приводит к прекращению обработки команды сервера должен обрабатываться как исключение. В этом случае исключение формируется независимо от того, как обрабатывается ошибка в событии <xref:System.Data.SqlClient.SqlConnection.InfoMessage>.  
  
 Дополнительные сведения о работе с событиями см. в разделе [события соединения](~/docs/framework/data/adonet/connection-events.md). Дополнительные сведения об ошибках ядра SQL Server см. в разделе электронной документации по SQL Server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetSchema">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает сведения схемы для источника данных этого объекта <see cref="T:System.Data.SqlClient.SqlConnection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При попытке получить сведения о схеме для более чем одной версии хранимой процедуры, схема для последнего возвращается только. Дополнительные сведения о версиях хранимых процедур см. в разделе электронной документации по SQL Server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema () As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает сведения схемы для источника данных этого объекта <see cref="T:System.Data.SqlClient.SqlConnection" />. Дополнительные сведения о схеме см. в разделе [Коллекции схемы SQL Server](http://msdn.microsoft.com/library/ms254969.aspx).</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" />, содержащий сведения схемы.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="collectionName">Определяет имя схемы, которая должна быть возвращена.</param>
        <summary>Возвращает сведения схемы для источника данных этого объекта <see cref="T:System.Data.SqlClient.SqlConnection" />, используя указанную строку для имени схемы.</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" />, содержащий сведения схемы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Может потребоваться сведения о схеме базы данных, таблиц или столбцов. В этом примере:  
  
-   GetSchema используется для получения сведений о схеме.  
  
-   Позволяет получить указанные сведения об ограничения схемы.  
  
-   Возвращает сведения о схеме из базы данных, таблицы и столбцы.  
  
 Перед запуском примера необходимо создать образец базы данных с помощью следующих [!INCLUDE[tsql](~/includes/tsql-md.md)]:  
  
```  
USE [master]  
GO  
  
CREATE DATABASE [MySchool]   
  
GO  
  
USE [MySchool]  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Course]([CourseID] [nvarchar](10) NOT NULL,  
[Year] [smallint] NOT NULL,  
[Title] [nvarchar](100) NOT NULL,  
[Credits] [int] NOT NULL,  
[DepartmentID] [int] NOT NULL,  
 CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED   
(  
[CourseID] ASC,  
[Year] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
SET ANSI_NULLS ON  
GO  
SET QUOTED_IDENTIFIER ON  
GO  
CREATE TABLE [dbo].[Department]([DepartmentID] [int] IDENTITY(1,1) NOT NULL,  
[Name] [nvarchar](50) NOT NULL,  
[Budget] [money] NOT NULL,  
[StartDate] [datetime] NOT NULL,  
[Administrator] [int] NULL,  
 CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED   
(  
[DepartmentID] ASC  
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]  
  
GO  
  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1045', 2012, N'Calculus', 4, 7)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C1061', 2012, N'Physics', 4, 1)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2021', 2012, N'Composition', 3, 2)  
INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N'C2042', 2012, N'Literature', 4, 2)  
  
SET IDENTITY_INSERT [dbo].[Department] ON   
  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N'Engineering', 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N'English', 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N'Economics', 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)  
INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N'Mathematics', 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)  
SET IDENTITY_INSERT [dbo].[Department] OFF  
  
ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])  
REFERENCES [dbo].[Department] ([DepartmentID])  
GO  
ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]  
GO  
```  
  
 [Как получить сведения о схеме из базы данных](https://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2) имеет версий этот пример кода C# и Visual Basic в проект Visual Studio.  
  
```  
using System;  
using System.Data;  
using System.Data.SqlClient;  
  
class Program {  
   static void Main(string[] args) {  
  
      using (SqlConnection conn = new SqlConnection("Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;")) {  
         conn.Open();  
  
         // Get the Meta Data for Supported Schema Collections  
         DataTable metaDataTable = conn.GetSchema("MetaDataCollections");  
  
         Console.WriteLine("Meta Data for Supported Schema Collections:");  
         ShowDataTable(metaDataTable, 25);  
         Console.WriteLine();  
  
         // Get the schema information of Databases in your instance  
         DataTable databasesSchemaTable = conn.GetSchema("Databases");  
  
         Console.WriteLine("Schema Information of Databases:");  
         ShowDataTable(databasesSchemaTable, 25);  
         Console.WriteLine();  
  
         // First, get schema information of all the tables in current database;  
         DataTable allTablesSchemaTable = conn.GetSchema("Tables");  
  
         Console.WriteLine("Schema Information of All Tables:");  
         ShowDataTable(allTablesSchemaTable, 20);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Table Type to get   
         // the specified table(s).  
         // You can use four restrictions for Table, so you should create a 4 members array.  
         String[] tableRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Table Type.   
         // Now we specify the Table Name of the table what we want to get schema information.  
         tableRestrictions[2] = "Course";  
  
         DataTable courseTableSchemaTable = conn.GetSchema("Tables", tableRestrictions);  
  
         Console.WriteLine("Schema Information of Course Tables:");  
         ShowDataTable(courseTableSchemaTable, 20);  
         Console.WriteLine();  
  
         // First, get schema information of all the columns in current database.  
         DataTable allColumnsSchemaTable = conn.GetSchema("Columns");  
  
         Console.WriteLine("Schema Information of All Columns:");  
         ShowColumns(allColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).  
         // You can use four restrictions for Column, so you should create a 4 members array.  
         String[] columnRestrictions = new String[4];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         columnRestrictions[2] = "Course";  
         columnRestrictions[3] = "DepartmentID";  
  
         DataTable departmentIDSchemaTable = conn.GetSchema("Columns", columnRestrictions);  
  
         Console.WriteLine("Schema Information of DepartmentID Column in Course Table:");  
         ShowColumns(departmentIDSchemaTable);  
         Console.WriteLine();  
  
         // First, get schema information of all the IndexColumns in current database  
         DataTable allIndexColumnsSchemaTable = conn.GetSchema("IndexColumns");  
  
         Console.WriteLine("Schema Information of All IndexColumns:");  
         ShowIndexColumns(allIndexColumnsSchemaTable);  
         Console.WriteLine();  
  
         // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to   
         // get the specified column(s).  
         // You can use five restrictions for Column, so you should create a 5 members array.  
         String[] indexColumnsRestrictions = new String[5];  
  
         // For the array, 0-member represents Catalog; 1-member represents Schema;   
         // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.   
         // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.  
         indexColumnsRestrictions[2] = "Course";  
         indexColumnsRestrictions[4] = "CourseID";  
  
         DataTable courseIdIndexSchemaTable = conn.GetSchema("IndexColumns", indexColumnsRestrictions);  
  
         Console.WriteLine("Index Schema Information of CourseID Column in Course Table:");  
         ShowIndexColumns(courseIdIndexSchemaTable);  
         Console.WriteLine();  
      }  
  
      Console.WriteLine("Please press any key to exit...");  
      Console.ReadKey();  
   }  
  
   private static void ShowDataTable(DataTable table, Int32 length) {  
      foreach (DataColumn col in table.Columns) {  
         Console.Write("{0,-" + length + "}", col.ColumnName);  
      }  
      Console.WriteLine();  
  
      foreach (DataRow row in table.Rows) {  
         foreach (DataColumn col in table.Columns) {  
            if (col.DataType.Equals(typeof(DateTime)))  
               Console.Write("{0,-" + length + ":d}", row[col]);  
            else if (col.DataType.Equals(typeof(Decimal)))  
               Console.Write("{0,-" + length + ":C}", row[col]);  
            else  
               Console.Write("{0,-" + length + "}", row[col]);  
         }  
         Console.WriteLine();  
      }  
   }  
  
   private static void ShowDataTable(DataTable table) {  
      ShowDataTable(table, 14);  
   }  
  
   private static void ShowColumns(DataTable columnsTable) {  
      var selectedRows = from info in columnsTable.AsEnumerable()  
                         select new {  
                            TableCatalog = info["TABLE_CATALOG"],  
                            TableSchema = info["TABLE_SCHEMA"],  
                            TableName = info["TABLE_NAME"],  
                            ColumnName = info["COLUMN_NAME"],  
                            DataType = info["DATA_TYPE"]  
                         };  
  
      Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", "TableCatalog", "TABLE_SCHEMA",  
          "TABLE_NAME", "COLUMN_NAME", "DATA_TYPE");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}", row.TableCatalog,  
             row.TableSchema, row.TableName, row.ColumnName, row.DataType);  
      }  
   }  
  
   private static void ShowIndexColumns(DataTable indexColumnsTable) {  
      var selectedRows = from info in indexColumnsTable.AsEnumerable()  
                         select new {  
                            TableSchema = info["table_schema"],  
                            TableName = info["table_name"],  
                            ColumnName = info["column_name"],  
                            ConstraintSchema = info["constraint_schema"],  
                            ConstraintName = info["constraint_name"],  
                            KeyType = info["KeyType"]  
                         };  
  
      Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", "table_schema", "table_name", "column_name", "constraint_schema", "constraint_name", "KeyType");  
      foreach (var row in selectedRows) {  
         Console.WriteLine("{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}", row.TableSchema,  
             row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);  
      }  
   }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="collectionName" /> указан как null.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSchema">
      <MemberSignature Language="C#" Value="public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Data.DataTable GetSchema(string collectionName, string[] restrictionValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetSchema (collectionName As String, restrictionValues As String()) As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Data::DataTable ^ GetSchema(System::String ^ collectionName, cli::array &lt;System::String ^&gt; ^ restrictionValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionName" Type="System.String" />
        <Parameter Name="restrictionValues" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="collectionName">Определяет имя схемы, которая должна быть возвращена.</param>
        <param name="restrictionValues">Набор значений ограничений для запрошенной схемы.</param>
        <summary>Возвращает сведения схемы для источника данных этого объекта <see cref="T:System.Data.SqlClient.SqlConnection" />, используя указанную строку для имени схемы и указанный массив строк для значений ограничений.</summary>
        <returns>Объект <see cref="T:System.Data.DataTable" />, содержащий сведения схемы.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `restrictionValues` Можно указать параметр *n* глубину значения, которые указаны в коллекции ограничений для конкретной коллекции. Чтобы задать значения в данном ограничении и не задавать значения в других ограничениях, необходимо задать выше ограничения `null` , а затем указать соответствующее значение в ограничении, необходимо указать значение для.  
  
 Примером этого является коллекцией «Таблицы». Если коллекция «Таблицы» имеет три ограничения — база данных, владелец и имя таблицы — и вы хотите вернуть только таблицы, связанные с владельцем «Carl», необходимо передать следующие значения: null, «Carl». Если значение ограничения не передается, для этого ограничения используются значения по умолчанию. Такое же сопоставление соответствует передаче `null`, который отличается от передачи пустой строки для значения параметра. В этом случае пустая строка ("») считается значение указанного параметра.  
  
 Пример кода, демонстрировать <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>, в разделе <xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="collectionName" /> указан как null.</exception>
        <altmember cref="M:System.Data.SqlClient.SqlConnection.GetSchema" />
      </Docs>
    </Member>
    <Member MemberName="InfoMessage">
      <MemberSignature Language="C#" Value="public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage" />
      <MemberSignature Language="DocId" Value="E:System.Data.SqlClient.SqlConnection.InfoMessage" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event InfoMessage As SqlInfoMessageEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::SqlClient::SqlInfoMessageEventHandler ^ InfoMessage;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlInfoMessageEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возникает, когда SQL Server возвращает предупреждение или информационное сообщение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Клиенты, которые нужно обработать предупреждения или информационные сообщения, отправляемые сервером следует создать <xref:System.Data.SqlClient.SqlInfoMessageEventHandler> делегат для прослушивания этого события.  
  
 <xref:System.Data.SqlClient.SqlConnection.InfoMessage> Событие возникает при получении сообщения с уровнем серьезности 10 или меньше, возвращается в SQL Server. Сообщения с уровнем серьезности от 11 до 20 вызывают ошибки и сообщения с уровнем серьезности превышающем 20 закрытие соединения. Дополнительные сведения об уровнях ошибка SQL Server. в разделе «Изоляции» электронной документации по SQL Server.  
  
 Дополнительные сведения и пример см. в разделе [события соединения](~/docs/framework/data/adonet/connection-events.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public override void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.Open" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Open();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbConnection.Open</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Открывает подключение к базе данных со значениями свойств, определяемыми объектом <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlConnection> Удаляет подключение из пула соединений, если он доступен. В противном случае он устанавливает новое соединение с экземпляром SQL Server.  
  
> [!NOTE]
>  Если <xref:System.Data.SqlClient.SqlConnection> выходит за границы области, он не закрыт. Таким образом, необходимо явно закрыть подключение путем вызова <xref:System.Data.SqlClient.SqlConnection.Close%2A>.  
  
> [!NOTE]
>  Если указать номер порта 1433, при попытке подключиться к экземпляру SQL Server с помощью протокола, отличного от TCP/IP, <xref:System.Data.SqlClient.SqlConnection.Open%2A> метод завершается ошибкой. Чтобы указать номер порта 1433, включите «server = ИмяКомпьютера, номер порта» в строку подключения и используйте протокол TCP/IP.  
  
> [!NOTE]
>  Поставщик данных .NET Framework для SQL Server требует разрешения безопасности с «позволяет вызовы в неуправляемые сборки» включена (<xref:System.Security.Permissions.SecurityPermission> с <xref:System.Security.Permissions.SecurityPermissionFlag> значение `UnmanagedCode`) для открытия <xref:System.Data.SqlClient.SqlConnection> в режиме отладки SQL.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection>, он открывает и отображает некоторые из его свойств. Соединение закрывается автоматически в конце `using` блока.  
  
 [!code-csharp[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.Open Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.Open Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Невозможно открыть подключение без указания источника данных или сервера.  или  Подключение уже открыто.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">При открытии подключения произошла ошибка на уровне подключения. Если свойство <see cref="P:System.Data.SqlClient.SqlException.Number" /> содержит значение 18 487 или 18 488, это означает, что действие указанного пароля истекло или что пароль должен быть сброшен. Дополнительные сведения см. в описании метода <see cref="M:System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)" />.  Тег <see langword="&lt;system.data.localdb&gt;" /> в файле app.config имеет недопустимые или неизвестные элементы.</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">В разделе <see langword="&lt;localdbinstances&gt;" /> присутствуют две записи с одинаковым именем.</exception>
      </Docs>
    </Member>
    <Member MemberName="OpenAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task OpenAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ OpenAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">Инструкция отмены.</param>
        <summary>Асинхронная версия <see cref="M:System.Data.SqlClient.SqlConnection.Open" />, которая открывает соединение с базой данных с параметрами свойства, указанными в строке <see cref="P:System.Data.SqlClient.SqlConnection.ConnectionString" />. Чтобы запросить отмену операции до истечения времени ожидания соединения, можно использовать токен отмены.  Исключения будут распространяться с помощью возвращаемой задачи. Если время ожидания соединения истекло без успешного подключения, возвращаемая задача будет помечена как сбойная с исключением. Реализация возвращает задачу без блокировки вызывающего потока как для соединений, помещенных в пул, так и соединений вне пула.</summary>
        <returns>Задача, представляющая асинхронную операцию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После вызова метода <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>, <xref:System.Data.SqlClient.SqlConnection.State%2A> должен возвращать <xref:System.Data.ConnectionState.Connecting> до возвращенного <xref:System.Threading.Tasks.Task> завершения. После этого, если подключение успешно установлено, <xref:System.Data.SqlClient.SqlConnection.State%2A> должен возвращать <xref:System.Data.ConnectionState.Open>. Сбой подключения <xref:System.Data.SqlClient.SqlConnection.State%2A> должен возвращать <xref:System.Data.ConnectionState.Closed>.  
  
 Вызов <xref:System.Data.SqlClient.SqlConnection.Close%2A> будет предпринята попытка отмены или закрыть соответствующий <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A> вызова.  
  
 Дополнительные сведения об асинхронном программировании в поставщике данных .NET Framework для SQL Server см. в разделе [асинхронное программирование](~/docs/framework/data/adonet/asynchronous-programming.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Вызов <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" /> более одного раза для того же экземпляра до завершения задачи.  
  
 <see langword="Context Connection=true" /> задается в строке подключения.  Подключение не было доступно из пула подключений до истечения времени ожидания подключения.</exception>
        <exception cref="T:System.Data.SqlClient.SqlException">Ошибка, возвращенная SQL Server, которая произошла при открытии соединения.</exception>
      </Docs>
    </Member>
    <Member MemberName="PacketSize">
      <MemberSignature Language="C#" Value="public int PacketSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PacketSize" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.PacketSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PacketSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PacketSize { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает размер сетевых пакетов (в байтах), используемых при взаимодействии с экземпляром SQL Server.</summary>
        <value>Размер сетевых пакетов (в байтах). Значение по умолчанию — 8000.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение выполняет массовое копирование или отправляет или получает большие объемы данных типа text или image, размер пакета, большего, чем может повысить эффективность за счет сокращения числа сетевых операций чтения и записи. Если приложение отправляет и получает небольшие объемы информации, можно установить размер пакета в 512 байт (с помощью значения размера пакета в <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>), что вполне достаточно для большинства операций передачи данных. Для большинства приложений оптимальным является размер пакета по умолчанию.  
  
 <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> может иметь значение в диапазоне от 512 до 32767 байт. Если значение находится за пределами этого диапазона, создается исключение.  
  
 Значение по умолчанию число больше 8000 приведет к тому пакетов для использования распределителя на экземпляре SQL Server вместо гораздо более эффективно SinglePage, уменьшают общую масштабируемость SQL Server. Дополнительные сведения об использовании памяти SQL Server см. в разделе [архитектуры памяти](http://go.microsoft.com/fwlink/?LinkId=143705) в электронной документации по SQL Server.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection>, включая задание `Packet Size` до 512 в строке подключения. Он отображает <xref:System.Data.SqlClient.SqlConnection.PacketSize%2A> и <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> свойства в окне консоли.  
  
 [!code-csharp[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.PacketSize Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterColumnEncryptionKeyStoreProviders">
      <MemberSignature Language="C#" Value="public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary&lt;string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterColumnEncryptionKeyStoreProviders(class System.Collections.Generic.IDictionary`2&lt;string, class System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt; customProviders) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterColumnEncryptionKeyStoreProviders (customProviders As IDictionary(Of String, SqlColumnEncryptionKeyStoreProvider))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterColumnEncryptionKeyStoreProviders(System::Collections::Generic::IDictionary&lt;System::String ^, System::Data::SqlClient::SqlColumnEncryptionKeyStoreProvider ^&gt; ^ customProviders);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="customProviders" Type="System.Collections.Generic.IDictionary&lt;System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider&gt;" />
      </Parameters>
      <Docs>
        <param name="customProviders">Настраиваемые поставщики</param>
        <summary>Регистрирует поставщиков хранилища ключей шифрования столбцов.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetStatistics">
      <MemberSignature Language="C#" Value="public void ResetStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.ResetStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetStatistics ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Если сбор статистики разрешен, все значения сбрасываются в нуль.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если сбор статистики не включена, этот метод вызывается ошибка не выдается.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RetrieveStatistics">
      <MemberSignature Language="C#" Value="public System.Collections.IDictionary RetrieveStatistics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IDictionary RetrieveStatistics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.RetrieveStatistics" />
      <MemberSignature Language="VB.NET" Value="Public Function RetrieveStatistics () As IDictionary" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IDictionary ^ RetrieveStatistics();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию пар имя-значение статистических данных на момент вызова метода.</summary>
        <returns>Возвращает ссылку типа <see cref="T:System.Collections.IDictionary" /> элементов <see cref="T:System.Collections.DictionaryEntry" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При вызове этого метода, полученные значения являются те, на текущий момент времени. Если вы продолжите использовать подключение, значения неверны. Необходимо повторно выполнить метод, чтобы получить самые последние значения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ServerVersion">
      <MemberSignature Language="C#" Value="public override string ServerVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServerVersion" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.ServerVersion" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ServerVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ServerVersion { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает строку, содержащую версию экземпляра SQL Server, к которому подключается клиент.</summary>
        <value>Версия экземпляра SQL Server.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Версия представляется в виде *##. ##. ###*, где первые две цифры являются основной номер версии, следующие две цифры — дополнительный номер версии, а последние четыре цифры — номер редакции. Строка имеет форму *виде основная.дополнительная.сборка*, где основной и дополнительный номер ровно две цифры и построении строго четыре цифры.  
  
 <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> был вызван, когда возвращаемая задача не была завершена, и не было открыто соединение после вызова <xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и отображает <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> свойство.  
  
 [!code-csharp[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/CS/source.cs#1)]
 [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData ISqlConnection.ServerVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Соединение закрыто.  
  
 <see cref="P:System.Data.SqlClient.SqlConnection.ServerVersion" /> был вызван, когда возвращаемая задача не была завершена, и не было открыто соединение после вызова <see cref="M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public override System.Data.ConnectionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.ConnectionState State" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.State" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property State As ConnectionState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::ConnectionState State { System::Data::ConnectionState get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbConnection.State</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.ConnectionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Отображает состояние <see cref="T:System.Data.SqlClient.SqlConnection" /> во время последней сетевой операции, выполненной по подключению.</summary>
        <value>Перечисление <see cref="T:System.Data.ConnectionState" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращает <xref:System.Data.ConnectionState> перечисления, указывающее состояние <xref:System.Data.SqlClient.SqlConnection>. Закрытие и повторное открытие соединения будет обновить значение <xref:System.Data.SqlClient.SqlConnection.State%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StatisticsEnabled">
      <MemberSignature Language="C#" Value="public bool StatisticsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StatisticsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.StatisticsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property StatisticsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StatisticsEnabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Когда задано значение <see langword="true" />, разрешает сбор статистических сведений для текущего подключения.</summary>
        <value>Возвращает значение <see langword="true" />, если сбор статистики разрешен. В противном случае возвращает значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Включение сбор статистики малое, но измеряемое не влияет на производительность и поэтому должны включаться только в том случае, если это требуется.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlConnection.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый объект, являющийся копией текущего экземпляра.</summary>
        <returns>Новый объект, являющийся копией этого экземпляра.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться, только если экземпляр <xref:System.Data.SqlClient.SqlConnection> приведен к типу интерфейса <xref:System.ICloneable>.  
  
 Этот элемент поддерживается только в .NET Compact Framework.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkstationId">
      <MemberSignature Language="C#" Value="public string WorkstationId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string WorkstationId" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlConnection.WorkstationId" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WorkstationId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ WorkstationId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает строку, определяющую клиента базы данных.</summary>
        <value>Строка, определяющая клиента базы данных. Если не задана, то имя клиентского компьютера. Если ни одно из значений не определено, значением является пустая строка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка обычно содержит сетевое имя клиента. <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A> Свойство соответствует свойству `Workstation ID` свойство строки соединения.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и отображает <xref:System.Data.SqlClient.SqlConnection.WorkstationId%2A> свойство.  
  
 [!code-csharp[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.WorkstationId Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>