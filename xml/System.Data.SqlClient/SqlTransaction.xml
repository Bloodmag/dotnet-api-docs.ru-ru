<Type Name="SqlTransaction" FullName="System.Data.SqlClient.SqlTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14c4f5c3e1a37ca99143298ddcf3567e1cdbdeb8" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlTransaction : System.Data.Common.DbTransaction, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlTransaction extends System.Data.Common.DbTransaction implements class System.Data.IDbTransaction, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlTransaction&#xA;Inherits DbTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlTransaction sealed : System::Data::Common::DbTransaction, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbTransaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="65ddf-101">Предоставляет транзакцию Transact-SQL, которая должна быть выполнена над базой данных SQL Server.</span>
      <span class="sxs-lookup">
        <span data-stu-id="65ddf-101">Represents a Transact-SQL transaction to be made in a SQL Server database.</span>
      </span>
      <span data-ttu-id="65ddf-102">Этот класс не наследуется.</span>
      <span class="sxs-lookup">
        <span data-stu-id="65ddf-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-103">Приложение создает <xref:System.Data.SqlClient.SqlTransaction> путем вызова метода <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> на <xref:System.Data.SqlClient.SqlConnection> объекта.</span><span class="sxs-lookup"><span data-stu-id="65ddf-103">The application creates a <xref:System.Data.SqlClient.SqlTransaction> object by calling <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> on the <xref:System.Data.SqlClient.SqlConnection> object.</span></span> <span data-ttu-id="65ddf-104">Все последующие операции, связанные с транзакцией (например, фиксация или прерывание транзакции), выполняются на <xref:System.Data.SqlClient.SqlTransaction> объекта.</span><span class="sxs-lookup"><span data-stu-id="65ddf-104">All subsequent operations associated with the transaction (for example, committing or aborting the transaction), are performed on the <xref:System.Data.SqlClient.SqlTransaction> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ddf-105">`Try`/`Catch` всегда следует использовать обработку исключений, при фиксации или отката <xref:System.Data.SqlClient.SqlTransaction>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-105">`Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="65ddf-106">Оба <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> создания <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.</span><span class="sxs-lookup"><span data-stu-id="65ddf-106">Both <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generate an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="65ddf-107">Дополнительные сведения о транзакциях SQL Server см. в разделе [явные транзакции](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx) и [кодированию эффективных транзакций](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx).</span><span class="sxs-lookup"><span data-stu-id="65ddf-107">For more information on SQL Server transactions, see [Explicit Transactions](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx) and [Coding Efficient Transactions](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65ddf-108">В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-108">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="65ddf-109">Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="65ddf-109">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="65ddf-110">Откат транзакции в случае любой ошибки или если она удаляется без оформления первой зафиксирована.</span><span class="sxs-lookup"><span data-stu-id="65ddf-110">The transaction is rolled back on any error, or if it is disposed without first being committed.</span></span> <span data-ttu-id="65ddf-111">`Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.</span><span class="sxs-lookup"><span data-stu-id="65ddf-111">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Commit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ddf-112">Фиксирует транзакцию базы данных.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-112">Commits the database transaction.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-113"><xref:System.Data.SqlClient.SqlTransaction.Commit%2A> Метод эквивалентен инструкции Transact-SQL COMMIT TRANSACTION.</span><span class="sxs-lookup"><span data-stu-id="65ddf-113">The <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> method is equivalent to the Transact-SQL COMMIT TRANSACTION statement.</span></span> <span data-ttu-id="65ddf-114">Невозможно восстановить прежний транзакцию после фиксации, так как все изменения уже стали постоянной частью базы данных.</span><span class="sxs-lookup"><span data-stu-id="65ddf-114">You cannot roll back a transaction once it has been committed, because all modifications have become a permanent part of the database.</span></span> <span data-ttu-id="65ddf-115">Дополнительные сведения см. в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-115">For more information, see SQL Server Books Online.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ddf-116">`Try`/`Catch` всегда следует использовать обработку исключений, при фиксации или отката <xref:System.Data.SqlClient.SqlTransaction>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-116">`Try`/`Catch` exception handling should always be used when committing or rolling back a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="65ddf-117">Оба `Commit` и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> приводит к возникновению ошибки <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.</span><span class="sxs-lookup"><span data-stu-id="65ddf-117">Both `Commit` and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="65ddf-118">Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-118">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65ddf-119">В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-119">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="65ddf-120">Также демонстрируется использование <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="65ddf-120">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="65ddf-121">Транзакция откатывается при любых ошибках.</span><span class="sxs-lookup"><span data-stu-id="65ddf-121">The transaction is rolled back on any error.</span></span> <span data-ttu-id="65ddf-122">`Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.</span><span class="sxs-lookup"><span data-stu-id="65ddf-122">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="65ddf-123">Ошибка при попытке фиксации транзакции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-123">An error occurred while trying to commit the transaction.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ddf-124">Транзакция уже зафиксирована, или выполнен откат.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-124">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="65ddf-125">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-125">-or-</span>
          </span>
          <span data-ttu-id="65ddf-126">Соединение закрыто.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-126">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ddf-127">Получает объект <see cref="T:System.Data.SqlClient.SqlConnection" />, связанный с транзакцией, или <see langword="null" />, если транзакция уже недействительна.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-127">Gets the <see cref="T:System.Data.SqlClient.SqlConnection" /> object associated with the transaction, or <see langword="null" /> if the transaction is no longer valid.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ddf-128">Объект <see cref="T:System.Data.SqlClient.SqlConnection" />, связанный с транзакцией.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-128">The <see cref="T:System.Data.SqlClient.SqlConnection" /> object associated with the transaction.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-129">Одно приложение может иметь несколько подключений к базе данных, каждый из которых нуль или более транзакций.</span><span class="sxs-lookup"><span data-stu-id="65ddf-129">A single application may have multiple database connections, each with zero or more transactions.</span></span> <span data-ttu-id="65ddf-130">Это свойство позволяет определить объект подключения, связанный с конкретной транзакцией, созданной <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-130">This property lets you determine the connection object associated with a particular transaction created by <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public override System.Data.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.IsolationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsolationLevel As IsolationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::IsolationLevel IsolationLevel { System::Data::IsolationLevel get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbTransaction.IsolationLevel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="65ddf-131">Указывает <see cref="T:System.Data.IsolationLevel" /> для этой транзакции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-131">Specifies the <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="65ddf-132">
            <see cref="T:System.Data.IsolationLevel" /> для этой транзакции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-132">The <see cref="T:System.Data.IsolationLevel" /> for this transaction.</span>
          </span>
          <span data-ttu-id="65ddf-133">Значение по умолчанию: <see langword="ReadCommitted" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-133">The default is <see langword="ReadCommitted" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-134">Параллельные транзакции не поддерживаются.</span><span class="sxs-lookup"><span data-stu-id="65ddf-134">Parallel transactions are not supported.</span></span> <span data-ttu-id="65ddf-135">Таким образом <xref:System.Data.IsolationLevel> применяется ко всей транзакции.</span><span class="sxs-lookup"><span data-stu-id="65ddf-135">Therefore, the <xref:System.Data.IsolationLevel> applies to the whole transaction.</span></span>  
  
 <span data-ttu-id="65ddf-136">Дополнительные сведения об уровнях изоляции SQL Server см. в разделе «Изоляции уровни в Database Engine» в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-136">For more information on SQL Server isolation levels, see "Isolation Levels in the Database Engine" in SQL Server Books Online.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rollback">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="65ddf-137">Откатывает транзакцию из состояния ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-137">Rolls back a transaction from a pending state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Rollback</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="65ddf-138">Откатывает транзакцию из состояния ожидания.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-138">Rolls back a transaction from a pending state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-139"><xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Метод эквивалентен инструкции Transact-SQL ROLLBACK TRANSACTION.</span><span class="sxs-lookup"><span data-stu-id="65ddf-139">The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</span></span> <span data-ttu-id="65ddf-140">Дополнительные сведения см. в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-140">For more information, see SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="65ddf-141">Можно только быть откат транзакции из состояния ожидания (после <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> был вызван, но перед <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> вызывается).</span><span class="sxs-lookup"><span data-stu-id="65ddf-141">The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called).</span></span> <span data-ttu-id="65ddf-142">Транзакция откатывается назад в случае его удаления перед `Commit` или `Rollback` вызывается.</span><span class="sxs-lookup"><span data-stu-id="65ddf-142">The transaction is rolled back in the event it is disposed before `Commit` or `Rollback` is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ddf-143">`Try`/`Catch` всегда следует использовать обработку исключений, при откате транзакции.</span><span class="sxs-lookup"><span data-stu-id="65ddf-143">`Try`/`Catch` exception handling should always be used when rolling back a transaction.</span></span> <span data-ttu-id="65ddf-144">Объект `Rollback` приводит к возникновению ошибки <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.</span><span class="sxs-lookup"><span data-stu-id="65ddf-144">A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="65ddf-145">Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-145">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65ddf-146">В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-146">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="65ddf-147">Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="65ddf-147">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="65ddf-148">Транзакция откатывается при любых ошибках.</span><span class="sxs-lookup"><span data-stu-id="65ddf-148">The transaction is rolled back on any error.</span></span> <span data-ttu-id="65ddf-149">`Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.</span><span class="sxs-lookup"><span data-stu-id="65ddf-149">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="65ddf-150">Ошибка при попытке фиксации транзакции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-150">An error occurred while trying to commit the transaction.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ddf-151">Транзакция уже зафиксирована, или выполнен откат.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-151">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="65ddf-152">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-152">-or-</span>
          </span>
          <span data-ttu-id="65ddf-153">Соединение закрыто.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-153">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (transactionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">
          <span data-ttu-id="65ddf-154">Имя транзакции, которую требуется откатить, или пиксель сохранения, до которой должен быть выполнен откат.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-154">The name of the transaction to roll back, or the savepoint to which to roll back.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ddf-155">Откатывает транзакцию из состояния ожидания и задает транзакцию или имя пиксели сохранения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-155">Rolls back a transaction from a pending state, and specifies the transaction or savepoint name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-156"><xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Метод эквивалентен инструкции Transact-SQL ROLLBACK TRANSACTION.</span><span class="sxs-lookup"><span data-stu-id="65ddf-156">The <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method is equivalent to the Transact-SQL ROLLBACK TRANSACTION statement.</span></span> <span data-ttu-id="65ddf-157">Дополнительные сведения см. в разделе «Явных транзакций» и «Точки сохранения транзакции» в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-157">For more information, see "Explicit Transactions" and "Transaction Savepoints" in SQL Server Books Online.</span></span>  
  
 <span data-ttu-id="65ddf-158">Можно только быть откат транзакции из состояния ожидания (после <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> был вызван, но перед <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> вызывается).</span><span class="sxs-lookup"><span data-stu-id="65ddf-158">The transaction can only be rolled back from a pending state (after <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> has been called, but before <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> is called).</span></span> <span data-ttu-id="65ddf-159">Транзакция откатывается назад в том случае, если он удален перед `Commit` или `Rollback` вызывается.</span><span class="sxs-lookup"><span data-stu-id="65ddf-159">The transaction is rolled back if it is disposed before `Commit` or `Rollback` is called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="65ddf-160">`Try`/`Catch` всегда следует использовать обработку исключений, при откате транзакции.</span><span class="sxs-lookup"><span data-stu-id="65ddf-160">`Try`/`Catch` exception handling should always be used when rolling back a transaction.</span></span> <span data-ttu-id="65ddf-161">Объект `Rollback` приводит к возникновению ошибки <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.</span><span class="sxs-lookup"><span data-stu-id="65ddf-161">A `Rollback` generates an <xref:System.InvalidOperationException> if the connection is terminated or if the transaction has already been rolled back on the server.</span></span>  
  
 <span data-ttu-id="65ddf-162">Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.</span><span class="sxs-lookup"><span data-stu-id="65ddf-162">For more information on SQL Server transactions, see "Explicit Transactions" and "Coding Efficient Transactions" in SQL Server Books Online.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="65ddf-163">В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>.</span><span class="sxs-lookup"><span data-stu-id="65ddf-163">The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>.</span></span> <span data-ttu-id="65ddf-164">Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы.</span><span class="sxs-lookup"><span data-stu-id="65ddf-164">It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.</span></span> <span data-ttu-id="65ddf-165">Транзакция откатывается при любых ошибках.</span><span class="sxs-lookup"><span data-stu-id="65ddf-165">The transaction is rolled back on any error.</span></span> <span data-ttu-id="65ddf-166">`Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.</span><span class="sxs-lookup"><span data-stu-id="65ddf-166">`Try`/`Catch` error handling is used to handle any errors when attempting to commit or roll back the transaction.</span></span>  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="65ddf-167">Имя транзакции не задано.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-167">No transaction name was specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ddf-168">Транзакция уже зафиксирована, или выполнен откат.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-168">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="65ddf-169">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-169">-or-</span>
          </span>
          <span data-ttu-id="65ddf-170">Соединение закрыто.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-170">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string savePointName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string savePointName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (savePointName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ savePointName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savePointName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="savePointName">
          <span data-ttu-id="65ddf-171">Имя пиксели сохранения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-171">The name of the savepoint.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="65ddf-172">Создает в транзакции пиксель сохранения, которая может быть использована для отката части транзакции, и задает имя пиксели сохранения.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-172">Creates a savepoint in the transaction that can be used to roll back a part of the transaction, and specifies the savepoint name.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="65ddf-173"><xref:System.Data.SqlClient.SqlTransaction.Save%2A> метод эквивалентен инструкции SAVE TRANSACTION Transact-SQL.</span><span class="sxs-lookup"><span data-stu-id="65ddf-173"><xref:System.Data.SqlClient.SqlTransaction.Save%2A> method is equivalent to the Transact-SQL SAVE TRANSACTION statement.</span></span>  
  
 <span data-ttu-id="65ddf-174">Значение, используемое в `savePoint` параметр может иметь то же значение используется в `transactionName` параметр некоторые реализации <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> метод.</span><span class="sxs-lookup"><span data-stu-id="65ddf-174">The value used in the `savePoint` parameter can be the same value used in the `transactionName` parameter of some implementations of the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> method.</span></span>  
  
 <span data-ttu-id="65ddf-175">Точки сохранения предоставляют механизм отката частей транзакций.</span><span class="sxs-lookup"><span data-stu-id="65ddf-175">Savepoints offer a mechanism to roll back parts of transactions.</span></span> <span data-ttu-id="65ddf-176">Создание точки сохранения с помощью <xref:System.Data.SqlClient.SqlTransaction.Save%2A> метод и последующем вызове <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> метода для отката до точки сохранения вместо отката до начала транзакции.</span><span class="sxs-lookup"><span data-stu-id="65ddf-176">You create a savepoint using the <xref:System.Data.SqlClient.SqlTransaction.Save%2A> method, and then later call the <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> method to roll back to the savepoint instead of rolling back to the start of the transaction.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="65ddf-177">Ошибка при попытке фиксации транзакции.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-177">An error occurred while trying to commit the transaction.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="65ddf-178">Транзакция уже зафиксирована, или выполнен откат.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-178">The transaction has already been committed or rolled back.</span>
          </span>
          <span data-ttu-id="65ddf-179">- или -</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-179">-or-</span>
          </span>
          <span data-ttu-id="65ddf-180">Соединение закрыто.</span>
          <span class="sxs-lookup">
            <span data-stu-id="65ddf-180">The connection is broken.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>