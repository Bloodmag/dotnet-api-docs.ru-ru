<Type Name="SqlTransaction" FullName="System.Data.SqlClient.SqlTransaction">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="14c4f5c3e1a37ca99143298ddcf3567e1cdbdeb8" />
    <Meta Name="ms.sourcegitcommit" Value="4b4804968da1dfdf71c501075a5b66957b54f2e8" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/27/2018" />
    <Meta Name="ms.locfileid" Value="32037050" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SqlTransaction : System.Data.Common.DbTransaction, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SqlTransaction extends System.Data.Common.DbTransaction implements class System.Data.IDbTransaction, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.SqlClient.SqlTransaction" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SqlTransaction&#xA;Inherits DbTransaction&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SqlTransaction sealed : System::Data::Common::DbTransaction, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.SqlClient</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbTransaction</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет транзакцию Transact-SQL, которая должна быть выполнена над базой данных SQL Server. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложение создает <xref:System.Data.SqlClient.SqlTransaction> путем вызова метода <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> на <xref:System.Data.SqlClient.SqlConnection> объекта. Все последующие операции, связанные с транзакцией (например, фиксация или прерывание транзакции), выполняются на <xref:System.Data.SqlClient.SqlTransaction> объекта.  
  
> [!NOTE]
>  `Try`/`Catch` всегда следует использовать обработку исключений, при фиксации или отката <xref:System.Data.SqlClient.SqlTransaction>. Оба <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> создания <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделе [явные транзакции](http://msdn.microsoft.com/library/ms175127\(SQL.105\).aspx) и [кодированию эффективных транзакций](http://msdn.microsoft.com/library/ms187484\(SQL.105\).aspx).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы. Откат транзакции в случае любой ошибки или если она удаляется без оформления первой зафиксирована. `Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Commit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Фиксирует транзакцию базы данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> Метод эквивалентен инструкции Transact-SQL COMMIT TRANSACTION. Невозможно восстановить прежний транзакцию после фиксации, так как все изменения уже стали постоянной частью базы данных. Дополнительные сведения см. в электронной документации по SQL Server.  
  
> [!NOTE]
>  `Try`/`Catch` всегда следует использовать обработку исключений, при фиксации или отката <xref:System.Data.SqlClient.SqlTransaction>. Оба `Commit` и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> приводит к возникновению ошибки <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы. Транзакция откатывается при любых ошибках. `Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Ошибка при попытке фиксации транзакции.</exception>
        <exception cref="T:System.InvalidOperationException">Транзакция уже зафиксирована, или выполнен откат.  
  
 - или -  
  
 Соединение закрыто.</exception>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.SqlClient.SqlConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.SqlClient.SqlConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As SqlConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::SqlClient::SqlConnection ^ Connection { System::Data::SqlClient::SqlConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.SqlClient.SqlConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект <see cref="T:System.Data.SqlClient.SqlConnection" />, связанный с транзакцией, или <see langword="null" />, если транзакция уже недействительна.</summary>
        <value>Объект <see cref="T:System.Data.SqlClient.SqlConnection" />, связанный с транзакцией.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Одно приложение может иметь несколько подключений к базе данных, каждый из которых нуль или более транзакций. Это свойство позволяет определить объект подключения, связанный с конкретной транзакцией, созданной <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DbConnection">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.DbConnection DbConnection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection DbConnection" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.DbConnection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DbConnection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Data::Common::DbConnection ^ DbConnection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsolationLevel">
      <MemberSignature Language="C#" Value="public override System.Data.IsolationLevel IsolationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.IsolationLevel IsolationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Data.SqlClient.SqlTransaction.IsolationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsolationLevel As IsolationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::IsolationLevel IsolationLevel { System::Data::IsolationLevel get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbTransaction.IsolationLevel</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает <see cref="T:System.Data.IsolationLevel" /> для этой транзакции.</summary>
        <value>
          <see cref="T:System.Data.IsolationLevel" /> для этой транзакции. Значение по умолчанию: <see langword="ReadCommitted" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параллельные транзакции не поддерживаются. Таким образом <xref:System.Data.IsolationLevel> применяется ко всей транзакции.  
  
 Дополнительные сведения об уровнях изоляции SQL Server см. в разделе «Изоляции уровни в Database Engine» в электронной документации по SQL Server.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rollback">
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Откатывает транзакцию из состояния ожидания.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.IDbTransaction.Rollback</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Откатывает транзакцию из состояния ожидания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Метод эквивалентен инструкции Transact-SQL ROLLBACK TRANSACTION. Дополнительные сведения см. в электронной документации по SQL Server.  
  
 Можно только быть откат транзакции из состояния ожидания (после <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> был вызван, но перед <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> вызывается). Транзакция откатывается назад в случае его удаления перед `Commit` или `Rollback` вызывается.  
  
> [!NOTE]
>  `Try`/`Catch` всегда следует использовать обработку исключений, при откате транзакции. Объект `Rollback` приводит к возникновению ошибки <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы. Транзакция откатывается при любых ошибках. `Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Ошибка при попытке фиксации транзакции.</exception>
        <exception cref="T:System.InvalidOperationException">Транзакция уже зафиксирована, или выполнен откат.  
  
 - или -  
  
 Соединение закрыто.</exception>
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public void Rollback (string transactionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rollback(string transactionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Rollback(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rollback (transactionName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rollback(System::String ^ transactionName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transactionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="transactionName">Имя транзакции, которую требуется откатить, или пиксель сохранения, до которой должен быть выполнен откат.</param>
        <summary>Откатывает транзакцию из состояния ожидания и задает транзакцию или имя пиксели сохранения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> Метод эквивалентен инструкции Transact-SQL ROLLBACK TRANSACTION. Дополнительные сведения см. в разделе «Явных транзакций» и «Точки сохранения транзакции» в электронной документации по SQL Server.  
  
 Можно только быть откат транзакции из состояния ожидания (после <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> был вызван, но перед <xref:System.Data.SqlClient.SqlTransaction.Commit%2A> вызывается). Транзакция откатывается назад в том случае, если он удален перед `Commit` или `Rollback` вызывается.  
  
> [!NOTE]
>  `Try`/`Catch` всегда следует использовать обработку исключений, при откате транзакции. Объект `Rollback` приводит к возникновению ошибки <xref:System.InvalidOperationException> Если соединение закрывается или уже были откат транзакции на сервере.  
  
 Дополнительные сведения о транзакциях SQL Server см. в разделах, посвященных явным транзакциям и кодированию эффективных транзакций, в электронной документации по SQL Server.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.SqlClient.SqlConnection> и <xref:System.Data.SqlClient.SqlTransaction>. Также демонстрируется использование <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, и <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> методы. Транзакция откатывается при любых ошибках. `Try`/`Catch` Обработка ошибок используется для обработки любых ошибок при попытке зафиксировать или откатить транзакцию.  
  
 [!code-csharp[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlConnection.BeginTransaction2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Имя транзакции не задано.</exception>
        <exception cref="T:System.InvalidOperationException">Транзакция уже зафиксирована, или выполнен откат.  
  
 - или -  
  
 Соединение закрыто.</exception>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public void Save (string savePointName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Save(string savePointName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.SqlClient.SqlTransaction.Save(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Save (savePointName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Save(System::String ^ savePointName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.SqlClient</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savePointName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="savePointName">Имя пиксели сохранения.</param>
        <summary>Создает в транзакции пиксель сохранения, которая может быть использована для отката части транзакции, и задает имя пиксели сохранения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.SqlClient.SqlTransaction.Save%2A> метод эквивалентен инструкции SAVE TRANSACTION Transact-SQL.  
  
 Значение, используемое в `savePoint` параметр может иметь то же значение используется в `transactionName` параметр некоторые реализации <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> метод.  
  
 Точки сохранения предоставляют механизм отката частей транзакций. Создание точки сохранения с помощью <xref:System.Data.SqlClient.SqlTransaction.Save%2A> метод и последующем вызове <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> метода для отката до точки сохранения вместо отката до начала транзакции.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Ошибка при попытке фиксации транзакции.</exception>
        <exception cref="T:System.InvalidOperationException">Транзакция уже зафиксирована, или выполнен откат.  
  
 - или -  
  
 Соединение закрыто.</exception>
      </Docs>
    </Member>
  </Members>
</Type>