<Type Name="DataColumn" FullName="System.Data.DataColumn">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c319d3c600dc2e2da64f51a76ba9219295794b79" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400178" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataColumn : System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataColumn extends System.ComponentModel.MarshalByValueComponent" />
  <TypeSignature Language="DocId" Value="T:System.Data.DataColumn" />
  <TypeSignature Language="VB.NET" Value="Public Class DataColumn&#xA;Inherits MarshalByValueComponent" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataColumn : System::ComponentModel::MarshalByValueComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.MarshalByValueComponent</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ColumnName")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DataColumnEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет схему столбца в <see cref="T:System.Data.DataTable" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn> Является основной строительный блок для создания схемы <xref:System.Data.DataTable>. Построение схемы путем добавления одного или нескольких <xref:System.Data.DataColumn> объектов <xref:System.Data.DataColumnCollection>. Дополнительные сведения см. в разделе [Добавление столбцов в таблицу данных](~/docs/framework/data/adonet/dataset-datatable-dataview/adding-columns-to-a-datatable.md).  
  
 Каждый <xref:System.Data.DataColumn> имеет <xref:System.Data.DataColumn.DataType%2A> свойство, которое определяет, какие данные <xref:System.Data.DataColumn> содержит. Например тип данных можно ограничить целые числа, строки или десятичных знаков. Так как данные, содержащиеся в <xref:System.Data.DataTable> обычно объединяются в исходного источника данных, необходимо сопоставить типы данных, используемых в источнике данных. Дополнительные сведения см. в разделе [сопоставления типов данных в ADO.NET](~/docs/framework/data/adonet/data-type-mappings-in-ado-net.md).  
  
 Такие свойства, как <xref:System.Data.DataColumn.AllowDBNull%2A>, <xref:System.Data.DataColumn.Unique%2A>, и <xref:System.Data.DataColumn.ReadOnly%2A> устанавливать ограничения на ввод и обновление данных, тем самым помогая обеспечить целостность данных. Можно также использовать <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, и <xref:System.Data.DataColumn.AutoIncrementStep%2A> свойства для управления автоматическим созданием данных. Дополнительные сведения о <xref:System.Data.DataColumn.AutoIncrement%2A> столбцы, в разделе [Создание столбцов AutoIncrement](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-autoincrement-columns.md). Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Также можно убедиться в том, что значения в <xref:System.Data.DataColumn> уникальны, создав <xref:System.Data.UniqueConstraint> и его добавления в <xref:System.Data.ConstraintCollection> из <xref:System.Data.DataTable> к которому <xref:System.Data.DataColumn> принадлежит. Дополнительные сведения см. в разделе [ограничения таблиц данных](~/docs/framework/data/adonet/dataset-datatable-dataview/datatable-constraints.md).  
  
 Для создания отношения между <xref:System.Data.DataColumn> объекты, создают <xref:System.Data.DataRelation> и добавьте его к <xref:System.Data.DataRelationCollection> из <xref:System.Data.DataSet>.  
  
 Можно использовать <xref:System.Data.DataColumn.Expression%2A> свойство <xref:System.Data.DataColumn> объекта для вычисления значений в столбце или создания столбца со статистическим выражением. Дополнительные сведения см. в разделе [Создание столбцов выражений](~/docs/framework/data/adonet/dataset-datatable-dataview/creating-expression-columns.md).  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Data.DataTable> с несколькими <xref:System.Data.DataColumn> объектов.  
  
 [!code-csharp[Classic WebData DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот тип является безопасным для многопоточных операций чтения. Необходимо синхронизировать все операции записи.</threadsafe>
    <altmember cref="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)" />
    <altmember cref="T:System.Data.DataColumnCollection" />
    <altmember cref="P:System.Data.DataTable.Constraints" />
    <altmember cref="T:System.Data.ConstraintCollection" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
    <altmember cref="T:System.Data.DataRow" />
    <altmember cref="T:System.Data.DataTable" />
    <altmember cref="T:System.Data.DataSet" />
    <altmember cref="M:System.Data.DataTable.NewRow" />
    <altmember cref="T:System.Data.DataRowCollection" />
    <altmember cref="T:System.Data.UniqueConstraint" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.DataColumn" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.DataColumn" /> в качестве строкового типа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При создании <xref:System.Data.DataColumn> объект не имеет стандартного <xref:System.Data.DataColumn.ColumnName%2A> или <xref:System.Data.DataColumn.Caption%2A>. При добавлении его в <xref:System.Data.DataColumnCollection>, создается имя по умолчанию («Column1», «Column2» и т. д.), если имя не был назначен <xref:System.Data.DataColumn.ColumnName%2A>.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:System.Data.DataColumn>, задаются различные свойства и добавляет его в <xref:System.Data.DataColumnCollection> для <xref:System.Data.DataTable> объекта.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Строка, представляющая имя создаваемого столбца. Если установлено значение <see langword="null" /> или пустая строка (""), то при добавлении объекта в коллекцию столбцов будет задано имя по умолчанию.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.DataColumn" /> как строку типа с использованием указанного имени столбца.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию имя для столбца становится <xref:System.Data.DataColumn.Caption%2A> значение свойства.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:System.Data.DataColumn> с указанным <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="columnName">Строка, представляющая имя создаваемого столбца. Если установлено значение <see langword="null" /> или пустая строка (""), то при добавлении объекта в коллекцию столбцов будет задано имя по умолчанию.</param>
        <param name="dataType">Поддерживаемый <see cref="P:System.Data.DataColumn.DataType" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.DataColumn" /> с использованием указанного имени столбца и типа данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается новый <xref:System.Data.DataColumn> с указанным <xref:System.Data.DataColumn.ColumnName%2A> и <xref:System.Data.DataColumn.DataType%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataType" /> не был указан.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (columnName As String, dataType As Type, expr As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="columnName">Строка, представляющая имя создаваемого столбца. Если установлено значение <see langword="null" /> или пустая строка (""), то при добавлении объекта в коллекцию столбцов будет задано имя по умолчанию.</param>
        <param name="dataType">Поддерживаемый <see cref="P:System.Data.DataColumn.DataType" />.</param>
        <param name="expr">Выражение, используемое для создания этого столбца. Дополнительные сведения см. в описании свойства <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.DataColumn" /> с использованием указанного имени, типа данных и выражения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается вычисляемый столбец.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataType" /> не был указан.</exception>
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataColumn (string columnName, Type dataType, string expr, System.Data.MappingType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string columnName, class System.Type dataType, string expr, valuetype System.Data.MappingType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataColumn(System::String ^ columnName, Type ^ dataType, System::String ^ expr, System::Data::MappingType type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="columnName" Type="System.String" />
        <Parameter Name="dataType" Type="System.Type" />
        <Parameter Name="expr" Type="System.String" />
        <Parameter Name="type" Type="System.Data.MappingType" />
      </Parameters>
      <Docs>
        <param name="columnName">Строка, представляющая имя создаваемого столбца. Если установлено значение <see langword="null" /> или пустая строка (""), то при добавлении объекта в коллекцию столбцов будет задано имя по умолчанию.</param>
        <param name="dataType">Поддерживаемый <see cref="P:System.Data.DataColumn.DataType" />.</param>
        <param name="expr">Выражение, используемое для создания этого столбца. Дополнительные сведения см. в описании свойства <see cref="P:System.Data.DataColumn.Expression" />.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Data.MappingType" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.DataColumn" /> с использованием указанного имени, типа данных, выражения и значения, определяющего, является ли столбец атрибутом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `type` Аргумент задает <xref:System.Data.DataColumn.ColumnMapping%2A> свойства. Это свойство указывает, каким образом <xref:System.Data.DataColumn> сопоставлен при <xref:System.Data.DataSet> преобразуется в XML-документа. Например, если столбец имеет имя «fName» и содержит значение «Bob» и `type` равно `MappingType.Attribute`, XML-элемента будет выглядеть следующим образом:  
  
 \<Name fName = «Bob» / >  
  
 Дополнительные сведения о сопоставлении столбцов с элементов или атрибутов см. в разделе <xref:System.Data.DataColumn.ColumnMapping%2A> свойство.  
  
   
  
## Examples  
 В следующем примере создается вычисляемый столбец.  
  
 [!code-csharp[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataColumn4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataColumn4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="dataType" /> не был указан.</exception>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
        <altmember cref="P:System.Data.DataColumn.ColumnMapping" />
        <altmember cref="P:System.Data.DataColumn.Caption" />
        <altmember cref="P:System.Data.DataColumn.DefaultValue" />
        <altmember cref="T:System.Data.DataTable" />
        <altmember cref="P:System.Data.DataColumn.DataType" />
      </Docs>
    </Member>
    <Member MemberName="AllowDBNull">
      <MemberSignature Language="C#" Value="public bool AllowDBNull { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDBNull" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AllowDBNull" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowDBNull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowDBNull { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее на допустимость нулевых значений в этом столбце для строк, принадлежащих таблице.</summary>
        <value>
          <see langword="true" />, если нулевые значения допускаются, в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается новый <xref:System.Data.DataColumn> и задает его <xref:System.Data.DataColumn.AllowDBNull%2A> свойства `true`.  
  
 [!code-csharp[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AllowDBNull Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AllowDBNull Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Unique" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrement">
      <MemberSignature Language="C#" Value="public bool AutoIncrement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoIncrement" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrement" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoIncrement { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, показывающее, увеличивать ли автоматически значение столбца для новых строк, добавляемых в таблицу.</summary>
        <value>
          <see langword="true" />, если значение столбца увеличивается автоматически; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если тип этого столбца не Int16, Int32 или Int64 когда это свойство задано, <xref:System.Data.DataColumn.DataType%2A> приводится к типу Int32. Исключение создается в том случае, если это вычисляемый столбец. <xref:System.Data.DataColumn.Expression%2A> Свойству. Увеличиваемое значение используется только в том случае, если значение строки для этого столбца при добавлении в коллекцию столбцов равно значению по умолчанию.  
  
 Можно создать новую строку, используя <xref:System.Data.DataRow.ItemArray%2A> свойство <xref:System.Data.DataRow> класса и передавая массив значений. Это может стать проблемой для столбца с его <xref:System.Data.DataColumn.AutoIncrement%2A> значение `true`, так как его значение формируется автоматически. Для использования <xref:System.Data.DataRow.ItemArray%2A> свойство, в месте `null` в положение столбца в массиве. Дополнительные сведения см. в разделе <xref:System.Data.DataRow.ItemArray%2A> свойство <xref:System.Data.DataRow> класса.  
  
 Если типом столбца является <xref:System.Data.SqlTypes.SqlInt16> или <xref:System.Data.SqlTypes.SqlInt32>, <xref:System.Data.DataColumn.AutoIncrement%2A> не будет работать. Вместо этого используйте Int16 или Int32.  
  
 Если типом столбца является <xref:System.Data.SqlTypes.SqlInt64> или <xref:System.Data.SqlTypes.SqlDecimal>, <xref:System.Data.DataColumn.AutoIncrement%2A> будет работать только частично. Вместо этого используйте Int64 или десятичный разделитель.  
  
 Когда <xref:System.Data.DataColumn.AutoIncrementStep%2A> значение добавляется в текущее значение подавить проверку переполнения.  
  
   
  
## Examples  
 В следующем примере задается <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, и <xref:System.Data.DataColumn.AutoIncrementStep%2A> свойства.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Столбец является вычисляемым.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementSeed">
      <MemberSignature Language="C#" Value="public long AutoIncrementSeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementSeed" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementSeed" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementSeed As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementSeed { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает начальное значение для столбца, свойству которого <see cref="P:System.Data.DataColumn.AutoIncrement" /> задано значение <see langword="true" />. Значение по умолчанию — 0.</summary>
        <value>Начальное значение для функции <see cref="P:System.Data.DataColumn.AutoIncrement" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере задается <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, и <xref:System.Data.DataColumn.AutoIncrementStep%2A> свойства.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementStep" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="AutoIncrementStep">
      <MemberSignature Language="C#" Value="public long AutoIncrementStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 AutoIncrementStep" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.AutoIncrementStep" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoIncrementStep As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long AutoIncrementStep { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает шаг приращения для столбца, свойству <see cref="P:System.Data.DataColumn.AutoIncrement" /> которого задано значение <see langword="true" />.</summary>
        <value>Число, на которое автоматически увеличивается значение столбца. Значение по умолчанию — 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере задается <xref:System.Data.DataColumn.AutoIncrement%2A>, <xref:System.Data.DataColumn.AutoIncrementSeed%2A>, и <xref:System.Data.DataColumn.AutoIncrementStep%2A> свойства.  
  
 [!code-csharp[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.AutoIncrementSeed Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.AutoIncrementSeed Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Заданное значение равно нулю.</exception>
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrementSeed" />
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
      </Docs>
    </Member>
    <Member MemberName="Caption">
      <MemberSignature Language="C#" Value="public string Caption { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Caption" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Caption" />
      <MemberSignature Language="VB.NET" Value="Public Property Caption As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Caption { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает заголовок для столбца.</summary>
        <value>Заголовок столбца. Если не установлено, возвращает значение <see cref="P:System.Data.DataColumn.ColumnName" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать <xref:System.Data.DataColumn.Caption%2A> свойство для отображения описательный или понятное имя <xref:System.Data.DataColumn>.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:System.Data.DataTable>. Затем добавляется три <xref:System.Data.DataColumn> объектов <xref:System.Data.DataColumnCollection> и задает <xref:System.Data.DataColumn.Caption%2A> свойства каждого <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Caption Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Caption Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="CheckNotAllowNull">
      <MemberSignature Language="C#" Value="protected internal void CheckNotAllowNull ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CheckNotAllowNull() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckNotAllowNull" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CheckNotAllowNull ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CheckNotAllowNull();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Данный член предназначен для поддержки платформы .NET Framework и не должен вызываться напрямую из кода приложения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckUnique">
      <MemberSignature Language="C#" Value="protected void CheckUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.CheckUnique" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckUnique ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckUnique();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Данный член предназначен для поддержки платформы .NET Framework и не должен вызываться напрямую из кода приложения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMapping">
      <MemberSignature Language="C#" Value="public virtual System.Data.MappingType ColumnMapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MappingType ColumnMapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnMapping" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ColumnMapping As MappingType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Data::MappingType ColumnMapping { System::Data::MappingType get(); void set(System::Data::MappingType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.MappingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see cref="T:System.Data.MappingType" /> столбца.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Data.MappingType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ColumnMapping%2A> Свойство определяет, каким образом <xref:System.Data.DataColumn> сопоставлен при <xref:System.Data.DataSet> сохраняется в виде XML-документа с помощью <xref:System.Data.DataSet.WriteXml%2A> метод.  
  
 Например если <xref:System.Data.DataColumn> называется «customerID» и его <xref:System.Data.DataColumn.ColumnMapping%2A> свойству `MappingType.Element`, значение столбца производит следующий XML-код:  
  
```  
<Customers>  
 <customerID>ALFKI</customerID>  
......  
 </Customers>  
 <Orders>  
 <OrderID>12345</OrderID>  
 <customerID>ALFKI</customerID>  
......  
 </Orders>  
```  
  
 Тем не менее если тот же столбец сопоставляется `MappingType.Attribute`, создается следующий XML-код:  
  
```  
<Customers customerID="ALFKI"........more attributes.....>  
 <Order orderID="1234"....more attributes..../>  
 <Order orderID="1234"....more attributes..../>  
...... More orders for this customer  
 </Customers>  
```  
  
 Используйте <xref:System.Data.DataColumn.%23ctor%2A> конструктор, который содержит `type` аргумент для указания того, как <xref:System.Data.DataColumn> сопоставлен при его <xref:System.Data.DataSet> преобразуется в XML-документ.  
  
 <xref:System.Data.DataColumn.ColumnMapping%2A> Свойство соответствует свойству аргумента конструктора `type`.  
  
   
  
## Examples  
 В следующем примере задается <xref:System.Data.DataColumn.ColumnMapping%2A> новое свойство типа <xref:System.Data.DataColumn>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnMapping Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnMapping Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnName">
      <MemberSignature Language="C#" Value="public string ColumnName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ColumnName" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ColumnName" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ColumnName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя столбца в <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Имя столбца.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Data.DataColumn> будет создан, он не имеет <xref:System.Data.DataColumn.ColumnName%2A> значение. Тем не менее, когда <xref:System.Data.DataColumn> добавляется <xref:System.Data.DataColumnCollection> для <xref:System.Data.DataTable> объекта, ему присваивается имя по умолчанию («Column1», «Column2» и т. д.).  
  
 По умолчанию <xref:System.Data.DataColumn.Caption%2A> имеет значение <xref:System.Data.DataColumn.ColumnName%2A> значение.  
  
   
  
## Examples  
 Возвращает следующие примеры <xref:System.Data.DataColumn.ColumnName%2A> для каждого столбца в каждой таблице в <xref:System.Data.DataSet>. В примере также показано создание <xref:System.Data.DataColumn> с новым <xref:System.Data.DataColumn.ColumnName%2A>.  
  
 [!code-csharp[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ColumnName Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ColumnName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение свойства равно <see langword="null" /> или пустой строке, и столбец принадлежит коллекции.</exception>
        <exception cref="T:System.Data.DuplicateNameException">Столбец с таким именем уже существует в коллекции. Сравнение имени выполняется без учета регистра.</exception>
        <altmember cref="P:System.Data.DataColumn.Caption" />
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public Type DataType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DataType" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DataType" />
      <MemberSignature Language="VB.NET" Value="Public Property DataType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DataType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.ColumnTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает тип данных, хранимых в столбце.</summary>
        <value>Объект <see cref="T:System.Type" />, представляющий тип данных столбца.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Параметр <xref:System.Data.DataColumn.DataType%2A> значение очень важно для обеспечения правильного создания и обновления данных в источнике данных.  
  
 <xref:System.Data.DataColumn.DataType%2A> Свойство поддерживает следующие базовые типы данных .NET Framework:  
  
-   <xref:System.Boolean>  
  
-   <xref:System.Byte>  
  
-   <xref:System.Char>  
  
-   <xref:System.DateTime>  
  
-   <xref:System.Decimal>  
  
-   <xref:System.Double>  
  
-   <xref:System.Guid>  
  
-   <xref:System.Int16>  
  
-   <xref:System.Int32>  
  
-   <xref:System.Int64>  
  
-   <xref:System.SByte>  
  
-   <xref:System.Single>  
  
-   <xref:System.String>  
  
-   <xref:System.TimeSpan>  
  
-   <xref:System.UInt16>  
  
-   <xref:System.UInt32>  
  
-   <xref:System.UInt64>  
  
 а также следующий тип массива:  
  
-   `Byte[]`  
  
 При изменении этого свойства после столбца начал хранение данных, создается исключение.  
  
 Если <xref:System.Data.DataColumn.AutoIncrement%2A> равно `true` перед установкой <xref:System.Data.DataColumn.DataType%2A> свойство и попробуйте установить тип, к чему-либо, кроме целого числа, создается исключение.  
  
> [!NOTE]
>  Столбец типа данных `Byte[]` требует специальной обработки в определенных случаях, так как в отличие от базовых типов данных .NET Framework, она является ссылочным типом данных. Если столбец типа данных `Byte[]` используется в качестве <xref:System.Data.DataTable.PrimaryKey%2A>, или как <xref:System.Data.DataView.Sort%2A> или <xref:System.Data.DataView.RowFilter%2A> ключа для <xref:System.Data.DataView>, любое изменение значения столбца должен включать назначение `Byte[]` значение столбца в отдельности экземпляры `Byte[]` объекта. Это назначение необходимо для вызова обновления внутренних индексов, используемых при сортировке, фильтрации и операциях с первичным ключом. Это продемонстрировано в следующем примере.  
  
```  
byte[] columnValue = (byte[])myDataTable.Rows[0][0];  
byte[] newValue = (byte[])columnValue.Clone();  
newValue[1] = 2;  
myDataTable.Rows[0][0] = newValue;  
```  
  
> [!NOTE]
>  Несмотря на то, что можно определить столбец как тип данных, отличный от базовых типов данных .NET Framework и `Byte[]`, такой столбец будет рассматриваться как определяемый пользователем тип, накладываются следующие ограничения использования. (Дополнительные сведения об определяемых пользователем типов см. в разделе [Создание и типы Using User-Defined](http://msdn.microsoft.com/library/ec0266d2-7e5b-47e4-938a-85ac9d04fa40).)  
  
-   Столбец не может быть частью <xref:System.Data.DataView.RowFilter%2A> или <xref:System.Data.DataTable.Select%2A> выражение.  
  
-   Если столбец используется в качестве <xref:System.Data.DataTable.PrimaryKey%2A>, или как <xref:System.Data.DataView.Sort%2A> или <xref:System.Data.DataView>, он должен рассматриваться как неизменяемое поле; данные столбца не должно меняться после его добавления в таблицу.  
  
-   Его <xref:System.Data.DataColumn.ColumnMapping%2A> могут быть заданы только `MappingType.Element`.  
  
-   Класса, который реализует тип данных столбца должен быть должен быть помечен атрибутом <xref:System.SerializableAttribute>, и при необходимости реализовать <xref:System.Runtime.Serialization.ISerializable> или <xref:System.Xml.Serialization.IXmlSerializable> интерфейса.  
  
-   Поддержка отслеживания изменений ограничена. Использовать <xref:System.Data.DataTable> механизм отслеживания изменений для класса, класс, реализующий тип данных столбца должен или реализовывать <xref:System.ComponentModel.IChangeTracking> интерфейс или перенос ответственности за информацией о том, <xref:System.Data.DataRow> при значение столбца было изменения, либо посредством вызова <xref:System.Data.DataRow.SetModified%2A> в строке или назначив объект значение столбца объект отдельно экземпляры столбца значение.  
  
   
  
## Examples  
 В следующем примере добавляется несколько типов данных для столбцов <xref:System.Data.DataTable>, а затем добавляет одну строку в таблицу.  
  
 [!code-csharp[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.DataType Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DataType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">В столбце уже содержатся данные.</exception>
        <altmember cref="T:System.Type" />
        <altmember cref="M:System.Type.GetType" />
      </Docs>
    </Member>
    <Member MemberName="DateTimeMode">
      <MemberSignature Language="C#" Value="public System.Data.DataSetDateTime DateTimeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.DataSetDateTime DateTimeMode" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DateTimeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DateTimeMode As DataSetDateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataSetDateTime DateTimeMode { System::Data::DataSetDateTime get(); void set(System::Data::DataSetDateTime value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataSetDateTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает <see langword="DateTimeMode" /> для столбца.</summary>
        <value>
          <see cref="T:System.Data.DataSetDateTime" /> для указанного столбца.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.DateTimeMode%2A> Не может быть изменено после строки добавляются <xref:System.Data.DataColumn>, за исключением изменения из <xref:System.Data.DataSetDateTime.Unspecified> и <xref:System.Data.DataSetDateTime.UnspecifiedLocal> или наоборот. Изменения из `UnspecifiedLocal` для `Unspecified` и наоборот допустимы, так как разница между этими вариантами только во время сериализации и не влияет на хранилище.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public object DefaultValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DefaultValue" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.DefaultValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DefaultValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Data.DefaultValueTypeConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение по умолчанию для столбца при создании новых строк.</summary>
        <value>Значение, соответствующее <see cref="P:System.Data.DataColumn.DataType" /> столбца.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию является значение, которое автоматически назначается для столбца при <xref:System.Data.DataRow> создается (например, Дата и время, когда <xref:System.Data.DataRow> был создан.  
  
 Когда <xref:System.Data.DataColumn.AutoIncrement%2A> имеет значение true, может существовать без значения по умолчанию.  
  
 Можно создать новую строку, используя <xref:System.Data.DataRow.ItemArray%2A> свойство <xref:System.Data.DataRow> класса и передачей методу массив значений. Это может стать проблемой для столбца со значением по умолчанию, так как его значение формируется автоматически. Для использования <xref:System.Data.DataRow.ItemArray%2A> свойства такого столбца поместить `null` в положение столбца в массиве. Дополнительные сведения см. в описании свойства <xref:System.Data.DataRow.ItemArray%2A>.  
  
   
  
## Examples  
 В следующем примере создается несколько <xref:System.Data.DataColumn> объекты, которые имеют разные типы данных и устанавливает соответствующие стандартные значения для каждого столбца.  
  
 [!code-vb[Classic WebData DataColumn.DefaultValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.DefaultValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidCastException">При добавлении строки значение по умолчанию не является экземпляром типа данных столбца.</exception>
        <altmember cref="P:System.Data.DataColumn.DataType" />
        <altmember cref="P:System.Data.DataRow.ItemArray" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
        <altmember cref="T:System.Data.UniqueConstraint" />
      </Docs>
    </Member>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public string Expression { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Expression" />
      <MemberSignature Language="VB.NET" Value="Public Property Expression As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Expression { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает выражение, используемое для фильтрации строк, расчета значений в столбце либо для создания составного столбца.</summary>
        <value>Выражение, используемое для расчета значений столбца либо создания составного столбца. Возвращаемый тип выражения определяется с помощью <see cref="P:System.Data.DataColumn.DataType" /> столбца.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один из способов использования <xref:System.Data.DataColumn.Expression%2A> свойство заключается в создании вычисляемых столбцов. Например чтобы вычислить значения суммы налогов, цену за единицу умножается налога определенного региона. Поскольку налоговые ставки различаться для разных регионов, невозможно поместить одну ставку налога в столбец; Вместо этого значение вычисляется с помощью <xref:System.Data.DataColumn.Expression%2A> свойства, как показано в коде Visual Basic в следующем разделе:  
  
 DataSet1.Tables("Products"). Columns("Tax"). Выражение = «UnitPrice * 0.086»  
  
 Второй способ использования — для создания столбца со статистическим выражением. Подобно расчетному значению, составное выполняет операцию на основании полный набор строк в <xref:System.Data.DataTable>. Простым примером является для подсчета числа строк, возвращаемых в наборе. Это метод, который используется для подсчета количества транзакций, завершенных конкретного менеджера по продажам, как показано в этом коде Visual Basic:  
  
```  
DataSet1.Tables("Orders").Columns("OrderCount").Expression = "Count(OrderID)"  
```  
  
## <a name="expression-syntax"></a>Синтаксис выражений  
 При создании выражения используйте <xref:System.Data.DataColumn.ColumnName%2A> свойство для ссылки на столбцы. Например если <xref:System.Data.DataColumn.ColumnName%2A> за один столбец «Цена» и другой «Quantity», выражение будет следующим:  
  
 "UnitPrice * Quantity"  
  
> [!NOTE]
>  Если столбец используется в выражении, выражение считается с зависимостями от этого столбца. Если зависимый столбец переименован или удален, исключение не возникает. При обращении к столбец неработающие теперь выражение будет создано исключение.  
  
 При создании выражения для фильтра необходимо заключите строки в одинарные кавычки:  
  
 «LastName = «Jones»»  
  
 Если имя столбца содержит символы, отличные от буквенно-цифровых или начинается с цифры или (регистр не учитывается) соответствует любому из следующих зарезервированных слов, необходима специальная обработка, как описано в следующих абзацах.  
  
 И  
  
 Между  
  
 Дочерний  
  
 False  
  
 Увеличение  
  
 Является  
  
 Like  
  
 Not  
  
 Null  
  
 Или  
  
 Родительский  
  
 Да  
  
 Если имя столбца не соответствует одной из указанных выше условий, оно должно быть заключено в либо в квадратные скобки или «'» кавычки (апостроф). Например чтобы использовать столбец с именем «Column #» в выражении, можно написать либо» [столбца #]»:  
  
 Общее * [Column #]  
  
 или "\`столбец #'»:  
  
 Общее * \`столбца # "  
  
 Если имя столбца заключено в квадратные скобки, то любое "]" и "\\" символов (но не другие символы), в нем необходимо экранировать путем добавления перед обратной косой черты («\\») символов. При имя столбца заключено в символы грависом затем он не должны содержать символы апостроф в нем. Например, столбец с именем «[столбец]\\» будет записан:  
  
 Общее * [столбца [\\]\\\\]  
  
 или  
  
 Общее * \`[столбец]\\`  
  
## <a name="user-defined-values"></a>Пользовательские значения  
 Определяемые пользователем значения могут использоваться в выражениях для сравнения со значениями столбцов. Строковые значения должны быть заключены в одинарные кавычки (и каждая одинарная кавычка в значении строки должны экранироваться путем ее добавления с другой одинарной кавычкой). Значения даты должны быть заключены в знаки фунта (#) или одинарные кавычки (') в зависимости от поставщика данных. Десятичные знаки и экспоненциальное представление чисел, допустимых для числовых значений. Пример:  
  
 «FirstName = «John»»  
  
 «Цена < = 50,00»  
  
 «Дата рождения < # #1/31/82»  
  
 Для столбцов, содержащих значения перечисления привести значение типа integer. Пример:  
  
 «EnumColumn = 5»  
  
## <a name="parsing-literal-expressions"></a>Синтаксический анализ выражения литералов  
 Все литеральные выражения должны быть выражены в языковом стандарте инвариантного языка и региональных параметров. Когда `DataSet` выполняет синтаксический анализ и преобразует литеральные выражения, она всегда использует инвариантные, а не текущего языка и региональных параметров.  
  
 Строковые литералы идентифицируются при наличии в одинарные кавычки значение. Пример:  
  
 «John»  
  
 `Boolean` литералы являются true и false; они не заключены в кавычки в выражениях.  
  
 `Integer` литералы [+-]? [0-9] + рассматриваются как `System.Int32`, `System.Int64` или `System.Double`. `System.Double` может привести к потере точности в зависимости от того как большое число. Например, если число в литерале 2147483650 `DataSet` сначала попытается выполнить синтаксический анализ числа в виде `Int32`. Это не будет выполнено, так как число слишком велик. В этом случае `DataSet` выполняет синтаксический анализ числа в виде `Int64`, которая будет выполнена успешно. Если литерал был ряд больше, чем максимальное значение Int64, `DataSet` выполняет синтаксический анализ литерала с помощью `Double`.  
  
 Реальные литералы в экспоненциальном представлении, например 4.42372E-30, анализируются с помощью `System.Double`.  
  
 Реальные литералы без экспоненциальное представление чисел, но с десятичной запятой, рассматриваются как `System.Decimal`. Если это число превышает максимальное и минимальное значения, поддерживаемые `System.Decimal`, а затем анализируется как `System.Double`. Пример:  
  
 142526.144524 будут преобразованы в `Decimal`.  
  
 345262.78036719560925667 будет рассматриваться `Double`.  
  
## <a name="operators"></a>Операторы  
 Объединение доступна с использованием логического AND, OR, операторы и NOT. Можно использовать круглые скобки для группировки предложений и задания приоритета. Оператор AND имеет приоритет над другими операторами. Пример:  
  
 (LastName = 'Smith' "или" LastName = «Jones») И «имя» = «John»  
  
 При создании выражений сравнения можно использовать следующие операторы:  
  
 \<  
  
 >  
  
 \<=  
  
 >=  
  
 <>  
  
 =  
  
 IN  
  
 LIKE  
  
 В выражениях также поддерживаются следующие арифметические операторы:  
  
 \+ (сложение)  
  
 \- (вычитание)  
  
 \* (умножение)  
  
 / (деление)  
  
 % (модуль)  
  
## <a name="string-operators"></a>Операторы строки  
 Для объединения строк, используйте + символ. Значение <xref:System.Data.DataSet.CaseSensitive%2A> свойство <xref:System.Data.DataSet> класса определяет, являются ли сравнение строк с учетом регистра. Однако можно переопределить это значение с <xref:System.Data.DataTable.CaseSensitive%2A> свойство <xref:System.Data.DataTable> класса.  
  
## <a name="wildcard-characters"></a>Подстановочные знаки  
 Как * и % может быть использованы в качестве подстановочных знаков в сравнении LIKE. Если строка в предложении LIKE содержит * или %, эти символы должны быть заключены в квадратные скобки ([]). Если в предложении содержится квадратная скобка, каждый символ квадратной скобки следует заключать в квадратные скобки (например, [[] или []]). Подстановочный знак может быть в начале и в конце шаблона, или в конце шаблона или в начале шаблона. Пример:  
  
 «ItemName как "* продукта\*"»  
  
 «ItemName как "* продукта"»  
  
 «ItemName мне НРАВИТСЯ «продукта *»»  
  
 Подстановочные знаки не допускаются в середине строки. Например "te * xt" не допускается.  
  
## <a name="parentchild-relation-referencing"></a>Ссылки на отношения родители потомки  
 Родительская таблица может ссылаться в выражении, добавляя в начало имени столбца с `Parent`. Например `Parent.Price` ссылается на столбец в родительской таблице с именем `Price`.  
  
 Если дочерний элемент имеет более одной родительской строки, используйте Parent(RelationName). ColumnName. Например Parent(RelationName). Цена ссылается на столбец в родительской таблице с именем Price через отношение.  
  
 Столбец в дочерней таблице может быть на которые ссылается выражение, добавляя в начало имени столбца с `Child`. Тем не менее так как дочернее отношение может вернуть несколько строк, необходимо включить ссылку на дочерний столбец в агрегатную функцию. Например `Sum(Child.Price)` вернет сумму столбца с именем `Price` в дочерней таблице.  
  
 Если таблица имеет более одного дочернего, используется синтаксис: `Child(RelationName)`. Например, если таблица имеет два дочерних таблицы с именами `Customers` и `Orders`и <xref:System.Data.DataRelation> объект называется `Customers2Orders`, ссылка будет выглядеть следующим образом:  
  
 Avg(Child(Customers2Orders).Quantity)  
  
## <a name="aggregates"></a>Агрегатные выражения  
 Поддерживаются следующие составные типы:  
  
 SUM (Sum)  
  
 Среднее (среднее)  
  
 Min (минимум)  
  
 Max (максимум)  
  
 Count (число)  
  
 StDev (статистическое стандартное отклонение)  
  
 Var (статистическая дисперсия).  
  
 Статистические выражения обычно используются отношений. Создайте статистические выражения на основе одной из функций, перечисленных выше и столбца дочерней таблицы подробно родители-потомки ссылки на отношения в описанном выше. Пример:  
  
 AVG(child.Price)  
  
 AVG(child(Orders2Details). Цена)  
  
 Статистическое выражение также может выполняться на одной таблице. Например для суммирования значений в столбце с именем «Price»:  
  
 Sum(Price)  
  
> [!NOTE]
>  При использовании одной таблицы для создания составного будет группировать по ее функциональность отсутствует. Вместо этого все строки будут отображать одинаковое значение в столбце.  
  
 Если таблица не имеет строк, агрегатные функции возвращают `null`.  
  
 Типы данных всегда можно определить, проверив <xref:System.Data.DataColumn.DataType%2A> свойство столбца. Можно также преобразовать типы данных с помощью функции Convert, приведенной в следующем разделе.  
  
 Статистическое выражение может применяться только к одному столбцу и другие выражения не может использоваться внутри агрегатной функции.  
  
## <a name="functions"></a>Функции  
 Также поддерживаются следующие функции:  
  
 `CONVERT`  
  
|||  
|-|-|  
|Описание:|Преобразует определенное выражение для указанного типа .NET Framework.|  
|Синтаксис|Convert(`expression`, `type`)|  
|Аргументы|`expression` — Выражение для преобразования.<br /><br /> `type` Тип .NET Framework, в который преобразуется значение.|  
  
 Пример: myDataColumn.Expression="Convert (всего"System.Int32")»  
  
 Все преобразования допустимы со следующими исключениями: `Boolean` может быть преобразован в / из `Byte`, `SByte`, `Int16`, `Int32`, `Int64`, `UInt16`, `UInt32`, `UInt64`, `String` и самого себя только. `Char` может быть преобразован в / из `Int32`, `UInt32`, `String`, а только сам. `DateTime` может быть преобразован в / из `String` и самого себя только. `TimeSpan` может быть преобразован в / из `String` и самого себя только.  
  
 `LEN`  
  
|||  
|-|-|  
|Описание:|Получает длину строки|  
|Синтаксис|ФУНКЦИЯ LEN (`expression`)|  
|Аргументы|`expression` -Строка для оценки.|  
  
 Пример: myDataColumn.Expression="Len(ItemName)»  
  
 `ISNULL`  
  
|||  
|-|-|  
|Описание:|Проверяет выражение и возвращает либо проверенное выражение, либо значение замены.|  
|Синтаксис|ISNULL(`expression`, `replacementvalue`)|  
|Аргументы|`expression` — Выражение для проверки.<br /><br /> `replacementvalue` — Если выражение равно `null`, `replacementvalue` возвращается.|  
  
 Пример: myDataColumn.Expression="IsNull (цена, -1)»  
  
 `IIF`  
  
|||  
|-|-|  
|Описание:|Возвращает одно из двух значений в зависимости от результата логического выражения.|  
|Синтаксис|IIF(`expr`, `truepart`, `falsepart`)|  
|Аргументы|`expr` — Выражение для вычисления.<br /><br /> `truepart` Значение, возвращаемое, если выражение имеет значение true.<br /><br /> `falsepart` Значение, возвращаемое, если выражение имеет значение false.|  
  
 Пример: myDataColumn.Expression = «IIF (всего > 1000 "затраты" и "Здравствуйте")  
  
 `TRIM`  
  
|||  
|-|-|  
|Описание:|Удаляет все начальные и конечные пустые символы, например \r "," \n "," \t "," "|  
|Синтаксис|TRIM(`expression`)|  
|Аргументы|`expression` — Выражение для усечения.|  
  
 `SUBSTRING`  
  
|||  
|-|-|  
|Описание:|Возвращает подстроку указанной длины, начиная с заданной точки в строке.|  
|Синтаксис|SUBSTRING (`expression`, `start`, `length`)|  
|Аргументы|`expression` — Исходная строка для подстроки.<br /><br /> `start` — Целое число, которое указывает, где начинается подстрока.<br /><br /> `length` — Целое число, указывающее длину подстроки.|  
  
 Пример: myDataColumn.Expression = «SUBSTRING (телефон, 7, 8)»  
  
> [!NOTE]
>  Вы можете сбросить <xref:System.Data.DataColumn.Expression%2A> свойства, присвойте ему значение null или пустой строкой. Если значение по умолчанию установлено на столбец выражения, всем предварительно заполненным строкам назначается значение по умолчанию после <xref:System.Data.DataColumn.Expression%2A> сброса свойства.  
  
   
  
## Examples  
 В следующем примере создаются три столбца в <xref:System.Data.DataTable>. Второй и третий столбцы содержат выражения. второй рассчитывает налог с использованием переменной ставки налога и третий добавляет результат вычисления к значению первого столбца. Результирующая таблица отображается в <xref:System.Windows.Forms.DataGrid> элемента управления.  
  
 [!code-csharp[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Expression Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Expression Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойству <see cref="P:System.Data.DataColumn.AutoIncrement" /> или <see cref="P:System.Data.DataColumn.Unique" /> задано значение <see langword="true" />.</exception>
        <exception cref="T:System.FormatException">При использовании функции CONVERT выражение оценивает строку, но строка не содержит представление, которое может быть преобразовано в параметр типа.</exception>
        <exception cref="T:System.InvalidCastException">При использовании функции CONVERT запрошенное приведение типов невозможно. Подробные сведения о возможном приведении см. в описании функции преобразования, приведенном в следующем разделе.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">При использовании функции SUBSTRING аргумент начала находится вне диапазона.  
  
 -или-  
  
 При использовании функции SUBSTRING аргумент длины находится вне диапазона.</exception>
        <exception cref="T:System.Exception">При использовании функции LEN или TRIM выражение не выполняет вычисление строки. Это включает выражения, которое выполняет вычисление <see cref="T:System.Char" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ExtendedProperties">
      <MemberSignature Language="C#" Value="public System.Data.PropertyCollection ExtendedProperties { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.PropertyCollection ExtendedProperties" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ExtendedProperties" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExtendedProperties As PropertyCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::PropertyCollection ^ ExtendedProperties { System::Data::PropertyCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.PropertyCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию пользовательских сведений, связанных с <see cref="T:System.Data.DataColumn" />.</summary>
        <value>Коллекция <see cref="T:System.Data.PropertyCollection" /> пользовательских сведений.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.ExtendedProperties%2A> Свойство позволяет сохранять пользовательские сведения с объектом. Например можно сохранять время, когда данные должны обновляться.  
  
 Расширенные свойства должны иметь тип <xref:System.String>. Свойства, которые не относятся к типу <xref:System.String> не сохраняются, когда <xref:System.Data.DataColumn> записывается как XML.  
  
   
  
## Examples  
 В следующем примере добавляется настраиваемого свойства <xref:System.Data.PropertyCollection> возвращенных <xref:System.Data.DataColumn.ExtendedProperties%2A> свойство. Второй пример возвращает пользовательское свойство.  
  
 [!code-csharp[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ExtendedProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ExtendedProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.PropertyCollection" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(-1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает максимальную длину текстового столбца.</summary>
        <value>Максимальная длина столбца в символах. Если столбец не имеет максимальной длины, значение равно –1 (по умолчанию).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.MaxLength%2A> Свойство игнорируется для нетекстовых столбцов. Объект <xref:System.ArgumentException> исключение возникает в том случае, если назначить <xref:System.Data.DataColumn.MaxLength%2A> столбцу не являющегося строкой.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает пространство имен <see cref="T:System.Data.DataColumn" />.</summary>
        <value>Пространство имен <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataColumn.Namespace%2A> Свойство используется при чтении и записи XML-документа в <xref:System.Data.DataTable> в <xref:System.Data.DataSet> с помощью <xref:System.Data.DataSet.ReadXml%2A>, <xref:System.Data.DataSet.WriteXml%2A>, <xref:System.Data.DataSet.ReadXmlSchema%2A>, или <xref:System.Data.DataSet.WriteXmlSchema%2A> методы.  
  
 Пространство имен XML-документа используется для определения области атрибутов и элементов, при чтении в XML <xref:System.Data.DataSet>. Например <xref:System.Data.DataSet> со схемой чтение из документа с пространством имен «myCompany», и попытка считать данные (с <xref:System.Data.DataSet.ReadXml%2A> метод) из документа с пространством имен «theirCompany». Любые данные, не относящиеся к существующей схеме будет игнорироваться.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Пространство имен уже содержит данные.</exception>
      </Docs>
    </Member>
    <Member MemberName="OnPropertyChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnPropertyChanging (System.ComponentModel.PropertyChangedEventArgs pcevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPropertyChanging(class System.ComponentModel.PropertyChangedEventArgs pcevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPropertyChanging (pcevent As PropertyChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPropertyChanging(System::ComponentModel::PropertyChangedEventArgs ^ pcevent);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcevent" Type="System.ComponentModel.PropertyChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="pcevent">Ссылка на параметр.</param>
        <summary>Данный член предназначен для поддержки платформы .NET Framework и не должен вызываться напрямую из кода приложения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ordinal">
      <MemberSignature Language="C#" Value="public int Ordinal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Ordinal" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Ordinal" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Ordinal As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Ordinal { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает отсчитываемую от нуля позицию столбца в коллекции <see cref="T:System.Data.DataColumnCollection" />.</summary>
        <value>Положение столбца. Получает значение -1, если столбец не является членом коллекции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример возвращает столбец имени, порядковый номер и тип данных столбца.  
  
 [!code-csharp[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Ordinal Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Ordinal Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public string Prefix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Prefix { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает префикс XML, который является псевдонимом пространства имен класса <see cref="T:System.Data.DataTable" />.</summary>
        <value>Префикс XML для пространства имен <see cref="T:System.Data.DataTable" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.DataTable.Prefix%2A> Используется во всех XML-документе для определения элементов, которые принадлежат к пространству имен для <xref:System.Data.DataSet> объекта (как задано в <xref:System.Data.DataSet.Namespace%2A> свойство).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RaisePropertyChanging">
      <MemberSignature Language="C#" Value="protected internal void RaisePropertyChanging (string name);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void RaisePropertyChanging(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.RaisePropertyChanging(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub RaisePropertyChanging (name As String)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void RaisePropertyChanging(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Ссылка на параметр.</param>
        <summary>Данный член предназначен для поддержки платформы .NET Framework и не должен вызываться напрямую из кода приложения.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее на допустимость изменения столбца после добавления строки в таблицу.</summary>
        <value>
          <see langword="true" />, если столбец предназначен только для чтения; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере создается <xref:System.Data.DataColumn> и задает его <xref:System.Data.DataColumn.ReadOnly%2A> свойства `true`.  
  
 [!code-csharp[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ReadOnly Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ReadOnly Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойству задано значение <see langword="false" /> в вычисляемом столбце.</exception>
        <altmember cref="P:System.Data.DataColumn.Unique" />
        <altmember cref="P:System.Data.DataColumn.AutoIncrement" />
      </Docs>
    </Member>
    <Member MemberName="SetOrdinal">
      <MemberSignature Language="C#" Value="public void SetOrdinal (int ordinal);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetOrdinal(int32 ordinal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.SetOrdinal(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetOrdinal (ordinal As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetOrdinal(int ordinal);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordinal" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ordinal">Заданный порядковый номер.</param>
        <summary>Изменяет порядковый номер или положение <see cref="T:System.Data.DataColumn" /> на указанный порядковый номер или положение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменяет порядковый номер или положение <xref:System.Data.DataColumn> на указанный порядковый номер или положение. Если порядковый номер меньше 0 или больше существующего количества столбцов – 1 (больше, чем порядковый номер последнего столбца) затем недопустимое <xref:System.ArgumentException> возникает исключение.  
  
 При изменении порядковый номер столбца, столбец перемещается в новое положение в коллекции столбцов. Какие-либо столбцы между предыдущей и новый порядковый номер будет изменится, чтобы компенсировать новый порядковый номер столбца.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="public System.Data.DataTable Table { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.DataTable Table" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Table" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Table As DataTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::DataTable ^ Table { System::Data::DataTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.DataTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает <see cref="T:System.Data.DataTable" />, которому принадлежит столбец.</summary>
        <value>
          <see cref="T:System.Data.DataTable" />, к которой принадлежит <see cref="T:System.Data.DataColumn" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере возвращается родительской таблицы <xref:System.Data.DataColumn> через его <xref:System.Data.DataColumn.Table%2A> свойство.  
  
 [!code-csharp[Classic WebData DataColumn.Table Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Table Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Table Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataTable" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.DataColumn.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает свойство <see cref="P:System.Data.DataColumn.Expression" /> столбца, если оно существует.</summary>
        <returns>Значение <see cref="P:System.Data.DataColumn.Expression" />, если свойство задано; в противном случае — свойство <see cref="P:System.Data.DataColumn.ColumnName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере используется <xref:System.Data.DataColumn.ToString%2A> свойство для возврата строки по умолчанию для каждого члена коллекции <xref:System.Data.DataColumn> объектов.  
  
 [!code-csharp[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.ToString Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.ToString Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.DataColumn.Expression" />
        <altmember cref="P:System.Data.DataColumn.ColumnName" />
      </Docs>
    </Member>
    <Member MemberName="Unique">
      <MemberSignature Language="C#" Value="public bool Unique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Unique" />
      <MemberSignature Language="DocId" Value="P:System.Data.DataColumn.Unique" />
      <MemberSignature Language="VB.NET" Value="Public Property Unique As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Unique { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, должны ли значения в каждой строке столбца быть уникальными.</summary>
        <value>
          <see langword="true" />, если значение должно быть уникальным; в противном случае — <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как только это свойство меняется с false на true, ограничения unique создается на этот столбец, чтобы убедиться в том, что значения уникальны.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:System.Data.DataColumn>, задает его свойства и добавляет его в коллекцию столбцов таблицы.  
  
 [!code-csharp[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataColumn.Unique Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataColumn.Unique Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Столбец является вычисляемым.</exception>
        <altmember cref="P:System.Data.DataColumn.AllowDBNull" />
        <altmember cref="T:System.Data.UniqueConstraint" />
        <altmember cref="P:System.Data.DataTable.Constraints" />
      </Docs>
    </Member>
  </Members>
</Type>