<Type Name="IDataAdapter" FullName="System.Data.IDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="19bc999689e2cb5af52a69b1ab28024ad5ede488" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36678232" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataAdapter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataAdapter" />
  <TypeSignature Language="DocId" Value="T:System.Data.IDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataAdapter" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataAdapter" />
  <TypeSignature Language="F#" Value="type IDataAdapter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Позволяет объекту реализовать DataAdapter и представляет набор методов и соответствующие свойства, связанные с операциями, для заполнения и обновления объекта <see cref="T:System.Data.DataSet" /> и обновления источника данных.  
  
 Экземпляры <see cref="T:System.Data.IDbDataAdapter" /> — для источников данных, которые являются или напоминают реляционные базы данных с текстуальными командами (например, Transact-SQL), а экземпляры <see cref="T:System.Data.IDataAdapter" /> могут использовать любой тип источника данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> Интерфейс позволяет наследующему классу реализовать класс DataAdapter, который представляет собой мост между источником данных и <xref:System.Data.DataSet>. Дополнительные сведения о классах DataAdapter см. в разделе [заполнение DataSet из объекта DataAdapter](~/docs/framework/data/adonet/populating-a-dataset-from-a-dataadapter.md).  
  
 Приложение не создает экземпляр <xref:System.Data.IDataAdapter> интерфейса напрямую, но реализует экземпляр класса, который наследует <xref:System.Data.IDataAdapter>.  
  
 Классы, наследующие <xref:System.Data.IDataAdapter> должны реализовывать наследуемые члены и они обычно определяются дополнительные члены для добавления функций конкретного поставщика. Например <xref:System.Data.IDataAdapter> интерфейс определяет <xref:System.Data.IDataAdapter.Fill%2A> метода, принимающего <xref:System.Data.DataSet> как параметр. В свою очередь <xref:System.Data.OleDb.OleDbDataAdapter> класс наследует <xref:System.Data.Common.DbDataAdapter.Fill%2A> метод и также определяет две дополнительные перегрузки <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> метод, использующий объект ADO Recordset в качестве параметра.  
  
   
  
## Examples  
 В следующем примере используется производными классами <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, и <xref:System.Data.SqlClient.SqlConnection>, для выбора записей из базы данных. Заполненный <xref:System.Data.DataSet> затем возвращается. Чтобы сделать это, методу передается инициализированный <xref:System.Data.DataSet>, строку соединения и строку запроса, являющаяся инструкцией Transact-SQL SELECT.  
  
 [!code-csharp[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData SqlDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData SqlDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Для обеспечения согласованности между поставщиками данных .NET Framework, наследующий классу имя в форме <paramref name="Prv" /> DataAdapter где <paramref name="Prv" /> имеет стандартный префикс, назначаемый всем классам в пространстве имен поставщика данных .NET Framework. Например <paramref name="Sql" /> префикс для <see cref="T:System.Data.SqlClient.SqlDataAdapter" /> класса в <see langword="System.Data.SqlClient" /> пространства имен.  При наследовании от <see cref="T:System.Data.IDataAdapter" /> интерфейс, должны реализовывать следующие конструкторы: <list type="table"><listheader><term> элемент </term><description> описание </description></listheader><item><term> PrvDataAdapter() </term><description> Инициализирует новый экземпляр класса PrvDataAdapter.  </description></item><item><term> PrvDataAdapter (PrvCommand selectCommand) </term><description> Инициализирует новый экземпляр класса PrvDataAdapter с помощью указанной инструкции SQL SELECT.  </description></item><item><term> PrvDataAdapter (selectCommandText строка, строка selectConnectionString) </term><description> Инициализирует новый экземпляр класса PrvDataAdapter с помощью инструкции SQL SELECT и строку соединения.  </description></item><item><term> PrvDataAdapter (строка selectCommandText, selectConnection PrvConnection при получении) </term><description> Инициализирует новый экземпляр класса PrvDataAdapter с помощью инструкции SQL SELECT и PrvConnection при получении объекта.  </description></item></list></para>
    </block>
  </Docs>
  <Members>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Fill(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Fill : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Fill dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" /> для заполнения записями и, если необходимо, — схемой.</param>
        <summary>Добавляет или обновляет строки в объект <see cref="T:System.Data.DataSet" /> для получения соответствия со строками в источнике данных, используя имя объекта <see cref="T:System.Data.DataSet" /> и создает объект <see cref="T:System.Data.DataTable" /> с именем "Table".</summary>
        <returns>Количество строк, успешно добавленных или обновленных в объекте <see cref="T:System.Data.DataSet" />. Не включает строки, на которые воздействуют операторы, не возвращающие строк.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.Fill%2A> Извлекает строки из источника данных, с помощью инструкции SELECT, указанной и связанной <xref:System.Data.IDbDataAdapter.SelectCommand%2A> свойство. Объект подключения, связанный с инструкцией SELECT должен быть допустимым, но он не должен быть открыт. Если подключение было закрыто до <xref:System.Data.IDataAdapter.Fill%2A> является именем, он открывается для получения данных, затем закрывается. Если подключение является открытым до <xref:System.Data.IDataAdapter.Fill%2A> является именем, он остается открытым.  
  
 <xref:System.Data.IDataAdapter.Fill%2A> Операция затем добавляет строки в целевой <xref:System.Data.DataTable> объекты в <xref:System.Data.DataSet>, создавая <xref:System.Data.DataTable> объекты, если они еще не существуют. При создании <xref:System.Data.DataTable> объектов, <xref:System.Data.IDataAdapter.Fill%2A> операции обычно создает только метаданные имени столбца. Однако если <xref:System.Data.IDataAdapter.MissingSchemaAction%2A> свойству `AddWithKey`, также создаются соответствующие первичные ключи и ограничения.  
  
 Если `SelectCommand` возвращает результаты OUTER JOIN, то `DataAdapter` не задает значение <xref:System.Data.DataTable.PrimaryKey%2A> для результирующего объекта <xref:System.Data.DataTable>. Необходимо явно определить первичный ключ, чтобы обеспечить правильное обнаружение повторяющихся строк. Дополнительные сведения см. в разделе [Определение первичных ключей](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Если <xref:System.Data.IDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя «имя_столбца1», «columnname2», «имя_столбца3» и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> согласно шаблону «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>, каждый результирующий набор будет помещен в отдельную таблицу. Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Приложения следует проявлять осторожность при использовании имена столбцов и таблиц, чтобы избежать возникновения конфликтов шаблонов именования.  
  
 Если инструкция SELECT, которая используется для заполнения <xref:System.Data.DataSet> возвращает несколько результатов, например пакетный оператор SQL, если один из результатов содержит ошибку, все последующие результаты, пропущен и не добавляются в <xref:System.Data.DataSet>.  
  
 Можно использовать <xref:System.Data.IDataAdapter.Fill%2A> метода несколько раз на том же <xref:System.Data.DataTable>. Если первичный ключ существует, входящие строки объединяются с соответствующими строками, которые уже существуют. Если первичный ключ отсутствует, входящие строки добавляются в <xref:System.Data.DataTable>.  
  
> [!NOTE]
>  При обработке пакетных инструкций SQL, возвращающих несколько результатов, реализация <xref:System.Data.IDataAdapter.Fill%2A> и <xref:System.Data.IDataAdapter.FillSchema%2A> для данных .NET Framework поставщик возвращает сведения схемы только для первого результата.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      </Docs>
    </Member>
    <Member MemberName="FillSchema">
      <MemberSignature Language="C#" Value="public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.DataTable[] FillSchema(class System.Data.DataSet dataSet, valuetype System.Data.SchemaType schemaType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::DataTable ^&gt; ^ FillSchema(System::Data::DataSet ^ dataSet, System::Data::SchemaType schemaType);" />
      <MemberSignature Language="F#" Value="abstract member FillSchema : System.Data.DataSet * System.Data.SchemaType -&gt; System.Data.DataTable[]" Usage="iDataAdapter.FillSchema (dataSet, schemaType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.DataTable[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="schemaType" Type="System.Data.SchemaType" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, который необходимо заполнить сведениями схемы из источника данных.</param>
        <param name="schemaType">Одно из значений перечисления <see cref="T:System.Data.SchemaType" />.</param>
        <summary>Добавляет объект <see cref="T:System.Data.DataTable" /> с именем "Таблица" к указанному объекту <see cref="T:System.Data.DataSet" /> и настраивает схему в соответствии с источником данных, основанном на указанном значении типа <see cref="T:System.Data.SchemaType" />.</summary>
        <returns>Массив объектов <see cref="T:System.Data.DataTable" />, который содержит сведения схемы, возвращенные из источника данных.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.FillSchema%2A> Метод извлекает схему из источника данных с помощью <xref:System.Data.IDbDataAdapter.SelectCommand%2A>. Объект подключения, связанный с <xref:System.Data.IDbDataAdapter.SelectCommand%2A> должны быть допустимыми, но он не должен быть открыт. Если подключение было закрыто до <xref:System.Data.IDataAdapter.FillSchema%2A> является именем, он открывается для получения данных, затем закрывается. Если подключение является открытым до <xref:System.Data.IDataAdapter.FillSchema%2A> является именем, он остается открытым.  
  
 Объект <xref:System.Data.IDataAdapter.FillSchema%2A> операция добавляет <xref:System.Data.DataTable> в место назначения <xref:System.Data.DataSet>. Затем он добавляет столбцы для <xref:System.Data.DataColumnCollection> из <xref:System.Data.DataTable> и настраивает следующие <xref:System.Data.DataColumn> свойства, если они существуют в источнике данных:  
  
-   <xref:System.Data.DataColumn.AllowDBNull%2A>  
  
-   <xref:System.Data.DataColumn.AutoIncrement%2A>. Необходимо задать <xref:System.Data.DataColumn.AutoIncrementStep%2A> и <xref:System.Data.DataColumn.AutoIncrementSeed%2A> отдельно.  
  
-   <xref:System.Data.DataColumn.MaxLength%2A>  
  
-   <xref:System.Data.DataColumn.ReadOnly%2A>  
  
-   <xref:System.Data.DataColumn.Unique%2A>  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> Кроме того, настраивает <xref:System.Data.DataTable.PrimaryKey%2A> и <xref:System.Data.DataTable.Constraints%2A> свойства согласно следующим правилам:  
  
-   Если один или несколько столбцов первичных ключей возвращаются <xref:System.Data.IDbDataAdapter.SelectCommand%2A>, они используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
-   Если столбцы первичных ключей не возвращаются, но уникальные столбцы, уникальные столбцы используются как первичный ключ, если все они не поддерживают значение NULL. Все столбцы, допускающие значение NULL, <xref:System.Data.UniqueConstraint> добавляется <xref:System.Data.ConstraintCollection>, но <xref:System.Data.DataTable.PrimaryKey%2A> свойство не задано.  
  
-   Если возвращаются и столбцы первичных ключей и уникальные столбцы, столбцы первичного ключа используются в качестве первичного ключа для <xref:System.Data.DataTable>.  
  
 Обратите внимание, что первичные ключи и уникальные ограничения добавляются <xref:System.Data.ConstraintCollection> в соответствии с приведенными выше правилами, а ограничения других типов не добавляются.  
  
 Если или добавьте уникальный кластеризованный индекс определен в столбец или столбцы в таблице SQL Server и ограничение первичного ключа определен на отдельный набор столбцов, то будут возвращены имена столбцов в кластеризованном индексе. Чтобы вернуть имя или имена столбцов первичного ключа, используйте указание запроса с инструкцией SELECT, указывающее имя индекса первичного ключа. Дополнительные сведения о том, как задать указания запросов см. в разделе [указание запроса (Transact-SQL)](http://msdn.microsoft.com/library/ms181714.aspx).  
  
 Если <xref:System.Data.IDataAdapter> встречает идентичные столбцы при заполнении <xref:System.Data.DataTable>, он создает имена для последующих столбцов, используя «имя_столбца1», «columnname2», «имя_столбца3» и т. д. Если входные данные содержат безымянные столбцы, они помещаются в <xref:System.Data.DataSet> согласно шаблону «Column1», «Column2» и т. д. При добавлении нескольких результирующих наборов <xref:System.Data.DataSet>, каждый результирующий набор будет помещен в отдельную таблицу. Дополнительные результирующие наборы присваиваются имена с добавлением целых чисел к заданному имени таблицы (например, «Table», «Table1», «Таблица2» и т. д). Приложения следует проявлять осторожность при использовании имена столбцов и таблиц, чтобы избежать возникновения конфликтов шаблонов именования.  
  
 <xref:System.Data.IDataAdapter.FillSchema%2A> не возвращает строк. Используйте <xref:System.Data.IDataAdapter.Fill%2A> метод для добавления строк к <xref:System.Data.DataTable>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)" />
      </Docs>
    </Member>
    <Member MemberName="GetFillParameters">
      <MemberSignature Language="C#" Value="public System.Data.IDataParameter[] GetFillParameters ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Data.IDataParameter[] GetFillParameters() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.GetFillParameters" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFillParameters () As IDataParameter()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::IDataParameter ^&gt; ^ GetFillParameters();" />
      <MemberSignature Language="F#" Value="abstract member GetFillParameters : unit -&gt; System.Data.IDataParameter[]" Usage="iDataAdapter.GetFillParameters " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDataParameter[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает параметры, заданные пользователем при выполнении оператора SQL SELECT.</summary>
        <returns>Массив объектов <see cref="T:System.Data.IDataParameter" /> содержит параметры, заданные пользователем.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
```  
private static void GetParameters(String connectiongString) {  
           using (SqlConnection conn = new SqlConnection(connectiongString)) {  
              String queryString = "Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credit]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MissingMappingAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingMappingAction MissingMappingAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingMappingAction MissingMappingAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingMappingAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingMappingAction As MissingMappingAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingMappingAction MissingMappingAction { System::Data::MissingMappingAction get(); void set(System::Data::MissingMappingAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingMappingAction : System.Data.MissingMappingAction with get, set" Usage="System.Data.IDataAdapter.MissingMappingAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingMappingAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, будут ли несопоставленные столбцы-источники или таблицы-источники передаваться со своими исходными именами, чтобы пройти через фильтр или вызвать ошибку.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Data.MissingMappingAction" />. Значение по умолчанию: <see langword="Passthrough" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter.TableMappings%2A> Свойство предоставляет главное сопоставление между возвращаемыми записями и <xref:System.Data.DataSet>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Заданное значение не является одним из значений <see cref="T:System.Data.MissingMappingAction" />.</exception>
        <altmember cref="P:System.Data.IDataAdapter.MissingSchemaAction" />
      </Docs>
    </Member>
    <Member MemberName="MissingSchemaAction">
      <MemberSignature Language="C#" Value="public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Data.MissingSchemaAction MissingSchemaAction" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberSignature Language="VB.NET" Value="Public Property MissingSchemaAction As MissingSchemaAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::MissingSchemaAction MissingSchemaAction { System::Data::MissingSchemaAction get(); void set(System::Data::MissingSchemaAction value); };" />
      <MemberSignature Language="F#" Value="member this.MissingSchemaAction : System.Data.MissingSchemaAction with get, set" Usage="System.Data.IDataAdapter.MissingSchemaAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.MissingSchemaAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает или задает значение, определяющее, будут ли отсутствующие исходные таблицы, столбцы и их отношения добавляться в схему набора данных, игнорироваться или вызывать ошибку.</summary>
        <value>Одно из значений перечисления <see cref="T:System.Data.MissingSchemaAction" />. Значение по умолчанию: <see langword="Add" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Заданное значение не является одним из значений <see cref="T:System.Data.MissingSchemaAction" />.</exception>
        <altmember cref="P:System.Data.Common.DataAdapter.MissingMappingAction" />
      </Docs>
    </Member>
    <Member MemberName="TableMappings">
      <MemberSignature Language="C#" Value="public System.Data.ITableMappingCollection TableMappings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.ITableMappingCollection TableMappings" />
      <MemberSignature Language="DocId" Value="P:System.Data.IDataAdapter.TableMappings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TableMappings As ITableMappingCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::ITableMappingCollection ^ TableMappings { System::Data::ITableMappingCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TableMappings : System.Data.ITableMappingCollection" Usage="System.Data.IDataAdapter.TableMappings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.ITableMappingCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, как исходная таблица сопоставлена с таблицей набора данных.</summary>
        <value>Коллекция, обеспечивающая основное сопоставление между возвращенными записями и объектом <see cref="T:System.Data.DataSet" />. Значение по умолчанию — пустая коллекция.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.IDataAdapter> Использует только сопоставления для исходной таблицы с именем «Table». SELECT, инструкции INSERT, DELETE и UPDATE, возврат данных должны использовать согласованные имена столбцов. Имена столбцов, возвращаемых записей должны быть уникальными, в противном случае столбцы с дублирующимися именами перезаписи предыдущих данных. На <xref:System.Data.IDataAdapter.Update%2A>только выверять изменения для таблицы, сопоставленный в исходной таблице с именем «Table».  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Data.DataSet dataSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Update(class System.Data.DataSet dataSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Data::DataSet ^ dataSet);" />
      <MemberSignature Language="F#" Value="abstract member Update : System.Data.DataSet -&gt; int" Usage="iDataAdapter.Update dataSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
      </Parameters>
      <Docs>
        <param name="dataSet">Объект <see cref="T:System.Data.DataSet" />, использованный для обновления источника данных.</param>
        <summary>Вызывает соответствующие операторы INSERT, UPDATE или DELETE для каждой вставленной, обновленной или удаленной строки в указанном объекте <see cref="T:System.Data.DataSet" /> из объекта <see cref="T:System.Data.DataTable" /> с именем "Table".</summary>
        <returns>Количество строк, успешно обновленных из объекта <see cref="T:System.Data.DataSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если приложение вызывает <xref:System.Data.IDataAdapter.Update%2A> метода <xref:System.Data.IDataAdapter> проверяет <xref:System.Data.DataRow.RowState%2A> свойство и выполняет необходимые инструкции INSERT, UPDATE или DELETE итеративно для каждой строки, основываясь на порядке индексов, настроенном в <xref:System.Data.DataSet>. Например <xref:System.Data.IDataAdapter.Update%2A> может выполнить инструкцию DELETE, за которым следует оператор INSERT, а затем еще одну инструкцию DELETE, из-за порядок строк в <xref:System.Data.DataTable>.  
  
 Имейте в виду, что эти инструкции выполняются не как пакетный процесс. Каждая строка обновляется отдельно. Приложение может вызвать <xref:System.Data.DataSet.GetChanges%2A> метод, если необходимо управлять последовательностью типов инструкций (например, INSERT до инструкций Update). Дополнительные сведения см. в разделе [обновление источников данных с помощью DataAdapter](~/docs/framework/data/adonet/updating-data-sources-with-dataadapters.md).  
  
 Если инструкции INSERT, UPDATE или DELETE не были указаны, <xref:System.Data.Common.DataAdapter.Update%2A> метод создает исключение. Однако можно создать <xref:System.Data.SqlClient.SqlCommandBuilder> или <xref:System.Data.OleDb.OleDbCommandBuilder> для автоматического создания инструкций SQL для отдельных обновлений, если задать `SelectCommand` свойства поставщика данных .NET Framework. Затем CommandBuilder создаются любые дополнительные инструкции SQL, которые не заданы. Эта логика создания требует сведения о ключевом столбце должны присутствовать в <xref:System.Data.DataSet>. Дополнительные сведения см. [создание команд с помощью построителей команд](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 <xref:System.Data.Common.DataAdapter.Update%2A> Метод извлекает строки из таблицы, приведенной в первом сопоставлении перед выполнением обновления. <xref:System.Data.Common.DataAdapter.Update%2A> Затем обновляет строку, используя значение <xref:System.Data.IDbCommand.UpdatedRowSource%2A> свойства. Все возвращенные дополнительные строки игнорируются.  
  
 После загрузки данных обратно в <xref:System.Data.DataSet>, <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> события, позволяя пользователю проверить согласованную <xref:System.Data.DataSet> строк и любые выходные параметры, возвращенные командой. После успешного обновления строки принимаются изменения этой строки.  
  
 При использовании <xref:System.Data.IDataAdapter.Update%2A>, порядок выполнения является следующим образом:  
  
1.  Значения в <xref:System.Data.DataRow> перемещаются в значения параметров.  
  
2.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>.  
  
3.  Выполняется команда.  
  
4.  Если команда имеет значение `FirstReturnedRecord`, первый возвращенный результат помещается в <xref:System.Data.DataRow>.  
  
5.  Если имеются выходные параметры, они помещаются в <xref:System.Data.DataRow>.  
  
6.  Возникает событие <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>.  
  
7.  вызывается метод <xref:System.Data.DataRow.AcceptChanges%2A>;  
  
 Каждая команда, связанная с <xref:System.Data.IDataAdapter> обычно имеет коллекции параметров, связанных с ним. Параметры сопоставляются с текущей строкой с помощью `SourceColumn` и `SourceVersion` свойств поставщика данных .NET Framework `Parameter` класса. `SourceColumn` ссылается на <xref:System.Data.DataTable> столбца, <xref:System.Data.IDataAdapter> ссылки для получения значений параметров для текущей строки.  
  
 `SourceColumn` ссылается на имя несопоставленный столбец перед применением сопоставления таблиц. Если `SourceColumn` ссылается на несуществующий столбец, предпринимаемые действия зависят от одного из следующих <xref:System.Data.MissingMappingAction> значения.  
  
|Значение перечисления|Действие, выполняемое|  
|-----------------------|------------------|  
|`MissingMappingAction.Passthrough`|Используйте имена исходных столбцов и таблиц в <xref:System.Data.DataSet> Если сопоставление отсутствует.|  
|`MissingMappingAction.Ignore`|Объект <xref:System.SystemException> создается. Если сопоставления заданы явно, отсутствие сопоставления для входного параметра обычно возникает из-за ошибки.|  
|`MissingMappingAction.Error`|Объект <xref:System.SystemException> создается.|  
  
 `SourceColumn` Свойство также используется для сопоставления значений выходных значений или входных/выходных параметров обратно в `DataSet`. Исключение создается в том случае, если он ссылается на несуществующий столбец.  
  
 `SourceVersion` Свойства поставщика данных .NET Framework `Parameter` класс определяет, следует ли использовать `Original`, `Current`, или `Proposed` версии значения столбца. Эта возможность часто используется для включения исходных значений в предложении WHERE инструкции UPDATE на наличие нарушений оптимистичного параллелизма.  
  
> [!NOTE]
>  В случае ошибки при обновлении строки создается исключение, и выполнение обновления прекращается. Чтобы продолжить операцию обновления без появления исключения при обнаружении ошибки, установите <xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> свойства `true` перед вызовом <xref:System.Data.Common.DbDataAdapter.Update%2A>. Также можно ответить на ошибки для каждой строки в `RowUpdated` события объекта DataAdapter. Чтобы продолжить операцию обновления без генерации исключения в `RowUpdated` набор событий, <xref:System.Data.Common.RowUpdatedEventArgs.Status%2A> свойство <xref:System.Data.Common.RowUpdatedEventArgs> для <xref:System.Data.UpdateStatus.Continue>.  
  
   
  
## Examples  
 В следующем примере используется производный класс <xref:System.Data.OleDb.OleDbDataAdapter>в <xref:System.Data.Common.DataAdapter.Update%2A> источника данных. В этом примере предполагается, что вы создали <xref:System.Data.OleDb.OleDbDataAdapter> и <xref:System.Data.DataSet>.  
  
 [!code-csharp[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DataAdapter.IDataAdapter.Update Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Data.DBConcurrencyException">Попытка выполнить оператор INSERT, UPDATE или DELETE привела к нулевому количеству обработанных записей.</exception>
      </Docs>
    </Member>
  </Members>
</Type>