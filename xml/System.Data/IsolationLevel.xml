<Type Name="IsolationLevel" FullName="System.Data.IsolationLevel">
  <TypeSignature Language="C#" Value="public enum IsolationLevel" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed IsolationLevel extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.Data.IsolationLevel" />
  <TypeSignature Language="VB.NET" Value="Public Enum IsolationLevel" />
  <TypeSignature Language="C++ CLI" Value="public enum class IsolationLevel" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Common</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary><span data-ttu-id="2fc20-101">Указывает режим блокировки транзакций для подключения.</span><span class="sxs-lookup"><span data-stu-id="2fc20-101">Specifies the transaction locking behavior for the connection.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fc20-102"><xref:System.Data.IsolationLevel> С помощью поставщика данных .NET Framework используются значения, при выполнении транзакции.</span><span class="sxs-lookup"><span data-stu-id="2fc20-102">The <xref:System.Data.IsolationLevel> values are used by a .NET Framework data provider when performing a transaction.</span></span>  
  
 <span data-ttu-id="2fc20-103"><xref:System.Data.IsolationLevel> Действует до явно изменен, но его можно изменить в любое время.</span><span class="sxs-lookup"><span data-stu-id="2fc20-103">The <xref:System.Data.IsolationLevel> remains in effect until explicitly changed, but it can be changed at any time.</span></span> <span data-ttu-id="2fc20-104">Новое значение используется во время выполнения не на этапе синтаксического анализа.</span><span class="sxs-lookup"><span data-stu-id="2fc20-104">The new value is used at execution time, not parse time.</span></span> <span data-ttu-id="2fc20-105">Если изменен во время транзакции, ожидаемое поведение сервера является применение нового уровня блокировки ко всем остальным операторам.</span><span class="sxs-lookup"><span data-stu-id="2fc20-105">If changed during a transaction, the expected behavior of the server is to apply the new locking level to all statements remaining.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="2fc20-106">Это приложение демонстрирует использование <xref:System.Data.IsolationLevel> в <xref:System.Data.Common.DbTransaction>.</span><span class="sxs-lookup"><span data-stu-id="2fc20-106">This application demonstrates how to use <xref:System.Data.IsolationLevel> in <xref:System.Data.Common.DbTransaction>.</span></span> <span data-ttu-id="2fc20-107">Образец демонстрируют, какие из следующих поведений разрешены в различных уровней изоляции.</span><span class="sxs-lookup"><span data-stu-id="2fc20-107">The sample will demonstrate which of the following behaviors are allowed in the different isolation levels:</span></span>  
  
-   <span data-ttu-id="2fc20-108">«Грязные» чтения.</span><span class="sxs-lookup"><span data-stu-id="2fc20-108">Dirty reads.</span></span>  
  
-   <span data-ttu-id="2fc20-109">Без повторного чтения.</span><span class="sxs-lookup"><span data-stu-id="2fc20-109">Non-repeatable reads.</span></span>  
  
-   <span data-ttu-id="2fc20-110">Фантомов.</span><span class="sxs-lookup"><span data-stu-id="2fc20-110">Phantoms.</span></span>  
  
 <span data-ttu-id="2fc20-111">Это приложение будет выполняться на следующих уровнях изоляции:</span><span class="sxs-lookup"><span data-stu-id="2fc20-111">This application will execute in the following isolation levels:</span></span>  
  
-   <span data-ttu-id="2fc20-112">ReadUncommitted</span><span class="sxs-lookup"><span data-stu-id="2fc20-112">ReadUncommitted</span></span>  
  
-   <span data-ttu-id="2fc20-113">Читать зафиксированные</span><span class="sxs-lookup"><span data-stu-id="2fc20-113">ReadCommitted</span></span>  
  
-   <span data-ttu-id="2fc20-114">RepeatableRead</span><span class="sxs-lookup"><span data-stu-id="2fc20-114">RepeatableRead</span></span>  
  
-   <span data-ttu-id="2fc20-115">Сериализуемые</span><span class="sxs-lookup"><span data-stu-id="2fc20-115">Serializable</span></span>  
  
-   <span data-ttu-id="2fc20-116">Снимок</span><span class="sxs-lookup"><span data-stu-id="2fc20-116">Snapshot</span></span>  
  
 <span data-ttu-id="2fc20-117">Класс PhantomReadThreads показано, если определенной транзакции обеспечивает чтение фантомных поведение.</span><span class="sxs-lookup"><span data-stu-id="2fc20-117">The PhantomReadThreads class demonstrates if the specific transaction allows the Phantom Read behavior.</span></span> <span data-ttu-id="2fc20-118">Если транзакция позволяет определить поведение, потоки будут работать в следующем порядке:</span><span class="sxs-lookup"><span data-stu-id="2fc20-118">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="2fc20-119">Выберите products(All) в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-119">In first thread, select the products(All).</span></span>  
  
-   <span data-ttu-id="2fc20-120">Во втором потоке вставьте новый продукт.</span><span class="sxs-lookup"><span data-stu-id="2fc20-120">In the second thread, insert a new product.</span></span>  
  
-   <span data-ttu-id="2fc20-121">Зафиксируйте транзакцию во втором потоке.</span><span class="sxs-lookup"><span data-stu-id="2fc20-121">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="2fc20-122">Выберите продукты, еще раз.</span><span class="sxs-lookup"><span data-stu-id="2fc20-122">Select the products again.</span></span>  
  
-   <span data-ttu-id="2fc20-123">Зафиксируйте транзакцию в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-123">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="2fc20-124">Если транзакция позволяет определить поведение, две операции Select получат различные результаты.</span><span class="sxs-lookup"><span data-stu-id="2fc20-124">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="2fc20-125">Класс NonrepeatableReadThreads демонстрирует, если конкретная транзакция позволяет определить поведение неповторяющейся операцией чтения.</span><span class="sxs-lookup"><span data-stu-id="2fc20-125">The NonrepeatableReadThreads class demonstrates if the specific transaction allows the Nonrepeatable Read behavior.</span></span> <span data-ttu-id="2fc20-126">Если транзакция позволяет определить поведение, потоки будут работать в следующем порядке:</span><span class="sxs-lookup"><span data-stu-id="2fc20-126">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="2fc20-127">Выберите product(ProductId=1) в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-127">In first thread, select the product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="2fc20-128">Во втором потоке обновите value(ProductId=1) количество.</span><span class="sxs-lookup"><span data-stu-id="2fc20-128">In the second thread, update the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="2fc20-129">Зафиксируйте транзакцию во втором потоке.</span><span class="sxs-lookup"><span data-stu-id="2fc20-129">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="2fc20-130">Снова выберите продукт.</span><span class="sxs-lookup"><span data-stu-id="2fc20-130">Select the product again.</span></span>  
  
-   <span data-ttu-id="2fc20-131">Зафиксируйте транзакцию в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-131">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="2fc20-132">Если транзакция позволяет определить поведение, две операции Select получат различные результаты.</span><span class="sxs-lookup"><span data-stu-id="2fc20-132">If the transaction allows the behavior, the two Select operations will get the different results.</span></span>  
  
 <span data-ttu-id="2fc20-133">Класс ExchangeValuesThreads иллюстрирует различие между транзакции Serializable и моментальных снимков.</span><span class="sxs-lookup"><span data-stu-id="2fc20-133">The ExchangeValuesThreads class demonstrates the difference between the Serializable and Snapshot transaction.</span></span> <span data-ttu-id="2fc20-134">Сериализуемые транзакции потоков будет работать в следующем порядке:</span><span class="sxs-lookup"><span data-stu-id="2fc20-134">For the Serializable transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="2fc20-135">В первом потоке цена product(ProductId=2) и хранилища в переменной.</span><span class="sxs-lookup"><span data-stu-id="2fc20-135">In first thread, get the Price of product(ProductId=2) and store in the variable.</span></span>  
  
-   <span data-ttu-id="2fc20-136">В первом потоке обновите цены product(ProductId=1) со стоимостью product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="2fc20-136">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="2fc20-137">Зафиксируйте транзакцию в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-137">Commit the transaction in first thread.</span></span>  
  
-   <span data-ttu-id="2fc20-138">Во втором потоке цена product(ProductId=1) и хранилища в переменной.</span><span class="sxs-lookup"><span data-stu-id="2fc20-138">In second thread, get the Price of product(ProductId=1) and store in the variable.</span></span>  
  
-   <span data-ttu-id="2fc20-139">Во втором потоке обновите цены product(ProductId=2) со стоимостью product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="2fc20-139">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="2fc20-140">Зафиксируйте транзакцию во втором потоке.</span><span class="sxs-lookup"><span data-stu-id="2fc20-140">Commit the transaction in second thread.</span></span>  
  
 <span data-ttu-id="2fc20-141">Теперь значения цены (ProductId = 1 и ProductId = 2) и исходной цены Product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="2fc20-141">Now the values of the Price(ProductId=1 and ProductId=2) are as same as the original Price of Product(ProductId=2).</span></span>  
  
 <span data-ttu-id="2fc20-142">Транзакции моментальных снимков потоков будет работать в следующем порядке:</span><span class="sxs-lookup"><span data-stu-id="2fc20-142">For the Snapshot transaction, threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="2fc20-143">В первом потоке цена product(ProductId=2) и хранилища в переменной.</span><span class="sxs-lookup"><span data-stu-id="2fc20-143">In first thread, get the Price of product(ProductId=2) and store in the variable;</span></span>  
  
-   <span data-ttu-id="2fc20-144">В первом потоке обновите цены product(ProductId=1) со стоимостью product(ProductId=2).</span><span class="sxs-lookup"><span data-stu-id="2fc20-144">In first thread, update the Price of product(ProductId=1) with the price of product(ProductId=2).</span></span>  
  
-   <span data-ttu-id="2fc20-145">Во втором потоке цена product(ProductId=1) из моментального снимка и сохранить в переменной.</span><span class="sxs-lookup"><span data-stu-id="2fc20-145">In second thread, get the Price of product(ProductId=1) from the snapshot and store in the variable.</span></span>  
  
-   <span data-ttu-id="2fc20-146">Во втором потоке обновите цены product(ProductId=2) со стоимостью product(ProductId=1).</span><span class="sxs-lookup"><span data-stu-id="2fc20-146">In second thread, update the Price of product(ProductId=2) with the price of product(ProductId=1).</span></span>  
  
-   <span data-ttu-id="2fc20-147">Зафиксируйте транзакцию во втором потоке.</span><span class="sxs-lookup"><span data-stu-id="2fc20-147">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="2fc20-148">Зафиксируйте транзакцию в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-148">Commit the transaction in first thread.</span></span>  
  
 <span data-ttu-id="2fc20-149">Теперь обмениваться цены продуктов (ProductId = 1 и ProductId = 2).</span><span class="sxs-lookup"><span data-stu-id="2fc20-149">Now exchange the Price of products(ProductId=1 and ProductId=2).</span></span>  
  
 <span data-ttu-id="2fc20-150">Класс DirtyReadThreads демонстрирует, если конкретная транзакция позволяет определить поведение «грязное» чтение.</span><span class="sxs-lookup"><span data-stu-id="2fc20-150">The DirtyReadThreads class demonstrates if the specific transaction allows the Dirty Read behavior.</span></span> <span data-ttu-id="2fc20-151">Если транзакция позволяет определить поведение, потоки будут работать в следующем порядке:</span><span class="sxs-lookup"><span data-stu-id="2fc20-151">If the transaction allows the behavior, the threads will operate in the following order:</span></span>  
  
-   <span data-ttu-id="2fc20-152">В первом потоке транзакцию и добавить value(ProductId=1) количество.</span><span class="sxs-lookup"><span data-stu-id="2fc20-152">In first thread, begin a transaction and add the Quantity value(ProductId=1).</span></span>  
  
-   <span data-ttu-id="2fc20-153">Во втором потоке чтения значение количества и снова добавьте значение.</span><span class="sxs-lookup"><span data-stu-id="2fc20-153">In the second thread, read the Quantity value and add the value again.</span></span>  
  
-   <span data-ttu-id="2fc20-154">Зафиксируйте транзакцию во втором потоке.</span><span class="sxs-lookup"><span data-stu-id="2fc20-154">Commit the transaction in second thread.</span></span>  
  
-   <span data-ttu-id="2fc20-155">Откат транзакции в первый поток.</span><span class="sxs-lookup"><span data-stu-id="2fc20-155">Roll back the transaction in first thread.</span></span>  
  
 <span data-ttu-id="2fc20-156">Если транзакция позволяет определить поведение, значение количества будет добавлен дважды.</span><span class="sxs-lookup"><span data-stu-id="2fc20-156">If the transaction allows the behavior, the Quantity value will be added twice.</span></span>  
  
 <span data-ttu-id="2fc20-157">Проекты C# и Visual Basic с этим образцом кода можно найти на [примеры кода от разработчиков](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span><span class="sxs-lookup"><span data-stu-id="2fc20-157">C# and Visual Basic projects with this code sample can be found on [Developer Code Samples](https://code.msdn.microsoft.com/site/search?query=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Value=How%20to%20use%20IsolationLevel%20Enumeration%20in%20DbTransaction&f%5B0%5D.Type=SearchText&ac=4).</span></span>  
  
 [!code-csharp[system_data_IsolationLevel#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/system_data_isolationlevel/cs/source.cs#1)]
 [!code-vb[system_data_IsolationLevel#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/system_data_isolationlevel/vb/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Chaos">
      <MemberSignature Language="C#" Value="Chaos" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Chaos = int32(16)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Chaos" />
      <MemberSignature Language="VB.NET" Value="Chaos" />
      <MemberSignature Language="C++ CLI" Value="Chaos" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-158">Ожидающие изменения более изолированных транзакций не могут быть перезаписаны.</span><span class="sxs-lookup"><span data-stu-id="2fc20-158">The pending changes from more highly isolated transactions cannot be overwritten.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ReadCommitted">
      <MemberSignature Language="C#" Value="ReadCommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadCommitted = int32(4096)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadCommitted" />
      <MemberSignature Language="VB.NET" Value="ReadCommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadCommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>4096</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-159">В процессе чтения данных совмещаемые блокировки сохраняются, чтобы избежать чтения "грязных" данных, однако данные могут быть изменены до окончания транзакции, что может стать причиной неповторяемого чтения или появления фиктивных данных.</span><span class="sxs-lookup"><span data-stu-id="2fc20-159">Shared locks are held while the data is being read to avoid dirty reads, but the data can be changed before the end of the transaction, resulting in non-repeatable reads or phantom data.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="ReadUncommitted">
      <MemberSignature Language="C#" Value="ReadUncommitted" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel ReadUncommitted = int32(256)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.ReadUncommitted" />
      <MemberSignature Language="VB.NET" Value="ReadUncommitted" />
      <MemberSignature Language="C++ CLI" Value="ReadUncommitted" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>256</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-160">Чтение "грязных" данных возможно, что означает отсутствие совмещаемых и монопольных блокировок.</span><span class="sxs-lookup"><span data-stu-id="2fc20-160">A dirty read is possible, meaning that no shared locks are issued and no exclusive locks are honored.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="RepeatableRead">
      <MemberSignature Language="C#" Value="RepeatableRead" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel RepeatableRead = int32(65536)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.RepeatableRead" />
      <MemberSignature Language="VB.NET" Value="RepeatableRead" />
      <MemberSignature Language="C++ CLI" Value="RepeatableRead" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>65536</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-161">Блокировки помещаются на все данные, используемые в запросе, что предотвращает обновление данных другими пользователями.</span><span class="sxs-lookup"><span data-stu-id="2fc20-161">Locks are placed on all data that is used in a query, preventing other users from updating the data.</span></span> <span data-ttu-id="2fc20-162">Предотвращает неповторяемое чтение, однако появление фиктивных строк остается возможным.</span><span class="sxs-lookup"><span data-stu-id="2fc20-162">Prevents non-repeatable reads but phantom rows are still possible.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Serializable">
      <MemberSignature Language="C#" Value="Serializable" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Serializable = int32(1048576)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Serializable" />
      <MemberSignature Language="VB.NET" Value="Serializable" />
      <MemberSignature Language="C++ CLI" Value="Serializable" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>1048576</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-163">Блокировка диапазона устанавливается для объекта <see cref="T:System.Data.DataSet" />, что предотвращает обновление или ставку строк другими пользователями в набор данных до завершения транзакции.</span><span class="sxs-lookup"><span data-stu-id="2fc20-163">A range lock is placed on the <see cref="T:System.Data.DataSet" />, preventing other users from updating or inserting rows into the dataset until the transaction is complete.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Snapshot">
      <MemberSignature Language="C#" Value="Snapshot" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Snapshot = int32(16777216)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Snapshot" />
      <MemberSignature Language="VB.NET" Value="Snapshot" />
      <MemberSignature Language="C++ CLI" Value="Snapshot" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>16777216</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-164">Уменьшает блокировку, сохраняя версию данных, которую приложение может считывать в то время, когда другое приложение изменяет те же самые данные.</span><span class="sxs-lookup"><span data-stu-id="2fc20-164">Reduces blocking by storing a version of data that one application can read while another is modifying the same data.</span></span> <span data-ttu-id="2fc20-165">Указывает, что из одной транзакции пользователь не может просматривать изменения, сделанные в других транзакциях, даже если он запросит их повторно.</span><span class="sxs-lookup"><span data-stu-id="2fc20-165">Indicates that from one transaction you cannot see changes made in other transactions, even if you requery.</span></span></summary>
      </Docs>
    </Member>
    <Member MemberName="Unspecified">
      <MemberSignature Language="C#" Value="Unspecified" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.Data.IsolationLevel Unspecified = int32(-1)" />
      <MemberSignature Language="DocId" Value="F:System.Data.IsolationLevel.Unspecified" />
      <MemberSignature Language="VB.NET" Value="Unspecified" />
      <MemberSignature Language="C++ CLI" Value="Unspecified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Common</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IsolationLevel</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary><span data-ttu-id="2fc20-166">Используется уровень изоляции, отличный от указанного, однако этот уровень не может быть определен.</span><span class="sxs-lookup"><span data-stu-id="2fc20-166">A different isolation level than the one specified is being used, but the level cannot be determined.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fc20-167">При использовании <xref:System.Data.Odbc.OdbcTransaction>, если вы не установите <xref:System.Data.IsolationLevel> или задать <xref:System.Data.IsolationLevel> для `Unspecified`, транзакции выполняются в соответствии с уровнем изоляции, определенный драйвером, который используется.</span><span class="sxs-lookup"><span data-stu-id="2fc20-167">When using <xref:System.Data.Odbc.OdbcTransaction>, if you do not set <xref:System.Data.IsolationLevel> or you set <xref:System.Data.IsolationLevel> to `Unspecified`, the transaction executes according to the isolation level that is determined by the driver that is being used.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>