<Type Name="Debug" FullName="System.Diagnostics.Debug">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e1f2f5cb8de12cc67dfb0178935452c56a2348ef" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061119" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Debug" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Debug extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Debug" />
  <TypeSignature Language="VB.NET" Value="Public Class Debug" />
  <TypeSignature Language="C++ CLI" Value="public ref class Debug abstract sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Diagnostics.Debug</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет набор методов и свойств, помогающих при отладке кода.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы используете методы в <xref:System.Diagnostics.Debug> класса для распечатки данных отладки и проверки алгоритма с помощью утверждений, можно сделать код более надежным, не влияя на производительность или размер кода поставляемого продукта.  
  
 Этот класс предоставляет методы для отображения <xref:System.Diagnostics.Debug.Assert%2A> диалоговое окно и для выдачи утверждения, которое всегда будут завершаться ошибкой. Этот класс предоставляет методы для записи в следующие варианты: <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A> и <xref:System.Diagnostics.Debug.WriteLineIf%2A>.  
  
 <xref:System.Diagnostics.BooleanSwitch> И <xref:System.Diagnostics.TraceSwitch> классы предоставляют средства для динамического управления выходные данные трассировки. Значения этих параметров можно изменять без перекомпиляции приложения. Сведения об использовании файла конфигурации для задания переключателя см. в разделе <xref:System.Diagnostics.Switch> класса и [переключатели трассировки](~/docs/framework/debug-trace-profile/trace-switches.md) раздела.  
  
 Целевой выходные данные трассировки можно настроить путем добавления <xref:System.Diagnostics.TraceListener> или удалив экземпляры из <xref:System.Diagnostics.Debug.Listeners%2A> коллекции. <xref:System.Diagnostics.Debug.Listeners%2A> Коллекции является общим для обоих <xref:System.Diagnostics.Debug> и <xref:System.Diagnostics.Trace> классы; Добавление прослушивателя трассировки для каждого класса добавляет прослушиватель оба. По умолчанию <xref:System.Diagnostics.DefaultTraceListener> класс выдает выходные данные трассировки.  
  
> [!NOTE]
>  Добавление прослушивателя трассировки в <xref:System.Diagnostics.Debug.Listeners%2A> коллекции может вызвать исключение во время трассировки, если ресурс, используемый прослушивателем трассировки не доступен. Условия и возникновение исключения зависят от прослушивателя трассировки и не могут быть перечислены в этом разделе. Может оказаться полезным звонить <xref:System.Diagnostics.Debug> методы в `try` / `catch` блоков для обнаружения и обработки исключений в прослушиватели трассировки.  
  
 Можно изменить уровень отступа с помощью <xref:System.Diagnostics.Debug.Indent%2A> метода или <xref:System.Diagnostics.Debug.IndentLevel%2A> свойства. Чтобы изменить значения отступов, используйте <xref:System.Diagnostics.Debug.IndentSize%2A> свойство. Можно задать автоматическую очистку буфера вывода после каждой операции записи, задав <xref:System.Diagnostics.Debug.AutoFlush%2A> свойства `true`.  
  
 Чтобы задать <xref:System.Diagnostics.Debug.AutoFlush%2A> и <xref:System.Diagnostics.Debug.IndentSize%2A> для <xref:System.Diagnostics.Debug>, можно изменить файл конфигурации, соответствующий имени приложения. Следует быть формат файла конфигурации, как показано в следующем примере.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 <xref:System.Diagnostics.ConditionalAttribute> Атрибут применяется к методам <xref:System.Diagnostics.Debug>. Компиляторы, поддерживающие <xref:System.Diagnostics.ConditionalAttribute> игнорировать вызовы этих методов «DEBUG» не определен как символ условной компиляции. Компилятор документации, чтобы определить, является ли <xref:System.Diagnostics.ConditionalAttribute> поддерживается и синтаксис для определения символа условной компиляции.  
  
> [!NOTE]
> В проектах Visual Studio C# и Visual Basic по умолчанию для отладочных построений определен символ условной компиляции «Отладка» и символ «TRACE» должен быть определен для отладочных построений и окончательные сборки. Сведения о том, как отключить это поведение, см. в документации Visual Studio. Сведения об условной отладке в Visual C++ см. в разделе [класс Debug (C + +/ CLI)](/cpp/dotnet/debug-class-cpp-cli).
  
 Чтобы определить символ условной компиляции «Отладка» в C#, добавьте `/d:DEBUG` параметр в командную строку компилятора при компиляции кода с помощью командной строки или добавить `#define DEBUG` в начало файла. В Visual Basic добавьте `/d:DEBUG=True` параметр в командной строке компилятора или добавить `#Const DEBUG=True` в файл.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Diagnostics.Debug> для определения начала и завершения выполнения программы. В примере также используется <xref:System.Diagnostics.Debug.Indent%2A> и <xref:System.Diagnostics.Debug.Unindent%2A> для различения выходные данные трассировки.  
  
 [!code-cpp[Classic Debug Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug Example/CS/source.cs#1)]
 [!code-vb[Classic Debug Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Данный тип потокобезопасен.</threadsafe>
    <altmember cref="T:System.Diagnostics.Trace" />
    <altmember cref="T:System.Diagnostics.Switch" />
    <altmember cref="T:System.Diagnostics.BooleanSwitch" />
    <altmember cref="T:System.Diagnostics.TraceSwitch" />
    <altmember cref="T:System.Diagnostics.TraceListener" />
    <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
    <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
    <altmember cref="T:System.Diagnostics.EventLogTraceListener" />
    <altmember cref="T:System.Diagnostics.TraceListenerCollection" />
    <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Assert">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Проверяет условие; если условие имеет значение <see langword="false" />, выводит сообщения и отображает окно сообщения со стеком вызовов.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, сообщение о сбое не отправляется и не отображается окно сообщения.</param>
        <summary>Проверяет условие. Если условие имеет значение <see langword="false" />, отображается окно сообщения со стеком вызовов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> метод работает только в отладочных построениях. Используйте <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> создает метод, если вы хотите сделать утверждения в выпуске. Дополнительные сведения см. в разделе [утверждения в управляемом коде](/visualstudio/debugger/assertions-in-managed-code).  
  
> [!IMPORTANT]
>  `Assert` Методы недоступны для [!INCLUDE[win8_appstore_long](~/includes/win8-appstore-long-md.md)] приложений.  
  
 Как правило <xref:System.Diagnostics.Debug.Assert%28System.Boolean%29> метод используется для выявления ошибок логики во время разработки программ. <xref:System.Diagnostics.Debug.Assert%2A> вычисляет условие. Если результатом является `false`, он отправляет сообщение о сбое для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции. Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener> , или удалить одну из, <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
 При выполнении приложения в режиме пользовательского интерфейса отображается окно сообщения, в котором показан стек вызовов с номерами файла и строки. Окно сообщения содержит три кнопки: **прервать**, **повторите**, и **Ignore**. Щелкнув **прервать** кнопка завершает работу приложения. Щелкнув **повторите** отправляется кода в отладчике, если приложение выполняется в отладчике, или предлагает открыть отладчик, если это не так. Щелкнув **Ignore** продолжает выполняться с использованием следующей инструкции в коде.  
  
> [!NOTE]
>  [!INCLUDE[win8_appname_long](~/includes/win8-appname-long-md.md)] приложения не поддерживают модальные диалоговые окна, поэтому они работают одинаково в режиме пользовательского интерфейса и режиме без пользовательского интерфейса. Сообщение записывается в прослушиватели трассировки в режиме отладки или сообщение не записывается в режиме выпуска.  
  
> [!NOTE]
>  Отображение окна сообщения зависит от наличия <xref:System.Diagnostics.DefaultTraceListener>. Если <xref:System.Diagnostics.DefaultTraceListener> не находится в <xref:System.Diagnostics.Trace.Listeners%2A> коллекции окно сообщения не отображается. <xref:System.Diagnostics.DefaultTraceListener> Можно удалить с [ &lt;снимите&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;удалить&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), или путем вызова <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> метод <xref:System.Diagnostics.Trace.Listeners%2A> свойство (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Можно изменить поведение <xref:System.Diagnostics.DefaultTraceListener> в файле конфигурации, который соответствует имени приложения. В этом файле можно включить и отключить в окне сообщения assert или задать <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> свойства. Файл конфигурации должен иметь следующий формат:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 В следующем примере создается индекс для массива, выполняет какие-либо действия, чтобы задать значение индекса и затем вызывает метод <xref:System.Diagnostics.Debug.Assert%2A> , чтобы подтвердить правильность значения индекса. Если оно является недопустимым, <xref:System.Diagnostics.Debug.Assert%2A> выводит стек вызовов.  
  
 [!code-cpp[Classic Debug.Assert Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, указанное сообщение не отправляется и окно сообщения не отображается.</param>
        <param name="message">Сообщение для отправки в коллекцию <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <summary>Проверяет условие. Если условие имеет значение <see langword="false" />, выдается указанное сообщение и отображается окно сообщения со стеком вызовов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> метод работает только в отладочных построениях. Используйте <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> создает метод, если вы хотите сделать утверждения в выпуске. Дополнительные сведения см. в разделе [утверждения в управляемом коде](/visualstudio/debugger/assertions-in-managed-code).  
  
 Как правило <xref:System.Diagnostics.Debug.Assert%2A> метод используется для выявления ошибок логики во время разработки программ. <xref:System.Diagnostics.Debug.Assert%2A> вычисляет условие. Если результатом является `false`, он отправляет указанное сообщение диагностики для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции. Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener> , или удалить одну из, <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
 При выполнении приложения в режиме пользовательского интерфейса отображается окно сообщения, в котором показан стек вызовов с номерами файла и строки. Окно сообщения содержит три кнопки: **прервать**, **повторите**, и **Ignore**. Щелкнув **прервать** кнопка завершает работу приложения. Щелкнув **повторите** отправляется кода в отладчике, если приложение выполняется в отладчике, или предлагает открыть отладчик, если это не так. Щелкнув **Ignore** продолжает выполняться с использованием следующей инструкции в коде.  
  
> [!NOTE]
>  Отображение окна сообщения зависит от наличия <xref:System.Diagnostics.DefaultTraceListener>. Если <xref:System.Diagnostics.DefaultTraceListener> не находится в <xref:System.Diagnostics.Trace.Listeners%2A> коллекции окно сообщения не отображается. <xref:System.Diagnostics.DefaultTraceListener> Можно удалить с [ &lt;снимите&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;удалить&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), или путем вызова <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> метод <xref:System.Diagnostics.Trace.Listeners%2A> свойство (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Можно изменить поведение <xref:System.Diagnostics.DefaultTraceListener> в файле конфигурации, который соответствует имени приложения. В этом файле можно включить и отключить в окне сообщения assert или задать <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> свойства. Файл конфигурации должен иметь следующий формат:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 В следующем примере проверяется ли `type` параметр является допустимым. Если `type` — `null`, <xref:System.Diagnostics.Trace.Assert%2A> выводит сообщение.  
  
 [!code-cpp[Classic Debug.Assert1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, указанное сообщение не отправляется и окно сообщения не отображается.</param>
        <param name="message">Сообщение для отправки в коллекцию <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <param name="detailMessage">Подробное сообщение для отправки в коллекцию <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <summary>Проверяет условие. Если условие имеет значение <see langword="false" />, выдается два указанных сообщения и отображается окно сообщения со стеком вызовов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> метод работает только в отладочных построениях. Используйте <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> создает метод, если вы хотите сделать утверждения в выпуске. Дополнительные сведения см. в разделе [утверждения в управляемом коде](/visualstudio/debugger/assertions-in-managed-code).  
  
 Как правило <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%29> метод используется для выявления ошибок логики во время разработки программ. <xref:System.Diagnostics.Debug.Assert%2A> вычисляет условие. Если результатом является `false`, он отправляет указанное сообщение диагностики и подробное сообщение <xref:System.Diagnostics.Debug.Listeners%2A> коллекции. Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener> , или удалить одну из, <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
 При выполнении приложения в режиме пользовательского интерфейса отображается окно сообщения, в котором показан стек вызовов с номерами файла и строки. Окно сообщения содержит три кнопки: **прервать**, **повторите**, и **Ignore**. Щелкнув **прервать** кнопка завершает работу приложения. Щелкнув **повторите** отправляется кода в отладчике, если приложение выполняется в отладчике, или предлагает открыть отладчик, если это не так. Щелкнув **Ignore** продолжает выполняться с использованием следующей инструкции в коде.  
  
> [!NOTE]
>  Отображение окна сообщения зависит от наличия <xref:System.Diagnostics.DefaultTraceListener>. Если <xref:System.Diagnostics.DefaultTraceListener> не находится в <xref:System.Diagnostics.Trace.Listeners%2A> коллекции окно сообщения не отображается. <xref:System.Diagnostics.DefaultTraceListener> Можно удалить с [ &lt;снимите&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;удалить&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), или путем вызова <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> метод <xref:System.Diagnostics.Trace.Listeners%2A> свойство (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Можно изменить поведение <xref:System.Diagnostics.DefaultTraceListener> в файле конфигурации, который соответствует имени приложения. В этом файле можно включить и отключить в окне сообщения assert или задать <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> свойства. Файл конфигурации должен иметь следующий формат:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
   
  
## Examples  
 В следующем примере проверяется ли `type` параметр является допустимым. Если `type` — `null`, <xref:System.Diagnostics.Trace.Assert%2A> выводит два сообщения.  
  
 [!code-cpp[Classic Debug.Assert2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Assert2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Assert2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Assert2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public static void Assert (bool condition, string message, string detailMessageFormat, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Assert(bool condition, string message, string detailMessageFormat, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Assert(System.Boolean,System.String,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Assert (condition As Boolean, message As String, detailMessageFormat As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Assert(bool condition, System::String ^ message, System::String ^ detailMessageFormat, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessageFormat" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, указанное сообщение не отправляется и окно сообщения не отображается.</param>
        <param name="message">Сообщение для отправки в коллекцию <see cref="P:System.Diagnostics.Trace.Listeners" />.</param>
        <param name="detailMessageFormat">Строка составного формата для отправки в коллекцию <see cref="P:System.Diagnostics.Trace.Listeners" />. Это сообщение содержит текст, перемежаемый нулем или несколькими элементами форматирования, которые соответствуют объектам массива <c>args</c>.</param>
        <param name="args">Массив объектов, содержащий нуль или более форматируемых объектов.</param>
        <summary>Проверяет условие; если условие имеет значение <see langword="false" />, выводит два сообщения (простое и отформатированное) и отображает окно сообщения со стеком вызовов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод использует платформы .NET Framework, чтобы преобразовать значение объекта в его текстовое представление и встроить это представление в строку. Результирующая строка отправляется <xref:System.Diagnostics.Trace.Listeners%2A> коллекции.  
  
 По умолчанию <xref:System.Diagnostics.Debug.Assert%2A?displayProperty=nameWithType> метод работает только в отладочных построениях. Используйте <xref:System.Diagnostics.Trace.Assert%2A?displayProperty=nameWithType> создает метод, если вы хотите сделать утверждения в выпуске. Дополнительные сведения см. в разделе [утверждения в управляемом коде](/visualstudio/debugger/assertions-in-managed-code).  
  
 Как правило <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> метод используется для выявления ошибок логики во время разработки программ. <xref:System.Diagnostics.Debug.Assert%2A> вычисляет условие. Если результатом является `false`, <xref:System.String.Format%28System.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> вызывается метод и `detailMessageFormat` строки и `args` массива, передаются в качестве параметров. <xref:System.Diagnostics.Debug.Assert%28System.Boolean%2CSystem.String%2CSystem.String%2CSystem.Object%5B%5D%29> Отправляет указанный текст сообщения и сообщения, форматированный текст <xref:System.Diagnostics.Debug.Listeners%2A> коллекции. Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener> , или удалить одну из, <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
 При выполнении приложения в режиме пользовательского интерфейса отображается окно сообщения, в котором показан стек вызовов с номерами файла и строки. Окно сообщения содержит три кнопки: **прервать**, **повторите**, и **Ignore**. Щелкнув **прервать** кнопка завершает работу приложения. Щелкнув **повторите** отправляется кода в отладчике, если приложение выполняется в отладчике, или предлагает открыть отладчик, если это не так. Щелкнув **Ignore** продолжает выполняться с использованием следующей инструкции в коде.  
  
> [!NOTE]
>  Отображение окна сообщения зависит от наличия <xref:System.Diagnostics.DefaultTraceListener>. Если <xref:System.Diagnostics.DefaultTraceListener> не находится в <xref:System.Diagnostics.Trace.Listeners%2A> коллекции окно сообщения не отображается. <xref:System.Diagnostics.DefaultTraceListener> Можно удалить с [ &lt;снимите&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;удалить&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), или путем вызова <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> метод <xref:System.Diagnostics.Trace.Listeners%2A> свойство (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Можно изменить поведение <xref:System.Diagnostics.DefaultTraceListener> в файле конфигурации, который соответствует имени приложения. В этом файле можно включить и отключить в окне сообщения assert или задать <xref:System.Diagnostics.DefaultTraceListener.LogFileName%2A?displayProperty=nameWithType> свойства. Файл конфигурации должен иметь следующий формат:  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <assert assertuienabled="true" logfilename="c:\\myFile.log" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoFlush">
      <MemberSignature Language="C#" Value="public static bool AutoFlush { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AutoFlush" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.AutoFlush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property AutoFlush As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AutoFlush { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, определяющее необходимость вызова метода <see cref="M:System.Diagnostics.Debug.Flush" /> для свойства <see cref="P:System.Diagnostics.Debug.Listeners" /> после каждой записи.</summary>
        <value>
          <see langword="true" />, если <see cref="M:System.Diagnostics.Debug.Flush" /> вызывается в <see cref="P:System.Diagnostics.Debug.Listeners" /> после каждой операции записи; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию: `false`.  
  
 Сброс потока его основной кодировщик не очищается, пока не будет явно вызван метод <xref:System.Diagnostics.Debug.Flush%2A> или <xref:System.Diagnostics.Debug.Close%2A>. Установка <xref:System.Diagnostics.Debug.AutoFlush%2A> для `true` означает, что данные будут сброшены из буфера в поток, но состояние кодировщика при этом не сбрасывается. Это позволяет кодировщику сохранить свое состояние (частичные символы), чтобы правильно выполнить кодировку следующего блока знаков. Этот сценарий влияет на кодировки UTF8 и UTF7, в которых определенные символы кодируются только после кодировщик получает соседние знаки.  
  
 Чтобы задать <xref:System.Diagnostics.Debug.AutoFlush%2A> и <xref:System.Diagnostics.Debug.IndentSize%2A> для <xref:System.Diagnostics.Debug>, можно также изменить файл конфигурации, соответствующий имени приложения. Следует быть формат файла конфигурации, как показано в следующем примере.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для работы с неуправляемым кодом. Требовать значение <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; соответствующее перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public static void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Close" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Очищает выходной буфер, а затем вызывает метод <see langword="Close" /> на каждый <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод при выводе в файл, например <xref:System.Diagnostics.TextWriterTraceListener>.  
  
 Сброс потока его основной кодировщик не очищается, пока не будет явно вызван метод <xref:System.Diagnostics.Debug.Flush%2A> или <xref:System.Diagnostics.Debug.Close%2A>. Установка <xref:System.Diagnostics.Debug.AutoFlush%2A> для `true` означает, что данные будут сброшены из буфера в поток, но состояние кодировщика при этом не сбрасывается. Это позволяет кодировщику сохранить свое состояние (частичные символы), чтобы правильно выполнить кодировку следующего блока знаков. Этот сценарий влияет на кодировки UTF8 и UTF7, в которых определенные символы кодируются только после кодировщик получает соседние знаки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TextWriterTraceListener> с именем `myTextListener`. `myTextListener` использует <xref:System.IO.StreamWriter> вызывается `myOutputWriter` для записи в файл с именем `TestFile.txt`. В примере создается файл, поток и средство записи текста, одна строка текста записывается в файл и затем сбрасывает и закрывает выходные данные.  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для работы с неуправляемым кодом. Требовать значение <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; соответствующее перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Fail">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Порождает сообщение об ошибке.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Выдаваемое сообщение.</param>
        <summary>Выдает указанное сообщение об ошибке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это поведение по умолчанию <xref:System.Diagnostics.DefaultTraceListener> генерирует сообщение в окно сообщения, если приложение выполняется в режиме пользовательского интерфейса и <xref:System.Diagnostics.TraceListener> экземпляров в <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
> [!NOTE]
>  Отображение окна сообщения зависит от наличия <xref:System.Diagnostics.DefaultTraceListener>. Если <xref:System.Diagnostics.DefaultTraceListener> не находится в <xref:System.Diagnostics.Trace.Listeners%2A> коллекции окно сообщения не отображается. <xref:System.Diagnostics.DefaultTraceListener> Можно удалить с [ &lt;снимите&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;удалить&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), или путем вызова <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> метод <xref:System.Diagnostics.Trace.Listeners%2A> свойство (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener> , или удалить одну из, <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Diagnostics.Debug.Fail%2A> метод печать сообщения во время обработки исключений.  
  
 [!code-cpp[Classic Debug.Fail Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#1)]  
  
 Можно также использовать <xref:System.Diagnostics.Debug.Fail%2A> метода в операторе switch.  
  
 [!code-cpp[Classic Debug.Fail Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Fail">
      <MemberSignature Language="C#" Value="public static void Fail (string message, string detailMessage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Fail(string message, string detailMessage) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Fail(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Fail (message As String, detailMessage As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Fail(System::String ^ message, System::String ^ detailMessage);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="detailMessage" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Выдаваемое сообщение.</param>
        <param name="detailMessage">Выдаваемое подробное сообщение.</param>
        <summary>Выдает простое и подробное сообщение об ошибке.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это поведение по умолчанию <xref:System.Diagnostics.DefaultTraceListener> генерирует сообщение в окно сообщения, если приложение выполняется в режиме пользовательского интерфейса и <xref:System.Diagnostics.TraceListener> экземпляров в <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
> [!NOTE]
>  Отображение окна сообщения зависит от наличия <xref:System.Diagnostics.DefaultTraceListener>. Если <xref:System.Diagnostics.DefaultTraceListener> не находится в <xref:System.Diagnostics.Trace.Listeners%2A> коллекции окно сообщения не отображается. <xref:System.Diagnostics.DefaultTraceListener> Можно удалить с [ &lt;снимите&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/clear-element-for-listeners-for-trace.md), [ &lt;удалить&gt;](~/docs/framework/configure-apps/file-schema/trace-debug/remove-element-for-listeners-for-trace.md), или путем вызова <xref:System.Diagnostics.TraceListenerCollection.Clear%2A> метод <xref:System.Diagnostics.Trace.Listeners%2A> свойство (`System.Diagnostics.Trace.Listeners.Clear()`).  
  
 Это поведение можно настроить, добавив <xref:System.Diagnostics.TraceListener> , или удалить одну из, <xref:System.Diagnostics.Debug.Listeners%2A> коллекции.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Diagnostics.Debug.Fail%2A> метод печать сообщения во время обработки исключений.  
  
 [!code-cpp[Classic Debug.Fail1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Fail1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Fail1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#1)]  
  
 Можно также использовать <xref:System.Diagnostics.Debug.Fail%2A> метода в операторе switch.  
  
 [!code-cpp[Classic Debug.Fail1 Example#2](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CPP/source.cpp#2)]
 [!code-csharp[Classic Debug.Fail1 Example#2](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/CS/source.cs#2)]
 [!code-vb[Classic Debug.Fail1 Example#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Fail1 Example/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Очищает выходной буфер и вызывает запись данных буфера в коллекцию <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сброс потока его основной кодировщик не очищается, пока не будет явно вызван метод <xref:System.Diagnostics.Debug.Flush%2A> или <xref:System.Diagnostics.Debug.Close%2A>. Установка <xref:System.Diagnostics.Debug.AutoFlush%2A> для `true` означает, что данные будут сброшены из буфера в поток, но состояние кодировщика при этом не сбрасывается. Это позволяет кодировщику сохранить свое состояние (частичные символы), чтобы правильно выполнить кодировку следующего блока знаков. Этот сценарий влияет на кодировки UTF8 и UTF7, в которых определенные символы кодируются только после кодировщик получает соседние знаки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TextWriterTraceListener> с именем `myTextListener`. `myTextListener` использует <xref:System.IO.FileStream> вызывается `myFileStream` для записи в файл с именем `TestFile.txt`. В примере создается поток, открывает файл, если он существует или создает новый, одна строка текста записывается в файл и затем сохраняет и закрывает выходные данные.  
  
 [!code-cpp[Classic Debug.Close Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Close Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Close Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Close Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Close Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public static void Indent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Indent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Indent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Indent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Уменьшает текущее значение <see cref="P:System.Diagnostics.Debug.IndentLevel" /> на единицу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере задается уровень отступа и выдаются сообщения отладки.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 В этом примере выводятся следующие данные:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Unindent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <Member MemberName="IndentLevel">
      <MemberSignature Language="C#" Value="public static int IndentLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentLevel" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentLevel" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentLevel As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentLevel { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает уровень отступа.</summary>
        <value>Уровень отступа. Значение по умолчанию — 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.Debug.IndentLevel%2A> Свойство представляет количество размер отступа <xref:System.Diagnostics.Debug.IndentSize%2A> применяется.  
  
   
  
## Examples  
 В следующем примере задается уровень отступа и выдаются сообщения отладки.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 В этом примере выводятся следующие данные:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="IndentSize">
      <MemberSignature Language="C#" Value="public static int IndentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 IndentSize" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.IndentSize" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property IndentSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int IndentSize { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает число пробелов в отступе.</summary>
        <value>Число пробелов в отступе. Значение по умолчанию — четыре.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Diagnostics.TextWriterTraceListener> интерпретирует это число как пробелы. <xref:System.Diagnostics.EventLogTraceListener> Игнорирует это значение.  
  
 Чтобы задать <xref:System.Diagnostics.Debug.AutoFlush%2A> и <xref:System.Diagnostics.Debug.IndentSize%2A> для <xref:System.Diagnostics.Debug>, можно также изменить файл конфигурации, соответствующий имени приложения. Следует быть формат файла конфигурации, как показано в следующем примере.  
  
```xml  
<configuration>  
  <system.diagnostics>  
    <trace autoflush="true" indentsize="7" />  
  </system.diagnostics>  
</configuration>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Listeners">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.TraceListenerCollection Listeners { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Diagnostics.TraceListenerCollection Listeners" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Debug.Listeners" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Listeners As TraceListenerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Diagnostics::TraceListenerCollection ^ Listeners { System::Diagnostics::TraceListenerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.TraceListenerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию слушателей, отслеживающих данные отладки.</summary>
        <value>Класс <see cref="T:System.Diagnostics.TraceListenerCollection" />, представляющий коллекцию типа <see cref="T:System.Diagnostics.TraceListener" />, которая позволяет отслеживать данные отладки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Прослушиватели осуществляют Форматированные выходные данные отладки. По умолчанию коллекция содержит экземпляр <xref:System.Diagnostics.DefaultTraceListener> класса. Чтобы удалить прослушивателя по умолчанию, вызовите <xref:System.Diagnostics.TraceListenerCollection.Remove%2A> метода и передать ему экземпляр <xref:System.Diagnostics.DefaultTraceListener>. Перенаправлять выходные данные в окне консоли, нужно добавить экземпляр <xref:System.Diagnostics.ConsoleTraceListener>. Перенаправлять выходные данные в файл или поток, нужно добавить экземпляр <xref:System.Diagnostics.TextWriterTraceListener>.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Debug.Listeners%2A> Коллекции является общим для обоих <xref:System.Diagnostics.Debug> и <xref:System.Diagnostics.Trace> классы; Добавление прослушивателя трассировки для каждого класса добавляет прослушиватель оба.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TextWriterTraceListener> , выводящий данные в окно консоли. Затем код добавляет новый прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A>.  
  
 [!code-cpp[Classic Debug.Listeners Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Listeners Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Listeners Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Listeners Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для работы с неуправляемым кодом. Требовать значение <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />; соответствующее перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</permission>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Print">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сообщение, заканчивающееся ограничителем строки, в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Сообщение для записи.</param>
        <summary>Записывает сообщение, заканчивающееся ограничителем строки, в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию признаком конца строки является символ возврата каретки и перевода строки. По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Print">
      <MemberSignature Language="C#" Value="public static void Print (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Print(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Print(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Print (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Print(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Строка составного формата, содержащая текст, который перемежается несколькими элементами форматирования (или ни одним из них), соответствующими объектам в массиве <c>args</c>.</param>
        <param name="args">Массив объектов, содержащий один или несколько (либо ни одного) объектов, которые необходимо отформатировать.</param>
        <summary>Записывает форматированную строку, заканчивающееся ограничителем строки, в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод использует платформы .NET Framework, чтобы преобразовать значение объекта в его текстовое представление и встроить это представление в строку. По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="format" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.FormatException">
          <paramref name="format" /> недопустим.  
  
 - или -  
  
 Число, указывающее аргумент для форматирования, меньше нуля или больше или равно числу указанных объектов для форматирования.</exception>
      </Docs>
    </Member>
    <Member MemberName="Unindent">
      <MemberSignature Language="C#" Value="public static void Unindent ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Unindent() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Unindent" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Unindent ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Unindent();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Уменьшает текущее значение <see cref="P:System.Diagnostics.Debug.IndentLevel" /> на единицу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере задается уровень отступа и выдаются сообщения отладки.  
  
 [!code-cpp[Classic Debug.IndentLevel Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.IndentLevel Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.IndentLevel Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.IndentLevel Example/VB/source.vb#1)]  
  
 В этом примере выводятся следующие данные:  
  
```  
  
List of errors:  
     Error 1: File not found  
     Error 2: Directory not found  
End of list of errors  
  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Debug.Indent" />
        <altmember cref="P:System.Diagnostics.Debug.IndentLevel" />
        <altmember cref="P:System.Diagnostics.Debug.IndentSize" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Write">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сведения об отладке в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Записывает значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Записываемое сообщение.</param>
        <summary>Записывает сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Используйте `category` вывод параметров для группы сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public static void Write (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.Write(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Write(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Записываемое сообщение.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Используйте `category` вывод параметров для группы сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.Write Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.Write Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.Write Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.Write Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.Write Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сведения об отладке в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если условие имеет значение <see langword="true" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, значение записывается в прослушиватели трассировки в коллекции.</param>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Записывает значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если условие — <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, в примере выводится имя параметра значения <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится сообщение в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, сообщение записывается в прослушиватели трассировки в коллекции.</param>
        <param name="message">Записываемое сообщение.</param>
        <summary>Записывает сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если задано условие <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Дополнительные сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, имя категории и значение записываются в прослушиватели трассировки в коллекции.</param>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если задано условие <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Используется для группирования выходных сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Verbose`, в примере выводится имя `myObject` и `category` для <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Error` или выше, второе сообщение об ошибке выводится в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteIf">
      <MemberSignature Language="C#" Value="public static void WriteIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, имя категории и сообщение записываются в прослушиватели трассировки в коллекции.</param>
        <param name="message">Записываемое сообщение.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если условие равно <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Используется для группирования выходных сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.Write%2A?displayProperty=nameWithType> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Verbose`, первое сообщение об ошибке выводится в примере <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Error` или выше, второе сообщение об ошибке выводится в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.Write(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.Write("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLine">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сведения об отладке в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Записывает значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится имя объекта в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Записываемое сообщение.</param>
        <summary>Записывает сообщение, заканчивающееся ограничителем строки, в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLine Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Используется для группирования выходных сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Второе сообщение следует признак конца строки.  
  
 [!code-cpp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string format, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string format, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (format As String, ParamArray args As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ format, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Строка составного формата, содержащая текст, который перемежается несколькими элементами форматирования (или ни одним из них), соответствующими объектам в массиве <c>args</c>.</param>
        <param name="args">Массив объектов, содержащий нуль или более форматируемых объектов.</param>
        <summary>Записывает форматированное сообщение, заканчивающееся ограничителем строки, в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод использует платформы .NET Framework, чтобы преобразовать значение объекта в его текстовое представление и встроить это представление в строку.  
  
 Ключевое слово в синтаксисе для этого метода означает, что массив объектов может быть одно значение. Исключением является <xref:System.String> объекта. Явные перегрузки имеют более высокий приоритет, поэтому `arg` значения одной строки по умолчанию будет <xref:System.Diagnostics.Debug.WriteLine%28System.String%2CSystem.String%29?displayProperty=nameWithType> перегрузки.  
  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> метод прослушивателя трассировки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteLine">
      <MemberSignature Language="C#" Value="public static void WriteLine (string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLine(string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLine(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLine (message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLine(System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Записываемое сообщение.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Используется для группирования выходных сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке и `category` в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLine2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLine2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLine2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteLineIf">
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Записывает сведения об отладке в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если условие имеет значение <see langword="true" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, значение записывается в прослушиватели трассировки в коллекции.</param>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <summary>Записывает значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если условие — <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится имя объекта в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, сообщение записывается в прослушиватели трассировки в коллекции.</param>
        <param name="message">Записываемое сообщение.</param>
        <summary>Записывает сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если задано условие <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Дополнительные сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, object value, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, object value, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, value As Object, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::Object ^ value, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">Условное выражение для вычисления. Если условие имеет значение <see langword="true" />, имя категории и значение записываются в прослушиватели трассировки в коллекции.</param>
        <param name="value">Объект, имя которого отправляется в <see cref="P:System.Diagnostics.Debug.Listeners" />.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и значение метода <see cref="M:System.Object.ToString" /> объекта в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если задано условие <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Используется для группирования выходных сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
    <Member MemberName="WriteLineIf">
      <MemberSignature Language="C#" Value="public static void WriteLineIf (bool condition, string message, string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteLineIf(bool condition, string message, string category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteLineIf (condition As Boolean, message As String, category As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteLineIf(bool condition, System::String ^ message, System::String ^ category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Diagnostics.Debug</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Conditional("DEBUG")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="condition" Type="System.Boolean" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="condition">
          Значение <see langword="true" />, если требуется запись сообщения. В противном случае — значение <see langword="false" />.</param>
        <param name="message">Записываемое сообщение.</param>
        <param name="category">Имя категории, используемое для систематизации выходных данных.</param>
        <summary>Записывает имя категории и сообщение в прослушиватели трассировки в коллекции <see cref="P:System.Diagnostics.Debug.Listeners" />, если условие равно <see langword="true" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию запись выходных данных в экземпляр <xref:System.Diagnostics.DefaultTraceListener>.  
  
 `category` Используется для группирования выходных сообщений.  
  
 Этот метод вызывает метод <xref:System.Diagnostics.TraceListener.WriteLine%2A?displayProperty=nameWithType> метод прослушивателя трассировки.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Diagnostics.TraceSwitch> с именем `generalSwitch`. Этот переключатель установлен за пределами в образце кода.  
  
 Если переключатель установлен в положение <xref:System.Diagnostics.TraceLevel> `Error` или более поздней версии, выдается первое сообщение об ошибке <xref:System.Diagnostics.Debug.Listeners%2A>. Сведения о добавлении прослушиватель для <xref:System.Diagnostics.Debug.Listeners%2A> коллекции, в разделе <xref:System.Diagnostics.TraceListenerCollection> класса.  
  
 Затем, если <xref:System.Diagnostics.TraceLevel> равно `Verbose`, выводится второе сообщение об ошибке и `category` в той же строке, что и первое сообщение. Признак конца строки следует второе сообщение.  
  
 [!code-cpp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/CS/source.cs#1)]
 [!code-vb[Classic Debug.WriteLineIf2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic Debug.WriteLineIf2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Можно свести к минимуму снижение производительности приложения с помощью <see langword="If...Then" /> операторов, а не с помощью <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" /> инструкции. В следующих двух примерах кода отправить то же сообщение отладки. Однако первый пример выполняется значительно быстрее при трассировке, поскольку если <c>mySwitch.TraceError</c> равен <see langword="false" />, не следует вызывать <see cref="M:System.Diagnostics.Debug.WriteLine(System.String)" />. Во втором примере всегда вызывает <see cref="M:System.Diagnostics.Debug.WriteLineIf(System.Boolean,System.String)" />, даже если <c>mySwitch.TraceError</c> — <see langword="false" /> и выходные данные трассировки не выводятся. Это может привести к ненужному выполнению произвольного сложного кода.  
  
 Первый пример.  
  
```csharp  
if(mySwitch.TraceError)   
    Debug.WriteLine("aNumber = " + aNumber + " out of range");  
```  
  
 Во втором примере:  
  
```csharp  
Debug.WriteLineIf(mySwitch.TraceError, "aNumber = " + aNumber + " out of range");  
```</para>
        </block>
        <altmember cref="T:System.Diagnostics.Debug" />
        <altmember cref="T:System.Diagnostics.Trace" />
        <altmember cref="T:System.Diagnostics.BooleanSwitch" />
        <altmember cref="T:System.Diagnostics.TraceSwitch" />
        <altmember cref="T:System.Diagnostics.TraceListener" />
        <altmember cref="T:System.Diagnostics.DefaultTraceListener" />
        <altmember cref="T:System.Diagnostics.ConsoleTraceListener" />
        <altmember cref="T:System.Diagnostics.ConditionalAttribute" />
      </Docs>
    </Member>
  </Members>
</Type>