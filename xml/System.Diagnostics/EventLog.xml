<Type Name="EventLog" FullName="System.Diagnostics.EventLog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2145a11bbb9faa94763035b22147eede6d4adee" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30400608" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class EventLog : System.ComponentModel.Component, System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit EventLog extends System.ComponentModel.Component implements class System.ComponentModel.ISupportInitialize" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.EventLog" />
  <TypeSignature Language="VB.NET" Value="Public Class EventLog&#xA;Inherits Component&#xA;Implements ISupportInitialize" />
  <TypeSignature Language="C++ CLI" Value="public ref class EventLog : System::ComponentModel::Component, System::ComponentModel::ISupportInitialize" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.ISupportInitialize</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("EntryWritten")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.InstallerType(typeof(System.Diagnostics.EventLogInstaller))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Diagnostics.MonitoringDescription("Represents an event log")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Обеспечивает взаимодействие с журналами событий Windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLog> позволяет получить доступ к и настройку журналы событий Windows, которые записываются сведения о важных событиях оборудования или программного обеспечения. С помощью <xref:System.Diagnostics.EventLog>, вы можно читать существующие, добавлять записи в журнал, создание или удаление источников событий, удалять журналы и отвечать на записи журнала. Можно также создавать новые журналы при создании источника события.  
  
> [!IMPORTANT]
>  Этот тип реализует <xref:System.IDisposable> интерфейса. После завершения с помощью типа следует освободить его прямо или косвенно. Для удаления типа непосредственно вызвать его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока. Чтобы удалить ее косвенно, использовать языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует интерфейс IDisposable» в <xref:System.IDisposable> разделе интерфейса.  
  
 Помимо предоставления доступа к отдельным журналам событий и записи их <xref:System.Diagnostics.EventLog> позволяет получить доступ к коллекции всех журналов событий. Можно использовать `static` члены <xref:System.Diagnostics.EventLog> удалять журналы, получить список журналов, создание или удаление источника или определить компьютер конкретного источника.  
  
 Три журнала событий по умолчанию: приложения, системы и безопасности. Журнал безопасности доступен только для чтения. Другие приложения и службы, устанавливаемые, например Active Directory, могут иметь дополнительные журналы событий.  
  
 Существуют вопросы безопасности при использовании <xref:System.Diagnostics.EventLog> класса. <xref:System.Diagnostics.EventLog> требуется <xref:System.Diagnostics.EventLogPermission> разрешения для определенных действий в .NET Framework 2.0 и более поздних версиях или полным доверием в .NET Framework 1.0 и 1.1. Рекомендуется, чтобы <xref:System.Diagnostics.EventLogPermission> не предоставляется коду с частичным доверием.  Никогда не следует передавать любой объект журнала событий, включая <xref:System.Diagnostics.EventLogEntryCollection> и <xref:System.Diagnostics.EventLogEntry> объекты на менее доверенного кода. Например, создание <xref:System.Diagnostics.EventLog> объекта, вносить записи и затем передачу <xref:System.Diagnostics.EventLog> частично доверенный код, который может создавать угрозу безопасности, поскольку возможность чтения и записи в журнал событий позволяет коду выполнять действия, такие как выдачи сообщения журнала событий имя другого приложения.  
  
 Начиная с Windows Vista управления учетных записей (UAC) определяет учетные данные пользователя. Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Чтобы запустить код, который обращается к журнал безопасности, необходимо сначала повысить свои учетные данные от обычного пользователя до администратора. Это можно сделать при запуске приложения, открыв контекстное меню для приложения (Если вы используете мышь, щелкните правой кнопкой мыши значок приложения) и означает, что вы хотите запустить от имени администратора.  
  
 Можно использовать <xref:System.Diagnostics.EventLog> для создания пользовательского журнала событий, которые можно просмотреть через сервер в средстве просмотра событий. Используйте <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> метод для отображения локализованное имя для журналов событий в средстве просмотра событий. Используйте <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> метод, чтобы настроить поведение журнала событий при достижении максимального размера.  
  
 Для чтения из журнала событий, укажите имя журнала (<xref:System.Diagnostics.EventLog.Log%2A> свойства) и имя сервера (<xref:System.Diagnostics.EventLog.MachineName%2A> свойство для журнала событий. Если не указать имя компьютера сервера, локального компьютера, «.», подразумевается. Это не обязательно указывать источник события (<xref:System.Diagnostics.EventLog.Source%2A> свойства), так как источник является обязательным только для записи в журналы. <xref:System.Diagnostics.EventLog.Entries%2A> Автоматически заполняется списком записей журнала событий.  
  
 Для записи в журнал событий, указать или создать источник событий (<xref:System.Diagnostics.EventLog.Source%2A> свойство). Необходимо иметь учетные данные администратора на компьютере, чтобы создать новый источник событий. Источник события приложение регистрируется в журнале событий как источник записей. Источник события можно использовать для записи только один журнал одновременно. <xref:System.Diagnostics.EventLog.Source%2A> Свойство может быть любой строкой, но имя должно отличаться от других источников на компьютере. Источник события обычно является имя приложения или другой идентификатор. При попытке создания дубликата <xref:System.Diagnostics.EventLog.Source%2A> значение приводит к возникновению исключения. Однако один журнал событий может быть связан с несколькими источниками.  
  
 Если источник события в журнале событий, связанная с <xref:System.Diagnostics.EventLog> экземпляр не существует, создается новый источник событий. Для создания источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь учетные данные администратора.  
  
 Это требование не так, как необходимо произвести поиск всех журналов событий, включая журналы безопасности, чтобы определить, является ли источник событий уникальный. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException> возникает исключение.  
  
> [!IMPORTANT]
>  Создание или удаление источника событий требует синхронизации основного кода с помощью именованного мьютекса. Если приложение с обширными правами доступа блокирует именованный мьютекс, при попытке создать или удалить источник событий возникает приложение перестает отвечать на запросы до снятия блокировки. Чтобы предотвратить возникновение этой проблемы, никогда не предоставлять <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> разрешение в ненадежный код. Кроме того <xref:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode> разрешение потенциально позволяет пропускать другие разрешения и должно предоставляться только высоконадежным коду.  
  
 Приложений и служб следует записывать в журнал приложений или пользовательского журнала. Драйверы устройств необходимо создавать в системном журнале. Если не задано явно <xref:System.Diagnostics.EventLog.Log%2A> свойства, журнал событий по умолчанию является журнал приложений.  
  
> [!NOTE]
>  Нет элементов для защиты приложения от записи, как любой зарегистрированный источник.  Если приложению предоставляется <xref:System.Diagnostics.EventLogPermissionAccess.Write> разрешение, он может записывать события для любой допустимый источник зарегистрирован на компьютере.  
  
 Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> и <xref:System.Diagnostics.EventLog.WriteEntry%2A> методы для записи событий в журнал событий. Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновляется список источников событий и попытке записать событие с новым источником, операция записи окончится неудачей. Новый источник можно настроить с помощью <xref:System.Diagnostics.EventLogInstaller> объекта или <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь учетные данные администратора на компьютере, чтобы создать новый источник событий.  
  
 Каждый источник можно написать только один журнал во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов. Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник обновленной конфигурации вместо удаления существующего источника.  
  
 Можно зарегистрировать источник событий с локализованными ресурсами для событий категории и сообщение строк. Для внесения записей в журнале событий в приложении с помощью идентификаторов ресурсов вместо указания фактических значений строк. Ссылаться на <xref:System.Diagnostics.EventLogInstaller> и <xref:System.Diagnostics.EventSourceCreationData> Дополнительные сведения о настройке источника с файлами ресурсов.  
  
 Если приложение записывает значения строк напрямую в журнал событий, у вас Установка свойств для источника ресурса. Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
 При записи событий, необходимо указать по крайней мере строку сообщения или идентификатор ресурса для строки сообщения. Остальные свойства события являются необязательными. Необязательные параметры события примеры ниже.  
  
-   Можно задать <xref:System.Diagnostics.EventLogEntryType> для определения значка, который отображает окно просмотра событий для записи.  
  
-   Если приложение использует категории для фильтрации событий можно указать идентификатор категории события.  
  
-   Двоичные данные можно присоединить к запись событий, если вы хотите связать Дополнительные сведения с данным событием.  
  
> [!IMPORTANT]
>  Ведение журнала событий требует места на диске, процессора и других системных ресурсов. Очень важно в журнал только необходимые данные. Рекомендуется помещать вызовы журнала событий в путь ошибок вместо пути основной код, поэтому они не повредит производительности.  
  
 Список начальных значений свойств для экземпляра <xref:System.Diagnostics.EventLog>, в разделе <xref:System.Diagnostics.EventLog.%23ctor%2A> конструктор.  
  
   
  
## Examples  
 В следующем примере создается источник событий `MySource` если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
> [!NOTE]
>  Начиная с Windows Vista, необходимо запустить это приложение от имени администратора.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Diagnostics.EventLogInstaller" />
    <altmember cref="T:System.Diagnostics.EventLogEntry" />
    <altmember cref="T:System.Diagnostics.EntryWrittenEventArgs" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventLog" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventLog" />. Не связывает экземпляр с каким-либо журналом.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>, укажите <xref:System.Diagnostics.EventLog.Source%2A> свойство <xref:System.Diagnostics.EventLog> экземпляра. Если вы только читаете <xref:System.Diagnostics.EventLog.Entries%2A> из журнала, можно указывать только <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A> свойства.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (".») предполагается.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.  
  
|Свойство.|Начальное значение|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Пустая строка ("").|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Пустая строка ("").|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Локальный компьютер (».»).|  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` , если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog(System::String ^ logName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Имя журнала на локальном компьютере.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventLog" />. Связывает экземпляр с журналом на локальном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка задает <xref:System.Diagnostics.EventLog.Log%2A> свойства `logName` параметра. Перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>, укажите <xref:System.Diagnostics.EventLog.Source%2A> свойство <xref:System.Diagnostics.EventLog> экземпляра. Если вы только читаете <xref:System.Diagnostics.EventLog.Entries%2A> из журнала, можно указывать только <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A> свойства.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (".») предполагается. Эта перегрузка конструктора задает <xref:System.Diagnostics.EventLog.Log%2A> свойство, но можно изменить перед чтением <xref:System.Diagnostics.EventLog.Entries%2A> свойство.  
  
 Если в источнике, укажите в <xref:System.Diagnostics.EventLog.Source%2A> свойство уникален из других источников на компьютере, в последующем вызове <xref:System.Diagnostics.EventLog.WriteEntry%2A> создает журнал с указанным именем, если он еще не существует.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.  
  
|Свойство.|Начальное значение|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Пустая строка ("").|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Параметр `logName`.|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Локальный компьютер (».»).|  
  
   
  
## Examples  
 В следующем примере считывается записи в журнал событий «myNewLog» на локальном компьютере.  
  
 [!code-cpp[Classic EventLog.EventLog1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EventLog1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EventLog1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EventLog1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EventLog1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EventLog1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Имя журнала <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Недопустимое имя журнала.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog (string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog(System::String ^ logName, System::String ^ machineName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Имя журнала на указанном компьютере.</param>
        <param name="machineName">Компьютер, на котором существует журнал.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventLog" />. Связывает экземпляр с журналом на указанном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка задает <xref:System.Diagnostics.EventLog.Log%2A> свойства `logName` параметр и <xref:System.Diagnostics.EventLog.MachineName%2A> свойства `machineName` параметра. Перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>, укажите <xref:System.Diagnostics.EventLog.Source%2A> свойство <xref:System.Diagnostics.EventLog>. Если вы только читаете <xref:System.Diagnostics.EventLog.Entries%2A> из журнала, можно указывать только <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A> свойства.  
  
> [!NOTE]
>  Эта перегрузка конструктора задает <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A> свойства, но его можно изменить перед чтением <xref:System.Diagnostics.EventLog.Entries%2A> свойство.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.  
  
|Свойство.|Начальное значение|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Пустая строка ("").|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Параметр `logName`.|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Параметр `machineName`.|  
  
   
  
## Examples  
 В следующем примере считывается записи в журнал событий «myNewLog» на компьютере значение «myServer».  
  
 [!code-cpp[Classic EventLog.EventLog2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EventLog2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EventLog2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EventLog2 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EventLog2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EventLog2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Имя журнала <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Недопустимое имя журнала.  
  
 - или -  
  
 Недопустимое имя компьютера.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EventLog (string logName, string machineName, string source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string logName, string machineName, string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (logName As String, machineName As String, source As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EventLog(System::String ^ logName, System::String ^ machineName, System::String ^ source);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Имя журнала на указанном компьютере</param>
        <param name="machineName">Компьютер, на котором существует журнал.</param>
        <param name="source">Источник записей журнала событий.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.EventLog" />. Связывает экземпляр с журналом на указанном компьютере и создает или присваивает заданный источник классу <see cref="T:System.Diagnostics.EventLog" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор задает <xref:System.Diagnostics.EventLog.Log%2A> свойства `logName` параметр <xref:System.Diagnostics.EventLog.MachineName%2A> свойства `machineName` параметра и <xref:System.Diagnostics.EventLog.Source%2A> свойства `source` параметра. <xref:System.Diagnostics.EventLog.Source%2A> Свойство является обязательным при записи в журнал событий. Тем не менее если выполняется только чтение из журнала событий, только <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A> (поскольку журнал событий на сервере имеет источник, уже связанной с ним) требуются свойства. При чтении журнала событий, достаточно другую перегрузку конструктора.  
  
 Следующей таблице представлены исходные значения свойств для экземпляра класса <xref:System.Diagnostics.EventLog>.  
  
|Свойство.|Начальное значение|  
|--------------|-------------------|  
|<xref:System.Diagnostics.EventLog.Source%2A>|Параметр `source`.|  
|<xref:System.Diagnostics.EventLog.Log%2A>|Параметр `logName`.|  
|<xref:System.Diagnostics.EventLog.MachineName%2A>|Параметр `machineName`.|  
  
   
  
## Examples  
 Следующий пример вносит запись в журнал событий «MyNewLog» на локальном компьютере, с использованием источника «MySource».  
  
 [!code-cpp[Classic EventLog.EventLog3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EventLog3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EventLog3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EventLog3 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EventLog3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EventLog3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Имя журнала <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Недопустимое имя журнала.  
  
 - или -  
  
 Недопустимое имя компьютера.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEvent" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
      </Docs>
    </Member>
    <Member MemberName="BeginInit">
      <MemberSignature Language="C#" Value="public void BeginInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.BeginInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void BeginInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.BeginInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Начинает инициализацию класса <see cref="T:System.Diagnostics.EventLog" />, используемого в форме или используемого другим компонентом. Инициализация происходит во время выполнения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Разработки, этот метод применяется в среде для запуска инициализации компонента, используемого в форме или другим компонентом. <xref:System.Diagnostics.EventLog.EndInit%2A> Метод завершает инициализацию. С помощью <xref:System.Diagnostics.EventLog.BeginInit%2A> и <xref:System.Diagnostics.EventLog.EndInit%2A> методы предотвращения использования до полной инициализации элемента управления.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Diagnostics.EventLog" /> уже инициализирован.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.EndInit" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все записи из журнала событий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Журналы событий устанавливается максимальный размер, который определяет, сколько записей, они могут содержать. При переполнении журнала событий, он прекращает запись новых событий или начинается перезапись предыдущих операций. Если останавливает запись событий, можно использовать этот метод, чтобы удалить существующие записи из журнала и снова запустить запись событий. Необходимо иметь разрешения администратора на компьютере, на котором находится журнал, чтобы очистить данные журнала событий.  
  
 <xref:System.Diagnostics.EventLog.Clear%2A> Закрывает журнал событий, удаляет дескрипторы событий, получает новые дескрипторы чтения и записи и затем заново открывает журнал событий. Вместе с существующие события удаляются события, получаемые после вызова метода.  
  
   
  
## Examples  
 В следующем примере удаляется журнал событий.  
  
> [!CAUTION]
>  Так как приложения, системы, безопасности и другие, не настраиваемые журналы могут содержать важные сведения. не забудьте указать имя пользовательского журнала перед выполнением этого примера кода. В этом примере удаляется пользовательского журнала `myNewLog`.  
  
 [!code-cpp[Classic EventLog.Clear Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Clear Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Clear Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Clear Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Clear Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Clear Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Создание журнала событий не было завершено успешно.  
  
 - или -  
  
 Невозможно открыть журнал. Код ошибки Windows недоступен.</exception>
        <exception cref="T:System.ArgumentException">Для свойства <see cref="P:System.Diagnostics.EventLog.Log" /> не указано значение. Убедитесь, что имя журнала — не пустая строка.</exception>
        <exception cref="T:System.InvalidOperationException">Журнал не существует.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Close" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает журнал событий и удаляет дескрипторы чтения и записи.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLog.Close%2A> Вызывается метод, защищенный <xref:System.ComponentModel.Component.Dispose%2A> метод. Необходимо вызвать <xref:System.Diagnostics.EventLog.Close%2A> перед вызовом <xref:System.ComponentModel.Component.Dispose%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Дескриптор чтения или записи события не был успешно удален.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateEventSource">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Задает приложение как источник записей для определенного журнала событий в системе.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateEventSource">
      <MemberSignature Language="C#" Value="public static void CreateEventSource (System.Diagnostics.EventSourceCreationData sourceData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateEventSource(class System.Diagnostics.EventSourceCreationData sourceData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.CreateEventSource(System.Diagnostics.EventSourceCreationData)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateEventSource (sourceData As EventSourceCreationData)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateEventSource(System::Diagnostics::EventSourceCreationData ^ sourceData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceData" Type="System.Diagnostics.EventSourceCreationData" />
      </Parameters>
      <Docs>
        <param name="sourceData">Свойства конфигурации для источника событий и его целевого журнала событий.</param>
        <summary>Задает допустимый источник событий для записи локализованных сообщений о событиях, используя указанные свойства конфигурации источника событий и соответствующий журнал событий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для настройки нового источника для внесения записей в журнал событий на локальном или удаленном компьютере. Необязательно использовать этот метод для чтения из журнала событий.  
  
 <xref:System.Diagnostics.EventLog.CreateEventSource%2A> Метод использует входные данные `sourceData` <xref:System.Diagnostics.EventSourceCreationData.Source%2A>, <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> и <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> свойства для создания значения реестра на целевом компьютере для нового источника и сопоставленного журнала событий. Имя нового источника не должно совпадать с существующим именем источника или имя существующего журнала событий на конечном компьютере. Если <xref:System.Diagnostics.EventSourceCreationData.LogName%2A> свойство не задано, источник зарегистрирован в журнале событий приложения. Если <xref:System.Diagnostics.EventSourceCreationData.MachineName%2A> не задано, источник зарегистрирован на локальном компьютере.  
  
> [!NOTE]
>  Для создания источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь права администратора.  
>   
>  Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException> возникает исключение.  
>   
>  Начиная с Windows Vista привилегии пользователя определяются управления учетных записей (UAC). Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к журнал безопасности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, , щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.  
  
 Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> и <xref:System.Diagnostics.EventLog.WriteEntry%2A> записи события в журнал событий. Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Можно создать источник событий журнала событий существующего или нового журнала событий. При создании нового источника для нового журнала событий система регистрирует источник для этого журнала, но журнал не создается, пока первая операция записи на него.  
  
 Журналы событий сохраняются операционной системой как файлы. При использовании <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventLog.CreateEventSource%2A> для создания нового журнала событий, связанный с ней файл хранится в каталоге %SystemRoot%\System32\Config на указанном компьютере. Имя файла задано путем добавления первые 8 символов <xref:System.Diagnostics.EventLog.Log%2A> свойств с расширением «.evt».  
  
 Каждый источник может записывать только только одним журналом событий одновременно; Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов.  
  
 С локализованными файлами ресурсов можно зарегистрировать источник событий для событий категории и сообщение строк. Для внесения записей в журнале событий с использованием идентификаторов ресурсов, вместо указания фактических строк в приложении. Средство просмотра событий использует идентификатор ресурса для поиска и отображения соответствующей строки из локализованного файла ресурсов на основе текущих настроек языка. Можно зарегистрировать отдельный файл для категории событий, сообщений и строк вставки параметров, или можно зарегистрировать того же файла ресурсов для всех трех типов строк. Используйте <xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>, <xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>, <xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>, и <xref:System.Diagnostics.EventSourceCreationData.ParameterResourceFile%2A> свойства для настройки источника локализованные записи в журнал событий. Если приложение записывает значения строк напрямую в журнал событий, необходимо настроить эти свойства.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
 Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник с обновленной конфигурации, а не удалить существующий источник.  
  
> [!NOTE]
>  Если источник настроен для журнала событий и перенастроить ее для другой журнал событий, необходимо перезагрузить компьютер, чтобы изменения вступили в силу.  
  
   
  
## Examples  
 В следующем примере определяется, является ли источник события с именем `SampleApplicationSource` зарегистрирован на локальном компьютере. Если источник событий не существует, в примере задает файле ресурсов сообщения для источника и создается новый источник событий. Наконец, пример задает локализованное отображаемое имя для журнала событий, используя значение идентификатора ресурса в `DisplayNameMsgId` и путь к файлу ресурсов в `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 В примере используется следующий текстовый файл сообщения, встроенный в библиотеку ресурсов EventLogMsgs.dll. Текстовый файл сообщения — источник, из которого создается файле ресурсов сообщения. В текстовом файле сообщения определяет идентификаторы ресурсов и текст категории, сообщение о событии и строки вставки параметров. В частности идентификатор ресурса 5001 определен для локализованного имени журнала событий.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Имя компьютера, заданное в <paramref name="sourceData" />, недопустимо.  
  
 \- или -  
  
 Имя источника, указанное в параметре <paramref name="sourceData" />, равно <see langword="null" />.  
  
 \- или -  
  
 Имя журнала, заданное в <paramref name="sourceData" /> недопустимо. Имена журналов событий должны содержать печатные символы и не должны содержать символы "*", "?" или "\\".  
  
 \- или -  
  
 Имя журнала, заданное в <paramref name="sourceData" />, недопустимо для создания пользовательского журнала. Имена AppEvent, SysEvent и SecEvent зарезервированы для системного использования.  
  
 \- или -  
  
 Имя журнала совпадает с существующим именем источника событий.  
  
 \- или -  
  
 При таком имени источника, заданном в <paramref name="sourceData" />, длина пути к разделу реестра превышает 254 символа.  
  
 \- или -  
  
 Первые 8 символов имени журнала, заданные в <paramref name="sourceData" />, не уникальны.  
  
 \- или -  
  
 Имя источника, заданное в <paramref name="sourceData" />, уже зарегистрировано.  
  
 \- или -  
  
 Имя источника, заданное в <paramref name="sourceData" />, совпадает с существующим именем журнала событий.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="sourceData" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.EventSourceCreationData" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
      </Docs>
    </Member>
    <Member MemberName="CreateEventSource">
      <MemberSignature Language="C#" Value="public static void CreateEventSource (string source, string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateEventSource(string source, string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateEventSource (source As String, logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateEventSource(System::String ^ source, System::String ^ logName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Имя источника, по которому приложение регистрируется на локальном компьютере.</param>
        <param name="logName">Имя журнала, в который вносятся записи о событиях источника. Допустимые значения: Application, System или имя пользовательского журнала событий.</param>
        <summary>Задает указанное имя источника в качестве допустимого источника событий для внесения записей в журнал на локальном компьютере. Используя этот метод, можно также создать новый пользовательский журнал на локальном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для создания пользовательского журнала и регистрации <xref:System.Diagnostics.EventLog.Source%2A> существующий журнал на локальном компьютере.  
  
 Если `logName` — `null` или пустая строка ("») при вызове <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, по умолчанию будет использоваться в журнал приложений. Если журнал существует на локальном компьютере, система создаст новый журнал и зарегистрирует приложение в виде <xref:System.Diagnostics.EventLog.Source%2A> для этого журнала.  
  
> [!NOTE]
>  Для создания источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь права администратора.  
>   
>  Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException> возникает исключение.  
>   
>  В Windows Vista и более поздних версиях права доступа пользователя определяются контролем учетных записей. Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к журнал безопасности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, , щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.  
  
 Необходимо создать источник событий при записи в журнал событий. Прежде чем вносить записи в журнал событий, необходимо зарегистрировать источник событий в журнале событий как источник событий. При записи в журнал событий система использует <xref:System.Diagnostics.EventLog.Source%2A> для поиска журнала, в котором нужно сделать запись. Если выполняется чтение журнала событий, можно указать <xref:System.Diagnostics.EventLog.Source%2A>, или <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A>.  
  
> [!NOTE]
>  Не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A> при подключении в журнал на локальном компьютере. Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> при чтении журнала, локальный компьютер (".») предполагается.  
  
 Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> и <xref:System.Diagnostics.EventLog.WriteEntry%2A> записи события в журнал событий. Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Можно создать источник событий журнала событий существующего или нового журнала событий. При создании нового источника для нового журнала событий система регистрирует источник для этого журнала, но журнал не создается, пока первая операция записи на него.  
  
 Журналы событий сохраняются операционной системой как файлы. При использовании <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventLog.CreateEventSource%2A> для создания нового журнала событий, связанный с ней файл хранится в каталоге %SystemRoot%\System32\Config на указанном компьютере. Имя файла задано путем добавления первые 8 символов <xref:System.Diagnostics.EventLog.Log%2A> свойств с расширением «.evt».  
  
 Источник должен быть уникальным на локальном компьютере. имя нового источника не должно совпадать с существующим именем источника или имя существующего журнала событий. Каждый источник можно написать только один журнал во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
 Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник с обновленной конфигурации, а не удалить существующий источник.  
  
> [!NOTE]
>  Если необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` , если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="source" /> является пустой строкой ("") или <see langword="null" />.  
  
 \- или -  
  
 <paramref name="logName" /> не является допустимым именем журнала событий. Имена журналов событий должны содержать печатные символы и не должны содержать символы "*", "?" или "\\".  
  
 \- или -  
  
 Значение <paramref name="logName" /> недопустимо для создания журнала пользователя. Имена AppEvent, SysEvent и SecEvent зарезервированы для системного использования.  
  
 \- или -  
  
 Имя журнала совпадает с существующим именем источника событий.  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.  
  
 \- или -  
  
 Первые 8 символов <paramref name="logName" /> совпадают с первыми 8 символами имени существующего журнала событий.  
  
 \- или -  
  
 Невозможно зарегистрировать источник, поскольку он уже существует на локальном компьютере.  
  
 \- или -  
  
 Имя источника совпадает с существующим именем журнала событий.</exception>
        <exception cref="T:System.InvalidOperationException">Раздел реестра для журнала событий не может быть открыт на локальном компьютере.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateEventSource">
      <MemberSignature Language="C#" Value="public static void CreateEventSource (string source, string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateEventSource(string source, string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.CreateEventSource(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub CreateEventSource (source As String, logName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void CreateEventSource(System::String ^ source, System::String ^ logName, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use CreateEventSource(EventSourceCreationData) instead")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Источник, по которому приложение регистрируется на указанном компьютере.</param>
        <param name="logName">Имя журнала, в который вносятся записи о событиях источника. Допустимые значения: Application, System или имя пользовательского журнала событий. Если значение не указано, то параметр <c>logName</c> по умолчанию имеет значение Application.</param>
        <param name="machineName">Имя компьютера, на котором регистрируется источник событий, или значение ".", если используется локальный компьютер.</param>
        <summary>Устанавливает заданное имяисточника в качестве допустимого источника событий для внесения записей в журнал на указанном компьютере. Этот метод можно также использовать для создания нового пользовательского журнала на заданном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для создания пользовательского журнала и регистрации <xref:System.Diagnostics.EventLog.Source%2A> существующий журнал на указанном компьютере.  
  
 Если `logName` — `null` или пустая строка ("») при вызове <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, по умолчанию будет использоваться в журнал приложений. Если журнал существует на указанном компьютере, система создаст новый журнал и зарегистрирует приложение в виде <xref:System.Diagnostics.EventLog.Source%2A> для этого журнала.  
  
 Необходимо создать источник событий при записи в журнал событий. Прежде чем вносить записи в журнал событий, необходимо зарегистрировать источник событий в журнале событий как источник событий. При записи в журнал событий система использует <xref:System.Diagnostics.EventLog.Source%2A> для поиска журнала, в котором нужно сделать запись. Если выполняется чтение журнала событий, можно указать <xref:System.Diagnostics.EventLog.Source%2A>, или <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A>.  
  
> [!NOTE]
>  Для создания источника событий в Windows Vista и более поздние версии или Windows Server 2003, необходимо иметь права администратора.  
>   
>  Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. В Windows Vista и более поздних версий пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException> возникает исключение.  
>   
>  В Windows Vista и более поздних версиях права доступа пользователя определяются контролем учетных записей. Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к журнал безопасности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, , щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.  
  
 Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> и <xref:System.Diagnostics.EventLog.WriteEntry%2A> записи события в журнал событий. Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Можно создать источник событий журнала событий существующего или нового журнала событий. При создании нового источника для нового журнала событий система регистрирует источник для этого журнала, но журнал не создается, пока первая операция записи на него.  
  
 Журналы событий сохраняются операционной системой как файлы. При использовании <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventLog.CreateEventSource%2A> для создания нового журнала событий, связанный с ней файл хранится в каталоге %SystemRoot%\System32\Config на указанном компьютере. Имя файла задано путем добавления первые 8 символов <xref:System.Diagnostics.EventLog.Log%2A> свойств с расширением «.evt».  
  
 Источник должен быть уникальным на локальном компьютере. имя нового источника не должно совпадать с существующим именем источника или имя существующего журнала событий. Каждый источник можно написать только один журнал во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
 Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник с обновленной конфигурации, а не удалить существующий источник.  
  
> [!NOTE]
>  Если необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` на компьютере `MyServer`и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="machineName" /> не является допустимым именем компьютера.  
  
 \- или -  
  
 <paramref name="source" /> является пустой строкой ("") или <see langword="null" />.  
  
 \- или -  
  
 <paramref name="logName" /> не является допустимым именем журнала событий. Имена журналов событий должны содержать печатные символы и не должны содержать символы "*", "?" или "\\".  
  
 \- или -  
  
 Значение <paramref name="logName" /> недопустимо для создания журнала пользователя. Имена AppEvent, SysEvent и SecEvent зарезервированы для системного использования.  
  
 \- или -  
  
 Имя журнала совпадает с существующим именем источника событий.  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.  
  
 \- или -  
  
 Первые 8 символов <paramref name="logName" /> совпадают с первыми 8 символами имени существующего журнала событий на указанном компьютере.  
  
 \- или -  
  
 Невозможно зарегистрировать источник, так как он уже существует на заданном компьютере.  
  
 \- или -  
  
 Имя источника совпадает с существующим именем источника событий.</exception>
        <exception cref="T:System.InvalidOperationException">Раздел реестра для журнала событий не может быть открыт на указанном компьютере.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Delete">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет ресурс журнала.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Delete(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (logName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ logName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Имя удаляемого журнала. Допустимые значения: Application, Security, System или имя пользовательского журнала событий на компьютере.</param>
        <summary>Удаляет журнал событий с локального компьютера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод следует используйте, когда журнал, который вы хотите удалить на локальном компьютере. Можно удалить любой журнал на компьютере, при наличии необходимых разрешений для реестра.  
  
 <xref:System.Diagnostics.EventLog.Delete%2A> Удаляет журнал, указанный в `logName` с локального компьютера. Если вы хотите удалить только источник зарегистрирован в журнале, вызовите <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> , `static` методы, поэтому их можно вызывать непосредственно для класса. Нет необходимости создавать новый экземпляр <xref:System.Diagnostics.EventLog> для вызова любого метода.  
  
 <xref:System.Diagnostics.EventLog.Delete%2A> Метод сначала удаляет файл, содержащий содержимое журнала. Затем открывает реестр и удаляет все источники событий, зарегистрированные для этого журнала. При повторном создании журнала на более позднем этапе, следует зарегистрировать источников событий снова, если они хотят использовать повторно. Если не следует регистрировать источники событий и записи других пользователей на источник события не указано имя журнала, источник события будут созданы в журнал событий приложений. Таким образом приложения, которые ранее были возможность добавлять записи в журнал удален и создан заново запишет в журнал приложений вместо этого, так как он теперь содержит источник события.  
  
> [!NOTE]
>  Повторное создание журнала событий может быть трудоемким процессом. Избегайте, удалять созданные системой журналы событий, например журнал приложений.  
  
 Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A> автоматически удаляет источников, зарегистрированных в этом журнале. Это можно сделать другие приложения, использующие этот журнал не применяются.  
  
   
  
## Examples  
 В следующем примере удаляется журнал на локальном компьютере. В примере определяется журнала от источника.  
  
> [!NOTE]
>  Более одного источника может записать в журнал событий. Перед удалением пользовательского журнала, убедитесь, что нет других источников, записи в журнал событий.  
  
 [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="logName" /> является пустой строкой ("") или <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Раздел реестра для журнала событий не может быть открыт на локальном компьютере.  
  
 \- или -  
  
 Журнала на локальном компьютере не существует.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Создание журнала событий не было завершено успешно.  
  
 - или -  
  
 Невозможно открыть журнал. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
        <altmember cref="M:System.Diagnostics.EventLog.Close" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public static void Delete (string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Delete(string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Delete(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Delete (logName As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Delete(System::String ^ logName, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Имя удаляемого журнала. Допустимые: Application, Security, System или имя пользовательского журнала событий на заданном компьютере.</param>
        <param name="machineName">Имя компьютера, с которого удаляется журнал, или значение ".", если используется локальный компьютер.</param>
        <summary>Удаляет журнал событий с указанного компьютера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод следует используйте, когда журнал, который вы хотите удалить на удаленном компьютере. Можно удалить любой журнал на компьютере, при наличии необходимых разрешений для реестра.  
  
 <xref:System.Diagnostics.EventLog.Delete%2A> Удаляет журнал, указанный в `logName` из компьютера, указанного параметром `machineName`. Если вы хотите удалить только источник зарегистрирован в журнале, вызовите <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> , `static` методы, поэтому их можно вызывать непосредственно для класса. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog> для вызова любого метода.  
  
 Этот метод сначала удаляет файл, содержащий содержимое журнала. Затем открывает реестр и удаляет все источники событий, зарегистрированные для этого журнала. При повторном создании журнала на более позднем этапе, следует зарегистрировать источников событий снова, если они хотят использовать повторно. Если не следует регистрировать источники событий и записи других пользователей на источник события не указано имя журнала, источник события будут созданы в журнал событий приложений. Таким образом приложения, которые ранее были возможность добавлять записи в журнал удален и создан заново запишет в журнал приложений вместо этого, так как он теперь содержит источник события.  
  
> [!NOTE]
>  Повторное создание журнала событий может быть трудоемким процессом. Избегайте, удалять созданные системой журналы событий, например журнал приложений.  
  
 Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A> автоматически удаляет источников, зарегистрированных в этом журнале. Это можно сделать другие приложения, использующие этот журнал не применяются.  
  
   
  
## Examples  
 В следующем примере удаляется журнал с указанного компьютера. В примере определяется журнала от источника.  
  
> [!NOTE]
>  Более одного источника может записать в журнал событий. Перед удалением пользовательского журнала, убедитесь, что нет других источников, записи в журнал событий.  
  
 [!code-cpp[Classic EventLog.Delete1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Delete1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Delete1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="logName" /> является пустой строкой ("") или <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="machineName" /> не является допустимым именем компьютера.</exception>
        <exception cref="T:System.InvalidOperationException">Раздел реестра для журнала событий не может быть открыт на указанном компьютере.  
  
 \- или -  
  
 Журнала на указанном компьютере не существует.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Создание журнала событий не было завершено успешно.  
  
 - или -  
  
 Невозможно открыть журнал. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
        <altmember cref="M:System.Diagnostics.EventLog.Close" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="DeleteEventSource">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Удаляет из журнала событий регистрацию источника событий приложения.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DeleteEventSource">
      <MemberSignature Language="C#" Value="public static void DeleteEventSource (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteEventSource(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteEventSource (source As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteEventSource(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Имя, с которым приложение регистрируется в журнале событий системы.</param>
        <summary>Удаляет регистрацию источника событий из журнала событий на локальном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод служит для удаления регистрации <xref:System.Diagnostics.EventLog.Source%2A> с локального компьютера. <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> обращается к реестра на локальном компьютере, а также удаляется регистрация приложения в качестве допустимого источника событий.  
  
 Для записи журнала, больше не нужны, можно удалить компонент как источник событий. Например это можно сделать, при необходимо перенести компонент из одного журнала на другой. Так как источник может быть зарегистрирован только один журнал одновременно, изменение журнала необходимо сначала удалить текущую регистрацию.  
  
 <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Удаляет только источник зарегистрировано в журнале. Если вы хотите удалить журнал, вызовите <xref:System.Diagnostics.EventLog.Delete%2A>. Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> , `static` методы, поэтому их можно вызывать непосредственно для класса. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog> для вызова любого метода.  
  
 Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A> автоматически удаляет источников, зарегистрированных в этом журнале. Это можно сделать другие приложения, использующие этот журнал не применяются.  
  
> [!NOTE]
>  Если необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу.  
  
   
  
## Examples  
 В следующем примере удаляется источника с локального компьютера. Пример определяет журнала от источника, а затем удаляет журнал.  
  
> [!NOTE]
>  Более одного источника может записать в журнал событий. Перед удалением пользовательского журнала, убедитесь, что нет других источников, записи в журнал событий.  
  
 [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="source" /> отсутствует в реестре локального компьютера.  
  
 \- или -  
  
 Отсутствуют права на запись в раздел реестра для журнала событий.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
      </Docs>
    </Member>
    <Member MemberName="DeleteEventSource">
      <MemberSignature Language="C#" Value="public static void DeleteEventSource (string source, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteEventSource(string source, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.DeleteEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DeleteEventSource (source As String, machineName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DeleteEventSource(System::String ^ source, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Имя, с которым приложение регистрируется в журнале событий системы.</param>
        <param name="machineName">Имя компьютера, с которого удаляется регистрация, или "." для локального компьютера.</param>
        <summary>Удаляет регистрацию источника событий приложения с указанного компьютера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для удаления регистрации <xref:System.Diagnostics.EventLog.Source%2A> с удаленного компьютера. <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> обращается к реестра на компьютере, указанном `machineName` и удаляет регистрацию приложения как допустимого источника событий.  
  
 Для записи журнала, больше не нужны, можно удалить компонент как источник событий. Например это можно сделать, при необходимо перенести компонент из одного журнала на другой. Так как источник может быть зарегистрирован только один журнал одновременно, изменение журнала необходимо сначала удалить текущую регистрацию.  
  
 <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> Удаляет только источник зарегистрировано в журнале. Если вы хотите удалить журнал, вызовите <xref:System.Diagnostics.EventLog.Delete%2A>. Если требуется удалить записи журнала, вызовите <xref:System.Diagnostics.EventLog.Clear%2A>. <xref:System.Diagnostics.EventLog.Delete%2A> и <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> , `static` методы, поэтому их можно вызывать непосредственно для класса. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog> для вызова любого метода.  
  
 Удаление журнала с помощью вызова <xref:System.Diagnostics.EventLog.Delete%2A> автоматически удаляет источников, зарегистрированных в этом журнале. Это можно сделать другие приложения, использующие этот журнал не применяются.  
  
> [!NOTE]
>  Если необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу.  
  
   
  
## Examples  
 В следующем примере удаляется источника с указанного компьютера. Пример определяет журнала от источника, а затем удаляет журнал.  
  
> [!NOTE]
>  Более одного источника может записать в журнал событий. Перед удалением пользовательского журнала, убедитесь, что нет других источников, записи в журнал событий.  
  
 [!code-cpp[Classic EventLog.Delete1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Delete1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Delete1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Delete1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="machineName" /> недопустим.  
  
 \- или -  
  
 Параметр <paramref name="source" /> отсутствует в реестре заданного компьютера.  
  
 \- или -  
  
 Отсутствуют права на запись в раздел реестра для журнала событий.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="source" /> не может быть удален, так как в реестре, родительский раздел реестра <paramref name="source" /> не содержит подразделы с тем же именем.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Clear" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые журналом <see cref="T:System.Diagnostics.EventLog" />, и при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается методом открытые `Dispose()` метод и <xref:System.Object.Finalize%2A> метод. `Dispose()` вызывает защищенный `Dispose(Boolean)` метод с `disposing` равным `true`. <xref:System.Object.Finalize%2A> вызывает `Dispose` с `disposing` значение `false`.  
  
 При `disposing` параметр имеет значение true, данный метод освобождает все ресурсы, занятые любыми управляемыми объектами, которые <xref:System.Diagnostics.EventLog> ссылки. Этот метод вызывает метод `Dispose()` каждого объекта, на который есть ссылка.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            Метод <see langword="Dispose" /> может вызываться несколько раз другими объектами. При переопределении метода <see langword="Dispose(Boolean)" /> нужно избегать ссылок на объекты, которые были уничтожены предыдущими вызовами метода <see langword="Dispose" />. Дополнительные сведения о реализации <see langword="Dispose(Boolean)" />, в разделе [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
 Дополнительные сведения о <see langword="Dispose" /> и <see cref="M:System.Object.Finalize" />, в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EnableRaisingEvents">
      <MemberSignature Language="C#" Value="public bool EnableRaisingEvents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableRaisingEvents" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.EnableRaisingEvents" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableRaisingEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableRaisingEvents { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("If enabled raises event when a log is written.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, получает ли класс <see cref="T:System.Diagnostics.EventLog" /> уведомления о событии <see cref="E:System.Diagnostics.EventLog.EntryWritten" />.</summary>
        <value>
          Значение <see langword="true" />, если класс <see cref="T:System.Diagnostics.EventLog" /> получает уведомления при внесении записи в журнал; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> Свойство определяет, является ли <xref:System.Diagnostics.EventLog> инициирует события при записи в журнал. Если свойство не `true`, компонентов, получающих <xref:System.Diagnostics.EventLog.EntryWritten> событие уведомления любое время записи в журнал, который указан в <xref:System.Diagnostics.EventLog.Log%2A> свойство. Если <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> — `false`, события не вызываются.  
  
> [!NOTE]
>  Уведомления о событиях можно получать только в том случае, если запись вносится в журнал на локальном компьютере. Вы не сможете получать уведомления для записи в журнал на удаленных компьютерах.  
  
   
  
## Examples  
 В следующем примере показана обработка <xref:System.Diagnostics.EventLog.EntryWritten> событий.  
  
 [!code-cpp[Classic EventLog.EnableRaisingEvents Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EnableRaisingEvents Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EnableRaisingEvents Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EnableRaisingEvents Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EnableRaisingEvents Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EnableRaisingEvents Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Журнал событий на удаленном компьютере.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="E:System.Diagnostics.EventLog.EntryWritten" />
      </Docs>
    </Member>
    <Member MemberName="EndInit">
      <MemberSignature Language="C#" Value="public void EndInit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.EndInit" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndInit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndInit();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISupportInitialize.EndInit</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Завершает инициализацию класса <see cref="T:System.Diagnostics.EventLog" />, используемого в форме или другим компонентом. Инициализация происходит во время выполнения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] Разработки, среда использует этот метод для завершения инициализации компонента, используемого в форме или другим компонентом. <xref:System.Diagnostics.EventLog.BeginInit%2A> Метод начинает инициализацию. С помощью <xref:System.Diagnostics.EventLog.BeginInit%2A> и <xref:System.Diagnostics.EventLog.EndInit%2A> методы предотвращает использование до полной инициализации элемента управления.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.BeginInit" />
      </Docs>
    </Member>
    <Member MemberName="Entries">
      <MemberSignature Language="C#" Value="public System.Diagnostics.EventLogEntryCollection Entries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Diagnostics.EventLogEntryCollection Entries" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.Entries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Entries As EventLogEntryCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::EventLogEntryCollection ^ Entries { System::Diagnostics::EventLogEntryCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The entries in the log.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLogEntryCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает содержимое журнала событий.</summary>
        <value>Класс <see cref="T:System.Diagnostics.EventLogEntryCollection" />, в котором хранятся записи журнала событий. Каждая запись связана с экземпляром класса <see cref="T:System.Diagnostics.EventLogEntry" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Diagnostics.EventLog.Entries%2A> член при чтении из журнала событий.  
  
 Так как свойство доступно только для чтения, нельзя изменять записи или записи журнала с помощью <xref:System.Diagnostics.EventLog.Entries%2A>. Вместо этого укажите <xref:System.Diagnostics.EventLog.Source%2A> и вызов <xref:System.Diagnostics.EventLog.WriteEntry%2A> для записи в новый журнал событий. Можно использовать <xref:System.Diagnostics.EventLog.Entries%2A> для подсчета числа записей в журнале событий, а также для просмотра <xref:System.Diagnostics.EventLogEntry> в коллекции. Использовать индексированное <xref:System.Diagnostics.EventLogEntryCollection.Item%2A> член для извлечения сведений о конкретной записи, такие как <xref:System.Diagnostics.EventLogEntry.Message%2A>, <xref:System.Diagnostics.EventLogEntry.Category%2A>, <xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>, или <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  
  
 Это не обязательно указывать <xref:System.Diagnostics.EventLog.Source%2A> при чтении файла журнала. Можно указать только <xref:System.Diagnostics.EventLog.Log%2A> имя и <xref:System.Diagnostics.EventLog.MachineName%2A> свойства (имя сервера) для <xref:System.Diagnostics.EventLog> экземпляра. В любом случае <xref:System.Diagnostics.EventLog.Entries%2A> член автоматически заполняется списком записей журнала событий. Можно выбрать соответствующий индекс для элемента в этом списке для чтения отдельных записей.  
  
 Важное различие между чтением и записью в журнал является то, что не требуется явно вызывать метод чтения. После <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A> указаны, <xref:System.Diagnostics.EventLog.Entries%2A> свойство заполняется автоматически. Если изменить значение <xref:System.Diagnostics.EventLog.Log%2A> или <xref:System.Diagnostics.EventLog.MachineName%2A> свойства <xref:System.Diagnostics.EventLog.Entries%2A> свойство будет заполнен повторно при очередном его чтение.  
  
> [!NOTE]
>  Не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A> при подключении к журналу. Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер, «.», предполагается.  
  
   
  
## Examples  
 В следующем примере считывается записи в журнал событий «MyNewLog» на локальном компьютере.  
  
 [!code-cpp[Classic EventLog.Entries Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Entries Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Entries Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Entries Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Entries Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Entries Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
        <altmember cref="T:System.Diagnostics.EventLogEntry" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="Overload:System.Diagnostics.EventLog.WriteEntry" />
      </Docs>
    </Member>
    <Member MemberName="EntryWritten">
      <MemberSignature Language="C#" Value="public event System.Diagnostics.EntryWrittenEventHandler EntryWritten;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Diagnostics.EntryWrittenEventHandler EntryWritten" />
      <MemberSignature Language="DocId" Value="E:System.Diagnostics.EventLog.EntryWritten" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EntryWritten As EntryWrittenEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Diagnostics::EntryWrittenEventHandler ^ EntryWritten;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Raised for each EventLog entry written.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EntryWrittenEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при внесении записи в журнал событий на локальном компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для получения уведомлений о событиях, необходимо задать <xref:System.Diagnostics.EventLog.EnableRaisingEvents%2A> для `true`. Получают уведомления о событиях можно только в том случае, если запись вносится в журнал на локальном компьютере. Вы не сможете получать уведомления для записи в журнал на удаленных компьютерах.  
  
 При создании делегата <xref:System.Diagnostics.EventLog.EntryWritten> определяется метод обработки события. Чтобы связать событие с обработчиком событий, нужно добавить в событие экземпляр делегата. Обработчик событий вызывается всякий раз, когда происходит событие, пока вы не удалите делегат. Дополнительные сведения об обработке событий с делегатами см. в разделе [обработка и вызов событий](~/docs/standard/events/index.md).  
  
 Система реагирует на <xref:System.Diagnostics.EventLog.WriteEntry%2A> только в том случае, если последняя запись события произошла ранее не меньше шести секунд. Это означает, что вы будете получать одно <xref:System.Diagnostics.EventLog.EntryWritten> происходит, уведомления о событии в 6 секундный интервал, даже если более одного события журнала изменений. При вставке увеличить интервал (около 10 секунд) между вызовами <xref:System.Diagnostics.EventLog.WriteEntry%2A>, вероятность недопустима. Тем не менее если запись событий происходит чаще, можно не получить уведомление о событии до следующего интервала. Как правило пропущенные уведомления о событиях не теряются, но задержка.  
  
   
  
## Examples  
 Следующий пример обрабатывает события записи.  
  
 [!code-cpp[Classic EventLog.EntryWritten Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.EntryWritten Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.EntryWritten Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.EntryWritten Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.EntryWritten Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.EntryWritten Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.EnableRaisingEvents" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Exists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет существование указанного журнала.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string logName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string logName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Exists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (logName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ logName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Имя журнала, который нужно найти. Допустимыми являются значения: Application, Security, System, имена журналов определенных приложений (например, службы каталогов Active Directory) или имя любого пользовательского журнала на компьютере.</param>
        <summary>Определяет наличие журнала на локальном компьютере.</summary>
        <returns>
          Значение <see langword="true" />, если журнал существует на локальном компьютере; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы определить, существует ли журнал на локальном компьютере. Если вы хотите определить, существует ли на локальном компьютере, используйте источник <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
 Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на локальном компьютере. в противном случае — запрос возвращает `false`.  
  
 Новый журнал не могут иметь имя существующего журнала на том же компьютере, используйте этот метод, прежде чем создавать новый журнал для определения, если указанный `logName` уже существует на локальном компьютере. `logName` Параметров регистр не учитывается.  
  
 <xref:System.Diagnostics.EventLog.Exists%2A> — `static` метод, его можно вызывать непосредственно для класса. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog> для вызова <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
   
  
## Examples  
 [!code-cpp[EventLog_Exists_1#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_Exists_1/CPP/eventlog_exists_1.cpp#1)]
 [!code-csharp[EventLog_Exists_1#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_Exists_1/CS/eventlog_exists_1.cs#1)]
 [!code-vb[EventLog_Exists_1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_Exists_1/VB/eventlog_exists_1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр logName принимает значение <see langword="null" /> или пустое значение.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
      </Docs>
    </Member>
    <Member MemberName="Exists">
      <MemberSignature Language="C#" Value="public static bool Exists (string logName, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Exists(string logName, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.Exists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Exists (logName As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool Exists(System::String ^ logName, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logName" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="logName">Журнал, который нужно найти. Допустимыми являются значения: Application, Security, System, имена журналов определенных приложений (например, службы каталогов Active Directory) или имя любого пользовательского журнала на компьютере.</param>
        <param name="machineName">Имя компьютера, на котором выполняется поиск журнала, или значение ".", если используется локальный компьютер.</param>
        <summary>Определяет наличие журнала на заданном компьютере.</summary>
        <returns>
          Значение <see langword="true" />, если журнал существует на заданном компьютере; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы определить, существует ли журнал на удаленном компьютере. Если вы хотите определить, существует ли источник на удаленном компьютере, используйте <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
 Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на заданном компьютере; в противном случае — запрос возвращает `false`.  
  
 Новый журнал не могут иметь имя существующего журнала на том же компьютере, используйте этот метод, прежде чем создавать новый журнал для определения, если один с указанным `logName` уже существует на сервере, заданный параметром `machineName` параметр. `logName` И `machineName` параметров регистр не учитывается.  
  
 <xref:System.Diagnostics.EventLog.Exists%2A> — `static` метод, его можно вызывать непосредственно для класса. Нет необходимости создавать новый экземпляр <xref:System.Diagnostics.EventLog> для вызова <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимый формат параметра <paramref name="machineName" />. Убедитесь, что при поиске на компьютере используется правильный синтаксис.  
  
 - или -  
  
 Параметр <paramref name="logName" /> принимает значение <see langword="null" /> или пустое значение.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEventLogs">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает массив журналов событий.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEventLogs">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.EventLog[] GetEventLogs ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.EventLog[] GetEventLogs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.GetEventLogs" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEventLogs () As EventLog()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::EventLog ^&gt; ^ GetEventLogs();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет поиск всех журналов событий на локальном компьютере и создает массив объектов <see cref="T:System.Diagnostics.EventLog" />, содержащих список.</summary>
        <returns>Массив типа <see cref="T:System.Diagnostics.EventLog" />, представляющий журналы на локальном компьютере.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив <xref:System.Diagnostics.EventLog> объектов представляет собой моментальный снимок всех журналов событий на локальном компьютере при вызове <xref:System.Diagnostics.EventLog.GetEventLogs%2A> выполняется. Это не динамическую коллекцию, поэтому он не отражает создания журналы в режиме реального времени и удаления. Следует убедиться, что журнала в массиве существует до считывания или записи в него. Обычно массив содержит по крайней мере три журнала: приложения, системы и безопасности. Если вы создали пользовательские журналы событий на локальном компьютере, они будут отображаться в массиве, а также.  
  
 Чтобы получить список журналов событий, необходимо иметь необходимых разрешений для реестра. Эти разрешения являются идентичными требуется для вызова <xref:System.Diagnostics.EventLog.Exists%2A> и <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
   
  
## Examples  
 Следующий пример создает журналы событий, определенных на локальном компьютере и отображает сведения о конфигурации для каждого журнала событий.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Отсутствуют права на доступ к реестру.  
  
 - или -  
  
 На компьютере отсутствует служба журнала событий.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
      </Docs>
    </Member>
    <Member MemberName="GetEventLogs">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.EventLog[] GetEventLogs (string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.EventLog[] GetEventLogs(string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.GetEventLogs(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetEventLogs (machineName As String) As EventLog()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::Diagnostics::EventLog ^&gt; ^ GetEventLogs(System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.EventLog[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="machineName">Компьютер, на котором выполняется поиск журналов событий.</param>
        <summary>Выполняет поиск всех журналов событий на заданном компьютере и создает массив объектов <see cref="T:System.Diagnostics.EventLog" />, содержащих список.</summary>
        <returns>Массив типа <see cref="T:System.Diagnostics.EventLog" />, представляющий журналы на заданном компьютере.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив <xref:System.Diagnostics.EventLog> объектов представляет собой моментальный снимок всех журналов событий на компьютере, указанном `machineName` параметра при вызове <xref:System.Diagnostics.EventLog.GetEventLogs%2A> выполняется. Это не динамическую коллекцию, поэтому он не отражает создания журналы в режиме реального времени и удаления. Следует убедиться, что журнала в массиве существует до считывания или записи в него. Обычно массив содержит по крайней мере три журнала: приложения, системы и безопасности. Если вы создали пользовательские журналы событий на указанном компьютере, они будут отображаться в массиве, а также.  
  
 <xref:System.Diagnostics.EventLog.GetEventLogs%2A> — `static` метод, поэтому он может быть вызван на <xref:System.Diagnostics.EventLog> сам класс. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog> объекта, чтобы сделать вызов метода.  
  
 Чтобы получить список журналов событий, необходимо иметь необходимых разрешений для реестра. Эти разрешения являются идентичными требуется для вызова <xref:System.Diagnostics.EventLog.Exists%2A> и <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
   
  
## Examples  
 Следующий пример возвращает список журналов на компьютере значение «myServer». Затем он выводит имя каждого из журналов.  
  
 [!code-cpp[Classic EventLog.GetEventLogs1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.GetEventLogs1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.GetEventLogs1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.GetEventLogs1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.GetEventLogs1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.GetEventLogs1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="machineName" /> содержит недопустимое имя компьютера.</exception>
        <exception cref="T:System.InvalidOperationException">Отсутствуют права на доступ к реестру.  
  
 - или -  
  
 На компьютере отсутствует служба журнала событий.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public string Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Log" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Log { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.LogConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Name of the log that is read and written.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя журнала, из которого производится чтение или запись.</summary>
        <value>Имя журнала. Существуют следующие имена: журнал приложения, журнал системы, журнал безопасности или имя, указанное пользователем. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию на сервере существуют три файла журнала: приложения, системы и безопасности. Приложения и службы использовать файл журнала приложения. Драйверы устройств используйте файл системного журнала. При включенном аудите, система создает успешных и неудачных событий аудита в журнале безопасности. Если у вас есть другие приложения, например Active Directory в Windows Server может возникнуть и другие файлы журналов. Кроме того можно создать файлы пользовательского журнала на локальном или удаленном компьютере. Пользовательские журналы позволяют упорядочить записи, лучшим образом, нежели компоненты записи события в журнале приложений по умолчанию.  
  
> [!NOTE]
>  Имена журнала являются более восьми символов. Согласно данным системы MyLogSample1 и MyLogSample2 — это тот же журнал.  
  
 При записи в журнал событий, недостаточно для указания <xref:System.Diagnostics.EventLog.Log%2A> свойство. Необходимо связать <xref:System.Diagnostics.EventLog.Source%2A> свойство с ресурсом журнала событий, подключить его к определенному журналу событий. Это не обязательно указывать <xref:System.Diagnostics.EventLog.Source%2A> при чтении журнала, но источник событий должен быть связан с ресурсом журнала событий в реестре сервера. Можно указать только <xref:System.Diagnostics.EventLog.Log%2A> имя и <xref:System.Diagnostics.EventLog.MachineName%2A> (имя сервера) для его чтения.  
  
> [!NOTE]
>  Не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A> при подключении к журналу. Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (".») предполагается.  
  
 Если <xref:System.Diagnostics.EventLog.Source%2A> свойство не указано, вызов <xref:System.Diagnostics.EventLog.Log%2A> возвращает пустую строку, если <xref:System.Diagnostics.EventLog.Log%2A> не было задано явно (установив <xref:System.Diagnostics.EventLog.Log%2A> свойства, либо при помощи конструктора). Если <xref:System.Diagnostics.EventLog.Source%2A> был указан, <xref:System.Diagnostics.EventLog.Log%2A> возвращает имя журнала, для которой зарегистрирован этот источник.  
  
 Источник может быть зарегистрирован только один журнал одновременно. Если <xref:System.Diagnostics.EventLog.Source%2A> было задано для экземпляра класса <xref:System.Diagnostics.EventLog>, нельзя изменить <xref:System.Diagnostics.EventLog.Log%2A> , свойство <xref:System.Diagnostics.EventLog> без изменения значения <xref:System.Diagnostics.EventLog.Source%2A> или вызов <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> первого. При изменении <xref:System.Diagnostics.EventLog.Log%2A> свойство после <xref:System.Diagnostics.EventLog.Source%2A> свойство было задано, записи, запись в журнал исключение.  
  
 Журналы событий сохраняются операционной системой как файлы. При использовании <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventLog.CreateEventSource%2A> для создания нового журнала событий, связанный с ней файл хранится в каталоге %SystemRoot%\System32\Config на указанном компьютере. Имя файла задано путем добавления первые 8 символов <xref:System.Diagnostics.EventLog.Log%2A> свойств с расширением «.evt».  
  
 Не удается создать новый журнал с помощью <xref:System.Diagnostics.EventLog.Log%2A> свойство сама по себе (не указывая источник для журнала). Можно вызвать <xref:System.Diagnostics.EventLog.CreateEventSource%2A>, передав новое имя журнала в качестве параметра, а затем вызвать <xref:System.Diagnostics.EventLog.DeleteEventSource%2A>. Однако предполагается обычно либо создать (и запись) новые имена журналов определенных приложений, или для считывания из существующих журналов.  
  
 Если <xref:System.Diagnostics.EventLog.Log%2A> значение изменяется, закрытии журнала событий и освобождаются все дескрипторы событий.  
  
> [!CAUTION]
>  Если задать <xref:System.Diagnostics.EventLog.Log%2A> свойство имя журнала, который не существует, система присоединит <xref:System.Diagnostics.EventLog> в журнал приложений, но не предупреждение о том, что используется журнал, отличной от указанной.  
  
   
  
## Examples  
 В следующем примере считывается записи в журнал событий «NewEventLog» на локальном компьютере.  
  
 [!code-cpp[Classic EventLog.Log Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Log Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Log Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Log Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Log Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Log Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="T:System.Diagnostics.EventLogEntryCollection" />
      </Docs>
    </Member>
    <Member MemberName="LogDisplayName">
      <MemberSignature Language="C#" Value="public string LogDisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LogDisplayName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.LogDisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LogDisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ LogDisplayName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает понятное имя журнала событий.</summary>
        <value>Имя, представляющее журнал событий в "Просмотре событий".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  В Windows Vista и более поздних версиях пользователи не имеют разрешения на доступ к журналу безопасности. Если используется Windows Vista или более поздней версии, имени пользователя, вы получите <xref:System.Security.SecurityException> при попытке доступа к отображаемое имя для события в журнале безопасности.  
>   
>  В Windows Vista и более поздних версиях права доступа пользователя определяются контролем учетных записей. Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к журнал безопасности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, , щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.  
  
   
  
## Examples  
 В следующем примере перечисляются журналы событий, определенных на локальном компьютере и отображает <xref:System.Diagnostics.EventLog.LogDisplayName%2A> для каждого журнала событий.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Параметр <see cref="P:System.Diagnostics.EventLog.Log" /> отсутствует в реестре для этого компьютера.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <permission cref="T:System.Security.Permissions.RegistryPermission">для возможности чтения заданного раздела реестра. Связанное перечисление: <see cref="F:System.Security.Permissions.RegistryPermissionAccess.Read" /></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для раздела реестра указанного, если доступ к он является удаленным ключом. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)" />
      </Docs>
    </Member>
    <Member MemberName="LogNameFromSourceName">
      <MemberSignature Language="C#" Value="public static string LogNameFromSourceName (string source, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LogNameFromSourceName(string source, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.LogNameFromSourceName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LogNameFromSourceName (source As String, machineName As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ LogNameFromSourceName(System::String ^ source, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Имя источника событий.</param>
        <param name="machineName">Имя компьютера, на котором выполняется поиск, или значение ".", если используется локальный компьютер.</param>
        <summary>Возвращает имя журнала, в котором зарегистрирован указанный источник.</summary>
        <returns>Имя журнала, связанное с указанным источником в реестре.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Источник событий определяет, какие события в журнал. Часто бывает имя приложения или имя подкомпонента приложения, если приложение имеет большой. Приложения и службы должны запись в журнал приложения или пользовательский журнал. Драйверы устройств необходимо создавать в системном журнале.  
  
 При создании нового источника для записи в одном журнале одновременно, приложение регистрируется в журнале событий как источник записей. <xref:System.Diagnostics.EventLog.Source%2A> Свойство может быть любой строкой, но имя не может использоваться для других источников на компьютере. Сбой при создании дубликата <xref:System.Diagnostics.EventLog.Source%2A> значение приводит к возникновению исключения. Однако один журнал событий может иметь множества различных источников, запись в него.  
  
   
  
## Examples  
 В следующем примере удаляется источника с локального компьютера. Пример определяет журнала от источника, а затем удаляет журнал.  
  
> [!NOTE]
>  Более одного источника может записать в журнал событий. Перед удалением пользовательского журнала, убедитесь, что нет других источников, записи в журнал событий.  
  
 [!code-cpp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.DeleteEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.DeleteEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MachineName">
      <MemberSignature Language="C#" Value="public string MachineName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MachineName" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.MachineName" />
      <MemberSignature Language="VB.NET" Value="Public Property MachineName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ MachineName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(".")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("Name of the machine that this log get written to.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя компьютера, на котором производится чтение или запись событий.</summary>
        <value>Имя сервера, на котором находится журнал событий. Значение по умолчанию — локальный компьютер (".").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При записи в журнал событий, необходимо связать <xref:System.Diagnostics.EventLog.Source%2A> с объектом журнала событий подключить его к определенному журналу событий. Это не обязательно указывать <xref:System.Diagnostics.EventLog.Source%2A> свойства при чтении журнала. Можно указать только <xref:System.Diagnostics.EventLog.Log%2A> имя и <xref:System.Diagnostics.EventLog.MachineName%2A> (имя сервера).  
  
> [!NOTE]
>  Не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A> при подключении к журналу. Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (".») предполагается.  
  
 Источник может быть зарегистрирован только один журнал одновременно. Если <xref:System.Diagnostics.EventLog.Source%2A> было задано для экземпляра класса <xref:System.Diagnostics.EventLog>, нельзя изменить <xref:System.Diagnostics.EventLog.MachineName%2A> , свойство <xref:System.Diagnostics.EventLog> без изменения значения <xref:System.Diagnostics.EventLog.Source%2A> или вызов <xref:System.Diagnostics.EventLog.DeleteEventSource%2A> первого. При изменении <xref:System.Diagnostics.EventLog.MachineName%2A> свойства <xref:System.Diagnostics.EventLog> закрывает все дескрипторы и повторно подключается к журналу и источнику на новом компьютере.  
  
 <xref:System.Diagnostics.EventLog.MachineName%2A> Значение не может быть пустой строкой. Если оно не задано явно, по умолчанию на локальном компьютере (».»).  
  
   
  
## Examples  
 В следующем примере считывается записи в журнал событий «NewEventLog» на указанном компьютере.  
  
 [!code-cpp[Classic EventLog.MachineName Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.MachineName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.MachineName Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.MachineName Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.MachineName Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.MachineName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое имя компьютера.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Delete(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.GetEventLogs" />
      </Docs>
    </Member>
    <Member MemberName="MaximumKilobytes">
      <MemberSignature Language="C#" Value="public long MaximumKilobytes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaximumKilobytes" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.MaximumKilobytes" />
      <MemberSignature Language="VB.NET" Value="Public Property MaximumKilobytes As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaximumKilobytes { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или устанавливает максимальный размер журнала событий в килобайтах.</summary>
        <value>Максимальный размер журнала событий в килобайтах. Значение по умолчанию — 512, что означает максимальный размер файла 512 килобайт.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A> Свойство представляет ограничение на размер файла журнала событий. При достижении предельного размера, настроенного в журнал событий <xref:System.Diagnostics.EventLog.OverflowAction%2A> значение определяет новые записи игнорируются или ли новые записи перезаписать более старые записи.  
  
> [!NOTE]
>  Это свойство представляет параметр конфигурации для журнала событий, представленный этим экземпляром. Если журнала событий достигает максимального размера, это свойство указывает, каким образом операционная система обрабатывает новых записей, записанных всеми источниками событий, зарегистрированные в журнале событий.  
  
   
  
## Examples  
 Следующий пример создает журналы событий, определенных на локальном компьютере и отображает сведения о конфигурации для каждого журнала событий.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Указанное значение меньше 64 или больше 4194240 или не кратно 64.</exception>
        <exception cref="T:System.InvalidOperationException">Значение параметра <see cref="P:System.Diagnostics.EventLog.Log" /> является недопустимым именем журнала.  
  
 \- или -  
  
 Раздел реестра для журнала событий не может быть открыт на конечном компьютере.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.OverflowAction" />
        <altmember cref="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="MinimumRetentionDays">
      <MemberSignature Language="C#" Value="public int MinimumRetentionDays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MinimumRetentionDays" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.MinimumRetentionDays" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MinimumRetentionDays As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MinimumRetentionDays { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество дней, которое записи хранятся в журнале событий.</summary>
        <value>Количество дней, которое записи хранятся в журнале событий. Значение по умолчанию — 7.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> свойство, чтобы проверить текущее значение параметра для журнала событий. Используйте <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> изменение минимальное количество дней, которые должны храниться каждая запись в журнале событий.  
  
 <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> Значение зависит от поведения настроенных переполнения журнала событий. Если <xref:System.Diagnostics.OverflowAction> для журнала событий является свойство <xref:System.Diagnostics.OverflowAction.OverwriteAsNeeded>, то <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> значение равно 0. Если <xref:System.Diagnostics.OverflowAction> для журнала событий является свойство <xref:System.Diagnostics.OverflowAction.DoNotOverwrite>, то <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> значение-1. Если <xref:System.Diagnostics.OverflowAction> для журнала событий является свойство <xref:System.Diagnostics.OverflowAction.OverwriteOlder>, то <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> значение больше нуля и представляет количество дней для хранения записей в журнале событий при заполнении журнала событий.  
  
 Поведение при переполнении только в случае журнала событий достигает предельного размера. Когда <xref:System.Diagnostics.EventLog> имеет его <xref:System.Diagnostics.EventLog.OverflowAction%2A> значение <xref:System.Diagnostics.OverflowAction.OverwriteOlder>и журнал событий достигает максимального размера, а затем новые записи записываются только если они могут заменять операции, возраст которых превышает <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> период. Сохранение записи событий для минимальный срок подходит в том случае, если журнал событий регулярно архивируется. В противном случае вы рискуете потерять новые записи при журнала событий достигает предела. Чтобы избежать потери новые сведения о событии, задайте минимальное количество дней хранения событий по периодичность архивирования определенного журнала событий.  
  
   
  
## Examples  
 Следующий пример создает журналы событий, определенных на локальном компьютере и отображает сведения о конфигурации для каждого журнала событий.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.MaximumKilobytes" />
        <altmember cref="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
        <altmember cref="P:System.Diagnostics.EventLog.OverflowAction" />
      </Docs>
    </Member>
    <Member MemberName="ModifyOverflowPolicy">
      <MemberSignature Language="C#" Value="public void ModifyOverflowPolicy (System.Diagnostics.OverflowAction action, int retentionDays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ModifyOverflowPolicy(valuetype System.Diagnostics.OverflowAction action, int32 retentionDays) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ModifyOverflowPolicy (action As OverflowAction, retentionDays As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ModifyOverflowPolicy(System::Diagnostics::OverflowAction action, int retentionDays);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Diagnostics.OverflowAction" />
        <Parameter Name="retentionDays" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="action">Поведение при внесении новых записей в журнал событий в случае переполнения.</param>
        <param name="retentionDays">Минимальное количество дней, которое будет храниться каждая запись журнала событий. Этот параметр используется только в том случае, если значение <c>action</c> равно <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" />.</param>
        <summary>Изменяет поведение при внесении новых записей, когда файл журнала событий достигает максимального размера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поведение при переполнении журнала событий указывает, что произойдет, если новые записи будут записываться в журнал, который достигнут максимально допустимый размер.  
  
> [!NOTE]
>  Поведение при переполнении вступает в силу только в том случае, когда журнала событий достигает своего максимального размера файла. Поведение при переполнении не влияет на внесение новых записей в журнал, который может вместить дополнительные записи.  
  
 <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> Метод задает поведение при переполнении журнала событий. <xref:System.Diagnostics.EventLog> экземпляр. После вызова этого метода для журнала событий, определяемое <xref:System.Diagnostics.EventLog.Log%2A> свойства <xref:System.Diagnostics.EventLog.OverflowAction%2A> и <xref:System.Diagnostics.EventLog.MinimumRetentionDays%2A> значения свойств отражают поведение при переполнении настроенного.  
  
> [!NOTE]
>  Это свойство представляет параметр конфигурации для журнала событий, представленный этим экземпляром. Если журнала событий достигает максимального размера, это свойство указывает, каким образом операционная система обрабатывает новых записей, записанных всеми источниками событий, зарегистрированные в журнале событий.  
  
 Задать `action` параметр <xref:System.Diagnostics.OverflowAction.OverwriteAsNeeded> для указания, что новая запись перезаписывает самую старую запись при <xref:System.Diagnostics.EventLog> достигает максимального размера. Если `action` параметра равным <xref:System.Diagnostics.OverflowAction.OverwriteAsNeeded>, `retentionDays` значение параметра игнорируется.  
  
 Задать `action` параметр <xref:System.Diagnostics.OverflowAction.OverwriteOlder> для указания, что каждая новая запись перезаписывает более старые записи при <xref:System.Diagnostics.EventLog> достигает максимального размера. Укажите число дней, которые должны храниться в журнала с помощью `retentionDays` параметра. События, записанные в пределах диапазона хранения, новые записи не перезаписываются.  
  
 Задать `action` параметр <xref:System.Diagnostics.OverflowAction.DoNotOverwrite> отменить новые события при достижении максимального размера журнала. Если `action` параметра равным <xref:System.Diagnostics.OverflowAction.DoNotOverwrite>, `retentionDays` значение параметра игнорируется.  
  
> [!CAUTION]
>  Задание политики переполнения <xref:System.Diagnostics.OverflowAction.DoNotOverwrite> указывает, что новые записи не учитываются при заполнении журнала событий. При использовании этого параметра убедитесь в журнале событий регулярно архивировать и очищена, чтобы предупредить достижение максимального размера.  
  
   
  
## Examples  
 Следующий пример отображает Настройка политики переполнения для указанного журнала событий и позволяет пользователю выбрать новый параметр политики переполнения для журнала событий.  
  
 [!code-cpp[EventLogProperties#3](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#3)]
 [!code-csharp[EventLogProperties#3](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#3)]
 [!code-vb[EventLogProperties#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="action" /> не является допустимым значением <see cref="P:System.Diagnostics.EventLog.OverflowAction" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          Параметр <paramref name="retentionDays" /> меньше 1 или больше 365.</exception>
        <exception cref="T:System.InvalidOperationException">Значение параметра <see cref="P:System.Diagnostics.EventLog.Log" /> является недопустимым именем журнала.  
  
 \- или -  
  
 Раздел реестра для журнала событий не может быть открыт на конечном компьютере.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.OverflowAction" />
        <altmember cref="P:System.Diagnostics.EventLog.MaximumKilobytes" />
        <altmember cref="P:System.Diagnostics.EventLog.OverflowAction" />
        <altmember cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" />
      </Docs>
    </Member>
    <Member MemberName="OverflowAction">
      <MemberSignature Language="C#" Value="public System.Diagnostics.OverflowAction OverflowAction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Diagnostics.OverflowAction OverflowAction" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.OverflowAction" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OverflowAction As OverflowAction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Diagnostics::OverflowAction OverflowAction { System::Diagnostics::OverflowAction get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Diagnostics.OverflowAction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает поведение при переполнении для хранения новых записей, когда файл журнала событий достигает максимального размера.</summary>
        <value>Значение <see cref="T:System.Diagnostics.OverflowAction" />, которое определяет поведение при переполнении для хранения новых записей, когда файл журнала событий достигает максимального размера. Значение по умолчанию: <see cref="F:System.Diagnostics.OverflowAction.OverwriteOlder" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Журналы событий увеличивается как новые события записываются в них. Каждый журнал событий ограничен установленный предел; <xref:System.Diagnostics.EventLog.MaximumKilobytes%2A> свойство определяет максимальное число для размера файла журнала событий в килобайтах.  
  
 Используйте <xref:System.Diagnostics.EventLog.OverflowAction%2A> значение свойства проанализировать поведение настроенных переполнения максимальный размер журнала событий. Используйте <xref:System.Diagnostics.EventLog.ModifyOverflowPolicy%2A> метод, чтобы изменить поведение при переполнении журнала событий.  
  
> [!NOTE]
>  Поведение при переполнении вступает в силу только в том случае, когда журнала событий достигает своего максимального размера файла. Поведение при переполнении не влияет на внесение новых записей в журнал, который может вместить дополнительные записи.  
  
   
  
## Examples  
 Следующий пример создает журналы событий, определенных на локальном компьютере и отображает сведения о конфигурации для каждого журнала событий.  
  
 [!code-cpp[EventLogProperties#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLogProperties/CPP/source.cpp#2)]
 [!code-csharp[EventLogProperties#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLogProperties/CS/source.cs#2)]
 [!code-vb[EventLogProperties#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLogProperties/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="T:System.Diagnostics.OverflowAction" />
        <altmember cref="P:System.Diagnostics.EventLog.MaximumKilobytes" />
        <altmember cref="M:System.Diagnostics.EventLog.ModifyOverflowPolicy(System.Diagnostics.OverflowAction,System.Int32)" />
        <altmember cref="P:System.Diagnostics.EventLog.MinimumRetentionDays" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDisplayName">
      <MemberSignature Language="C#" Value="public void RegisterDisplayName (string resourceFile, long resourceId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterDisplayName(string resourceFile, int64 resourceId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.RegisterDisplayName(System.String,System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterDisplayName (resourceFile As String, resourceId As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterDisplayName(System::String ^ resourceFile, long resourceId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resourceFile" Type="System.String" />
        <Parameter Name="resourceId" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="resourceFile">Полный путь к локализованному файлу ресурсов.</param>
        <param name="resourceId">Идентификатор ресурса, который индексирует локализованную строку в файле ресурсов.</param>
        <summary>Определяет локализованное имя для журнала событий, которое отображается в "Просмотре событий" сервера.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Diagnostics.EventLog.RegisterDisplayName%2A> для регистрации и отображение локализованного имени в средстве просмотра событий для пользовательского журнала событий.  
  
 Указанный идентификатор ресурсов должен соответствовать локализованной строке, определенной в файле ресурсов. Средство просмотра событий отображается имя пользовательского журнала событий, используя локализованную строку и текущие параметры языка и региональных параметров. Например можно определить несколько имен журналов событий локализован для различных языков и региональных параметров в файле ресурсов. Средство просмотра событий отображается локализованная строка, соответствующая региональные параметры текущего пользователя.  
  
 Если средство просмотра событий не удается загрузить локализованную строку из файла ресурсов или если отображаемое имя не было зарегистрировано в журнале событий, средство просмотра событий отображается имя журнала событий, определенных в <xref:System.Diagnostics.EventLog.Log%2A>.  
  
> [!NOTE]
>  Необходимо зарегистрировать отображаемое имя для предопределенных журналов событий. Операционная система регистрирует локализованное отображаемое имя для журналов событий приложений, системы и безопасности.  
  
   
  
## Examples  
 В следующем примере определяется, является ли источник события с именем `SampleApplicationSource` зарегистрирован на локальном компьютере. Если источник событий не существует, в примере задает файле ресурсов сообщения для источника и создается новый источник событий. Наконец, пример задает локализованное отображаемое имя для журнала событий, используя значение идентификатора ресурса в `DisplayNameMsgId` и путь к файлу ресурсов в `messageFile`.  
  
 [!code-cpp[EventLog_WriteEvent#6](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#6)]
 [!code-csharp[EventLog_WriteEvent#6](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#6)]
 [!code-vb[EventLog_WriteEvent#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#6)]  
  
 В примере используется следующий текстовый файл сообщения, встроенный в библиотеку ресурсов EventLogMsgs.dll. Текстовый файл сообщения — источник, из которого создается файле ресурсов сообщения. В текстовом файле сообщения определяет идентификаторы ресурсов и текст категории, сообщение о событии и строки вставки параметров. В частности идентификатор ресурса 5001 определен для локализованного имени журнала событий.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Значение параметра <see cref="P:System.Diagnostics.EventLog.Log" /> является недопустимым именем журнала.  
  
 \- или -  
  
 Раздел реестра для журнала событий не может быть открыт на конечном компьютере.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="resourceFile" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для администрирования данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Administer" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.LogDisplayName" />
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public string Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Source" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.Source" />
      <MemberSignature Language="VB.NET" Value="Public Property Source As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Source { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.ReadOnly(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RecommendedAsConfigurable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("The application name that writes the log.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя источника, регистрируемого в журнале и используемого при записи в журнал событий.</summary>
        <value>Имя, регистрируемое в журнале событий как имя источника записей. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Источник событий определяет, какие события в журнал. Часто бывает имя приложения или имя подкомпонента приложения, если приложение имеет большой. Приложения и службы должны запись в журнал приложения или пользовательский журнал. Драйверы устройств необходимо создавать в системном журнале.  
  
 Необходимо указать источник событий при записи в журнал событий. Прежде чем вносить записи в журнал событий, необходимо зарегистрировать источник событий в журнале событий как источник событий. При записи в журнал событий система использует <xref:System.Diagnostics.EventLog.Source%2A> свойства поиска журнала, в котором нужно сделать запись. Если выполняется чтение журнала событий, можно указать <xref:System.Diagnostics.EventLog.Source%2A>, или <xref:System.Diagnostics.EventLog.Log%2A> и <xref:System.Diagnostics.EventLog.MachineName%2A>.  
  
> [!NOTE]
>  Не требуется указывать <xref:System.Diagnostics.EventLog.MachineName%2A> при подключении в журнал на локальном компьютере. Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A>, локальный компьютер (".») предполагается.  
  
 Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> и <xref:System.Diagnostics.EventLog.WriteEntry%2A> записи события в журнал событий. Необходимо указать источник события для записи событий; необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Можно создать источник событий журнала событий существующего или нового журнала событий. При создании нового источника для нового журнала событий система регистрирует источник для этого журнала, но журнал не создается, пока первая операция записи на него.  
  
 Источник должен быть уникальным на локальном компьютере. имя нового источника не должно совпадать с существующим именем источника или имя существующего журнала событий. Каждый источник можно написать только один журнал во время. Однако приложение может использовать несколько источников для записи нескольких журналов событий. Например приложению может потребоваться несколько источников, настроенных для различных журналов событий или различных файлов ресурсов.  
  
 При изменении <xref:System.Diagnostics.EventLog.Source%2A> значение <xref:System.Diagnostics.EventLog> для которого зарегистрирован он закрывается и освобождаются все дескрипторы событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
 Чтобы изменить сведения о конфигурации существующего источника, необходимо удалить источник и затем создать его с новой конфигурацией. Если другие приложения или компоненты используют существующий источник, создайте новый источник с обновленной конфигурации, а не удалить существующий источник.  
  
> [!NOTE]
>  Если необходимо отобразить в другом журнале источника уже сопоставлен в журнал, необходимо перезагрузить компьютер, чтобы изменения вступили в силу.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` , если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.Source Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Source Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Source Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Source Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Log" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SourceExists">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет поиск заданного источника событий в реестре компьютера.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SourceExists">
      <MemberSignature Language="C#" Value="public static bool SourceExists (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SourceExists(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SourceExists (source As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SourceExists(System::String ^ source);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Имя источника событий.</param>
        <summary>Определяет, зарегистрирован ли источник событий на локальном компьютере.</summary>
        <returns>
          Значение <see langword="true" />, если источник событий зарегистрирован на локальном компьютере; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы определить, существует ли источник событий на локальном компьютере. Если вы хотите определить, существует ли журнал на локальном компьютере, используйте <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
 Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на локальном компьютере. в противном случае <xref:System.Security.SecurityException> будет создано.  
  
> [!NOTE]
>  Чтобы найти источник событий в Windows Vista и более поздние версии или Windows Server 2003, требуются права администратора.  
>   
>  Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException> возникает исключение.  
>   
>  Начиная с Windows Vista привилегии пользователя определяются управления учетных записей (UAC). Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к счетчикам производительности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, , щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.  
  
> [!NOTE]
>  Служба, которая выполняется под <xref:System.ServiceProcess.ServiceAccount.LocalSystem> учетной записи нет необходимых прав для выполнения этого метода. Рекомендуется проверить, существует ли источник события в <xref:System.ServiceProcess.ServiceInstaller>, и если он не существует, для создания источника в программу установки.  
  
 Новый источник не могут иметь имя существующего источника на том же компьютере, используйте этот метод прежде чем вызывать <xref:System.Diagnostics.EventLog.CreateEventSource%2A> чтобы убедиться, что источник с именем, заданным `source` еще не существует на локальном компьютере. `source` Параметр не учитывается регистр знаков.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` , если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.Source Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.Source Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.Source Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.Source Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.Source Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <paramref name="source" /> не найден, но поиск некоторых или всех журналов событий не был произведен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
      </Docs>
    </Member>
    <Member MemberName="SourceExists">
      <MemberSignature Language="C#" Value="public static bool SourceExists (string source, string machineName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SourceExists(string source, string machineName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.SourceExists(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SourceExists (source As String, machineName As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SourceExists(System::String ^ source, System::String ^ machineName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoNotSupported("remote machine is not supported")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="machineName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Имя источника событий.</param>
        <param name="machineName">Имя компьютера, на котором выполняется поиск, или значение ".", если используется локальный компьютер.</param>
        <summary>Определяет, зарегистрирован ли источник событий на указанном компьютере.</summary>
        <returns>
          Значение <see langword="true" />, если источник событий зарегистрирован на заданном компьютере; в противном случае — значение <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод, чтобы определить, существует ли источник событий на компьютере, указанном `machineName` параметра. Если вы хотите определить, существует ли журнал на указанном компьютере, воспользуйтесь <xref:System.Diagnostics.EventLog.Exists%2A>.  
  
 Поскольку этот метод получает доступ к реестру, необходимо иметь необходимых разрешений для реестра на данном сервере; в противном случае <xref:System.Security.SecurityException> будет создано.  
  
> [!NOTE]
>  Чтобы найти источник событий в Windows Vista и более поздние версии или Windows Server 2003, требуются права администратора.  
>   
>  Это требование обусловлено тем, чтобы определить, является ли источник событий уникальный необходимо произвести поиск всех журналов событий, включая безопасность. Начиная с Windows Vista, пользователи не имеют разрешения на доступ к журналу безопасности; Таким образом <xref:System.Security.SecurityException> возникает исключение.  
>   
>  Начиная с Windows Vista привилегии пользователя определяются управления учетных записей (UAC). Члену встроенной группы "Администраторы" присваивается два маркера доступа на время выполнения: маркер доступа обычного пользователя и маркер доступа администратора. По умолчанию назначена роль обычного пользователя. Для выполнения кода, который обращается к счетчикам производительности, необходимо сначала повысить права доступа со стандартного пользователя до администратора. Это можно сделать при запуске приложения, , щелкнув значок приложения правой кнопкой мыши и указав, что приложение должно запускаться от имени администратора.  
  
> [!NOTE]
>  Служба, которая выполняется под <xref:System.ServiceProcess.ServiceAccount.LocalSystem> учетной записи нет необходимых прав для выполнения этого метода. Рекомендуется проверить, существует ли источник события в <xref:System.ServiceProcess.ServiceInstaller>, и если он не существует, для создания источника в программу установки.  
  
 Новый источник не могут иметь имя существующего источника на том же компьютере, используйте этот метод прежде чем вызывать <xref:System.Diagnostics.EventLog.CreateEventSource%2A> чтобы убедиться, что источник с именем, заданным `source` еще не существует на компьютере. `source` И `machineName` параметров регистр не учитывается.  
  
 <xref:System.Diagnostics.EventLog.SourceExists%2A> — `static` метод, его можно вызывать непосредственно для класса. Нет необходимости создавать экземпляр <xref:System.Diagnostics.EventLog> для вызова <xref:System.Diagnostics.EventLog.SourceExists%2A>.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` на компьютере `MyServer`и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.SourceExists1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.SourceExists1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Значение параметра <paramref name="machineName" /> не является допустимым именем компьютера.</exception>
        <exception cref="T:System.Security.SecurityException">
          <paramref name="source" /> не найден, но поиск некоторых или всех журналов событий не был произведен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.Exists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.MachineName" />
      </Docs>
    </Member>
    <Member MemberName="SynchronizingObject">
      <MemberSignature Language="C#" Value="public System.ComponentModel.ISynchronizeInvoke SynchronizingObject { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISynchronizeInvoke SynchronizingObject" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.EventLog.SynchronizingObject" />
      <MemberSignature Language="VB.NET" Value="Public Property SynchronizingObject As ISynchronizeInvoke" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::ISynchronizeInvoke ^ SynchronizingObject { System::ComponentModel::ISynchronizeInvoke ^ get(); void set(System::ComponentModel::ISynchronizeInvoke ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.MonitoringDescription("An object that synchronizes event handler calls.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISynchronizeInvoke</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает объект, используемый для маршалинга вызовов обработчика событий, возникающих в результате события записи в <see cref="T:System.Diagnostics.EventLog" />.</summary>
        <value>Объект <see cref="T:System.ComponentModel.ISynchronizeInvoke" />, используемый для маршалинга вызовов обработчика событий, возникающих в результате события записи <see cref="E:System.Diagnostics.EventLog.EntryWritten" /> в журнал событий.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> — `null`, методы, обрабатывающие <xref:System.Diagnostics.EventLog.EntryWritten> события вызываются в поток из пула потоков системы. Дополнительные сведения о системной группе потоков см. в разделе <xref:System.Threading.ThreadPool>.  
  
 Если <xref:System.Diagnostics.EventLog.EntryWritten> событие обрабатывается методом visual Windows Forms, компонент, например кнопку, обращение к компоненту через пул потоков системы могут не работать или может привести к возникновению исключения. Этого можно избежать, установив <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> в компонент Windows Forms, которое вызывает методы, обрабатывающие <xref:System.Diagnostics.EventLog.EntryWritten> событий для вызова в том же потоке, в котором был создан компонент.  
  
 Если <xref:System.Diagnostics.EventLog> используется внутри [!INCLUDE[vsprvslong](~/includes/vsprvslong-md.md)] в конструкторе Windows Forms, <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> автоматически устанавливается на элемент управления, содержащую <xref:System.Diagnostics.EventLog>. Например, если поместить <xref:System.Diagnostics.EventLog> в конструкторе Form1 (наследуется от класса <xref:System.Windows.Forms.Form>) <xref:System.Diagnostics.EventLog.SynchronizingObject%2A> свойство <xref:System.Diagnostics.EventLog> устанавливается на экземпляр Form1.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="E:System.Diagnostics.EventLog.EntryWritten" />
        <altmember cref="T:System.Threading.ThreadPool" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEntry">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вносит запись в журнал событий.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Строка для записи в журнал событий.</param>
        <summary>Вносит в журнал событий запись сведений с заданным текстом сообщения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для внесения записи в журнал событий, связанных с этим <xref:System.Diagnostics.EventLog> экземпляра. Если вы хотите указать другой <xref:System.Diagnostics.EventLogEntryType>, используйте другую перегрузку метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента до записи в журнал. Необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A> этого <xref:System.Diagnostics.EventLog> экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A> вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A> и регистрирует источник.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> для вашей <xref:System.Diagnostics.EventLog> экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A> или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локального компьютера («.») предполагается.  
  
 Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A> посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A> и <xref:System.Diagnostics.EventLog.Log%2A> не задано свойство на ваш <xref:System.Diagnostics.EventLog> экземпляра по умолчанию будет использоваться в журнал приложений.  
  
> [!NOTE]
>  Большинство исключений, перечисленных выше формируются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение сообщения (строка текста) может оказаться от ожидаемых, если на удаленном компьютере не запущена платформа .NET Framework.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` , если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.CreateEventSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.CreateEventSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <summary>Вносит в журнал событий следующие записи с заданным текстом сообщения: ошибка, предупреждение, сведения, аудит отказов или аудит успехов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для записи указанного <xref:System.Diagnostics.EventLogEntryType> в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента до записи в журнал. Необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A> этого <xref:System.Diagnostics.EventLog> экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A> вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A> и регистрирует источник.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> для вашей <xref:System.Diagnostics.EventLog> экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A> или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локального компьютера («.») предполагается.  
  
 Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A> посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A> и <xref:System.Diagnostics.EventLog.Log%2A> не задано свойство на ваш <xref:System.Diagnostics.EventLog> экземпляра по умолчанию будет использоваться в журнал приложений.  
  
> [!NOTE]
>  Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение сообщения (строка текста) может оказаться от ожидаемых, если на удаленном компьютере не запущена платформа .NET Framework.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 Следующий пример производит запись предупреждения в журнал событий «MyNewLog» на локальном компьютере.  
  
 [!code-cpp[Classic EventLog.WriteEntry2 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.WriteEntry2 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry2 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.WriteEntry2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="source">Источник, по которому приложение регистрируется на указанном компьютере.</param>
        <param name="message">Строка для записи в журнал событий.</param>
        <summary>Вносит в журнал событий запись сведений с заданным текстом сообщения, используя указанный зарегистрированный источник.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи сведений в журнал событий с использованием источника зарегистрированный источник событий соответствующего журнала. Если вы хотите указать другой <xref:System.Diagnostics.EventLogEntryType>, используйте другую перегрузку метода <xref:System.Diagnostics.EventLog.WriteEntry%2A>.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
>   
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
   
  
## Examples  
 В следующем примере создается источник `MySource` , если он еще не существует и вносит запись в журнал событий `MyNewLog`.  
  
 [!code-cpp[Classic EventLog.WriteEntry1 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.WriteEntry1 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry1 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.WriteEntry1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType, eventID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <param name="eventID">Идентификатор для события, зависящий от приложения.</param>
        <summary>Вносит в журнал событий запись с заданным текстом сообщения и идентификатором события, который определяется приложением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для записи с определяемые приложением `eventID` в журнал событий. `eventID` Вместе с источником для однозначного определения события. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
 Помимо идентификатор события, можно указать <xref:System.Diagnostics.EventLogEntryType> для событие записывается в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента до записи в журнал. Необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A> этого <xref:System.Diagnostics.EventLog> экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A> вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A> и регистрирует источник.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> для вашей <xref:System.Diagnostics.EventLog> экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A> или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локального компьютера («.») предполагается.  
  
 Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A> посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A> и <xref:System.Diagnostics.EventLog.Log%2A> не задано свойство на ваш <xref:System.Diagnostics.EventLog> экземпляра по умолчанию будет использоваться в журнал приложений.  
  
> [!NOTE]
>  Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение сообщения (строка текста) может оказаться от ожидаемых, если на удаленном компьютере не запущена платформа .NET Framework.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#3](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#3)]
 [!code-csharp[EventLog_WriteEntry_1_3#3](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#3)]
 [!code-vb[EventLog_WriteEntry_1_3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Параметр <paramref name="eventID" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
      </Parameters>
      <Docs>
        <param name="source">Источник, по которому приложение регистрируется на указанном компьютере.</param>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <summary>Вносит в журнал событий, используя указанный зарегистрированный источник, следующие записи с заданным текстом сообщения: ошибка, предупреждение, сведения, аудит отказов или аудит успехов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для записи указанного <xref:System.Diagnostics.EventLogEntryType> в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 Следующий пример производит запись предупреждения в журнал событий «MyNewLog» на локальном компьютере.  
  
 [!code-cpp[Classic EventLog.WriteEntry3 Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic EventLog.WriteEntry3 Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry3 Example/CS/source.cs#1)]
 [!code-vb[Classic EventLog.WriteEntry3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic EventLog.WriteEntry3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType, eventID As Integer, category As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <param name="eventID">Идентификатор для события, зависящий от приложения.</param>
        <param name="category">Подкатегория конкретного приложения, связанная с сообщением.</param>
        <summary>Вносит в журнал событий запись с заданным текстом сообщения, идентификатором события и категорией, которая определяется приложением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для записи с определяемые приложением `category` в журнал событий. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.  
  
> [!NOTE]
>  `category` Параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 отображается как 65,526, -1 как 65 535.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
 Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventSourceCreationData> класса.  
  
 В дополнение к категории можно указать идентификатор события событие записывается в журнал событий. Идентификаторы событий, а также источник события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.  
  
 Наконец, можно указать <xref:System.Diagnostics.EventLogEntryType> для событие записывается в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента до записи в журнал. Необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A> этого <xref:System.Diagnostics.EventLog> экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A> вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A> и регистрирует источник.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> для вашей <xref:System.Diagnostics.EventLog> экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A> или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локального компьютера («.») предполагается.  
  
 Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A> посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A> и <xref:System.Diagnostics.EventLog.Log%2A> не задано свойство на ваш <xref:System.Diagnostics.EventLog> экземпляра по умолчанию будет использоваться в журнал приложений.  
  
> [!NOTE]
>  Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение сообщения (строка текста) может оказаться от ожидаемых, если на удаленном компьютере не запущена платформа .NET Framework.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#3](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#3)]
 [!code-csharp[EventLog_WriteEntry_1_3#3](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#3)]
 [!code-vb[EventLog_WriteEntry_1_3#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Параметр <paramref name="eventID" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType, eventID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Источник, по которому приложение регистрируется на указанном компьютере.</param>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <param name="eventID">Идентификатор для события, зависящий от приложения.</param>
        <summary>Вносит в журнал событий запись с заданным текстом сообщения и идентификатором события (который определяется приложением), используя указанный зарегистрированный источник событий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для записи с определяемые приложением `eventID` в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. `eventID`, И источники для однозначного определения события. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий эти строки отображаются для пользователей, чтобы помочь пользователю понять, что пошло не так и какие действия предпринять.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
 Помимо идентификатор события этой перегрузке <xref:System.Diagnostics.EventLog.WriteEntry%2A> позволяет указать <xref:System.Diagnostics.EventLogEntryType> для событие записывается в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_4#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_4/CPP/eventlog_writeentry_4.cpp#1)]
 [!code-csharp[EventLog_WriteEntry_4#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_4/CS/eventlog_writeentry_4.cs#1)]
 [!code-vb[EventLog_WriteEntry_4#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_4/VB/eventlog_writeentry_4.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="eventID" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public void WriteEntry (string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEntry(string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category, unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEntry (message As String, type As EventLogEntryType, eventID As Integer, category As Short, rawData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEntry(System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category, cli::array &lt;System::Byte&gt; ^ rawData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <param name="eventID">Идентификатор для события, зависящий от приложения.</param>
        <param name="category">Подкатегория конкретного приложения, связанная с сообщением.</param>
        <param name="rawData">Массив байтов, в котором хранятся двоичные данные, связанные с записью.</param>
        <summary>Вносит в журнал событий запись с заданным текстом сообщения, идентификатором события и категорией (которые определяются приложением), а затем добавляет в сообщение двоичные данные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот перегруженный метод для записи определяемые приложением данные событий в журнал событий. Средство просмотра событий не интерпретировать эти данные; необработанные данные отображаются только в комбинированном шестнадцатеричном и текстовом формате. Используйте данные событий в меру, включая ее только в том случае, если вы уверены, что она окажется полезной для решения проблемы. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая журнала с последующим созданием записей, содержащих данные, связанные с конкретным событием.  
  
 Помимо двоичных данных можно указать категорию и идентификатор события. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.  
  
> [!NOTE]
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
> [!NOTE]
>  `category` Параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 отображается как 65,526, -1 как 65 535.  
  
 Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventSourceCreationData> класса.  
  
 Идентификаторы событий, а также источник события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.  
  
 Наконец, можно указать <xref:System.Diagnostics.EventLogEntryType> для событие записывается в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента до записи в журнал. Необходимо создать и настроить источник события перед внесением первой записи с источником.  
  
 Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Если источник, указанный в <xref:System.Diagnostics.EventLog.Source%2A> этого <xref:System.Diagnostics.EventLog> экземпляр не зарегистрирован на компьютере, на который осуществляется запись, <xref:System.Diagnostics.EventLog.WriteEntry%2A> вызовы <xref:System.Diagnostics.EventLog.CreateEventSource%2A> и регистрирует источник.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> для вашей <xref:System.Diagnostics.EventLog> экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.CreateEventSource%2A> или <xref:System.Diagnostics.EventLog.WriteEntry%2A>, локального компьютера («.») предполагается.  
  
 Если система должна зарегистрировать <xref:System.Diagnostics.EventLog.Source%2A> посредством вызова <xref:System.Diagnostics.EventLog.WriteEntry%2A> и <xref:System.Diagnostics.EventLog.Log%2A> не задано свойство на ваш <xref:System.Diagnostics.EventLog> экземпляра по умолчанию будет использоваться в журнал приложений.  
  
> [!NOTE]
>  Многие описанные выше исключения создаются ошибки, возникшие во время процесса регистрации <xref:System.Diagnostics.EventLog.Source%2A>.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение сообщения (строка текста) может оказаться от ожидаемых, если на удаленном компьютере не запущена платформа .NET Framework.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_5#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_5/CPP/eventlog_writeentry_5.cpp#1)]
 [!code-csharp[EventLog_WriteEntry_5#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_5/CS/eventlog_writeentry_5.cs#1)]
 [!code-vb[EventLog_WriteEntry_5#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_5/VB/eventlog_writeentry_5.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Параметр <paramref name="eventID" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType, eventID As Integer, category As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="source">Источник, по которому приложение регистрируется на указанном компьютере.</param>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <param name="eventID">Идентификатор для события, зависящий от приложения.</param>
        <param name="category">Подкатегория конкретного приложения, связанная с сообщением.</param>
        <summary>Вносит в журнал событий запись с заданным текстом сообщения и идентификатором события и категорией (которые определяется приложением), используя указанный зарегистрированный источник событий. С помощью <paramref name="category" /> осуществляется фильтрация событий журнала в компоненте "Просмотр событий".</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод используется для записи с определяемые приложением `category` в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.  
  
> [!NOTE]
>  `category` Параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 отображается как 65,526, -1 как 65 535.  
  
 Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventSourceCreationData> класса.  
  
 В дополнение к категории можно указать идентификатор события событие записывается в журнал событий. Идентификаторы событий, а также источник события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.  
  
 Наконец, можно указать <xref:System.Diagnostics.EventLogEntryType> для событие записывается в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
>   
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#1](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#1)]
 [!code-csharp[EventLog_WriteEntry_1_3#1](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#1)]
 [!code-vb[EventLog_WriteEntry_1_3#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="eventID" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <Member MemberName="WriteEntry">
      <MemberSignature Language="C#" Value="public static void WriteEntry (string source, string message, System.Diagnostics.EventLogEntryType type, int eventID, short category, byte[] rawData);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEntry(string source, string message, valuetype System.Diagnostics.EventLogEntryType type, int32 eventID, int16 category, unsigned int8[] rawData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEntry(System.String,System.String,System.Diagnostics.EventLogEntryType,System.Int32,System.Int16,System.Byte[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEntry (source As String, message As String, type As EventLogEntryType, eventID As Integer, category As Short, rawData As Byte())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEntry(System::String ^ source, System::String ^ message, System::Diagnostics::EventLogEntryType type, int eventID, short category, cli::array &lt;System::Byte&gt; ^ rawData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="type" Type="System.Diagnostics.EventLogEntryType" />
        <Parameter Name="eventID" Type="System.Int32" />
        <Parameter Name="category" Type="System.Int16" />
        <Parameter Name="rawData" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="source">Источник, по которому приложение регистрируется на указанном компьютере.</param>
        <param name="message">Строка для записи в журнал событий.</param>
        <param name="type">Одно из значений перечисления <see cref="T:System.Diagnostics.EventLogEntryType" />.</param>
        <param name="eventID">Идентификатор для события, зависящий от приложения.</param>
        <param name="category">Подкатегория конкретного приложения, связанная с сообщением.</param>
        <param name="rawData">Массив байтов, в котором хранятся двоичные данные, связанные с записью.</param>
        <summary>Вносит в журнал событий запись с заданным текстом сообщения, идентификатором события и категорией (которые определяются приложением), используя указанный зарегистрированный источник событий, а затем добавляет в сообщение двоичные данные.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала определяемые приложением данные событий. Средство просмотра событий не интерпретировать эти данные; необработанные данные отображаются только в комбинированном шестнадцатеричном и текстовом формате. Использовать данные событий, минимально. Включите только в том случае, если вы уверены, что она окажется полезной. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая журнала с последующим созданием записей, содержащих данные, связанные с конкретным событием.  
  
 Помимо двоичных данных можно указать категорию и идентификатор события. Средство просмотра событий использует категории для фильтрации событий, записанных источником события. Категория может отображаться в средстве просмотра событий в виде числового значения или его можно использовать категорию как идентификатор ресурсов для отображения локализованной строки категории.  
  
> [!NOTE]
>  `category` Параметр должен иметь положительное значение. Отрицательные значения категории отображаются как дополнительные положительные числа событий средства просмотра. Например 10 будет отображаться как 65,526, -1 как 65 535.  
  
 Для отображения локализованных строк категории в средстве просмотра событий, необходимо использовать источник событий настройки с файлом ресурсов категории и `category` идентификатор ресурса в файле ресурсов категории. Если источник событий не имеет настроенный файл ресурсов категории, или указанный `category` не индексирует строку в файле ресурсов категории, то средство просмотра событий отображается числовое значение категории для этой записи. Настройка файла ресурсов категории, вместе с количеством строк категорий в файле ресурсов с помощью <xref:System.Diagnostics.EventLogInstaller> или <xref:System.Diagnostics.EventSourceCreationData> класса.  
  
 Идентификаторы событий, вместе с источником события, однозначно определяют событие. Каждое приложение можно определить собственные нумерованные события, а также описание строки, сопоставленные с ними. При просмотре событий отображаются эти строковые значения, чтобы помочь пользователю определить, что пошло не так и какие действия предпринять.  
  
 Наконец, можно указать <xref:System.Diagnostics.EventLogEntryType> для событие записывается в журнал событий. `type` Обозначается значок и текст в столбце типа в средстве просмотра событий для журнала. Этот параметр указывает, является ли тип события ошибку, предупреждение, сведения, аудит успехов или аудит отказов.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. <xref:System.Diagnostics.EventLog.WriteEntry%2A> Метод записывает заданную строку непосредственно в журнал событий; он не использует файл ресурсов локализуемых сообщений. Используйте <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи событий с помощью локализованного файла ресурсов сообщений.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  Если `message` параметр содержит символ NUL, заканчивается на символе NUL сообщения в журнале событий.  
>   
>  `message` Строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
   
  
## Examples  
 [!code-cpp[EventLog_WriteEntry_1_3#2](~/samples/snippets/cpp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CPP/eventlog_writeentry_1_3.cpp#2)]
 [!code-csharp[EventLog_WriteEntry_1_3#2](~/samples/snippets/csharp/VS_Snippets_CLR/EventLog_WriteEntry_1_3/CS/eventlog_writeentry_1_3.cs#2)]
 [!code-vb[EventLog_WriteEntry_1_3#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/EventLog_WriteEntry_1_3/VB/eventlog_writeentry_1_3.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="eventID" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 Строка сообщения превышает 31,839 байт (32,766 байт в операционных системах Windows до Windows Vista).  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
          <paramref name="type" /> не является допустимым <see cref="T:System.Diagnostics.EventLogEntryType" />.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="T:System.Diagnostics.EventLogEntryType" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="M:System.Diagnostics.EventLog.DeleteEventSource(System.String)" />
        <altmember cref="M:System.Diagnostics.EventLog.SourceExists(System.String)" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteEvent">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вносит записи локализованных событий в журнал событий.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public void WriteEvent (System.Diagnostics.EventInstance instance, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEvent(class System.Diagnostics.EventInstance instance, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEvent (instance As EventInstance, ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEvent(System::Diagnostics::EventInstance ^ instance, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">Экземпляр <see cref="T:System.Diagnostics.EventInstance" />, который представляет локализованную запись журнала событий.</param>
        <param name="values">Массив строк для слияния в текстовое сообщение записи журнала событий.</param>
        <summary>Вносит локализованные записи в журнал событий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи локализованные записи в журнал событий. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий использует идентификаторы ресурсов для отображения соответствующих строк из локализованного файла ресурсов для <xref:System.Diagnostics.EventLog.Source%2A>. Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.  
  
 Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A> из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения. При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A> и <xref:System.Diagnostics.EventInstance.EntryType%2A> из `instance` входных данных для определения категории и события типа записи событий. Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>. Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A> метод, если приложение записывает значения строк напрямую в журнал событий.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение `message` строка не может быть непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework. Кроме того `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
   
  
## Examples  
 Следующий пример записывает двух элементов в журнал событий аудита `myNewLog`. В примере создается новый источник событий и новый журнал событий, если они не существуют на локальном компьютере. Текст сообщения события задается с помощью идентификатора ресурса в файле ресурсов.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 В примере используется следующий текстовый файл сообщения, встроенный в библиотеку ресурсов EventLogMsgs.dll. Текстовый файл сообщения — источник, из которого создается файле ресурсов сообщения. В текстовом файле сообщения определяет идентификаторы ресурсов и текст категории, сообщение о событии и строки вставки параметров.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Параметр <paramref name="instance.InstanceId" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 <paramref name="values" /> содержит более 256 элементов.  
  
 \- или -  
  
 Один из элементов <paramref name="values" /> длиннее 32766 байт.  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public void WriteEvent (System.Diagnostics.EventInstance instance, byte[] data, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteEvent(class System.Diagnostics.EventInstance instance, unsigned int8[] data, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.Diagnostics.EventInstance,System.Byte[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteEvent (instance As EventInstance, data As Byte(), ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteEvent(System::Diagnostics::EventInstance ^ instance, cli::array &lt;System::Byte&gt; ^ data, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">Экземпляр <see cref="T:System.Diagnostics.EventInstance" />, который представляет локализованную запись журнала событий.</param>
        <param name="data">Массив байтов, в котором хранятся двоичные данные, связанные с записью.</param>
        <param name="values">Массив строк для слияния в текстовое сообщение записи журнала событий.</param>
        <summary>Заносит записи журнала событий с данными события, строками замещения сообщения и связанными двоичными данными.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи в журнал событий локализованные записи с дополнительными данными конкретного события. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий использует идентификаторы ресурсов для отображения соответствующих строк из локализованного файла ресурсов для <xref:System.Diagnostics.EventLog.Source%2A>. Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.  
  
 Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A> из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения. При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A> и <xref:System.Diagnostics.EventInstance.EntryType%2A> из `instance` входных данных для определения категории и события типа записи событий. Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.  
  
 Определите двоичные данные с событием, если необходимо предоставить дополнительные данные для события. Например, использовать `data` параметр, чтобы включить сведения о конкретной ошибке. Средство просмотра событий не интерпретирует данные соответствующего события; данные отображаются в комбинированном шестнадцатеричном и текстовом формате. Использовать данные событий, минимально. Включите только в том случае, если вы уверены, что она окажется полезной. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая проверяет журнал событий и создает отчеты, содержащие данные, связанные с конкретным событием.  
  
 Необходимо задать <xref:System.Diagnostics.EventLog.Source%2A> свойство вашей <xref:System.Diagnostics.EventLog> компонента перед компонентом перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>. Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
> [!NOTE]
>  Если вы не укажете <xref:System.Diagnostics.EventLog.MachineName%2A> для вашей <xref:System.Diagnostics.EventLog> экземпляра перед вызовом метода <xref:System.Diagnostics.EventLog.WriteEvent%2A>, локального компьютера («.») предполагается.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A> метод, если приложение записывает значения строк напрямую в журнал событий.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
> [!NOTE]
>  При добавлении записи к удаленному компьютеру, значение `message` строка не может быть непредвиденным, если на удаленном компьютере не запущена платформа .NET Framework. Кроме того `message` строка не может содержать %*n*, где *n* является целым значением (например, %1), так как средство просмотра событий воспринимает его как строки вставки. Поскольку протокол Интернета версии 6 (IPv6) адрес может содержать это последовательность символов, не может зарегистрироваться сообщение о событии, содержащий адрес IPv6.  
  
   
  
## Examples  
 Следующий пример записывает двух элементов в журнал событий аудита `myNewLog`. В примере создается новый источник событий и новый журнал событий, если они не существуют на локальном компьютере. Текст сообщения события задается с помощью идентификатора ресурса в файле ресурсов.  
  
 [!code-cpp[EventLog_WriteEvent#7](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#7)]
 [!code-csharp[EventLog_WriteEvent#7](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#7)]
 [!code-vb[EventLog_WriteEvent#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#7)]  
  
 В примере используется следующий текстовый файл сообщения, встроенный в библиотеку ресурсов EventLogMsgs.dll. Текстовый файл сообщения — источник, из которого создается файле ресурсов сообщения. В текстовом файле сообщения определяет идентификаторы ресурсов и текст категории, сообщение о событии и строки вставки параметров.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Не задано свойство <see cref="P:System.Diagnostics.EventLog.Source" /> класса <see cref="T:System.Diagnostics.EventLog" />.  
  
 - или -  
  
 Метод пытается зарегистрировать новый источник событий, но имя компьютера в <see cref="P:System.Diagnostics.EventLog.MachineName" /> является недопустимым.  
  
 \- или -  
  
 Источник уже зарегистрирован для различных журналов событий.  
  
 \- или -  
  
 Параметр <paramref name="instance.InstanceId" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 <paramref name="values" /> содержит более 256 элементов.  
  
 \- или -  
  
 Один из элементов <paramref name="values" /> длиннее 32766 байт.  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEvent(string source, class System.Diagnostics.EventInstance instance, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEvent (source As String, instance As EventInstance, ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEvent(System::String ^ source, System::Diagnostics::EventInstance ^ instance, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">Имя источника событий, зарегистрированного для приложения на заданном компьютере.</param>
        <param name="instance">Экземпляр <see cref="T:System.Diagnostics.EventInstance" />, который представляет локализованную запись журнала событий.</param>
        <param name="values">Массив строк для слияния в текстовое сообщение записи журнала событий.</param>
        <summary>Вносит в журнал событий запись с заданными данными сообщения и строками замещения сообщения, используя указанный зарегистрированный источник событий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи локализованные записи в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий использует идентификаторы ресурсов для отображения соответствующих строк из файла локализованного ресурса для источника. Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.  
  
 Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A> из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения. При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A> и <xref:System.Diagnostics.EventInstance.EntryType%2A> из `instance` входных данных для определения категории и события типа записи событий. Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.  
  
 Указанный источник должен быть зарегистрирован для журнала событий перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>. Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A> метод, если приложение записывает значения строк напрямую в журнал событий.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
   
  
## Examples  
 Следующий пример записывает информационного события и запись события предупреждения в существующий журнал событий. Текст сообщения события задается с помощью идентификатора ресурса в файле ресурсов. В примере предполагается, что соответствующий файл ресурсов зарегистрирован для источника.  
  
 [!code-cpp[EventLog_WriteEvent#8](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#8)]
 [!code-csharp[EventLog_WriteEvent#8](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#8)]
 [!code-vb[EventLog_WriteEvent#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#8)]  
  
 В примере используется следующий текстовый файл сообщения, встроенный в библиотеку ресурсов EventLogMsgs.dll. Текстовый файл сообщения — источник, из которого создается файле ресурсов сообщения. В текстовом файле сообщения определяет идентификаторы ресурсов и текст категории, сообщение о событии и строки вставки параметров.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="instance.InstanceId" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 <paramref name="values" /> содержит более 256 элементов.  
  
 \- или -  
  
 Один из элементов <paramref name="values" /> длиннее 32766 байт.  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public static void WriteEvent (string source, System.Diagnostics.EventInstance instance, byte[] data, params object[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void WriteEvent(string source, class System.Diagnostics.EventInstance instance, unsigned int8[] data, object[] values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.EventLog.WriteEvent(System.String,System.Diagnostics.EventInstance,System.Byte[],System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub WriteEvent (source As String, instance As EventInstance, data As Byte(), ParamArray values As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void WriteEvent(System::String ^ source, System::Diagnostics::EventInstance ^ instance, cli::array &lt;System::Byte&gt; ^ data, ... cli::array &lt;System::Object ^&gt; ^ values);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="instance" Type="System.Diagnostics.EventInstance" />
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="values" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">Имя источника событий, зарегистрированного для приложения на заданном компьютере.</param>
        <param name="instance">Экземпляр <see cref="T:System.Diagnostics.EventInstance" />, который представляет локализованную запись журнала событий.</param>
        <param name="data">Массив байтов, в котором хранятся двоичные данные, связанные с записью.</param>
        <param name="values">Массив строк для слияния в текстовое сообщение записи журнала событий.</param>
        <summary>Вносит в журнал событий запись с заданными данными сообщения, строками замещения сообщения и связанными двоичными данными, используя указанный зарегистрированный источник событий.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи в журнал событий, используя в качестве источника зарегистрированный источник событий соответствующего журнала локализованные записи с дополнительными данными конкретного события. Для определения свойств событий с идентификаторами вместо строковых значений. Средство просмотра событий использует идентификаторы ресурсов для отображения соответствующих строк из файла локализованного ресурса для источника. Перед тем как записывать события с использованием идентификаторов ресурсов, необходимо зарегистрировать источник в соответствующем файле ресурсов.  
  
 Входные данные `instance` экземпляр указывает сообщение события и свойства. Задать <xref:System.Diagnostics.EventInstance.InstanceId%2A> из `instance` входных данных для определенного сообщения в исходном файле ресурсов сообщения. При необходимости можно задать <xref:System.Diagnostics.EventInstance.CategoryId%2A> и <xref:System.Diagnostics.EventInstance.EntryType%2A> из `instance` входных данных для определения категории и события типа записи событий. Можно также указать массив строк зависит от языка программирования для вставки в текст локализованного сообщения. Задать `values` для `null` Если сообщение об ошибке не содержит местозаполнители для строки замены.  
  
 Определите двоичные данные с событием, если необходимо предоставить дополнительные данные для события. Например, использовать `data` параметр, чтобы включить сведения о конкретной ошибке. Средство просмотра событий не интерпретирует данные соответствующего события; данные отображаются в комбинированном шестнадцатеричном и текстовом формате. Использовать данные событий, минимально. Включите только в том случае, если вы уверены, что она окажется полезной. Данные событий можно также использовать для хранения сведений, которые можно обработать независимо от средства просмотра событий. Например можно написать средство просмотра событий, или написать программу, которая проверяет журнал событий и создает отчеты, содержащие данные, связанные с конкретным событием.  
  
 Указанный источник должен быть зарегистрирован для журнала событий перед использованием <xref:System.Diagnostics.EventLog.WriteEvent%2A>. Указанный источник должен быть настроен для записи локализованных записей в журнал событий. источник должен как минимум иметь определенный файл ресурсов сообщения.  
  
 Необходимо создать и настроить источник события перед внесением первой записи с источником. Создайте новый источник событий во время установки приложения. Это позволяет время для операционной системы обновить свой список зарегистрированных источников событий и их конфигурации. Если операционная система не обновлялись свой список источников событий и предпринимается попытка записать событие с новым источником, операция записи окончится неудачей. Можно настроить с помощью нового источника <xref:System.Diagnostics.EventLogInstaller>, или с помощью <xref:System.Diagnostics.EventLog.CreateEventSource%2A> метод. Необходимо иметь права администратора на компьютере, чтобы создать новый источник событий.  
  
 Источник должен быть настроен для записи локализованных или исходных строк. Используйте <xref:System.Diagnostics.EventLog.WriteEntry%2A> метод, если приложение записывает значения строк напрямую в журнал событий.  
  
 Если приложение записывает операции, используя идентификаторы ресурсов и строковые значения, необходимо зарегистрировать два отдельных источника. Например, настройте один источник с файлами ресурсов и затем использовать этот источник в <xref:System.Diagnostics.EventLog.WriteEvent%2A> метод для записи с использованием идентификаторов ресурсов, в журнал событий. Затем создайте другой источник без файлы ресурсов и воспользуйтесь им в <xref:System.Diagnostics.EventLog.WriteEntry%2A> метода для записи строки журнала событий, с помощью этого источника.  
  
   
  
## Examples  
 Следующий пример записывает информационного события и запись события предупреждения в существующий журнал событий. Текст сообщения события задается с помощью идентификатора ресурса в файле ресурсов. В примере предполагается, что соответствующий файл ресурсов зарегистрирован для источника.  
  
 [!code-cpp[EventLog_WriteEvent#8](~/samples/snippets/cpp/VS_Snippets_CLR/eventlog_WriteEvent/CPP/source.cpp#8)]
 [!code-csharp[EventLog_WriteEvent#8](~/samples/snippets/csharp/VS_Snippets_CLR/eventlog_WriteEvent/CS/source.cs#8)]
 [!code-vb[EventLog_WriteEvent#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/eventlog_WriteEvent/VB/source.vb#8)]  
  
 В примере используется следующий текстовый файл сообщения, встроенный в библиотеку ресурсов EventLogMsgs.dll. Текстовый файл сообщения — источник, из которого создается файле ресурсов сообщения. В текстовом файле сообщения определяет идентификаторы ресурсов и текст категории, сообщение о событии и строки вставки параметров.  
  
```  
; // EventLogMsgs.mc  
; // ********************************************************  
  
; // Use the following commands to build this file:  
  
; //   mc -s EventLogMsgs.mc  
; //   rc EventLogMsgs.rc  
; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   
; // ********************************************************  
  
; // - Event categories -  
; // Categories must be numbered consecutively starting at 1.  
; // ********************************************************  
  
MessageId=0x1  
Severity=Success  
SymbolicName=INSTALL_CATEGORY  
Language=English  
Installation  
.  
  
MessageId=0x2  
Severity=Success  
SymbolicName=QUERY_CATEGORY  
Language=English  
Database Query  
.  
  
MessageId=0x3  
Severity=Success  
SymbolicName=REFRESH_CATEGORY  
Language=English  
Data Refresh  
.  
  
; // - Event messages -  
; // *********************************  
  
MessageId = 1000  
Severity = Success  
Facility = Application  
SymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  
Language=English  
My application message text, in English, for message id 1000, called from %1.  
.  
  
MessageId = 1001  
Severity = Warning  
Facility = Application  
SymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  
Language=English  
My application message text, in English, for message id 1001, called from %1.  
.  
  
MessageId = 1002  
Severity = Success  
Facility = Application  
SymbolicName = GENERIC_INFO_MESSAGE_ID_1002  
Language=English  
My generic information message in English, for message id 1002.  
.  
  
MessageId = 1003  
Severity = Warning  
Facility = Application  
SymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  
Language=English  
My generic warning message in English, for message id 1003, called from %1.  
.  
  
MessageId = 1004  
Severity = Success  
Facility = Application  
SymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  
Language=English  
The update cycle is complete for %%5002.  
.  
  
MessageId = 1005  
Severity = Warning  
Facility = Application  
SymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  
Language=English  
The refresh operation did not complete because the connection to server %1 could not be established.  
.  
  
; // - Event log display name -  
; // ********************************************************  
  
MessageId = 5001  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  
Language=English  
Sample Event Log  
.  
  
; // - Event message parameters -  
; //   Language independent insertion strings  
; // ********************************************************  
  
MessageId = 5002  
Severity = Success  
Facility = Application  
SymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  
Language=English  
SVC_UPDATE.EXE  
.  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значением <paramref name="source" /> является пустая строка ("").  
  
 \- или -  
  
 Значение <paramref name="source" /> равно <see langword="null" />.  
  
 \- или -  
  
 Параметр <paramref name="instance.InstanceId" /> меньше нуля или больше <see cref="F:System.UInt16.MaxValue" />.  
  
 \- или -  
  
 <paramref name="values" /> содержит более 256 элементов.  
  
 \- или -  
  
 Один из элементов <paramref name="values" /> длиннее 32766 байт.  
  
 \- или -  
  
 При таком имени источника длина пути к разделу реестра превышает 254 символа.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="instance" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Не удается открыть раздел реестра для журнала событий.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Операционная система сообщила об ошибке при записи сведений о событии в журнал событий. Код ошибки Windows недоступен.</exception>
        <permission cref="T:System.Diagnostics.EventLogPermission">для записи данных журнала событий на компьютере. Связанное перечисление: <see cref="F:System.Diagnostics.EventLogPermissionAccess.Write" /></permission>
        <altmember cref="Overload:System.Diagnostics.EventLog.CreateEventSource" />
        <altmember cref="P:System.Diagnostics.EventLog.Source" />
        <altmember cref="P:System.Diagnostics.EventLog.Entries" />
        <altmember cref="T:System.Diagnostics.EventInstance" />
      </Docs>
    </Member>
  </Members>
</Type>