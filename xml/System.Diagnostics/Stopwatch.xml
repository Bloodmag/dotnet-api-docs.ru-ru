<Type Name="Stopwatch" FullName="System.Diagnostics.Stopwatch">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3c035670b6a5acf3a4bb5bd86c113e7784448fdd" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30399628" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Stopwatch" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Stopwatch extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Diagnostics.Stopwatch" />
  <TypeSignature Language="VB.NET" Value="Public Class Stopwatch" />
  <TypeSignature Language="C++ CLI" Value="public ref class Stopwatch" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет набор методов и свойств, которые можно использовать для точного измерения затраченного времени.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Diagnostics.Stopwatch> экземпляра можно измерять затраченное время для одного интервала или общее время, затраченное на несколько интервалов. В типичном <xref:System.Diagnostics.Stopwatch> вызывать сценарии <xref:System.Diagnostics.Stopwatch.Start%2A> метода, в конечном итоге вызывать <xref:System.Diagnostics.Stopwatch.Stop%2A> метода, а затем проверьте затраченное время с помощью <xref:System.Diagnostics.Stopwatch.Elapsed%2A> свойство.  
  
 Объект <xref:System.Diagnostics.Stopwatch> экземпляр запущенного или остановленного; используйте <xref:System.Diagnostics.Stopwatch.IsRunning%2A> для определения текущего состояния <xref:System.Diagnostics.Stopwatch>. Используйте <xref:System.Diagnostics.Stopwatch.Start%2A> чтобы начать измерение затраченного времени; используйте <xref:System.Diagnostics.Stopwatch.Stop%2A> остановить измерение затраченного времени. Значение времени в окне свойств запроса <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, или <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A>. Вы можете запрашивать свойства затраченного времени, пока экземпляр запущенной или остановленной. Хотя свойства стабильно росли истекшее время <xref:System.Diagnostics.Stopwatch> — запуск; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение времени <xref:System.Diagnostics.Stopwatch> экземпляр равняется сумме всех интервалов измерения времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает счет с совокупное затраченное время; каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервала и закрепляет совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> метод, чтобы удалить совокупное затраченное время в существующем <xref:System.Diagnostics.Stopwatch> экземпляра.  
  
 <xref:System.Diagnostics.Stopwatch> Измеряет затраченное время с помощью подсчета тактов таймера в базового механизма таймера. Если установленное оборудование и операционная система поддерживает счетчика производительности высокого разрешения, то <xref:System.Diagnostics.Stopwatch> класс использует этот счетчик для измерения затраченного времени. В противном случае <xref:System.Diagnostics.Stopwatch> класс использует системный таймер для измерения затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Frequency> и <xref:System.Diagnostics.Stopwatch.IsHighResolution> поля, чтобы определить точность и способы их устранения <xref:System.Diagnostics.Stopwatch> реализацию времени.  
  
 <xref:System.Diagnostics.Stopwatch> Класс полезен для управления счетчики производительности связана со временем в управляемом коде. В частности <xref:System.Diagnostics.Stopwatch.Frequency> поля и <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> метод может использоваться вместо неуправляемого API-интерфейсов Win32 `QueryPerformanceFrequency` и `QueryPerformanceCounter`.  
  
> [!NOTE]
>  На многопроцессорном компьютере он не имеет значения, на каком процессоре выполняется поток. Однако из-за ошибок в BIOS или слой абстрагирования оборудования (HAL), можно получить различные результаты расчета времени на разных процессорах. Чтобы задать соответствие процессоров для потока, используйте <xref:System.Diagnostics.ProcessThread.ProcessorAffinity%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.Diagnostics.Stopwatch> класс, чтобы определить время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 В следующем примере показано использование <xref:System.Diagnostics.Stopwatch> класса для вычисления данных о производительности.  
  
 [!code-cpp[StopWatchPerfSample#1](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#1)]
 [!code-csharp[StopWatchPerfSample#1](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#1)]
 [!code-vb[StopWatchPerfSample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.TimeSpan" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Stopwatch ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Stopwatch();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращенный <xref:System.Diagnostics.Stopwatch> экземпляр остановлен, а свойство затраченного времени экземпляра равно нулю.  
  
 Используйте <xref:System.Diagnostics.Stopwatch.Start%2A> метод, чтобы начать измерение затраченного времени с новым <xref:System.Diagnostics.Stopwatch> экземпляра. Используйте <xref:System.Diagnostics.Stopwatch.StartNew%2A> метод для инициализации нового <xref:System.Diagnostics.Stopwatch> экземпляра и немедленно начать.  
  
   
  
## Examples  
 В следующем примере инициализируется <xref:System.Diagnostics.Stopwatch> экземпляра с помощью простого класса конструктора.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
      </Docs>
    </Member>
    <Member MemberName="Elapsed">
      <MemberSignature Language="C#" Value="public TimeSpan Elapsed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan Elapsed" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.Elapsed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elapsed As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan Elapsed { TimeSpan get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время, измеренное текущим экземпляром.</summary>
        <value>Доступный только для чтения объект <see cref="T:System.TimeSpan" />, который представляет общее затраченное время, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном <xref:System.Diagnostics.Stopwatch> вызывать сценарии <xref:System.Diagnostics.Stopwatch.Start%2A> метода, в конечном итоге вызывать <xref:System.Diagnostics.Stopwatch.Stop%2A> метода, а затем проверьте затраченное время с помощью <xref:System.Diagnostics.Stopwatch.Elapsed%2A> свойство.  
  
 Используйте <xref:System.Diagnostics.Stopwatch.Elapsed%2A> значение свойства, чтобы получить время, прошедшее с помощью <xref:System.TimeSpan> методы и свойства. Например, можно отформатировать возвращенный <xref:System.TimeSpan> в текстовое представление экземпляра или передайте его в другой класс, который требует <xref:System.TimeSpan> параметра.  
  
 Вы можете запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> при <xref:System.Diagnostics.Stopwatch> экземпляр запущенной или остановленной. Хотя свойства стабильно росли истекшее время <xref:System.Diagnostics.Stopwatch> — запуск; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение времени <xref:System.Diagnostics.Stopwatch> экземпляр равняется сумме всех интервалов измерения времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает счет с совокупное затраченное время; каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервала и закрепляет совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> метод, чтобы удалить совокупное затраченное время в существующем <xref:System.Diagnostics.Stopwatch> экземпляра.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.Diagnostics.Stopwatch.Elapsed%2A> свойства, чтобы определить время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedMilliseconds">
      <MemberSignature Language="C#" Value="public long ElapsedMilliseconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedMilliseconds" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedMilliseconds As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedMilliseconds { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время в миллисекундах, измеренное текущим экземпляром.</summary>
        <value>Доступное только для чтения длинное целое число, представляющее общее число миллисекунд, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство представляет время округляется вниз до ближайшего целого значения в миллисекундах. Выше измерения точности, используйте <xref:System.Diagnostics.Stopwatch.Elapsed%2A> или <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> свойства.  
  
 Вы можете запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> при <xref:System.Diagnostics.Stopwatch> экземпляр запущенной или остановленной. Хотя свойства стабильно росли истекшее время <xref:System.Diagnostics.Stopwatch> — запуск; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение времени <xref:System.Diagnostics.Stopwatch> экземпляр равняется сумме всех интервалов измерения времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает счет с совокупное затраченное время; каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервала и закрепляет совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> метод, чтобы удалить совокупное затраченное время в существующем <xref:System.Diagnostics.Stopwatch> экземпляра.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Diagnostics.Stopwatch> класса для измерения производительности четырех различных реализаций синтаксического анализа целое число от строки. Данный пример кода является частью большего примера, приведенного для <xref:System.Diagnostics.Stopwatch> класса.  
  
 [!code-cpp[StopWatchPerfSample#3](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#3)]
 [!code-csharp[StopWatchPerfSample#3](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#3)]
 [!code-vb[StopWatchPerfSample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      </Docs>
    </Member>
    <Member MemberName="ElapsedTicks">
      <MemberSignature Language="C#" Value="public long ElapsedTicks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 ElapsedTicks" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.ElapsedTicks" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ElapsedTicks As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long ElapsedTicks { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее затраченное время в тактах таймера, измеренное текущим экземпляром.</summary>
        <value>Доступное только для чтения длинное целое число, представляющее общее число тактов таймера, измеренное текущим экземпляром.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство представляет число истекших тактов базового механизма таймера. — Это наименьшая единица времени, <xref:System.Diagnostics.Stopwatch> можно оценить таймера. Используйте <xref:System.Diagnostics.Stopwatch.Frequency> поля для преобразования <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> значение в секундах.  
  
 Вы можете запрашивать свойства <xref:System.Diagnostics.Stopwatch.Elapsed%2A>, <xref:System.Diagnostics.Stopwatch.ElapsedMilliseconds%2A>, и <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> при <xref:System.Diagnostics.Stopwatch> экземпляр запущенной или остановленной. Хотя свойства стабильно росли истекшее время <xref:System.Diagnostics.Stopwatch> — запуск; они остаются постоянными при остановке экземпляра.  
  
 По умолчанию значение времени <xref:System.Diagnostics.Stopwatch> экземпляр равняется сумме всех интервалов измерения времени. Каждый вызов <xref:System.Diagnostics.Stopwatch.Start%2A> начинает счет с совокупное затраченное время; каждый вызов <xref:System.Diagnostics.Stopwatch.Stop%2A> завершает текущее измерение интервала и закрепляет совокупное значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> метод, чтобы удалить совокупное затраченное время в существующем <xref:System.Diagnostics.Stopwatch> экземпляра.  
  
> [!NOTE]
>  <xref:System.Diagnostics.Stopwatch> тактов отличаются от <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType>. Каждое деление в <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> значение представляет один интервал 100 нс. Каждое деление в <xref:System.Diagnostics.Stopwatch.ElapsedTicks%2A> значение представляет интервал времени, равно 1 секунде, разделенное на <xref:System.Diagnostics.Stopwatch.Frequency>.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Diagnostics.Stopwatch> класса для измерения производительности четырех различных реализаций синтаксического анализа целое число от строки. Данный пример кода является частью большего примера, приведенного для <xref:System.Diagnostics.Stopwatch> класса.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Diagnostics.Stopwatch.Elapsed" />
        <altmember cref="P:System.Diagnostics.Stopwatch.ElapsedMilliseconds" />
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public static readonly long Frequency;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly int64 Frequency" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.Frequency" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Frequency As Long " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly long Frequency;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает частоту таймера в виде количества тактов в секунду. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Частота таймера указывает точность и разрешение таймера. Например частота таймера 2 миллиона тактов в секунду равна разрешению 500 наносекунд в один такт. Другими словами одна секунда равна 1 миллиард, частота таймера 2 миллиона тактов в секунду соответствует 2 миллиона тактов в 1 миллиарду наносекунд, которые могут быть еще более упрощено 1 такт наносекунд.  
  
 <xref:System.Diagnostics.Stopwatch.Frequency> Значение зависит от разрешения базового механизма времени. Если установленное оборудование и операционная система поддерживает счетчика производительности высокого разрешения, то <xref:System.Diagnostics.Stopwatch.Frequency> значение отражает частоту этого счетчика. В противном случае <xref:System.Diagnostics.Stopwatch.Frequency> значение зависит от частоты таймера системы.  
  
 Поскольку <xref:System.Diagnostics.Stopwatch> частота зависит от того, установленном оборудовании и операционной системы, <xref:System.Diagnostics.Stopwatch.Frequency> значение остается постоянным во время работы системы.  
  
   
  
## Examples  
 В следующем примере отображается частота и способы их устранения <xref:System.Diagnostics.Stopwatch> таймера. Данный пример кода является частью большего примера, приведенного для <xref:System.Diagnostics.Stopwatch> класса.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="GetTimestamp">
      <MemberSignature Language="C#" Value="public static long GetTimestamp ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 GetTimestamp() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.GetTimestamp" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetTimestamp () As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static long GetTimestamp();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает текущее число тактов временного механизма.</summary>
        <returns>Длинное целое число со знаком, представляющее значение счетчика тактов базового механизма таймера.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Diagnostics.Stopwatch> класс с помощью счетчика производительности высокого разрешения, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> возвращает текущее значение этого счетчика. Если <xref:System.Diagnostics.Stopwatch> класс использует системный таймер, <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> возвращает текущий <xref:System.DateTime.Ticks%2A?displayProperty=nameWithType> свойство <xref:System.DateTime.Now%2A?displayProperty=nameWithType> экземпляра.  
  
   
  
## Examples  
 Следующий пример иллюстрирует использование <xref:System.Diagnostics.Stopwatch.GetTimestamp%2A> метод для обновления счетчиков производительности.  
  
 [!code-cpp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/cpp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CPP/elapsedtime.cpp#2)]
 [!code-csharp[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/csharp/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/CS/elapsedtime.cs#2)]
 [!code-vb[PerformanceCounterType.ElapsedTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/PerformanceCounterType.ElapsedTime/VB/elapsedtime.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      </Docs>
    </Member>
    <Member MemberName="IsHighResolution">
      <MemberSignature Language="C#" Value="public static readonly bool IsHighResolution;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly bool IsHighResolution" />
      <MemberSignature Language="DocId" Value="F:System.Diagnostics.Stopwatch.IsHighResolution" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsHighResolution As Boolean " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly bool IsHighResolution;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, зависит ли таймер от счетчика производительности высокого разрешения. Это поле доступно только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Таймер, используемые <xref:System.Diagnostics.Stopwatch> класс зависит от оборудования системы и операционной системы. <xref:System.Diagnostics.Stopwatch.IsHighResolution> — `true` Если <xref:System.Diagnostics.Stopwatch> таймер от счетчика производительности высокого разрешения. В противном случае <xref:System.Diagnostics.Stopwatch.IsHighResolution> — `false`, что означает, что <xref:System.Diagnostics.Stopwatch> таймера зависит от системного таймера.  
  
   
  
## Examples  
 В следующем примере отображается частота и способы их устранения <xref:System.Diagnostics.Stopwatch> таймера. Данный пример кода является частью большего примера, приведенного для <xref:System.Diagnostics.Stopwatch> класса.  
  
 [!code-cpp[StopWatchPerfSample#2](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#2)]
 [!code-csharp[StopWatchPerfSample#2](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#2)]
 [!code-vb[StopWatchPerfSample#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="F:System.Diagnostics.Stopwatch.Frequency" />
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Diagnostics.Stopwatch.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, запущен ли таймер <see cref="T:System.Diagnostics.Stopwatch" />.</summary>
        <value>
          Значение <see langword="true" />, если экземпляр <see cref="T:System.Diagnostics.Stopwatch" /> в настоящее время выполняется и измеряет затраченное время интервала; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Diagnostics.Stopwatch> экземпляр начинается выполнение с помощью вызова <xref:System.Diagnostics.Stopwatch.Start%2A> или <xref:System.Diagnostics.Stopwatch.StartNew%2A>. Выполнение останавливается экземпляр с помощью вызова <xref:System.Diagnostics.Stopwatch.Stop%2A> или <xref:System.Diagnostics.Stopwatch.Reset%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение интервала времени и обнуляет затраченное время.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Diagnostics.Stopwatch> экземпляр вычисляет и сохраняет совокупное затраченное время на несколько временных интервалов до перезапуска экземпляра. Используйте <xref:System.Diagnostics.Stopwatch.Stop%2A> остановить измерение текущего интервала времени и сохранить значение совокупное затраченное время. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> для остановки любое измерение интервала выполняется и очистите значение затраченного времени.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Restart();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение интервала времени, обнуляет затраченное время и начинает измерение затраченного времени.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Diagnostics.Stopwatch> экземпляр вычисляет и сохраняет совокупное затраченное время на несколько временных интервалов до сброса или перезапуска экземпляра. Используйте <xref:System.Diagnostics.Stopwatch.Stop%2A> остановить измерение текущего интервала времени и сохранить значение совокупное затраченное время. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> для остановки любое измерение интервала выполняется и очистите значение затраченного времени. Используйте <xref:System.Diagnostics.Stopwatch.Restart%2A> в новое измерение интервал запуска или остановки текущего интервала измерения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Запускает или возобновляет измерение затраченного времени для интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном <xref:System.Diagnostics.Stopwatch> вызывать сценарии <xref:System.Diagnostics.Stopwatch.Start%2A> метода, в конечном итоге вызывать <xref:System.Diagnostics.Stopwatch.Stop%2A> метода, а затем проверьте затраченное время с помощью <xref:System.Diagnostics.Stopwatch.Elapsed%2A> свойство.  
  
 После запуска <xref:System.Diagnostics.Stopwatch> таймера измеряет текущий интервал в истекших тактах таймера, пока не будет остановлена или сбросить экземпляр. Запуск <xref:System.Diagnostics.Stopwatch> , уже запущен не изменит состояние таймера и сброс свойств затраченного времени.  
  
 Когда <xref:System.Diagnostics.Stopwatch> экземпляр измеряет более чем одного интервала <xref:System.Diagnostics.Stopwatch.Start%2A> метод возобновляет измерение времени от текущего значения времени. Объект <xref:System.Diagnostics.Stopwatch> экземпляр вычисляет и сохраняет совокупное затраченное время на несколько временных интервалов до перезапуска экземпляра. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> метод перед вызовом метода <xref:System.Diagnostics.Stopwatch.Start%2A> снимите совокупное время, затраченное на <xref:System.Diagnostics.Stopwatch> экземпляра. Используйте <xref:System.Diagnostics.Stopwatch.Restart%2A> метод <xref:System.Diagnostics.Stopwatch.Reset%2A> и <xref:System.Diagnostics.Stopwatch.Start%2A> <xref:System.Diagnostics.Stopwatch> с помощью одной команды.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.Diagnostics.Stopwatch.Start%2A> метода для запуска таймера, который измеряет время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="StartNew">
      <MemberSignature Language="C#" Value="public static System.Diagnostics.Stopwatch StartNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Diagnostics.Stopwatch StartNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.StartNew" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function StartNew () As Stopwatch" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Diagnostics::Stopwatch ^ StartNew();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Diagnostics.Stopwatch</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Diagnostics.Stopwatch" />, задает свойство затраченного времени равным нулю и запускает измерение затраченного времени.</summary>
        <returns>Экземпляр <see cref="T:System.Diagnostics.Stopwatch" />, который только что начал измерять затраченное время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод аналогичен вызову <xref:System.Diagnostics.Stopwatch> конструктор и затем вызвать <xref:System.Diagnostics.Stopwatch.Start%2A> на новом экземпляре.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Diagnostics.Stopwatch> класса для измерения производительности четырех различных реализаций синтаксического анализа целое число от строки. Данный пример кода является частью большего примера, приведенного для <xref:System.Diagnostics.Stopwatch> класса.  
  
 [!code-cpp[StopWatchPerfSample#4](~/samples/snippets/cpp/VS_Snippets_CLR/StopWatchPerfSample/CPP/source.cpp#4)]
 [!code-csharp[StopWatchPerfSample#4](~/samples/snippets/csharp/VS_Snippets_CLR/StopWatchPerfSample/CS/source.cs#4)]
 [!code-vb[StopWatchPerfSample#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/StopWatchPerfSample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Stop" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Diagnostics.Stopwatch.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Останавливает измерение затраченного времени для интервала.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В типичном <xref:System.Diagnostics.Stopwatch> вызывать сценарии <xref:System.Diagnostics.Stopwatch.Start%2A> метода, в конечном итоге вызывать <xref:System.Diagnostics.Stopwatch.Stop%2A> метода, а затем проверьте затраченное время с помощью <xref:System.Diagnostics.Stopwatch.Elapsed%2A> свойство.  
  
 <xref:System.Diagnostics.Stopwatch.Stop%2A> Метод завершает текущее измерение интервала времени. Остановка <xref:System.Diagnostics.Stopwatch> , не запущен не изменит состояние таймера и сбросить свойства затраченного времени.  
  
 Когда <xref:System.Diagnostics.Stopwatch> экземпляр измеряет более чем одного интервала <xref:System.Diagnostics.Stopwatch.Stop%2A> метод эквивалентен методу Приостановка измерение затраченного времени. В последующем вызове <xref:System.Diagnostics.Stopwatch.Start%2A> возобновляет измерение времени от текущего значения времени. Используйте <xref:System.Diagnostics.Stopwatch.Reset%2A> метод, чтобы удалить совокупное время, затраченное на <xref:System.Diagnostics.Stopwatch> экземпляра.  
  
   
  
## Examples  
 В следующем примере демонстрируется использование <xref:System.Diagnostics.Stopwatch.Stop%2A> метод, чтобы остановить таймер, который измеряет время выполнения приложения.  
  
 [!code-csharp[System.Diagnostics.Stopwatch#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/CS/source.cs#1)]
 [!code-vb[System.Diagnostics.Stopwatch#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Diagnostics.Stopwatch/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Diagnostics.Stopwatch.StartNew" />
        <altmember cref="P:System.Diagnostics.Stopwatch.IsRunning" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Start" />
        <altmember cref="M:System.Diagnostics.Stopwatch.Reset" />
      </Docs>
    </Member>
  </Members>
</Type>