<Type Name="Font" FullName="System.Drawing.Font">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="71f6dfb728a4ff8e3675a178340a5096df561f76" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ru-RU" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30410618" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Font : MarshalByRefObject, ICloneable, IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Font extends System.MarshalByRefObject implements class System.ICloneable, class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Font" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Font&#xA;Inherits MarshalByRefObject&#xA;Implements ICloneable, IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Font sealed : MarshalByRefObject, ICloneable, IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет конкретный формат текста, включая начертание шрифта, его размер и атрибуты стиля. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения о том, как создавать шрифты см. в разделе [как: шрифтов и их семейств создания](~/docs/framework/winforms/advanced/how-to-construct-font-families-and-fonts.md). Приложения Windows Forms поддерживают шрифты TrueType и обеспечивают ограниченную поддержку шрифтов OpenType. Если вы пытаетесь использовать шрифт, который не поддерживается, или этот шрифт не установлен на компьютере, на котором выполняется приложение, будет подставлено шрифт Microsoft Sans Serif.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, и <xref:System.Drawing.Font.Unit%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащий <xref:System.Windows.Forms.ComboBox> с именем `ComboBox1` заполняется со строками «Больше» и «Меньше» и <xref:System.Windows.Forms.Label> с именем `Label1`. Вставьте следующий код в форму и свяжите `ComboBox1_SelectedIndexChanged` метод с <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> событие <xref:System.Windows.Forms.ComboBox> элемента управления.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, использующий заданный существующий шрифт <see cref="T:System.Drawing.Font" /> и перечисление <see cref="T:System.Drawing.FontStyle" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.Font prototype, System.Drawing.FontStyle newStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Font prototype, valuetype System.Drawing.FontStyle newStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.Font,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (prototype As Font, newStyle As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::Font ^ prototype, System::Drawing::FontStyle newStyle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="prototype" Type="System.Drawing.Font" />
        <Parameter Name="newStyle" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="prototype">Существующий шрифт <see cref="T:System.Drawing.Font" />, на основе которого будет создан новый шрифт <see cref="T:System.Drawing.Font" />.</param>
        <param name="newStyle">Стиль <see cref="T:System.Drawing.FontStyle" />, применяемый к новому шрифту <see cref="T:System.Drawing.Font" /> Можно объединить несколько значений перечисления <see cref="T:System.Drawing.FontStyle" /> с помощью оператора <see langword="OR" />.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, использующий заданный существующий шрифт <see cref="T:System.Drawing.Font" /> и перечисление <see cref="T:System.Drawing.FontStyle" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для локализованных приложений, основанных на [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] и более ранних версий, задание шрифта для `prototype` при этом шрифт не был установлен на компьютере, который используется для построения приложения приведет к Microsoft Sans Serif шрифта для использования Вместо этого. Если ваше приложение зависит от этого поведения и необходимо выполнить повторную компиляцию приложения для .NET Framework 3.0, необходимо указать шрифт Microsoft Sans Serif `prototype`.  
  
   
  
## Examples  
 В следующем примере кода показано <xref:System.Drawing.Color.op_Inequality%2A> оператор, <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Bold%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащую кнопку с именем `Button2`. Вставьте следующий код в форму и свяжите `Button2_Click` метод с помощью кнопки <xref:System.Windows.Forms.Control.Click> событий.  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="family">Семейство шрифтов <see cref="T:System.Drawing.FontFamily" /> нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Ширина самой широкой буквы нового шрифта (в пунктах).</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Полученный шрифту его <xref:System.Drawing.Font.Style%2A> свойство <xref:System.Drawing.FontStyle.Regular> и его <xref:System.Drawing.Font.Unit%2A> свойство <xref:System.Drawing.GraphicsUnit.Point>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="familyName">Строковое представление семейства шрифтов <see cref="T:System.Drawing.FontFamily" /> для нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Ширина самой широкой буквы нового шрифта (в пунктах).</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Полученный шрифту его <xref:System.Drawing.Font.Style%2A> свойство <xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType> и его <xref:System.Drawing.Font.Unit%2A> свойство <xref:System.Drawing.GraphicsUnit.Point?displayProperty=nameWithType>. Приложения Windows Forms поддерживают шрифты TrueType и обеспечивают ограниченную поддержку шрифтов OpenType. Если `familyName` параметр указывает, будут заменены шрифт, который не установлен на компьютере, работающим с приложением или не поддерживается Microsoft Sans Serif.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор. Этот пример предназначен для использования с формы Windows Forms и требует <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> событий.  
  
 [!code-csharp[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Misc3/CS/Form1.cs#constructfontwithstring)]
 [!code-vb[System.Drawing.Misc3#ConstructFontWithString](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Misc3/VB/Form1.vb#constructfontwithstring)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="family">Семейство шрифтов <see cref="T:System.Drawing.FontFamily" /> нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Ширина самой широкой буквы нового шрифта (в пунктах).</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер и стиль.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Полученный шрифту его <xref:System.Drawing.Font.Unit%2A> свойство <xref:System.Drawing.GraphicsUnit.Point>.  
  
   
  
## Examples  
 В следующем примере кода показано, как задать <xref:System.Drawing.Font> кнопки на новый, bold стиль <xref:System.Drawing.Font>. Этот пример предназначен для использования с Windows Form, содержащую кнопку с именем `Button1`. Вставьте следующий код в форму и свяжите `Button1_Click` метод с помощью кнопки <xref:System.Windows.Forms.Control.Click> событий.  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="family" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">Семейство шрифтов <see cref="T:System.Drawing.FontFamily" /> нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер и единицу измерения. Устанавливает в качестве стиля <see cref="F:System.Drawing.FontStyle.Regular" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Полученный шрифту его <xref:System.Drawing.Font.Style%2A> свойство <xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="family" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
      </Parameters>
      <Docs>
        <param name="familyName">Строковое представление семейства шрифтов <see cref="T:System.Drawing.FontFamily" /> для нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Ширина самой широкой буквы нового шрифта (в пунктах).</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер и стиль.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Полученный шрифту его <xref:System.Drawing.Font.Unit%2A> свойство <xref:System.Drawing.GraphicsUnit.Point>. Приложения Windows Forms поддерживают шрифты TrueType и обеспечивают ограниченную поддержку шрифтов OpenType. Если `familyName` параметр указывает, будут заменены шрифт, который не установлен на компьютере, работающим с приложением или не поддерживается Microsoft Sans Serif.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">Строковое представление семейства шрифтов <see cref="T:System.Drawing.FontFamily" /> для нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер и единицу измерения. В качестве стиля устанавливается <see cref="F:System.Drawing.FontStyle.Regular" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Полученный шрифту его <xref:System.Drawing.Font.Style%2A> свойство <xref:System.Drawing.FontStyle.Regular?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="family">Семейство шрифтов <see cref="T:System.Drawing.FontFamily" /> нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер, стиль и единицу измерения.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="family" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
      </Parameters>
      <Docs>
        <param name="familyName">Строковое представление семейства шрифтов <see cref="T:System.Drawing.FontFamily" /> для нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя указанный размер, стиль и единицу измерения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложения Windows Forms поддерживают шрифты TrueType и обеспечивают ограниченную поддержку шрифтов OpenType. Если `familyName` параметр указывает, будут заменены шрифт, который не установлен на компьютере, работающим с приложением или не поддерживается Microsoft Sans Serif.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор. Этот пример предназначен для использования с Windows Forms. Чтобы выполнить этот пример, вставьте этот код в форму, содержащую кнопку с именем `Button2`и свяжите `Button2_Click` метод с <xref:System.Windows.Forms.Control.Click> события кнопки.  
  
 [!code-cpp[System.Drawing.FontsExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#3)]
 [!code-csharp[System.Drawing.FontsExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.FontsExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="family">Семейство шрифтов <see cref="T:System.Drawing.FontFamily" /> нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <param name="gdiCharSet">Объект <see cref="T:System.Byte" />, определяющий  
  
 набор знаков [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)], используемый для нового шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя заданный размер, стиль, единицу измерения и кодировку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Извлекает значение из списка, определенного в файле заголовков Windows SDK WinGDI.h.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="family" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="familyName">Строковое представление семейства шрифтов <see cref="T:System.Drawing.FontFamily" /> для нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <param name="gdiCharSet">Объект <see cref="T:System.Byte" />, определяющий кодировку [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] для данного шрифта.</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя заданный размер, стиль, единицу измерения и кодировку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Извлекает значение из списка, определенного в файле заголовков Windows SDK WinGDI.h. Приложения Windows Forms поддерживают шрифты TrueType и обеспечивают ограниченную поддержку шрифтов OpenType. Если `familyName` параметр указывает, будут заменены шрифт, который не установлен на компьютере, работающим с приложением или не поддерживается Microsoft Sans Serif.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (System.Drawing.FontFamily family, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.FontFamily family, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.Drawing.FontFamily,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (family As FontFamily, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::Drawing::FontFamily ^ family, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Drawing.FontFamily" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="family">Семейство шрифтов <see cref="T:System.Drawing.FontFamily" /> нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <param name="gdiCharSet">Объект <see cref="T:System.Byte" />, определяющий  
  
 кодировку [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)], используемую для этого шрифта.</param>
        <param name="gdiVerticalFont">Логическое значение, указывающее на то, является ли новый шрифт производным от вертикального шрифта [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)].</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя заданный размер, стиль, единицу измерения и кодировку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Извлекает значение из списка, определенного в файле заголовков Windows SDK WinGDI.h.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="family" /> равно <see langword="null" /></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Font (string familyName, float emSize, System.Drawing.FontStyle style, System.Drawing.GraphicsUnit unit, byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string familyName, float32 emSize, valuetype System.Drawing.FontStyle style, valuetype System.Drawing.GraphicsUnit unit, unsigned int8 gdiCharSet, bool gdiVerticalFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.#ctor(System.String,System.Single,System.Drawing.FontStyle,System.Drawing.GraphicsUnit,System.Byte,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (familyName As String, emSize As Single, style As FontStyle, unit As GraphicsUnit, gdiCharSet As Byte, gdiVerticalFont As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Font(System::String ^ familyName, float emSize, System::Drawing::FontStyle style, System::Drawing::GraphicsUnit unit, System::Byte gdiCharSet, bool gdiVerticalFont);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
        <Parameter Name="emSize" Type="System.Single" />
        <Parameter Name="style" Type="System.Drawing.FontStyle" />
        <Parameter Name="unit" Type="System.Drawing.GraphicsUnit" />
        <Parameter Name="gdiCharSet" Type="System.Byte" />
        <Parameter Name="gdiVerticalFont" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="familyName">Строковое представление семейства шрифтов <see cref="T:System.Drawing.FontFamily" /> для нового шрифта <see cref="T:System.Drawing.Font" />.</param>
        <param name="emSize">Размер кегельной шпации нового шрифта в единицах, заданных параметром <c>unit</c>.</param>
        <param name="style">Стиль <see cref="T:System.Drawing.FontStyle" /> нового шрифта.</param>
        <param name="unit">Стиль <see cref="T:System.Drawing.GraphicsUnit" /> нового шрифта.</param>
        <param name="gdiCharSet">Объект <see cref="T:System.Byte" />, определяющий кодировку [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] для данного шрифта.</param>
        <param name="gdiVerticalFont">Логическое значение, указывающее, является ли новый шрифт <see cref="T:System.Drawing.Font" /> производным от вертикального шрифта [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)].</param>
        <summary>Инициализирует новый шрифт <see cref="T:System.Drawing.Font" />, используя заданный размер, стиль, единицу измерения и кодировку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `gdiCharSet` Извлекает значение из списка, определенного в файле заголовков Windows SDK WinGDI.h. Если `familyName` параметр указывает, будут заменены шрифт, который не установлен на компьютере, работающим с приложением или не поддерживается Microsoft Sans Serif.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="emSize" /> меньше или равен нулю 0, равняется бесконечности или не является допустимым числом.</exception>
        <altmember cref="P:System.Drawing.Font.GdiCharSet" />
      </Docs>
    </Member>
    <Member MemberName="Bold">
      <MemberSignature Language="C#" Value="public bool Bold { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Bold" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Bold" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bold As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Bold { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, является ли этот шрифт <see cref="T:System.Drawing.Font" /> полужирным.</summary>
        <value>
          Значение <see langword="false" />, если этот шрифт <see langword="true" /> является полужирным; в противном случае — значение <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано <xref:System.Drawing.Color.op_Inequality%2A> оператор, <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Bold%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащую кнопку с именем `Button2`. Вставьте следующий код в форму и свяжите `Button2_Click` метод с помощью кнопки <xref:System.Windows.Forms.Control.Click> событий.  
  
 [!code-cpp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.CharacterRangeExample#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/CS/form1.cs#3)]
 [!code-vb[System.Drawing.CharacterRangeExample#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CharacterRangeExample/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Clone();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает точную копию данного объекта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Шрифт <see cref="T:System.Drawing.Font" />, создаваемый данным методом, приводится к типу <see cref="T:System.Object" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код копирует <xref:System.Drawing.Font> и выводит текст с помощью данного шрифта.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.ClassicFontsExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые этим объектом <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Drawing.Font.Dispose%2A> позволяет ресурсы, используемые <xref:System.Drawing.Font> перераспределить для других целей.  
  
 Вызовите метод <xref:System.Drawing.Font.Dispose%2A> по окончании использования класса <xref:System.Drawing.Font>. Метод <xref:System.Drawing.Font.Dispose%2A> оставляет класс <xref:System.Drawing.Font> в непригодном для использования состоянии. После вызова метода <xref:System.Drawing.Font.Dispose%2A>, необходимо освободить все ссылки на <xref:System.Drawing.Font> , сборщик мусора мог освободить память, <xref:System.Drawing.Font> занимаемую. Дополнительные сведения см. в разделе [очистки неуправляемых ресурсов](~/docs/standard/garbage-collection/unmanaged.md) и [метода](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Всегда вызывайте метод <xref:System.Drawing.Font.Dispose%2A> перед освобождением последней ссылки на класс <xref:System.Drawing.Font>. В противном случае используемые им ресурсы не будут освобождены до тех пор, пока сборщик мусора не вызовет для объекта <xref:System.Drawing.Font> метод `Finalize`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для тестирования.</param>
        <summary>Показывает, является ли указанный объект шрифтом <see cref="T:System.Drawing.Font" />, и имеют ли его свойства <see cref="P:System.Drawing.Font.FontFamily" />, <see cref="P:System.Drawing.Font.GdiVerticalFont" />, <see cref="P:System.Drawing.Font.GdiCharSet" />, <see cref="P:System.Drawing.Font.Style" />, <see cref="P:System.Drawing.Font.Size" /> и <see cref="P:System.Drawing.Font.Unit" /> те же значения, что и свойства шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>
          Значение <see langword="true" />, если параметр <paramref name="obj" /> является шрифтом <see cref="T:System.Drawing.Font" /> и имеет те же значения свойств <see cref="P:System.Drawing.Font.FontFamily" />, <see cref="P:System.Drawing.Font.GdiVerticalFont" />, <see cref="P:System.Drawing.Font.GdiCharSet" />, <see cref="P:System.Drawing.Font.Style" />, <see cref="P:System.Drawing.Font.Size" /> и <see cref="P:System.Drawing.Font.Unit" />, что и шрифт <see cref="T:System.Drawing.Font" />; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Этот код создает два <xref:System.Drawing.Font> объектов и затем проверяет, является ли они равны.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.ClassicFontsExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Font ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Font ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Позволяет объекту попытаться освободить ресурсы и выполнить другие операции очистки, перед тем как он будет уничтожен во время сборки мусора.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FontFamily">
      <MemberSignature Language="C#" Value="public System.Drawing.FontFamily FontFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.FontFamily FontFamily" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.FontFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FontFamily As FontFamily" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontFamily ^ FontFamily { System::Drawing::FontFamily ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontFamily</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Drawing.FontFamily" />, связанный с этим объектом <see cref="T:System.Drawing.Font" />.</summary>
        <value>Рабочая область метаданных <see cref="T:System.Drawing.FontFamily" />, связанная с этим соединением <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Drawing.FontFamily> представляет группу шрифты, которые имеют аналогичные начертание шрифта, но может иметь различные размеры и стили (например, Arial, Times New Roman и Verdana).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHdc">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHdc (IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHdc(native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHdc(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHdc (hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHdc(IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hdc">Дескриптор для контекста устройства.</param>
        <summary>Создает шрифт <see cref="T:System.Drawing.Font" /> из указанного дескриптора Windows для контекста устройств.</summary>
        <returns>Объект <see cref="T:System.Drawing.Font" />, создаваемый этим методом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для работы этого метода `hdc` параметр должен содержать дескриптор контекста устройства, в котором выбран шрифт. Этот метод не будет работать с `hdc` получить дескриптор из [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] <xref:System.Drawing.Graphics> объекта, так как `hdc` дескриптор не поддерживает шрифт, выбранный.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Шрифт для заданного контекста устройства не является шрифтом TrueType.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromHfont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromHfont (IntPtr hfont);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromHfont(native int hfont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromHfont(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHfont (hfont As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromHfont(IntPtr hfont);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hfont" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hfont">Дескриптор Windows для шрифта [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)].</param>
        <summary>Создает шрифт <see cref="T:System.Drawing.Font" /> из указанного дескриптора Windows.</summary>
        <returns>Объект <see cref="T:System.Drawing.Font" />, создаваемый этим методом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Возвращает дескриптор [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] шрифта.  
  
-   Создает <xref:System.Drawing.Font> из этого дескриптора.  
  
-   Рисование текста на экран, с помощью нового <xref:System.Drawing.Font>.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.ClassicFontsExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          Параметр <paramref name="hfont" /> указывает на объект, не являющийся шрифтом TrueType.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="FromLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает шрифт <see cref="T:System.Drawing.Font" /> из заданной структуры логического шрифта GDI (<c>LOGFONT</c>).</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="lf">Объект <see cref="T:System.Object" />, представляющий структуру [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <see langword="LOGFONT" />, из которой создается шрифт <see cref="T:System.Drawing.Font" />.</param>
        <summary>Создает шрифт <see cref="T:System.Drawing.Font" /> из заданной структуры логического шрифта GDI (<c>LOGFONT</c>).</summary>
        <returns>Объект <see cref="T:System.Drawing.Font" />, создаваемый данным методом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`, или шрифте, — это структура, содержит 14 свойства, описывающие определенном шрифте. Дополнительные сведения см. в разделе «шрифте» в документации по разработке приложений Windows [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FromLogFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font FromLogFont (object lf, IntPtr hdc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Drawing.Font FromLogFont(object lf, native int hdc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.FromLogFont(System.Object,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromLogFont (lf As Object, hdc As IntPtr) As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Drawing::Font ^ FromLogFont(System::Object ^ lf, IntPtr hdc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lf" Type="System.Object" />
        <Parameter Name="hdc" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="lf">Объект <see cref="T:System.Object" />, представляющий структуру [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <see langword="LOGFONT" />, из которой создается шрифт <see cref="T:System.Drawing.Font" />.</param>
        <param name="hdc">Дескриптор контекста устройства, содержащий дополнительные сведения о структуре <c>lf</c>.</param>
        <summary>Создает шрифт <see cref="T:System.Drawing.Font" /> из заданной структуры логического шрифта GDI (<c>LOGFONT</c>).</summary>
        <returns>Объект <see cref="T:System.Drawing.Font" />, создаваемый данным методом.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `LOGFONT`, или шрифте, — это структура, содержит 14 свойства, описывающие определенном шрифте. Дополнительные сведения см. в разделе «шрифте» в документации по разработке приложений Windows [ http://msdn.microsoft.com/library ](http://msdn.microsoft.com/library).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Шрифт не является шрифтом TrueType.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GdiCharSet">
      <MemberSignature Language="C#" Value="public byte GdiCharSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8 GdiCharSet" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiCharSet" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiCharSet As Byte" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Byte GdiCharSet { System::Byte get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение в байтах, задающее кодировку GDI, которая используется данным шрифтом <see cref="T:System.Drawing.Font" />.</summary>
        <value>Значение в байтах, задающее кодировку [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)], которая используется данным шрифтом <see cref="T:System.Drawing.Font" />. Значение по умолчанию — 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство возвращает 1, если не указан другой набор символов в <xref:System.Drawing.Font.%23ctor%28System.String%2CSystem.Single%2CSystem.Drawing.FontStyle%2CSystem.Drawing.GraphicsUnit%2CSystem.Byte%29> конструктора. Это свойство принимает значение из списка, определенного в файле заголовков Windows SDK WinGDI.h. В следующей таблице перечислены наборы символов и двоичные значения.  
  
|Набор символов|Значение|  
|-------------------|-----------|  
|ANSI|0|  
|DEFAULT|1|  
|SYMBOL|2|  
|SHIFTJIS|128|  
|HANGEUL|129|  
|ХАНГЫЛЬ|129|  
|GB2312|134|  
|CHINESEBIG5|136|  
|Поставщик вычислительной техники (ПВТ)|255|  
|JOHAB|130|  
|ИВРИТ|177|  
|АРАБСКИЙ|178|  
|ГРЕЧЕСКИЙ|161|  
|TURKISH|162|  
|ВЬЕТНАМСКИЙ|163|  
|ТАЙСКИЙ|222|  
|ВОСТОЧНОЕВРОПЕЙСКУЮ|238|  
|РУССКИЙ|204|  
|MAC|77|  
|БАЛТИЙСКАЯ|186|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GdiVerticalFont">
      <MemberSignature Language="C#" Value="public bool GdiVerticalFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GdiVerticalFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.GdiVerticalFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GdiVerticalFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GdiVerticalFont { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает логическое значение, указывающее, является ли данный шрифт <see cref="T:System.Drawing.Font" /> производным от вертикального шрифта GDI.</summary>
        <value>
          Значение <see langword="true" />, если этот шрифт <see cref="T:System.Drawing.Font" /> является производным от вертикального шрифта [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)], в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте это свойство, чтобы определить, является ли шрифт совместимым с собственными элементами управления Win32 на платформах, отличных от Юникода.  
  
 <xref:System.Drawing.Font.GdiVerticalFont%2A> Возвращает только `true` , если он был создан из классической GDI  
  
 Определение шрифта, например LOGFONT или HFONT.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает хэш-код для данного <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Хэш-код для этого экземпляра <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Font>.  
  
-   Возвращает хэш-код для данного шрифта.  
  
-   Отображает окно сообщения со значением хэш-кода.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.ClassicFontsExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetHeight">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение междустрочного интервала данного шрифта.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight () As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает значение межстрочного интервала данного шрифта в пикселях.</summary>
        <returns>Значение междустрочного интервала данного шрифта в пикселях.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Междустрочный интервал <xref:System.Drawing.Font> — расстояние по вертикали между двумя опорными линиями двух соседних строк текста. Таким образом междустрочный интервал включает как пустое пространство между строками, так и высоту сам символ.  
  
 Если <xref:System.Drawing.Font.Unit%2A> шрифта является свойство ничего не <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, высота (в пикселях) вычисляется с использованием вертикального разрешения экрана. Например предположим, шрифт измеряются в дюймах и размер шрифта равен 0,3. Также предположим, что для соответствующего семейства шрифтов высота 2048 и межстрочный интервал — 2355. Для экрана, вертикальное разрешение 96 точек на дюйм расчет высоты выполняется следующим образом:  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="graphics">
          <see cref="T:System.Drawing.Graphics" />, содержащий вертикальное разрешение (в точках на дюйм) устройства отображения, а также параметры единицы измерения страницы и размера страницы.</param>
        <summary>Возвращает значение межстрочного интервала данного шрифта в текущей единице измерения указанного контекста <see cref="T:System.Drawing.Graphics" />.</summary>
        <returns>Значение междустрочного интервала данного шрифта в пикселях.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Междустрочный интервал <xref:System.Drawing.Font> — расстояние по вертикали между двумя опорными линиями двух соседних строк текста. Таким образом междустрочный интервал включает как пустое пространство между строками, так и высоту сам символ.  
  
 Если <xref:System.Drawing.Font.Unit%2A> шрифта является свойство ничего не <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, высота в пикселях, рассчитывается с использованием вертикального разрешения указанного <xref:System.Drawing.Graphics> объекта. Например предположим, шрифт измеряются в дюймах и размер шрифта равен 0,3. Также предположим, что для соответствующего семейства шрифтов высота 2048 и межстрочный интервал — 2355. Если <xref:System.Drawing.Graphics> объект имеет <xref:System.Drawing.Font.Unit%2A> значение свойства <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType> и <xref:System.Drawing.Graphics.DpiY%2A> свойство значение 96 точек на дюйм, высота вычисляется следующим образом:  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 Продолжая тот же пример, предположим, что <xref:System.Drawing.Font.Unit%2A> свойство <xref:System.Drawing.Graphics> , присваивается значение <xref:System.Drawing.GraphicsUnit.Millimeter?displayProperty=nameWithType> вместо <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>. Далее (используя 1 дюйм = 25,4 миллиметра) высота в миллиметрах рассчитывается следующим образом:  
  
 2355*(0.3/2048)25.4 = 8.762256  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Font>.  
  
-   Выводит строку текста на экран, с использованием нового <xref:System.Drawing.Font>.  
  
-   Получает высоту шрифта.  
  
-   Выводит вторую строку текста непосредственно под первой строки.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.ClassicFontsExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="graphics" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetHeight">
      <MemberSignature Language="C#" Value="public float GetHeight (float dpi);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance float32 GetHeight(float32 dpi) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.GetHeight(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHeight (dpi As Single) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; float GetHeight(float dpi);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dpi" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dpi">Вертикальное разрешение (в точках на дюйм), используемое для расчета высоты шрифта.</param>
        <summary>Возвращает высоту (в пикселях) данного шрифта <see cref="T:System.Drawing.Font" /> при выводе на устройство с указанным вертикальным разрешением.</summary>
        <returns>Высота этого шрифта <see cref="T:System.Drawing.Font" /> в пикселях.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Drawing.Font.Unit%2A> шрифта является свойство ничего не <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, высота (в пикселях) вычисляется с использованием вертикального разрешения экрана. Например предположим, шрифт измеряются в дюймах и размер шрифта равен 0,3. Также предположим, что для соответствующего семейства шрифтов высота 2048 и межстрочный интервал — 2355. Если указанным вертикальным разрешением 96 точек на дюйм, высота вычисляется следующим образом:  
  
 2355*(0.3/2048)\*96 = 33.1171875  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Height" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение междустрочного интервала данного шрифта.</summary>
        <value>Значение междустрочного интервала данного шрифта в пикселях.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Межстрочный интервал — это расстояние по вертикали между двумя опорными линиями двух соседних строк в тексте. Таким образом междустрочный интервал включает как пустое пространство между строками, так и высоту сам символ.  
  
 Если <xref:System.Drawing.Font.Unit%2A> шрифта является свойство ничего не <xref:System.Drawing.GraphicsUnit.Pixel?displayProperty=nameWithType>, высота (в пикселях) вычисляется с использованием вертикального разрешения экрана. Например предположим, шрифт измеряются в дюймах и размер шрифта равен 0,3. Также предположим, что для соответствующего семейства шрифтов высота 2048 и межстрочный интервал — 2355. Для экрана, вертикальное разрешение 96 точек на дюйм расчет высоты выполняется следующим образом:  
  
 2355*(0.3/2048)\*96 = 33.11719  
  
 Значение, возвращаемое <xref:System.Drawing.Font.GetHeight%2A> метод 33,11719, и значение, возвращаемое <xref:System.Drawing.Font.Height%2A> свойство бы 34. <xref:System.Drawing.Font.Height%2A> Задано значение, возвращаемое <xref:System.Drawing.Font.GetHeight%2A>, округленное до ближайшего целого.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSystemFont">
      <MemberSignature Language="C#" Value="public bool IsSystemFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSystemFont" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.IsSystemFont" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSystemFont As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSystemFont { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, является ли шрифт элементом <see cref="T:System.Drawing.SystemFonts" />.</summary>
        <value>
          Значение <see langword="true" />, если шрифт является элементом <see cref="T:System.Drawing.SystemFonts" />, противном случае — значение <see langword="false" />. Значение по умолчанию: <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда пользователь изменяет системного шрифта, <xref:System.Drawing.Font.IsSystemFont%2A> может вернуть свойство `true`, даже если шрифт не фактически системного шрифта. Чтобы избежать такой ситуации, если в приложении используются системные шрифты, нужно отслеживать изменения предпочтений, обрабатывая <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging> или <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged> событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Italic">
      <MemberSignature Language="C#" Value="public bool Italic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Italic" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Italic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Italic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Italic { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, применено ли к данному шрифту курсивное начертание.</summary>
        <value>
          Значение <see langword="true" />, если к данному шрифту применено курсивное начертание; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Drawing.Font.Style" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.FontNameEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontNameConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает название этого шрифта <see cref="T:System.Drawing.Font" /></summary>
        <value>Строковое представление имени этого шрифта <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, <xref:System.Drawing.Font.Name%2A>, <xref:System.Drawing.Font.Style%2A>, и <xref:System.Drawing.Font.Unit%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащий <xref:System.Windows.Forms.ComboBox> с именем `ComboBox1` заполняется со строками «Больше» и «Меньше». Вставьте следующий код в форму и свяжите `ComboBox1_SelectedIndexChanged` метод с <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> событие <xref:System.Windows.Forms.ComboBox> элемента управления.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalFontName">
      <MemberSignature Language="C#" Value="public string OriginalFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OriginalFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.OriginalFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OriginalFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OriginalFontName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя первоначально заданного шрифта.</summary>
        <value>Строка, представляющая имя первоначально заданного шрифта.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Фактическое и исходное имя шрифта может отличаться. Требования к системе могут привести к использованию шрифта, отличающегося от первоначально заданного шрифта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public float Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Size" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float Size { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ширину самой большой буквы этого шрифта <see cref="T:System.Drawing.Font" /> в единицах измерения, заданных свойством <see cref="P:System.Drawing.Font.Unit" />.</summary>
        <value>Ширина самой большой буквы этого шрифта <see cref="T:System.Drawing.Font" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, и <xref:System.Drawing.Font.Unit%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащий <xref:System.Windows.Forms.ComboBox> с именем `ComboBox1` заполняется со строками «Больше» и «Меньше». Вставьте следующий код в форму и свяжите `ComboBox1_SelectedIndexChanged` метод с <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> событие <xref:System.Windows.Forms.ComboBox> элемента управления.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeInPoints">
      <MemberSignature Language="C#" Value="public float SizeInPoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SizeInPoints" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SizeInPoints" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SizeInPoints As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float SizeInPoints { float get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ширину самой большой буквы этого шрифта <see cref="T:System.Drawing.Font" /> (в пунктах).</summary>
        <value>Ширина самой большой буквы этого шрифта <see cref="T:System.Drawing.Font" /> (в пунктах).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, и <xref:System.Drawing.Font.Unit%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащий <xref:System.Windows.Forms.ComboBox> с именем `ComboBox1` заполняется со строками «Больше» и «Меньше». Вставьте следующий код в форму и свяжите `ComboBox1_SelectedIndexChanged` метод с <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> событие <xref:System.Windows.Forms.ComboBox> элемента управления.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikeout">
      <MemberSignature Language="C#" Value="public bool Strikeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Strikeout" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Strikeout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Strikeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Strikeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, задает ли этот объект <see cref="T:System.Drawing.Font" /> горизонтальную линию через шрифт.</summary>
        <value>
          Значение <see langword="true" />, если данный шрифт <see cref="T:System.Drawing.Font" /> имеет пересекающую горизонтальную линию; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public System.Drawing.FontStyle Style { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.FontStyle Style" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Style" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Style As FontStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::FontStyle Style { System::Drawing::FontStyle get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.FontStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает сведения о стиле для данного шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <value>Перечисление <see cref="T:System.Drawing.FontStyle" />, содержащее сведения о стиле для данного шрифта <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода показано, как задать <xref:System.Drawing.Font> кнопки новое полужирного шрифта с помощью <xref:System.Drawing.FontStyle> перечисления. Этот пример предназначен для использования с Windows Forms. Создайте форму, содержащую кнопку с именем `Button1` и вставьте в него следующий код. Связать `Button1_Click` метод с помощью кнопки <xref:System.Windows.Forms.Control.Click> событий.  
  
 [!code-cpp[System.Drawing.MiscExamples#11](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#11)]
 [!code-csharp[System.Drawing.MiscExamples#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#11)]
 [!code-vb[System.Drawing.MiscExamples#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#11)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> для заполнения данными.</param>
        <param name="context">Конечный объект (см. <see cref="T:System.Runtime.Serialization.StreamingContext" />) для этой сериализации.</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontName">
      <MemberSignature Language="C#" Value="public string SystemFontName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SystemFontName" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.SystemFontName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SystemFontName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SystemFontName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя системного шрифта, если свойство <see cref="P:System.Drawing.Font.IsSystemFont" /> возвращает значение <see langword="true" />.</summary>
        <value>Имя системного шрифта, если свойство <see cref="P:System.Drawing.Font.IsSystemFont" /> возвращает значение <see langword="true" />; в противном случае пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Имя, возвращенное <xref:System.Drawing.Font.SystemFontName%2A> свойство будет одним из членов <xref:System.Drawing.SystemFonts>, преобразованное в строку.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHfont">
      <MemberSignature Language="C#" Value="public IntPtr ToHfont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int ToHfont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToHfont" />
      <MemberSignature Language="VB.NET" Value="Public Function ToHfont () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr ToHfont();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает дескриптор данного шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Дескриптор Windows для этого объекта <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании этого метода необходимо уничтожить итоговый `Hfont` с помощью [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] `DeleteObject` метод, чтобы гарантировать ресурсы освобождаются.  
  
   
  
## Examples  
 В следующем примере кода создается <xref:System.Drawing.Font> , а затем возвращает дескриптор этого <xref:System.Drawing.Font>. Пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.ClassicFontsExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Операция закончилась неудачно.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLogFont">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает структуру логического шрифта GDI (<c>LOGFONT</c>) из этого шрифта <see cref="T:System.Drawing.Font" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ToLogFont (logFont As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="logFont">Объект <see cref="T:System.Object" />, представляющий структуру <see langword="LOGFONT" />, создаваемую данным методом.</param>
        <summary>Создает структуру логического шрифта GDI (<c>LOGFONT</c>) из этого шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод устанавливает `logFont` параметр к результатам преобразования шрифта. Дополнительные сведения о логических шрифты см. в разделе [LOGFONT структуры](http://msdn.microsoft.com/library/dd145037.aspx).  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToLogFont">
      <MemberSignature Language="C#" Value="public void ToLogFont (object logFont, System.Drawing.Graphics graphics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ToLogFont(object logFont, class System.Drawing.Graphics graphics) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToLogFont(System.Object,System.Drawing.Graphics)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ToLogFont(System::Object ^ logFont, System::Drawing::Graphics ^ graphics);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logFont" Type="System.Object" />
        <Parameter Name="graphics" Type="System.Drawing.Graphics" />
      </Parameters>
      <Docs>
        <param name="logFont">Объект <see cref="T:System.Object" />, представляющий структуру <see langword="LOGFONT" />, создаваемую данным методом.</param>
        <param name="graphics">Контекст <see cref="T:System.Drawing.Graphics" />, предоставляющий дополнительные сведения для структуры <see langword="LOGFONT" />.</param>
        <summary>Создает структуру логического шрифта GDI (<c>LOGFONT</c>) из этого шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод устанавливает `logFont` параметр к результатам преобразования шрифта. Дополнительные сведения о логических шрифты см. в разделе [LOGFONT структуры](http://msdn.microsoft.com/library/dd145037.aspx).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          Свойство <paramref name="graphics" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">для доступа к неуправляемому коду. Связанные перечисления: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Font.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает удобное для чтения строковое представление данного шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <returns>Строка, представляющая эту структуру <see cref="T:System.Drawing.Font" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемая строка имеет следующий формат:  
  
 [Шрифта: имя =*fontName*, размер =*размер*, единицы =*единицы*, GDiCharSet =*gdiCharSet*, GdiVerticalFont =*boolean *]  
  
   
  
## Examples  
 Следующий пример кода предназначен для работы с Windows Forms, и для него необходим <xref:System.Windows.Forms.PaintEventArgs> `e`, который является параметром <xref:System.Windows.Forms.Control.Paint> обработчика событий. Код выполняет следующие действия.  
  
-   Создает объект <xref:System.Drawing.Font>.  
  
-   Возвращает строку, представляющую шрифт.  
  
-   Отображает строку в окне сообщения.  
  
 [!code-cpp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.ClassicFontsExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.ClassicFontsExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public bool Underline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Underline" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Underline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Underline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Underline { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, определяющее, является ли этот шрифт <see cref="T:System.Drawing.Font" /> полужирным.</summary>
        <value>
          Значение <see langword="true" />, если шрифт <see cref="T:System.Drawing.Font" /> является подчеркнутым; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unit">
      <MemberSignature Language="C#" Value="public System.Drawing.GraphicsUnit Unit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.GraphicsUnit Unit" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Font.Unit" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Unit As GraphicsUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::GraphicsUnit Unit { System::Drawing::GraphicsUnit get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Drawing.FontConverter/FontUnitConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.GraphicsUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает единицу измерения для данного шрифта <see cref="T:System.Drawing.Font" />.</summary>
        <value>Объект <see cref="T:System.Drawing.GraphicsUnit" />, представляющий единицу измерения для этого шрифта <see cref="T:System.Drawing.Font" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Drawing.Font.%23ctor%2A> конструктор и <xref:System.Drawing.Font.Size%2A>, <xref:System.Drawing.Font.SizeInPoints%2A>, и <xref:System.Drawing.Font.Unit%2A> свойства. Этот пример предназначен для использования с Windows Form, содержащий <xref:System.Windows.Forms.ComboBox> с именем `ComboBox1` заполняется со строками «Больше» и «Меньше». Вставьте следующий код в форму и свяжите `ComboBox1_SelectedIndexChanged` метод с <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> событие <xref:System.Windows.Forms.ComboBox> элемента управления.  
  
 [!code-cpp[System.Drawing.FontsExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.FontsExample/cpp/form1.cpp#1)]
 [!code-csharp[System.Drawing.FontsExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.FontsExample/CS/form1.cs#1)]
 [!code-vb[System.Drawing.FontsExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.FontsExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>